[
    {
        "filename": "f9db0acefd3d3ba78f019274ac3ec56e8cc0cddf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 9,
        "text": "FROM janitortechnology/ubuntu-dev\nMAINTAINER Benjamin Bouvier <public@benj.me>\n\n# Global install of weboob.\nUSER root\n\n# Weboob and its dependencies.\nRUN apt-get update && \\\n    apt-get install -y python python-dev libffi-dev \\\n    libxml2-dev libxslt-dev libyaml-dev libtiff-dev libjpeg-dev zlib1g-dev \\\n    libfreetype6-dev libwebp-dev build-essential gcc g++ wget mupdf-tools;\n\nRUN cd /tmp && \\\n    wget https://bootstrap.pypa.io/get-pip.py && \\\n    python ./get-pip.py && \\\n    pip install -U setuptools && \\\n    pip install html2text simplejson BeautifulSoup PyExecJS pdfminer\n\nRUN git clone https://git.weboob.org/weboob/devel /tmp/weboob \\\n    && cd /tmp/weboob \\\n    && python ./setup.py install \\\n    && rm -rf /tmp/weboob\n\n# Setup kresus layout.\nUSER user\nRUN mkdir -p /home/user/kresus/data\n\n# Install app and dependencies.\nWORKDIR /home/user/kresus\nRUN git clone https://framagit.org/kresusapp/kresus app\n\nWORKDIR /home/user/kresus/app\nRUN npm install && make build\n\n# Useful environment variables.\nRUN echo \"\\n# Kresus configuration.\" >> /home/user/.bashrc \\\n && echo \"export KRESUS_URL_PREFIX=/`cat /proc/self/cgroup | grep docker | head -n 1 | sed 's_^.*docker\\/__'`/\\$PORT\" >> /home/user/.bashrc\n\n# Configure Cloud9 to use Kresus's source directory as workspace (-w).\nRUN sudo sed -i \"s/-w \\/home\\/user/-w \\/home\\/user\\/kresus\\/app/\" /etc/supervisord.conf\n\n# Configure Janitor for Kresus\nADD janitor.json /home/user/\nRUN sudo chown user:user /home/user/janitor.json\n\nADD config-janitor.ini /home/user/kresus/app/config.ini\nRUN sudo chown user:user /home/user/kresus/app/config.ini\n\n# Expose the ports on which Kresus and the webpack-dev-server will be running.\nEXPOSE 8080 9876\n\n# Become root again so that supervisord is run with the right permissions.\nUSER root\n"
    },
    {
        "filename": "e41467f3d977f045122a9eaf110788799c0a6cbf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu\n\n# File Author / Maintainer\nMAINTAINER HashiCorp\n\n# Install Node.js and other dependencies\nRUN apt-get update && \\\n    apt-get -y install curl && \\\n    curl -sL https://deb.nodesource.com/setup | sudo bash - && \\\n    apt-get -y install python build-essential nodejs\n\n# Install nodemon\nRUN npm install -g nodemon\n\n# Provides cached layer for node_modules\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /src && cp -a /tmp/node_modules /src/\n\n# Define working directory\nWORKDIR /src\nADD . /src\n\n# Expose port\nEXPOSE 8080\n\n# Run app using nodemon\nCMD nodemon /src/index.js >>/var/log/nodejs.log 2>&1\n"
    },
    {
        "filename": "d79b5333649eb39bb14fe3f7b50862329b672e14.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM rocker/verse:3.5.3\nMAINTAINER Jim Harner <ejharner@gmail.com>\n\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\n\nARG pgversion=9.6\nARG hadoopversion=2.9.1\nARG sparkversion=2.4.3\nARG hiveversion=2.1.1\n\n\n# Update machine and install \n# RUN apt-get update && apt-get install -y --no-install-recommends apt-utils\nRUN apt-get update && apt-get install -y postgresql-client-${pgversion} libicu-dev && apt-get clean\n\n####################\n# JAVA\n####################\nRUN echo \"deb http://http.debian.net/debian stretch-backports main\" > /etc/apt/sources.list.d/stretch-backports.list\nRUN apt-get update && apt-get install -y -t stretch-backports openjdk-8-jdk\n# config Java within R for rJava installation\nRUN sudo R CMD javareconf\n# Install Google Protocol Buffer\n# ADD protobuf-2.5.0.tar.gz /tmp\n# RUN cd /tmp/protobuf-2.5.0 && ./configure && make -j4 && make install && cd .. && rm -rf protobuf-*\n\n####################\n# HADOOP\n####################\n# Download and Install Hadoop and set Hadoop environment variable\nRUN cd /opt && wget --quiet http://archive.apache.org/dist/hadoop/core/hadoop-${hadoopversion}/hadoop-${hadoopversion}.tar.gz && \\\n\ttar zxf hadoop-${hadoopversion}.tar.gz && \\\n\tln -s hadoop-${hadoopversion} hadoop && \\\n\trm hadoop-${hadoopversion}.tar.gz && \\\n\t(cd /opt/hadoop; ln -s share/hadoop/tools/lib/hadoop-streaming-${hadoopversion}.jar hadoop-streaming.jar) && \\\n\tchown -R rstudio:rstudio /opt/hadoop\nENV HADOOP_CMD=/opt/hadoop/bin/hadoop HADOOP_HOME=/opt/hadoop HADOOP_BIN=/opt/hadoop/bin HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop\n\n####################\n# SPARK\n####################\n# Install Spark\nRUN cd /opt && \\\n\twget --quiet http://archive.apache.org/dist/spark/spark-${sparkversion}/spark-${sparkversion}-bin-hadoop2.7.tgz && \\\n\ttar zxf spark-${sparkversion}-bin-hadoop2.7.tgz && \\\n\tmv spark-${sparkversion}-bin-hadoop2.7 spark && \\\n\tcp spark/conf/spark-env.sh.template spark/conf/spark-env.sh && \\\n\techo \"export SPARK_DIST_CLASSPATH=/opt/postgresql-42.2.2.jar:$(/opt/hadoop/bin/hadoop classpath)\" >> spark/conf/spark-env.sh\n\n\n####################\n# HIVE\n####################\nRUN cd /opt && \\\n\twget --quiet http://archive.apache.org/dist/hive/hive-${hiveversion}/apache-hive-${hiveversion}-bin.tar.gz && \\\n\ttar zxf apache-hive-${hiveversion}-bin.tar.gz && \\\n\tln -s apache-hive-${hiveversion}-bin hive && \\\n\tln -s /opt/hive/jdbc/hive-jdbc-${hiveversion}-standalone.jar /opt/hive/lib/ && \\\n\trm apache-hive-${hiveversion}-bin.tar.gz\n\n####################\n# R PACKAGES\n####################\n# Switch to rstudio CRAN mirror (untested)\n# RUN R CMD options(repos = c(CRAN = \"https://cran.rstudio.com\"))\n# Set environment variable for rJava package installation\nENV LD_LIBRARY_PATH $JAVA_HOME/jre/lib/amd64:$JAVA_HOME/jre/lib/amd64/server\n# Install R packages\nRUN Rscript -e \"install.packages(c(\\\"rjson\\\", \\\"RJSONIO\\\", \\\"jsonlite\\\", \\\"bit64\\\", \\\"bit\\\", \\\"functional\\\", \\\"R.methodsS3\\\", \\\"reshape2\\\", \\\"httr\\\", \\\"rvest\\\", \\\"datadr\\\", \\\"trelliscope\\\", \\\"DBI\\\", \\\"RPostgreSQL\\\", \\\"RJDBC\\\", \\\"dbplyr\\\", \\\"glmnet\\\", \\\"testthat\\\", \\\"roxygen2\\\", \\\"XML\\\", \\\"xml2\\\", \\\"housingData\\\", \\\"Lahman\\\", \\\"nycflights13\\\", \\\"flexdashboard\\\", \\\"sparklyr\\\"), repos = 'http://cran.rstudio.com')\"\n# Copy repository packages to filesystem\nADD rjava.tar.gz rhdfs.tar.gz rmr.tar.gz /tmp/pkgs/\n# Install repository packages\nRUN cd /tmp/pkgs && R CMD INSTALL rJava rmr2 rhdfs\n\nADD protobuf-2.5.0.tar.gz Rhipe_0.75.2_hadoop-2.tar.gz /tmp/\nRUN cd /tmp/protobuf-2.5.0 && ./configure --prefix=/usr && make && make install && cd .. && rm -rf protobuf-* && \\\n\tcd /tmp/Rhipe && R CMD INSTALL . && cd .. && rm -rf Rhipe\n\nADD postgresql-42.2.2.jar /opt\n\n####################\n# ENVIRONMENT CONFIG\n####################\n# Add necessary mods to Renviron file\nADD Renviron /usr/local/lib/R/etc/\nADD hdfs-site.xml core-site.xml log4j.properties /opt/hadoop/etc/hadoop/\n# Create symlink to actual Rscript\nRUN ln -s /usr/local/bin/Rscript /usr/bin/Rscript\n\n# Add path to profile so commands are found if attach to the container\nRUN echo \"PATH='/opt/hadoop/bin:/opt/spark/bin:/opt/hive/bin:$PATH'\" >> /etc/profile\n# this is useless because it only sets it for the following commands in the Dockerfile\n#ENV PATH /opt/hadoop/bin:/opt/spark/bin:/opt/hive/bin::$PATH\n\n# Install Python3\n# NOTE: python 3 uses the command 'python3'\nRUN easy_install pip && apt-get install -y python3 && pip install virtualenv\n\n# Install TensorFlow Package\nRUN R -e \"install.packages(\\\"tensorflow\\\")\"\n\n# USER rstudio\nADD rspark-tests /home/rstudio/\nRUN chown -R rstudio:rstudio /home/rstudio\n\n# USER root\nEXPOSE 8787\n# VOLUME /home/rstudio\n\nCMD [\"/init\"]\n\n\n\t\n"
    },
    {
        "filename": "da7a4f9dd2fb40b8e515daa001df73a09d8e4ed3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "from registry\nmaintainer Shipyard Project \"http://shipyard-project.com\"\nrun apt-get update\nrun apt-get -y upgrade\nrun apt-get install -y apache2-utils supervisor python-setuptools make g++ libpcre3-dev wget libssl-dev libreadline-dev perl redis-server\nrun wget http://openresty.org/download/ngx_openresty-1.4.3.6.tar.gz -O /tmp/nginx.tar.gz\nrun (cd /tmp && tar zxf nginx.tar.gz && cd ngx_* && ./configure --with-luajit && make && make install)\nrun echo \"uwsgi_param   UWSGI_SCHEME     \\$scheme;\" >> /usr/local/openresty/nginx/uwsgi_params\nrun mkdir /var/log/nginx\nrun easy_install pip\nrun pip install uwsgi\nadd run.sh /usr/local/bin/run\nadd . /app\nrun pip install -r /app/requirements.txt\nenv CACHE_REDIS_HOST 127.0.0.1\nenv CACHE_REDIS_PORT 6379\nenv CACHE_LRU_REDIS_HOST 127.0.0.1\nenv CACHE_LRU_REDIS_PORT 6379\nexpose 80\nexpose 443\ncmd [\"/usr/local/bin/run\"]\n"
    },
    {
        "filename": "dc01e1b1a6cada1587c3638e912b60f807a723ae.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM williamyeh/java8\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n\nVOLUME /mnt/hadoop/\nRUN apt-get update \\\n  && apt-get install -y jq curl \n\nRUN curl -s http://www.apache.org/dist/hadoop/common/hadoop-2.8.0/hadoop-2.8.0.tar.gz | tar -xz -C /usr/local/ \\\n  && cd /usr/local \\\n  && ln -s ./hadoop-2.8.0 hadoop \n\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\nENV HADOOP_PREFIX /usr/local/hadoop\nENV HADOOP_COMMON_HOME /usr/local/hadoop\nENV HADOOP_HDFS_HOME /usr/local/hadoop\nENV HADOOP_MAPRED_HOME /usr/local/hadoop\nENV HADOOP_YARN_HOME /usr/local/hadoop\nENV HADOOP_CONF_DIR /usr/local/hadoop/etc/hadoop\nENV YARN_CONF_DIR $HADOOP_PREFIX/etc/hadoop\n\nWORKDIR /usr/local/hadoop\nRUN sed -i '/^export JAVA_HOME/ s:.*:export JAVA_HOME=/usr/lib/jvm/java-8-oracle\\nexport HADOOP_PREFIX=/usr/local/hadoop\\nexport HADOOP_HOME=/usr/local/hadoop\\n:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh  \\\n  && sed -i '/^export HADOOP_CONF_DIR/ s:.*:export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop/:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh \\\n  && chmod +x /usr/local/hadoop/etc/hadoop/*-env.sh\n\n# NameNode                Secondary NameNode  DataNode                     JournalNode  NFS Gateway    HttpFS         ZKFC\nEXPOSE 8020 50070 50470   50090 50495         50010 1004 50075 1006 50020  8485 8480    2049 4242 111  14000 14001    8019\n\nRUN apt-get update && apt-get install -y python-pip attr\nRUN pip install pyyaml jinja2 argparse logutils\n\n\n\nRUN curl -s http://d3kbcqa49mib13.cloudfront.net/spark-2.1.1-bin-hadoop2.7.tgz | tar -xz -C /usr/local/\nRUN cd /usr/local && ln -s spark-2.1.1-bin-hadoop2.7 spark\nENV SPARK_HOME /usr/local/spark\nRUN mkdir $SPARK_HOME/yarn-remote-client\nRUN chmod 777 $SPARK_HOME/yarn-remote-client\n# ADD yarn-remote-client $SPARK_HOME/yarn-remote-client\n# RUN $BOOTSTRAP && $HADOOP_PREFIX/bin/hdfs dfsadmin -safemode leave && $HADOOP_PREFIX/bin/hdfs dfs -put $SPARK_HOME-2.1.1-bin-hadoop2.7/lib /spark\n\n#install R\n#RUN rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n#RUN yum -y install R\nRUN apt-get update \\\n  && apt-get install -y r-base r-base-dev\n\n\nENV YARN_CONF_DIR $HADOOP_PREFIX/etc/hadoop\nENV PATH $PATH:$SPARK_HOME/bin:$HADOOP_PREFIX/bin\n\nWORKDIR {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\n\nADD core-site.xml /usr/local/hadoop/etc/hadoop/core-site.xml\nADD *.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}/\nADD bootstrap_hdfs.py {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD utils.py {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nRUN chmod +x {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}/*.py\nADD config.yaml /etc/hdfs/config.yaml\n\nCOPY bootstrap.sh /etc/bootstrap.sh\nRUN chown root.root /etc/bootstrap.sh\nRUN chmod 700 /etc/bootstrap.sh\n\n# All process in this docker needs to be run as a service. \n# Do not change the command, rewrite a service if need to \n\n# See information on https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning\n# the 3rd answer, you may ignore warning on NativeCodeLoader\n\nCMD /bin/bash\n\n\n\n"
    },
    {
        "filename": "dc6323351fd36332bd15459ab5d84f445177b09f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# ss-panel ###DaoCloud version, for using in CHINA network\n#\n# VERSION 3.0\n\n# auto build from my github project: https://github.com/maxidea-com/ss-panel\n\nFROM daocloud.io/ubuntu:14.04\n#FROM ubuntu:14.04 \n\n# make sure the package repository is up to date\nRUN apt-get -y update && apt-get install -y redis-server\nRUN echo \"mysql-server-5.6 mysql-server/root_password password pw123456\" | sudo debconf-set-selections\nRUN echo \"mysql-server-5.6 mysql-server/root_password_again password pw123456\" | sudo debconf-set-selections\nRUN apt-get -y install mysql-server-5.6\nRUN apt-get -y install git curl php5 php-guzzle php5-mysql nginx php5-fpm\nRUN apt-get install -y python-pip python-m2crypto\nRUN pip install cymysql\n#RUN cd /opt; git clone -b manyuser https://github.com/mengskysama/shadowsocks.git\nRUN cd /opt; git clone -b manyuser https://git.oschina.net/maxidea/shadowsocks.git\nRUN rm -f /opt/shadowsocks/shadowsocks/Config.py\nRUN rm -f /opt/shadowsocks/shadowsocks/config.json\nRUN apt-get -y install supervisor\n#RUN cd /opt; git clone https://github.com/maxidea-com/ss-panel.git\nRUN cd /opt; git clone https://git.oschina.net/maxidea/ss-panel.git\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/bin --filename=composer\nRUN cd /opt/ss-panel/; composer install\nRUN chmod -R 777 /opt/ss-panel/storage\nRUN rm -f /etc/nginx/sites-available/default\n\nADD Config.py /opt/shadowsocks/shadowsocks/Config.py\nADD config.json /opt/shadowsocks/shadowsocks/config.json\nADD shadowsocks.conf /etc/supervisor/conf.d/shadowsocks.conf\nADD supervisor.conf /etc/supervisor/conf.d/supervisor.conf\nADD 3line.sh /opt/3line.sh\nADD mysql-init.sh /opt/mysql-init.sh\nADD .env /opt/ss-panel/.env\nADD default /etc/nginx/sites-available/default\n\nRUN /bin/bash /opt/3line.sh\nRUN service mysql start\nRUN /bin/bash /opt/mysql-init.sh\n\nRUN apt-get clean && apt-get autoclean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 80 1025 1026 1027 1028\n\n\nCMD [\"/usr/bin/supervisord\"] \n\n\n# contact\nMAINTAINER SimonXu, maxidea@gmail.com\n"
    },
    {
        "filename": "9529eb856c12804d9436a429214bae0c117a5c67.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# This Dockerfile based on dockerana/dockerana\nFROM nacyot/ubuntu\nMAINTAINER Daekwon Kim <propellerheaven@gmail.com>\n\n# Install Base Packages\nRUN apt-get -y update\nRUN apt-get -y install supervisor nginx-light\nRUN apt-get -y install python-simplejson python-memcache python-ldap python-cairo \\\n                       python-twisted python-pysqlite2 python-support \\\n                       python-pip gunicorn\n\n# Install python packages\nRUN pip install pytz pyparsing django==1.5 django-tagging==0.3.1\n\n# Install whisper and graphite-web\nWORKDIR /usr/local/src\nRUN git clone https://github.com/graphite-project/whisper.git\nRUN cd whisper && git checkout 0.9.12 && python setup.py install\nRUN git clone https://github.com/graphite-project/graphite-web.git\nRUN cd graphite-web && \\\n        git checkout 0.9.12 && \\\n        python check-dependencies.py && python setup.py install\n\n# Setup graphite directories and environment variables\nENV GRAPHITE_STORAGE_DIR /opt/graphite/storage\nENV GRAPHITE_CONF_DIR /opt/graphite/conf\nENV PYTHONPATH /opt/graphite/webapp\nENV LOG_DIR /var/log/graphite\nENV DEFAULT_INDEX_TABLESPACE graphite\n\nRUN mkdir -p /opt/graphite/webapp\nRUN mkdir -p /var/log/graphite\nRUN cd /var/log/graphite/ && touch info.log\nRUN mkdir -p /opt/graphite/storage/whisper\nRUN touch /opt/graphite/storage/graphite.db /opt/graphite/storage/index\nRUN chown -R www-data /opt/graphite/storage\nRUN chmod 0775 /opt/graphite/storage /opt/graphite/storage/whisper\nRUN chmod 0664 /opt/graphite/storage/graphite.db\n\n# Copy configuration files\nADD ./config/local_settings.py /opt/graphite/webapp/graphite/local_settings.py \nADD ./config/initial_data.json /opt/graphite/webapp/graphite/initial_data.json\nADD ./config/nginx.conf /etc/nginx/nginx.conf\nADD ./config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# Initialize database(sqlite3)\nRUN cd /opt/graphite/webapp/graphite && django-admin.py syncdb --settings=graphite.settings --noinput\nRUN cd /opt/graphite/webapp/graphite && django-admin.py loaddata --settings=graphite.settings initial_data.json\n\n# Set CMD\nWORKDIR /opt/graphite/webapp\nEXPOSE 80\nCMD [\"/usr/bin/supervisord\", \"-n\"]\n\n"
    },
    {
        "filename": "371cdc730bb810332910f9055abc600f8dc2c8f7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM ubuntu\nMAINTAINER Aran Khanna <arankhan@amazon.com>\n\n# UPDATE BOX\nRUN apt-get update && apt-get -y upgrade\n\n# TOOLCHAIN DEPS\nRUN apt-get install -y python python-setuptools python-pip python-dev unzip gfortran\nRUN apt-get install -y git bison cvs flex gperf texinfo automake libtool help2man make libtool-bin libncurses5-dev g++ cmake wget gawk\nRUN pip install numpy nose\n\n# BUILD TOOLCHAIN\nRUN git clone https://github.com/arank/crosstool-NG\nRUN cd crosstool-NG && ./bootstrap && ./configure && make && make install\n\nRUN useradd -ms /bin/bash aran\nRUN cd && cp -R .profile .bashrc /home/aran\nADD . /home/aran/build\n\nRUN chown -R aran:aran /home/aran\n\nRUN cd /home/aran/build && su -m aran -c \"export HOME=/home/aran;ct-ng arm-unknown-linux-gnueabi;ct-ng build\"\n\n"
    },
    {
        "filename": "389d3ea218decfd0540dd21becabe13d0f765806.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM xrdp\nMAINTAINER Sven Dowideit <SvenDowideit@home.org.au> @SvenDowideit\n\nENV USERNAME dockerx\nENV HOME /home/$USERNAME\n#RUN groupadd -r $USERNAME -g 757 && \\\n#     useradd -u 757 --create-home --home-dir $HOME $USERNAME -g $USERNAME && \\\n#     chown -R $USERNAME:$USERNAME $HOME && \\\n#     echo \"$USERNAME:$USERNAME\" | chpasswd && adduser $USERNAME sudo # Give user ability to use sudo\n\n# Setup for non-interactive install\nENV DEBIAN_FRONTEND noninteractive\n\n# Update all the package references available for download\nRUN apt-get update\n\n# Install tools\nRUN apt-get install -y \\\n    python-software-properties \\\n    software-properties-common \\\n    gcc-4.9 \\\n    git \\\n    make \\\n    wget\n\nRUN ln -s /usr/bin/gcc-4.9 /usr/bin/gcc\n\n# Switch to non-root user\nUSER $USERNAME\nRUN mkdir $HOME/bin\nENV PATH $HOME/bin:$PATH\n\n# Go-specific instructions.\n# Reference link: https://golang.org/dl/\nENV GOLANG 1.6.2\nRUN wget https://storage.googleapis.com/golang/go${GOLANG}.linux-amd64.tar.gz -O $HOME/go.tar.gz\nRUN mkdir $HOME/go && tar -C $HOME -xzf $HOME/go.tar.gz && rm $HOME/go.tar.gz\nRUN ln -s $HOME/go/bin/go $HOME/bin/go\n\n# Set the gopath\nRUN mkdir -p $HOME/project/src\nENV GOPATH $HOME/project\nENV GOROOT $HOME/go\n\n# Install tools\nRUN go get -u -v github.com/nsf/gocode github.com/rogpeppe/godef github.com/golang/lint/golint github.com/lukehoban/go-find-references sourcegraph.com/sqs/goreturns golang.org/x/tools/cmd/gorename\n\n# Install the debugger\nENV GO15VENDOREXPERIMENT 1\nRUN git clone https://github.com/derekparker/delve.git $GOPATH/src/github.com/derekparker/delve\n#RUN cd $GOPATH/src/github.com/derekparker/delve && git checkout v0.11.0-alpha && make install\nRUN cd $GOPATH/src/github.com/derekparker/delve && make install\n\n# Preserve the PATH because when we run `su $USERNAME`, PATH would have been reset.\n# Part of workaround discussed in entry.sh\nRUN echo \"export PATH=$PATH:$GOPATH/bin\" >> $HOME/.bashrc\n\n# Remove all files in the src folder to clean up\nRUN rm -rf $GOPATH/src/*\n\n# Set the workspace\nWORKDIR $GOPATH\n#USER root\n# Add the entrypoint script\n#ADD entry.sh $HOME/bin/entry.sh\n#RUN chmod +x $HOME/bin/entry.sh\nUSER $USERNAME\n\n#ENTRYPOINT \"$HOME/bin/entry.sh\"\n#FROM base-gdec-gui\n#MAINTAINER James C. Scott III <jcscott.iii@gmail.com>\n\n# Change to root to install more dependencies\nUSER root\n# Make sure to download newer version of node than what is the default in apt-get\n# Install other dependencies\nRUN apt-get install -y curl\n#RUN curl -sL https://deb.nodesource.com/setup | sudo -E bash -\nRUN curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -\nRUN apt-get install -y \\\n    nodejs \\\n    zip\n\n\n# Change back to non-root user\nUSER $USERNAME\n\n# Switch npm prefix to prevent using sudo.\nRUN mkdir $HOME/.npm-global\nENV NPM_CONFIG_PREFIX $HOME/.npm-global\nENV PATH $HOME/.npm-global/bin:$PATH\n\n# Install VSCode\n#RUN wget -O $HOME/VSCode.zip 'https://az764295.vo.msecnd.net/public/0.10.3/VSCode-linux64.zip'\n# https://go.microsoft.com/fwlink/?LinkID=620884\nRUN wget -O $HOME/VSCode.zip 'https://go.microsoft.com/fwlink/?LinkID=620884'\nRUN unzip $HOME/VSCode.zip -d $HOME/vscode/\nRUN ln -s $HOME/vscode/VSCode-linux-x64/Code $HOME/bin/code\n\nUSER root\n\n# Install vsce, the Visual Studio Extension Manager\nRUN npm install -g vsce\nRUN npm --version \\\n\t&& which vsce\n\nUSER $USERNAME\n\n# Install the vscode-go extension\nRUN git clone https://github.com/Microsoft/vscode-go $HOME/.vscode/extensions/lukehoban.Go\nRUN cd $HOME/.vscode/extensions/lukehoban.Go \\\n\t&& git checkout tags/0.6.30\nRUN cd $HOME/.vscode/extensions/lukehoban.Go \\\n\t&& npm install\n#RUN cd $HOME/.vscode/extensions/lukehoban.Go \\\n#\t&& chmod 755 ./node_modules/vscode/bin/compile \\\n#\t&& vsce package\n\n# Add settings.json file that contains settings for the go extension\nRUN mkdir -p $HOME/.config/Code/User/\nADD settings.json $HOME/.config/Code/User/settings.json\n\n# Move back to root for the su in entry.sh\nUSER root\n\n# chown the settings.json file to the non-root user\nRUN chown -R $USERNAME:$USERNAME $HOME/.config/Code/User/settings.json\n\n\nADD xsession $HOME/.xsession\nADD start.sh /\nENTRYPOINT [\"/start.sh\"]\n\n# xrdp_sec_incoming: error reading /etc/xrdp/rsakeys.ini file\n#RUN xrdp-keygen xrdp /etc/xrdp/rsakeys.ini\n\nRUN apt-get install -y \\\n    libgtk2.0-0 \\\n    libgconf-2-4 \\\n    libasound2 \\\n    libxtst6 \\\n    libnss3\n\nRUN apt-get clean\n\n# OMG. https://github.com/Microsoft/vscode/issues/3451#issuecomment-199090068\nRUN sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/lib/x86_64-linux-gnu/libxcb.so.1\n"
    },
    {
        "filename": "3a8daab23305df28169f698f06173d0dc34e7710.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# Docker container for Ubuntu 14.04\n\n# See https://github.com/ceejatec/naked-docker/ for details about the\n# construction of the base image.\n\nFROM ceejatec/naked-ubuntu:14.04\nMAINTAINER build-team@couchbase.com\n\nUSER root\n\n# Install SSH server\nRUN apt-get update && \\\n    apt-get install -y openssh-server && \\\n    rm -f /var/cache/apt/archives/*.deb && \\\n    mkdir /var/run/sshd # update 2\n\n# Create couchbase user with password-less sudo privs, and give\n# ownership of /opt/couchbase\nRUN useradd couchbase -G sudo -m -s /bin/bash && \\\n    mkdir -p /opt/couchbase && chown -R couchbase:couchbase /opt/couchbase && \\\n    echo 'couchbase:couchbase' | chpasswd && \\\n    sed -ri 's/ALL\\) ALL/ALL) NOPASSWD:ALL/' /etc/sudoers\n\nRUN apt-get update && \\\n    apt-get install -y build-essential git autoconf cmake libevent-dev g++-multilib\n\nRUN apt-get update && apt-get install -y unzip zip tar wget curl python-software-properties && \\\n    rm -f /var/cache/apt/archives/*.deb\n\nRUN apt-get update && apt-get install -y php-pear s3cmd && \\\n    rm -f /var/cache/apt/archives/*.deb\n\nRUN apt-get update && \\\n    apt-get install -y python-pip python-dev libgpgme11-dev libffi-dev libssl-dev && \\\n    rm -f /var/cache/apt/archives/*.deb\n\n# libcouchbase for \"couchbase\" python interface\nRUN mkdir /tmp/deploy && \\\n    cd /tmp/deploy && \\\n    curl -LO http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-2-amd64.deb && \\\n    dpkg -i couchbase-release-1.0-2-amd64.deb && \\\n    apt-get update && \\\n    apt-get install -y libcouchbase-dev libcouchbase2-bin && \\\n    cd /tmp && \\\n    rm -rf deploy /var/cache/apt/archives/*.deb\n\n# Many python deps for tools and testrunner (see CBQE-3656 for some details)\nRUN pip install -U setuptools && pip install -U pip\nRUN apt-get purge -y python-requests\nRUN pip install awscli boto3 decorator ecdsa Fabric iniparse mercurial \\\n    enum paramiko pycurl pygpgme urlgrabber pycrypto \\\n    httplib2 futures gevent greenlet btrc couchbase\n\n# Install third-party build dependencies. Note: software-properties-common\n# is only required for add-apt-repository\nRUN apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:webupd8team/java && apt-get update && \\\n    echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections && \\\n    echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections && \\\n    apt-get install -y oracle-java8-installer && \\\n    rm -f /var/cache/apt/archives/*.deb\n\nRUN mkdir /tmp/deploy && \\\n    curl https://cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.sh -o /tmp/deploy/cmake.sh && \\\n    (echo y ; echo n) | sh /tmp/deploy/cmake.sh --prefix=/usr/local && \\\n    cd /tmp && rm -rf /tmp/deploy\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && \\\n    apt-get install -y ruby ruby-dev libz-dev && \\\n    rm -f /var/cache/apt/archives/*.deb\n\n# Expose SSH daemon and run our builder startup script\nEXPOSE 22\nADD .ssh /home/couchbase/.ssh\nCOPY build/couchbuilder_start.sh /usr/sbin/\nCOPY couchhook.sh /usr/sbin/\nENTRYPOINT [ \"/usr/sbin/couchbuilder_start.sh\" ]\nCMD [ \"default\" ]\n"
    },
    {
        "filename": "17d8dfb630b07cb6eb7fd6a8d5074e24fc11476f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM williamyeh/java8\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n\nVOLUME /mnt/hadoop/\nRUN apt-get update \\\n  && apt-get install -y jq curl \n\nRUN curl -s http://www.apache.org/dist/hadoop/common/hadoop-2.8.0/hadoop-2.8.0.tar.gz | tar -xz -C /usr/local/ \\\n  && cd /usr/local \\\n  && ln -s ./hadoop-2.8.0 hadoop \n\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\nENV HADOOP_PREFIX /usr/local/hadoop\nENV HADOOP_COMMON_HOME /usr/local/hadoop\nENV HADOOP_HDFS_HOME /usr/local/hadoop\nENV HADOOP_MAPRED_HOME /usr/local/hadoop\nENV HADOOP_YARN_HOME /usr/local/hadoop\nENV HADOOP_CONF_DIR /usr/local/hadoop/etc/hadoop\nENV YARN_CONF_DIR $HADOOP_PREFIX/etc/hadoop\n\nWORKDIR /usr/local/hadoop\nRUN sed -i '/^export JAVA_HOME/ s:.*:export JAVA_HOME=/usr/lib/jvm/java-8-oracle\\nexport HADOOP_PREFIX=/usr/local/hadoop\\nexport HADOOP_HOME=/usr/local/hadoop\\n:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh  \\\n  && sed -i '/^export HADOOP_CONF_DIR/ s:.*:export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop/:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh \\\n  && chmod +x /usr/local/hadoop/etc/hadoop/*-env.sh\n\n# NameNode                Secondary NameNode  DataNode                     JournalNode  NFS Gateway    HttpFS         ZKFC\nEXPOSE 8020 50070 50470   50090 50495         50010 1004 50075 1006 50020  8485 8480    2049 4242 111  14000 14001    8019\n\nRUN apt-get update && apt-get install -y python-pip attr\nRUN pip install pyyaml jinja2 argparse logutils\n\n\nWORKDIR {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\n\nADD core-site.xml /usr/local/hadoop/etc/hadoop/core-site.xml\nADD hdfs-site.xml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD hdfs-site-single.xml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD logging.yaml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD mapred-site.xml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD yarn-site.xml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD yarn-site-single.xml.in-docker {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD bootstrap_hdfs.py {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nADD utils.py {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}\nRUN chmod +x {{cnf[\"docker-run\"][\"hdfs\"][\"workdir\"]}}/*.py\n\n# All process in this docker needs to be run as a service. \n# Do not change the command, rewrite a service if need to \n\n# See information on https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning\n# the 3rd answer, you may ignore warning on NativeCodeLoader\n\nCMD /bin/bash\n\n\n\n"
    },
    {
        "filename": "19964d92134646b9660c41e47d16ce59efa08fd6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# Docker file for JuliaBox Minimal\n# Tag: julialang/juliaboxminpkgdist\n# Version:latest\n\nFROM julialang/julia:latest\n\nMAINTAINER Tanmay Mohapatra\n\n# Install additional packages required for Julia packages\nRUN apt-get update \\\n    && apt-get install -y \\\n    imagemagick \\\n    inkscape \\\n    pandoc \\\n    pdf2svg \\\n    hdf5-tools \\\n    python-sympy \\\n    python-numpy \\\n    python-scipy \\\n    python-matplotlib \\\n    glpk-utils \\\n    && apt-get clean\n\nADD texlive.profile /tmp/tl/texlive.profile\nRUN cd /tmp/tl; wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; \\\n    tar -xzf install-tl-unx.tar.gz; cd install-tl-*; \\\n    ./install-tl --profile=../texlive.profile; cd /; rm -rf /tmp/tl; \\\n    echo \"export PATH=/usr/local/texlive/2014/bin/x86_64-linux:\\$PATH\" > /etc/profile.d/texlive.sh; \\\n    echo \"export INFOPATH=/usr/local/texlive/2014/texmf-dist/doc/info:\\$INFOPATH\" >> /etc/profile.d/texlive.sh; \\\n    echo \"export MANPATH=/usr/local/texlive/2014/texmf-dist/doc/man:\\$MANPATH\" >>  /etc/profile.d/texlive.sh; \\\n    chmod 755 /etc/profile.d/texlive.sh\n\nENV PATH /usr/local/texlive/2014/bin/x86_64-linux:/usr/local/bin:/usr/bin:/bin:/usr/games:/sbin:/usr/sbin\n\n# Cairo\nRUN apt-get install -y \\\n    gettext \\\n    libpango1.0-dev \\\n    libpango1.0-0 \\\n    libgvc6 \\\n    graphviz \\\n    libgraphviz-dev \\\n    && apt-get clean\n\n# SymPy\nRUN pip install --upgrade sympy\n\nENV PATH /usr/local/texlive/2014/bin/x86_64-linux:/usr/local/bin:/usr/bin:/bin:/usr/games:/sbin:/usr/sbin:/opt/julia/bin\nADD setup_julia.sh /tmp/setup_julia.sh\nRUN mkdir /.juliabox\nRUN /tmp/setup_julia.sh\n"
    },
    {
        "filename": "09cb51fa968afaa8670898576ad49e9b49bf33b6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM kalilinux/kali-linux-docker\nMAINTAINER menzo@menzo.io\n\nENV LC_ALL C.UTF-8\nENV INSTALL_DIR /usr/share/sniper\nENV LOOT_DIR /usr/share/sniper/loot\nENV PLUGINS_DIR /usr/share/sniper/plugins\nENV SNIPER_SKIP_DEPENDENCIES true\nENV DISPLAY :99\nENV DEBIAN_FRONTEND noninteractive\n\n### START BASE LAYER ###\n\nRUN apt-get update && apt-get install -y aria2 curl && /bin/bash -c \"$(curl -sL https://git.io/vokNn)\" && apt-get update\nCOPY [\"apt-fast.conf\", \"/etc/apt-fast.conf\"]\nRUN apt-fast install -y \\\n\t\truby \\\n\t\trubygems \\\n\t\tdos2unix \\\n\t\tpython \\\n\t\tzenmap \\\n\t\tsslyze \\\n\t\tuniscan \\\n\t\txprobe2 \\\n\t\tcutycapt \\\n\t\tunicornscan \\\n\t\thost \\\n\t\twhois \\\n\t\tiputils-ping \\\n\t\txvfb \\\n\t\tdirb \\\n\t\tdnsrecon \\\n\t\tcurl \\\n\t\tnmap \\\n\t\tphp \\\n\t\tphp-curl \\\n\t\thydra \\\n\t\ticeweasel \\\n\t\twpscan \\\n\t\tsqlmap \\\n\t\tnbtscan \\\n\t\tenum4linux \\\n\t\tcisco-torch \\\n\t\tmetasploit-framework \\\n\t\ttheharvester \\\n\t\truby-dev \\\n\t\tdnsenum \\\n\t\tlibsqlite3-dev \\\n\t\tnikto \\\n\t\tsmtp-user-enum \\\n\t\twhatweb \\\n\t\tdnsutils \\\n\t\tsslscan \\\n\t\tamap \\\n\t\tarachni \\\n    \tbsdmainutils && \\\n\tmv /usr/bin/python /usr/bin/python.unknown && \\\n\tln -s /usr/bin/python2.7 /usr/bin/python && \\\n\tcurl https://bootstrap.pypa.io/get-pip.py | python && \\\n\tgem install  \\\n\t\tmechanize \\\n\t\tbcrypt \\\n\t\tsqlite3 \\\n\t\tnet-http-persistent \\\n\t\trake \\\n\t\truby-nmap \\\n\t\ttext-table && \\\n\tpip install  \\\n\t\tcolorama \\\n\t\tdnspython \\\n\t\tipaddress \\\n\t\ttldextract \\\n\t\turllib3 && \\\n\tgit clone https://github.com/1N3/Sn1per.git && \\\n\tcd Sn1per && \\\n\tprintf 'yes\\nyes\\nyes\\n' | /bin/bash ./install.sh && \\\n\tsniper update && \\\n\techo Cleaning up package index && \\\n\t\tapt-get clean && \\\n\t\trm -rf /etc/apt/apt.conf.d/30autoproxy && \\\n\t\trm -rf /var/lib/apt/lists/* && \\\n\techo \"Image creation complete\"\n\n# Loot volume, used for output\nVOLUME /usr/share/sniper/loot\n\n# Wordlists volume\nVOLUME /usr/share/sniper/wordlists\n\nADD [\"docker-entrypoint.sh\", \"/root/\"]\nENTRYPOINT [\"/root/docker-entrypoint.sh\"]"
    },
    {
        "filename": "2bac7a5b4d725967ce5f87549d1708ef1b130d16.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "# This file describes how to build Haraka into a runnable linux container with all dependencies installed\n# To build:\n# 1.) Install docker (http://docker.io)\n# 2.) Clone Haraka repo if you haven't already: git clone https://github.com/haraka/Haraka.git\n# 3.) Modify config/host_list with the domain(s) that you'd like to receive mail to\n# 4.) Build: cd Haraka && docker build .\n# 5.) Run:\n# docker run -d <imageid>\n#\n# VERSION           0.1\n# DOCKER-VERSION    0.5.3\n\n# See http://phusion.github.io/baseimage-docker/\nFROM phusion/baseimage:latest\n\nMAINTAINER Justin Plock <jplock@gmail.com>\n\nENV HOME /root\n\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y -q update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install python-software-properties g++ make git curl\nRUN curl -sL https://deb.nodesource.com/setup_5.x | sudo bash -\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install nodejs && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Optional, useful for development\n# See https://github.com/phusion/baseimage-docker#login_ssh\n#RUN rm -f /etc/service/sshd/down\n#RUN /usr/sbin/enable_insecure_key\n\n# Install Haraka\nRUN npm install -g Haraka\nRUN haraka -i /usr/local/haraka\nADD ./config/host_list /usr/local/haraka/config/host_list\nADD ./config/plugins /usr/local/haraka/config/plugins\nRUN cd /usr/local/haraka && npm install\n\n# Create haraka runit service\nRUN mkdir /etc/service/haraka\nADD haraka.sh /etc/service/haraka/run\n\nEXPOSE 25\n\n# Start the init daemon - runit will launch the Haraka process\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "11de55ce13eb32f02a26d819176df9978a16ae70.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-022,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,yum-install-without-version,pip-install-without-version",
        "num": 8,
        "text": "FROM abiosoft/caddy as caddy\nFROM pahud/c9-ide:alpine-base as alpine-base-ide\nFROM amazonlinux:latest as builder\n\nRUN yum update -y && yum install -y tmux curl pip python2-pip tar git which awscli\nRUN yum groupinstall \"Development Tools\" -y\nRUN amazon-linux-extras install epel -y && \\\nyum install -y nodejs npm\n\nRUN git clone -b master --single-branch git://github.com/c9/core.git /opt/cloud9 \\\n&& curl -s -L https://raw.githubusercontent.com/c9/install/master/link.sh | bash \\\n&& /opt/cloud9/scripts/install-sdk.sh \\\n&& rm -rf /opt/cloud9/.git \\\n&& rm -rf /tmp/* \\\n&& npm cache clean\n\n\n# Let's Encrypt Agreement\nENV ACME_AGREE=\"true\"\n# set default C9_USER as ec2-user\nENV C9_USER=\"ec2-user\"\n\nVOLUME /root/.caddy /srv\nCOPY --from=caddy /usr/bin/caddy /usr/bin/caddy\nCOPY --from=caddy /etc/Caddyfile /etc/Caddyfile\nCOPY --from=caddy /srv/index.html /srv/index.html\nCOPY --from=caddy /bin/parent /bin/parent\n\n#install docker and others\nRUN amazon-linux-extras install docker -y\n\n# install supervisor\nRUN pip install supervisor\nCOPY --from=alpine-base-ide /etc/supervisord.conf /etc/supervisord.conf\n\nADD cloud9.conf /etc/supervisor.d/cloud9.ini\nADD caddy.conf /etc/supervisor.d/caddy.ini\nADD Caddyfile /tmp/Caddyfile.tmp\nADD entrypoint.sh /root/entrypoint.sh\nADD bashrc /root/.bash_profile\n\nENV DOMAIN domain.com\nENV EMAIL admin@domain.com\n\nRUN mkdir /workspace /var/log/supervisor\n\nVOLUME /workspace\n\nWORKDIR /workspace\n\nENV MYUSERNAME username\nENV MYPASSWORD password\n\nEXPOSE 80 443 2015\n\nENTRYPOINT [\"/root/entrypoint.sh\"]\n"
    },
    {
        "filename": "82e1249792b0a821dd203d4d412fcb470a739c1a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM ubuntu:trusty\n\nMAINTAINER Alexandre Viau <alexandre.viau@savoirfairelinux.com>\n\nRUN apt-get update && apt-get install -y vim git supervisor python-dev libffi-dev libssl-dev nagios-nrpe-server wget python-virtualenv python-openssl\n# libffi-devand libssl-dev are for python-cryptography\n\n### Alignak\nRUN apt-get update && apt-get install -y python-pip python-pycurl\nRUN useradd alignak && pip install https://github.com/Alignak-monitoring/alignak/archive/d7f457d5ed94f08d9a6a38809106d3e0d35a1712.tar.gz\n\n## modules\n# mod-webui\nRUN cd /tmp && \\\n    wget -O mod-webui.tar.gz https://github.com/shinken-monitoring/mod-webui/archive/3215d6c775326d1fb3afb161eb279dfb44e45986.tar.gz && \\\n    tar -zxvf mod-webui.tar.gz && \\\n    mv /tmp/mod-webui-*/module /var/lib/alignak/modules/webui && \\\n    rm -rfv /tmp/mod-webui*\n\n# auth-cfg-password\nRUN cd /tmp && \\\n    wget -O mod-auth-cfg-password.tar.gz https://github.com/shinken-monitoring/mod-auth-cfg-password/archive/6079d31974305b74e332424df44efecc9dfeabfc.tar.gz && \\\n    tar -zxvf mod-auth-cfg-password.tar.gz && \\\n    mv /tmp/mod-auth-cfg-password-*/module /var/lib/alignak/modules/auth-cfg-password && \\\n    rm -rfv /tmp/mod-auth-cfg-password*\n\n# mod-booster-nrpe\nRUN cd /tmp && \\\n    wget -O mod-booster-nrpe.tar.gz https://github.com/shinken-monitoring/mod-booster-nrpe/archive/de7099706855e32c1962c77740be0fae446d15f5.tar.gz && \\\n    tar -zxvf mod-booster-nrpe.tar.gz && \\\n    mv /tmp/mod-booster-nrpe-*/module /var/lib/alignak/modules/mod-booster-nrpe && \\\n    rm -rfv /tmp/mod-booster-nrpe*\n\n# mod-surveil\nRUN pip install python-surveilclient==0.13.3\nRUN cd /tmp && \\\n    wget -O mod-surveil-config.tar.gz https://github.com/Alignak-monitoring/mod-surveil/archive/fdc98b4fc036aa483ecb58459f11f9a87cf2254a.tar.gz && \\\n    tar -zxvf mod-surveil-config.tar.gz && \\\n    mv /tmp/mod-surveil-*/alignak/modules/mod_surveil /var/lib/alignak/modules/mod-surveil && \\\n    rm -rfv /tmp/mod-surveil*\n\n# mod-influxdb\nRUN pip install influxdb==2.8.0\nRUN cd /tmp && \\\n    wget -O mod-influxdb.tar.gz https://github.com/savoirfairelinux/mod-influxdb/archive/9433b726492a09d5faeb70abfc5efdbf1728686f.tar.gz && \\\n    tar -zxvf mod-influxdb.tar.gz && \\\n    mv /tmp/mod-influxdb-*/module /var/lib/alignak/modules/mod-influxdb && \\\n    rm -rfv /tmp/mod-influxdb*\n\n# mod-ws-arbiter\nRUN cd /tmp && \\\n    wget -O mod-ws-arbiter.tar.gz https://github.com/shinken-monitoring/mod-ws-arbiter/archive/ebae7950be9452ab80ec58575e9887d9b2a15d2a.tar.gz && \\\n    tar -zxvf mod-ws-arbiter.tar.gz && \\\n    mv /tmp/mod-ws-arbiter-*/module /var/lib/alignak/modules/ws-arbiter && \\\n    rm -rfv /tmp/mod-ws-arbiter*\n\n# mod-mongo-live-config\nRUN pip install pymongo==3.0.2\nRUN cd /tmp && \\\n    wget -O mod-mongo-live-config.tar.gz https://github.com/savoirfairelinux/mod-mongo-live-config/archive/0.3.2.tar.gz && \\\n    tar -zxvf mod-mongo-live-config.tar.gz && \\\n    mv /tmp/mod-mongo-live-config-*/mod_mongo_live_config /var/lib/alignak/modules/mod_mongo_live_config && \\\n    rm -rfv /tmp/mod-mongo-live-config*\n\n# mod-ceilometer\nRUN apt-get update && apt-get install -y python-ceilometerclient\nRUN cd /tmp && \\\n    wget -O mod-ceilometer.tar.gz https://github.com/savoirfairelinux/mod-ceilometer/archive/0.2.1.tar.gz && \\\n    tar -zxvf mod-ceilometer.tar.gz && \\\n    mv /tmp/mod-ceilometer-*/module /var/lib/alignak/modules/mod-ceilometer && \\\n    rm -rfv /tmp/mod-ceilometer*\n\n## plugins\nRUN apt-get update && apt-get install -y nagios-plugins nagios-nrpe-plugin\n# run permissions for user `alignak`\nRUN chmod u+s /usr/lib/nagios/plugins/check_icmp\nRUN chmod u+s /bin/ping\nRUN chmod u+s /bin/ping6\n\n# Download plugins\nENV MONITORING_TOOLS_VERSION 0.4.1\nRUN apt-get update && apt-get install -y subversion && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-glance /plugins/check_glance && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-keystone /plugins/check_keystone && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-nova /plugins/check_nova && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-cinder /plugins/check_cinder && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-ceilometer /plugins/check_ceilometer && \\\n    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-nova-host-status /plugins/check_nova_host_status && \\\n    apt-get remove -y subversion\n\n## Install plugins dependencies\nRUN mkdir -p /opt/surveilplugins\nRUN virtualenv /opt/surveilplugins/env\nENV PATH=$PATH:/opt/surveilplugins/env/bin\nRUN /opt/surveilplugins/env/bin/pip install -U \"pbr>=1.3,<2.0\" shinkenplugins python-keystoneclient python-glanceclient\n\n## Install Plugins\nRUN mkdir -p /usr/lib/monitoring/plugins/sfl\nRUN cd /plugins/check_keystone && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_keystone /usr/lib/monitoring/plugins/sfl/\nRUN cd /plugins/check_glance && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_glance  /usr/lib/monitoring/plugins/sfl/\nRUN cd /plugins/check_nova && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_nova /usr/lib/monitoring/plugins/sfl/\nRUN cd /plugins/check_cinder && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_cinder /usr/lib/monitoring/plugins/sfl/\nRUN cd /plugins/check_ceilometer && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_ceilometer /usr/lib/monitoring/plugins/sfl/\nRUN cd /plugins/check_nova_host_status && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_nova_host_status /usr/lib/monitoring/plugins/sfl/\n\n## Add check example plugin\nADD plugins/check-example /plugins/check_example\nRUN virtualenv /plugins/check_example/env\nENV PATH=$PATH:/plugins/check_example/env/bin\nRUN /plugins/check_example/env/bin/pip install -r /plugins/check_example/requirements.txt\nRUN cd /plugins/check_example && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_example /usr/lib/monitoring/plugins/sfl\n\n## configuration\nADD setup.sh /setup.sh\nRUN rm -rf /etc/alignak\nADD etc/alignak /etc/alignak\n\nRUN chown -R root:alignak /etc/alignak\n\n### Supervisor\nADD etc/supervisor /etc/supervisor\n\n# Alignak WEBUI\nEXPOSE 7767\n\n# ws-arbiter\nEXPOSE 7760\n\n# OpenStack Authentication credentials. Used for sending data to Ceilometer\nENV SURVEIL_OS_AUTH_URL=http://keystone:5000/v2.0\nENV SURVEIL_OS_USERNAME=admin\nENV SURVEIL_OS_PASSWORD=password\nENV SURVEIL_OS_TENANT_NAME=admin\n\nCMD ./setup.sh && /usr/bin/supervisord\n"
    },
    {
        "filename": "604ffac6061a132089bbcdfd2298aaeef315b60c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM ufaldsg/cloud-asr-base\nMAINTAINER Ondrej Klejch\n\nRUN apt-get update && \\\n    apt-get install -y build-essential libatlas-base-dev python-dev python-pip git wget gfortran g++ unzip zlib1g-dev automake autoconf libtool subversion && \\\n    pip install webrtcvad\n\nWORKDIR /opt/app/\nRUN git clone https://github.com/choko/alex-asr.git && \\\n    cd /opt/app/alex-asr && \\\n    git checkout 7ab2b0f89de468645e1d00f282aefd48ca9a314d && \\\n    pip install -r requirements.txt && \\\n    bash prepare_env.sh && \\\n    make && \\\n    python setup.py install\n\nWORKDIR /opt/app/\nADD . /opt/app\n\nARG MODEL_URL\nRUN bash download_models.sh\nCMD while true; do python run.py; done\n"
    },
    {
        "filename": "7940e8ed78e5e4dc2c1bcf70c35cb8acece485d9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM adreeve/python-numpy:latest \n\nENV PATH /usr/local/bin:$PATH\n\nRUN mkdir -p /home/progs\nWORKDIR /home/progs\n\nRUN apt-get update \\\n    && apt-get --yes install git ssh rsync nano graphviz \\\n    wget zlibc zlib1g-dev unzip zip \\\n    libncurses5-dev libncursesw5-dev libboost-dev \\\n    python3-pip \n\nRUN pip3 install snakemake pyyaml psutil numexpr --upgrade\n\n#    python-software-properties\\\n#    build-essential \\\n#    python3-software-properties \\\n#    software-properties-common \\\n#    libncurses5-dev libncursesw5-dev libboost-dev\n\n## SnakeChunks\n\nRUN wget https://github.com/snakechunks/snakechunks/archive/4.0.tar.gz && \\\n    tar zvxf 4.0.tar.gz && \\\n    ln -s SnakeChunks-4.0 SnakeChunks && \\\n    rm 4.0.tar.gz\n\n## Programs\n\n# bowtie2\nRUN wget --no-clobber http://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.6/bowtie2-2.2.6-linux-x86_64.zip && \\\n\tunzip bowtie2-2.2.6-linux-x86_64.zip && \\\n\tcp `find bowtie2-2.2.6/ -maxdepth 1 -executable -type f` /usr/local/bin\n\n# fastqc\nRUN wget --no-clobber http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.5.zip && \\\n\tunzip -o fastqc_v0.11.5.zip && \\\n\tchmod +x FastQC/fastqc && \\\n\tcp FastQC/fastqc /usr/local/bin\n\n# samtools\nRUN wget --no-clobber http://sourceforge.net/projects/samtools/files/samtools/1.3/samtools-1.3.tar.bz2 && \\\n\tbunzip2 -f samtools-1.3.tar.bz2 && \\\n\ttar xvf samtools-1.3.tar && \\\n\tcd samtools-1.3 && \\\n\tmake  && \\\n\tsudo make install\n\nWORKDIR /home/progs\n\n# bedtools\nRUN wget --no-clobber https://github.com/arq5x/bedtools2/releases/download/v2.24.0/bedtools-2.24.0.tar.gz && \\\n\ttar xvfz bedtools-2.24.0.tar.gz && \\\n\tcd bedtools2 && \\\n\tmake && \\\n\tsudo make install\n\nWORKDIR /home/progs\n\n# macs2\nRUN sudo pip install MACS2\n\n# homer\nRUN mkdir Homer && \\\n\tcd Homer && \\\n\twget -nc \"http://homer.salk.edu/homer/configureHomer.pl\" && \\\n\tperl configureHomer.pl -install homer && \\\n\tcp `find bin/ -maxdepth 1 -executable -type f` /usr/local/bin\n\nRUN pip3 install -U pandas\n\nMAINTAINER Claire Rioualen <claire.rioualen@inserm.fr> \n\n\n\n\n"
    },
    {
        "filename": "4c3ac35a7e475a9e9578acd8cd305463229a579d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "############################################################\n# Dockerfile to build python3-pwntools container\n# Based on Ubuntu\n############################################################\n\nFROM ubuntu\nMAINTAINER Maintainer Maxime Arthaud\n\nRUN apt-get update && apt-get install -y software-properties-common\nRUN apt-add-repository --yes ppa:pwntools/binutils\nRUN apt-get update\nRUN apt-get install -y \\\n\tbinutils \\\n\tbinutils-aarch64-linux-gnu \\\n\tbinutils-arm-linux-gnueabihf \\\n\tcurl \\\n\tgdb \\\n\tgdbserver \\\n\tgdb-multiarch \\\n\tgit \\\n\tlibc6-i386 \\\n\tlibc6-arm64-cross \\\n\tlibc6-armhf-cross \\\n\tlibc6-dev-i386 \\\n\tlibglib2.0-dev \\\n\tlibncurses5-dev \\\n\tlibncursesw5-dev \\\n\tltrace \\\n\tpython-dev \\\n\tpython-pip \\\n\tpython3-pip \\\n\tpython2.7 \\\n\tqemu \\\n\tqemu-user-static \\\n\tstrace \\\n\ttmux \\\n\twget\nRUN pip install --upgrade ipython\nRUN useradd -m zerocool\nRUN usermod -U zerocool\n\nRUN mkdir -p /etc/qemu-binfmt\nRUN ln -s /usr/aarch64-linux-gnu /etc/qemu-binfmt/aarch64\nRUN ln -s /usr/arm-linux-gnueabihf /etc/qemu-binfmt/arm\n\nRUN git clone https://github.com/aquynh/capstone \\\n\t&& cd capstone \\\n\t&& git checkout -t origin/next \\\n\t&& sudo ./make.sh install \\\n\t&& cd bindings/python \\\n\t&& python2 setup.py install \\\n\t&& python3 setup.py install\n\nRUN git clone https://github.com/unicorn-engine/unicorn \\\n\t&& cd unicorn \\\n\t&& sudo ./make.sh install \\\n\t&& cd bindings/python \\\n\t&& sudo python2 setup.py install \\\n\t&& sudo python3 setup.py install\n\nRUN pip install --upgrade pip pycparser psutil python-ptrace\nRUN pip3 install --upgrade pip pycparser psutil python-ptrace\n\nRUN pip install --upgrade git+https://github.com/binjitsu/binjitsu.git # 2016-3-16\n\nRUN pip3 install --upgrade git+https://github.com/arthaud/python3-pwntools.git\nRUN echo \"source /home/zerocool/pwndbg/gdbinit.py\" > /home/zerocool/.gdbinit\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN chown -R zerocool.zerocool /home/zerocool\nRUN chsh -s /bin/bash zerocool\n"
    },
    {
        "filename": "50ebf3dd4bf63d7e4973630bb5d06c4f772d41aa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 8,
        "text": "FROM ubuntu:trusty\nMAINTAINER Evan Cordell <cordell.evan@gmail.com>\n\n## Prepare\nRUN apt-get clean all && apt-get update && apt-get upgrade -y\n\n# Build Tools\nRUN apt-get update && \\\n    apt-get install -y build-essential zlib1g-dev libssl-dev libreadline6-dev libyaml-dev pkg-config software-properties-common && \\\n    apt-add-repository ppa:ubuntu-lxc/lxd-stable && \\\n    apt-get install -y make wget tar git curl && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n## Install libsodium\nENV LIBSODIUM_VERSION 1.0.8\n\nRUN wget https://github.com/jedisct1/libsodium/releases/download/$LIBSODIUM_VERSION/libsodium-$LIBSODIUM_VERSION.tar.gz && \\\n  tar xzvf libsodium-$LIBSODIUM_VERSION.tar.gz && \\\n  cd libsodium-$LIBSODIUM_VERSION && \\\n  ./configure && \\\n  make && make check && sudo make install && \\\n  cd .. && rm -rf libsodium-$LIBSODIUM_VERSION && \\\n  sudo ldconfig\n\n# Install Python\nRUN apt-get update && \\\n    apt-get install -y python3-pip python3-dev python3-software-properties && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Ruby\nRUN cd /tmp && \\\n  wget -q http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz && \\\n  tar xzf ruby-2.1.2.tar.gz && \\\n  cd ruby-2.1.2 && \\\n  ./configure --enable-shared --prefix=/usr && \\\n  make && \\\n  make install && \\\n  cd .. && \\\n  rm -rf ruby-2.1.2* && \\\n  cd ..\n\n# Install Node\nENV NODE_PREFIX /usr/local\nENV NODE_PATH $NODE_PREFIX/lib/node_modules\nENV NODE_VERSION 0.11.14\nENV NPM_VERSION 2.1.6\n\nRUN wget -q \"http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n  && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C $NODE_PREFIX --strip-components=1 \\\n  && rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n  && npm install -g npm@\"$NPM_VERSION\" \\\n  && npm cache clear\n\n# Install Go\nRUN apt-get update && \\\n    apt-get install -y golang bzr && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    mkdir /usr/go\nENV GOROOT /usr/lib/go\nENV GOPATH /usr/go\n\n# Install PHP\nRUN apt-get update && \\\n    apt-get install -y php5 php5-dev php-pear && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Rust\nENV RUST_VERSION 1.12.0\nRUN apt-get update && \\\n    curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n    tar -xvzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n    ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* rust-$RUST_VERSION-x86_64-unknown-linux-gnu{,.tar.gz}\n\n# Install libmacaroons\nRUN wget -O - http://ubuntu.hyperdex.org/hyperdex.gpg.key | apt-key add - && \\\n    echo \"deb [arch=amd64] http://ubuntu.hyperdex.org trusty main\" >> /etc/apt/sources.list.d/hyperdex.list && \\\n    apt-get update && \\\n    apt-get install -y python-macaroons && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /usr/src\n\n# Install pymacaroons\nRUN pip3 install pymacaroons pytest pytest-html\n\n# Install ruby-macaroons\nRUN gem install macaroons -v 0.6.1\n\n# Install macaroons.js\nRUN npm install -g macaroons.js\n\n# Install go-macaroons\nRUN go get launchpad.net/gorun && \\\n    go get gopkg.in/macaroon.v1 && \\\n    go get gopkg.in/macaroon-bakery.v1/bakery\n\n# Install php-macaroons\nADD implementations/php-macaroons /usr/src/implementations/php-macaroons\nRUN pecl install libsodium-1.0.6 && \\\n    echo \"extension=libsodium.so\" >> /etc/php5/cli/php.ini && \\\n    curl -sS https://getcomposer.org/installer | php && \\\n    mv composer.phar /usr/bin/composer && \\\n    cd implementations/php-macaroons && \\\n    composer install\n\n# Install rust-macaroons\nRUN mkdir /usr/rust && cd /usr/rust && \\\n    git clone https://github.com/cryptosphere/rust-macaroons.git /usr/rust/rust-macaroons && \\\n    cd rust-macaroons && \\\n    cargo build\n\n# Add source\nADD . /usr/src\n"
    },
    {
        "filename": "4729a31a316c2231e45e87380bbc4275e8dad938.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM debian:jessie\nMAINTAINER Kevin Littlejohn <kevin@littlejohn.id.au>\n\n# Add docker apt repository\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 \\\n  && echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\nRUN apt-get -yq update && apt-get -yq upgrade && apt-get -yq install curl \\\n  && curl -sL https://deb.nodesource.com/setup | bash - \\\n  && apt-get -yq install less vim sudo strace lsof tmux make tcpdump netcat \\\n    telnet dnsutils unzip groff jq uuid-runtime wget \\\n    gcc zlib1g-dev libxml2-dev libxslt1-dev libssl-dev libreadline6-dev \\\n    libyaml-0-2 libcurl4-gnutls-dev libexpat1-dev gettext libz-dev \\\n    bash-completion libyaml-dev lxc-docker gnupg nodejs \\\n  && apt-get clean\n\n# Git from source after a security issue\nRUN cd /usr/local/src \\\n  && wget https://www.kernel.org/pub/software/scm/git/git-2.2.2.tar.gz \\\n  && tar zxf git*.tar.gz \\\n  && cd git* \\\n  && ./configure && make && make install \\\n  && rm -rf /usr/local/src/git*\n\n# Python\nENV PYTHON_VER=2.7.9\nRUN cd /usr/local/src \\\n  && curl -sSL https://www.python.org/ftp/python/$PYTHON_VER/Python-$PYTHON_VER.tgz | tar zx \\\n  && cd Python-$PYTHON_VER \\\n  && ./configure && make && make install \\\n  && cd /tmp \\\n  && curl -O https://bootstrap.pypa.io/get-pip.py && python /tmp/get-pip.py \\\n  && rm -rf /usr/local/src/Python-$PYTHON_VER /tmp/get-pip.py\nRUN pip install awscli docker-compose\n\n# Keybase, for gpg\nRUN npm install -g keybase-installer\nRUN keybase-installer\n\n# docker-machine\nRUN curl -sLo /usr/local/bin/docker-machine $(curl -s https://api.github.com/repos/docker/machine/releases | grep browser_download_url | grep docker-machine_darwin-amd64 | head -1 | awk -F': ' '{ print $2 }' | sed 's/^\"\\(.*\\)\"$/\\1/')\n\n# Local scripts for configuration\nADD drun_profile.sh /etc/profile.d/drun.sh\nADD tmux.conf /etc/tmux.conf\nADD start.sh /usr/local/bin/start.sh\nADD container_name /usr/local/etc/container_name\nADD bash_profile /etc/skel/.bash_profile\nADD sudoers /etc/sudoers\n\nENTRYPOINT [\"/usr/local/bin/start.sh\"]\n\nONBUILD ADD container_name /usr/local/etc/container_name\n"
    },
    {
        "filename": "484d42392747c0fa5e7e66c58315e5b9873c929a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:15.04\nMAINTAINER Vitaly Baum <vitaly.baum@gmail.com> \n\n# Oracle Java 8\n\nRUN apt-get install software-properties-common -y\n\nRUN apt-get install sudo curl -y\n\nRUN sudo add-apt-repository ppa:webupd8team/java -y\n\nRUN sudo apt-get update -y\n\nRUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n\nRUN sudo apt-get install oracle-java8-installer -y\n\n# Scala\n\nENV SCALA_VERSION 2.11.7\nENV SBT_VERSION 0.13.9\n\n# Install Scala\nRUN \\\n  cd /root && \\\n    curl -o scala-$SCALA_VERSION.tgz http://downloads.typesafe.com/scala/$SCALA_VERSION/scala-$SCALA_VERSION.tgz && \\\n      tar -xf scala-$SCALA_VERSION.tgz && \\\n        rm scala-$SCALA_VERSION.tgz && \\\n          echo >> /root/.bashrc && \\\n            echo 'export PATH=~/scala-$SCALA_VERSION/bin:$PATH' >> /root/.bashrc\n\n# Install sbt\nRUN \\\n  curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb && \\\n    dpkg -i sbt-$SBT_VERSION.deb && \\\n      rm sbt-$SBT_VERSION.deb && \\\n        apt-get update && \\\n          apt-get install sbt\n\n\nRUN mkdir /app\n\nWORKDIR /app\n\nRUN sbt reload plugins -mem 512\n\nADD ./project/plugins.sbt /app/project/plugins.sbt\nADD ./build.sbt /app/build.sbt\n\nRUN sbt compile -mem 512\n#cache everything before if wasnt changed\nADD . /app\n\nEXPOSE 1883\n\nRUN sbt compile\nRUN sbt stage\n\nCMD /app/target/universal/stage/bin/jetmq -J-Xmx512m\n"
    },
    {
        "filename": "48e10ec7ecb0e09fd20b6f56cbd503cfd7ae1188.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\nMAINTAINER Lorena Pantano \"https://github.com/lpantano\"\n\n\n# Setup a base system \nRUN apt-get update && \\\n    apt-get install -y build-essential unzip wget git && \\\n    apt-get install -y libglu1-mesa && \\\n    apt-get install -y curl pigz bsdmainutils && \\\n    apt-get install -y --no-install-recommends libcurl4-gnutls-dev mbuffer python2.7-dev python-virtualenv \n\nRUN  wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh && \\\n     bash Miniconda-latest-Linux-x86_64.sh -b -p /usr/local/conda && \\\n     export PATH=/usr/local/conda/bin:$PATH && \\\n     conda install --yes -c conda-forge -c bioconda scipy seqcluster bedtools samtools pip nose setuptools -q && \\\n     pip install pytz dateutils && \\\n     wget https://github.com/lpantano/seqcluster/archive/master.zip && \\\n     unzip master.zip && \\\n     mv seqcluster-master seqcluster && \\\n     cd seqcluster && \\\n     /usr/local/conda/bin/python setup.py install && \\\n     /usr/local/conda/bin/nosetests\n# setup paths\nENV  PATH=\"/usr/local/conda/bin:${PATH}\"\n\n"
    },
    {
        "filename": "4e8f91965f88b5062ce309265ac073385afc4524.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jupyter/jupyterhub\n\nMAINTAINER Jessica Hamrick <jhamrick@berkeley.edu>\n\n# We need to update pip, otherwise the version of requests that\n# is installed by dockerspawner breaks things.\nRUN pip install --upgrade pip\n\n# Install dockerspawner and oauthenticator\nRUN pip install docker-py==1.9.0\nRUN pip install git+git://github.com/jupyter/dockerspawner.git\nRUN pip install git+git://github.com/jupyter/oauthenticator.git\n\n# Install psycopg2\nRUN apt-get update\nRUN apt-get -y install libpq-dev\nRUN pip install psycopg2\n\n# add the userlist, spawner, and authenticator\nRUN mkdir /srv/jupyterhub_config\nWORKDIR /srv/jupyterhub_config\nADD systemuserspawner.py /srv/jupyterhub_config/systemuserspawner.py\nADD docker_oauth.py /srv/jupyterhub_config/docker_oauth.py\nADD jupyterhub_config.py /srv/jupyterhub_config/jupyterhub_config.py\n\n# create /srv/jupyterhub_users directory (which is where we'll mount the userlist)\nRUN mkdir /srv/jupyterhub_users\n\n# we need to expose ports for the hub api and for the proxy api\nEXPOSE 8080\nEXPOSE 8001\n\n# environment variable for swarm\nENV DOCKER_HOST https://swarm:2375\n\n# run jupyterhub\nENTRYPOINT [\"jupyterhub\", \"-f\", \"/srv/jupyterhub_config/jupyterhub_config.py\"]"
    },
    {
        "filename": "4f0a31ee652ffd50406fcea611a754051eaf9d21.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER dev@marvin.apache.org\nLABEL authors=\"jeremy.elster\"\n\nENV SLEEP_MILLIS 0\n\nUSER root\n\n##############################################################\n# Define all environment variables to be used \n##############################################################\n\nENV MARVIN_HOME=/opt/marvin\nENV MARVIN_DATA_PATH=/marvin-data\nENV MARVIN_ENGINE_HOME=$MARVIN_HOME/engine\nENV MARVIN_ENGINE_ENV=marvin-engine-env\nENV WORKON_HOME=$MARVIN_HOME/.virtualenvs\nENV SPARK_HOME=/opt/spark\nENV SPARK_CONF_DIR=$SPARK_HOME/conf\nENV HADOOP_CONF_DIR=$SPARK_CONF_DIR\nENV YARN_CONF_DIR=$SPARK_CONF_DIR\n\n\n##############################################################\n# Create all folders needed \n##############################################################\n\nRUN mkdir -p $MARVIN_HOME && \\\n    mkdir -p $MARVIN_DATA_PATH && \\\n    mkdir -p $MARVIN_ENGINE_HOME && \\\n    mkdir -p /var/log/marvin/engines && \\\n    mkdir -p /var/run/marvin/engines\n\n\n##############################################################\n# Install the system dependencies for default installation \n##############################################################\n\nRUN apt-get update -y && \\\n    apt-get install -y build-essential && \\\n    apt-get install -y maven git python cmake software-properties-common curl libstdc++6 && \\\n    apt-get install -y git && \\\n    apt-get install -y wget && \\\n    apt-get install -y python2.7-dev && \\\n    apt-get install -y python-pip && \\\n    apt-get install -y ipython && \\\n    apt-get install -y libffi-dev && \\\n    apt-get install -y libssl-dev && \\\n    apt-get install -y libxml2-dev && \\\n    apt-get install -y libxslt1-dev && \\\n    apt-get install -y libpng12-dev && \\\n    apt-get install -y libfreetype6-dev && \\\n    apt-get install -y python-tk && \\\n    apt-get install -y libsasl2-dev && \\\n    apt-get install -y python-pip && \\\n    apt-get install -y graphviz && \\\n    pip install --upgrade pip && \\\n    apt-get clean\n\nRUN pip install virtualenvwrapper\n\n# Install Oracle JDK\nRUN add-apt-repository ppa:webupd8team/java -y && \\\n    apt-get -qq update && \\\n    echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \\\n    echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections && \\\n    apt-get install -y oracle-java8-installer    \n\n\n##############################################################\n# Install Apache Spark\n#\n# Uncomment if you are using spark, note that is needed the \n# spark configuration files to the think works correctly.\n##############################################################\n\nRUN mkdir -p $SPARK_CONF_DIR\n\n##############################################################\n# Create the virtualenv configuration\n##############################################################\n\nRUN /bin/bash -c \"cd $MARVIN_ENGINE_HOME && \\\n    source /usr/local/bin/virtualenvwrapper.sh && \\\n    mkvirtualenv $MARVIN_ENGINE_ENV\"\n\n\n##############################################################\n#        <CUSTOM ENGINE INSTALLATION PROCEDURE HERE>         #\n##############################################################\n\n\n##############################################################\n# Copy and Install the marvin engine inside virtualenv\n##############################################################\n\nADD build/engine.tar $MARVIN_ENGINE_HOME\n\nADD build/marvin-engine-executor-assembly.jar $MARVIN_DATA_PATH \n\nRUN /bin/bash -c \"source /usr/local/bin/virtualenvwrapper.sh && \\\n    workon $MARVIN_ENGINE_ENV && \\\n    cd $MARVIN_ENGINE_HOME && \\\n    pip install . --process-dependency-links\"\n\n\n##############################################################\n# Starts the engine http server\n##############################################################\n\nEXPOSE 8000\n\nCMD /bin/bash -c \"source /usr/local/bin/virtualenvwrapper.sh && \\\n    workon $MARVIN_ENGINE_ENV && \\\n    cd $MARVIN_ENGINE_HOME && \\\n    marvin engine-httpserver -h 0.0.0.0 -p 8000\""
    },
    {
        "filename": "4f381a40259ec38b77c681e73c95cf7022ae5525.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM rpy2/rpy2:latest\n\nMAINTAINER Laurent Gautier <lgautier@gmail.com>\n\nARG DEBIAN_FRONTEND=noninteractive\n\nUSER root\n\n# Installing nodejs and npm is somewhat convoluted.\nRUN \\\n  apt-get update -qq && \\\n  apt-get install -y curl && \\\n  apt-get remove -y --purge nodejs npm && \\\n  curl -sL https://deb.nodesource.com/setup_11.x | bash - && \\\n  apt-get install -y nodejs && \\\n  wget -O - https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n  apt-get update -qq && \\\n  sudo apt-get install -y yarn && \\\n  rm -rf /var/lib/apt/lists/*\n\nUSER ${NB_USER}\n\n# note: installing ipywidgets requires a follow-up \"jupyter nbextension enable\" \nRUN \\\n  npm install -g configurable-http-proxy && \\\n  pip3 --no-cache-dir install jupyter notebook && \\\n  pip3 --no-cache-dir install jupyterlab && \\\n  jupyter serverextension enable --py jupyterlab --sys-prefix && \\\n  pip3 --no-cache-dir install bokeh && \\\n  pip3 --no-cache-dir install ipywidgets && \\\n  jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n  jupyter labextension install @jupyter-widgets/jupyterlab-manager && \\\n  pip3 --no-cache-dir install jupyterhub && \\\n  rm -rf /root/.cache\n\nENV SHELL /bin/bash\nENV NB_USER jupyteruser\nENV HOME /home/${NB_USER}\nENV NB_UID 1000\n\n# Create user\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER\n\n# Grant sudo rights to install packages\nRUN echo ${NB_USER} 'ALL=(ALL) NOPASSWD: /usr/bin/apt-get' >> /etc/sudoers\n\n# Add Tini\nARG TINI_VERSION=v0.15.0\nRUN wget --quiet https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\nUSER $NB_USER\n\n# Setup  home directory and notebook config\nRUN mkdir /home/$NB_USER/work && \\\n    mkdir /home/$NB_USER/.jupyter && \\\n    mkdir /home/$NB_USER/.local && \\\n    echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc && \\\n    echo \"c.NotebookApp.ip = '0.0.0.0'\" >> /home/$NB_USER/.jupyter/jupyter_notebook_config.py && \\\n    python3.6 -m venv /home/$NB_USER/py36_env && \\\n    echo \"source /home/$NB_USER/py36_env/bin/activate\" >> /home/$NB_USER/.bashrc && \\\n    echo \"echo Python virtual environment activated. Write \\\"deactivate\\\" to exit it.\" >> /home/$NB_USER/.bash\n\nUSER root\n\nWORKDIR ${HOME}\n\nEXPOSE 8888\n\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Add Jupyter script(s) emerging as ad hoc interface\nRUN \\\n  git clone --depth=1 https://github.com/jupyter/docker-stacks.git && \\\n  cd docker-stacks/base-notebook && \\\n  cp start.sh /usr/local/bin/ && \\\n  cp start-notebook.sh /usr/local/bin/ && \\\n  cp start-singleuser.sh /usr/local/bin/ && \\\n  mkdir -p /etc/jupyter/ && \\\n  cp jupyter_notebook_config.py /etc/jupyter/ && \\\n  chown -R \"${NB_USER}\":users /etc/jupyter/ && \\\n  cd ../../ && \\\n  rm -rf docker-stacks\n\nUSER $NB_USER"
    },
    {
        "filename": "5026f58d27e9dfab768b55bf62fbc163fcc63640.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,apt-install-without-version",
        "num": 7,
        "text": "FROM debian:latest as builder\n\nCOPY . /app\nWORKDIR /app\nRUN apt-get update && apt-get -y upgrade && apt-get install -y libssl-dev build-essential && gcc src/*.c -lssl -lcrypto -o rdpscan\n\nFROM gcr.io/distroless/cc\nCOPY --from=builder /app/rdpscan /app/rdpscan\nENTRYPOINT [\"/app/rdpscan\"]\n"
    },
    {
        "filename": "502e489f18457d18ec0df8edae273e404e9184c0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jetbrains/teamcity-agent:latest\nMAINTAINER iclientpy@supermap.com\n\nADD sources.list.16.04.tsinghua /etc/apt/sources.list\n\nADD pip.conf /root/.pip/pip.conf\n\nRUN apt-get update --fix-missing && apt-get install -y bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git mercurial subversion\n\nRUN curl http://172.17.0.1:8080/Anaconda3-5.1.0-Linux-x86_64.sh -o ~/anaconda.sh && \\\n    /bin/bash ~/anaconda.sh -b -p /opt/conda && \\\n    rm ~/anaconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh\n\t\nRUN . /opt/conda/etc/profile.d/conda.sh && conda activate base \\\n    && conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ \\\n    && conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ \\\n    && conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ \\\n    && conda config --set show_channel_urls yes \\\n    && conda install -y pyinstaller ipython conda-build=3.0.27 sphinx==1.7.2 coverage \\\n\t&& pip install teamcity-messages\n\t\nRUN apt-get update \\\n&& apt-get install -y nodejs npm \\\n&& apt-get autoclean \\\n&& apt-get autoremove\n\nRUN ln -s /usr/bin/nodejs /usr/bin/node \\\n&& npm config set registry https://registry.npm.taobao.org \nRUN npm install -g n \\\n&& n stable \\\n&& npm update npm -g\n"
    },
    {
        "filename": "5044193a888be822991fc11696c0c848a64532c7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM kalilinux/kali-linux-docker:latest\n\nLABEL Viyat Bhalodia viyat.bhalodia@owasp.org\n\n# Bypass confirmations\nENV DEBIAN_FRONTEND noninteractive\n\n# Fix for exporting a SHELL variable in the environment\nENV TERM xterm\nENV SHELL /bin/bash\n\n# Flush the buffer for stderr, stdout logging\nENV PYTHONUNBUFFERED 1\n# Python won\u2019t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Needed for installation of pycurl using pip in kali\nENV PYCURL_SSL_LIBRARY openssl\n\n# Install dependencies\nRUN apt-get -y update && apt-get clean\nRUN apt-get -y install  xvfb xserver-xephyr libxml2-dev libxslt-dev libssl-dev zlib1g-dev gcc python-all-dev \\\n                        python-pip postgresql-server-dev-all postgresql-client postgresql-client-common \\\n                        postgresql libcurl4-openssl-dev proxychains tor ca-certificates libpq-dev python-dev \\\n                        libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev libffi-dev net-tools lsof locales-all \\\n                        libyaml-dev\n\n# Set locale\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n  locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Install optional tools (LBD, arachni, gnutls-bin, o-saft and metagoofil)\nRUN apt-get -y install  lbd arachni theharvester tlssled nikto dnsrecon nmap whatweb skipfish dirbuster \\\n                        metasploit-framework wpscan wapiti hydra metagoofil o-saft\n\n# Ensure pip and setuptools are at their latest versions\nRUN pip install setuptools --upgrade\nRUN pip install pip --upgrade\nRUN pip install cffi\n\n# Install and create a Python virtualenv\nRUN pip install virtualenv && virtualenv ~/.venv/owtf && . ~/.venv/owtf/bin/activate\n\n# Create a dedicated OWTF directory to copy source to and run from.\nRUN cd / && /bin/mkdir -p owtf\nADD . /owtf\nADD docker/wait-for-it.sh /usr/bin/wait-for-it.sh\nRUN chmod +x /usr/bin/wait-for-it.sh\n\n# Copy the configuration file intended for the Docker environment\nRUN cp -f /owtf/docker/default.settings.py /owtf/owtf/settings.py\n\n# Install OWTF using the recommended method (setup.py)\nRUN cd /owtf &&\\\n  python setup.py develop\n\n# Set the current working directory to OWTF root directory\nWORKDIR /owtf\n\n# Expose the required ports for OWTF to run\nEXPOSE 8008 8009 8010\n"
    },
    {
        "filename": "7ac3395fd4d43218bb67860630b6535a41a3e4bd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#conpot\n#start with ubuntu\nFROM ubuntu:latest\n\nMAINTAINER Spenser Reinhardt\nENV DEBIAN_FRONTEND noninteractive\nENV logfile /var/log/install.log\n\n#apt-get sources\nRUN sed -i '1ideb mirror://mirrors.ubuntu.com/mirrors.txt trusty main restricted universe multiverse'     /etc/apt/sources.list && \\\nsed -i '1ideb mirror://mirrors.ubuntu.com/mirrors.txt trusty-updates main restricted universe multiverse' /etc/apt/sources.list && \\\nsed -i '1ideb mirror://mirrors.ubuntu.com/mirrors.txt trusty-backports main restricted universe multiverse' /etc/apt/sources.list && \\\nsed -i '1ideb mirror://mirrors.ubuntu.com/mirrors.txt trusty-security main restricted universe multiverse' /etc/apt/sources.list\n\n#dependencies\nRUN apt-get update && \\\napt-get install git-core python python-dev libmysqlclient-dev libxslt1-dev libsmi2ldbl snmp-mibs-downloader -y && \\\napt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#Build here\nRUN cd /opt/ && \\\ngit clone https://github.com/glastopf/conpot.git && \\\ncd conpot/ && \\\npython setup.py install\n\n#Add config\nADD conpot.cfg /opt/conpot/conpot.cfg\n\nEXPOSE 80 102 161 503\nWORKDIR /opt/conpot\nVOLUME /opt/conpot/var/\nENTRYPOINT [\"/usr/bin/python\"]\nCMD [\"/opt/conpot/bin/conpot\", \"-c\", \"/opt/conpot/conpot.cfg\", \"-t\", \"/opt/conpot/conpot/templates/default/\", \"-l\", \"/opt/conpot/var/conpot.log\"]\n"
    },
    {
        "filename": "7ba1b475120f975ef06b58c89689345fcadf50f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM debian:jessie\n\nMAINTAINER Umputun\n\n#install basic packages\nRUN \\\n apt-get update && apt-get upgrade -y --no-install-recommends && \\\n apt-get install python-pip python-dev monit curl mysql-client inotify-tools apt-transport-https -y -qq && \\\n apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D && \\\n echo \"deb https://apt.dockerproject.org/repo debian-jessie main\" > /etc/apt/sources.list.d/docker.list && \\\n apt-get update -qq && apt-get install -qqy docker-engine && \\\n easy_install -U pip && \\\n pip install plumbum pymongo awscli pytz beautifulsoup4 && \\\n pip install --upgrade httpie && \\\n apt-get autoremove -y && apt-get clean && \\\n rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n rm -rf /var/lib/{apt,dpkg,cache,log}\n\n\nENV VERSION 5.14\n\n#install fresh monit\n#ADD https://mmonit.com/monit/dist/binary/${VERSION}/monit-${VERSION}-linux-x64.tar.gz /tmp/monit-${VERSION}-linux-x64.tar.gz\nCOPY dist/monit-$VERSION-linux-x64.tar.gz /tmp/monit-$VERSION-linux-x64.tar.gz\nRUN \\\n cd tmp && tar -zxf monit-$VERSION-linux-x64.tar.gz && \\\n cp -f /tmp/monit-$VERSION/bin/monit /usr/bin/monit && \\\n ln -s /etc/monit/monitrc /etc/monitrc\n\n\n#install jq, xml2json, link httpie\nADD http://stedolan.github.io/jq/download/linux64/jq /usr/bin/jq\nRUN \\\n chmod +x /usr/bin/jq && \\\n ln -s /usr/local/bin/http /usr/bin/http && \\\n pip install https://github.com/hay/xml2json/zipball/master\n\n#to access other containers on the host\nENV DOCKER_HOST unix:///var/run/docker.sock\n\n#copy common monit config and srcipts\nADD conf/ /srv/monit/conf.d/\nADD scripts /srv/monit/scripts\n\nADD start.sh /srv/monit/start.sh\nADD monit.sh /srv/monit/monit.sh\n\nEXPOSE 9009\nVOLUME [\"/etc/monit/conf.d\",  \"/var/log/monit\", \"/srv/monit\", \"/hostsrv\", \"/hostroot\",]\n\nCMD [\"/srv/monit/start.sh\"]\n"
    },
    {
        "filename": "7f1a1442413939fd8ec4be694af82fc943b10e9c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM python:latest\nMAINTAINER Federico Gonzalez (https://github.com/fedeg/)\n\nRUN apt-get update \\\n && apt-get --force-yes install -y curl vim exuberant-ctags git ack-grep vim-nox \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN pip install pep8 flake8 pyflakes isort yapf\n\nADD config/.vimrc /root/.vimrc\nRUN timeout 5m vim || true\n\nCMD [\"vim\", \"/src\"]\n"
    },
    {
        "filename": "7f87cd392c5a3756406c6b80e49340fea5c5f4c1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM cloud9/workspace\nMAINTAINER Cloud9 IDE, inc. <info@c9.io>\n\nADD ./files/home /home/ubuntu\n\nRUN bash -c 'chmod -R g+w /home/ubuntu/{workspace,sessions} && \\\n    chown -R ubuntu:ubuntu /home/ubuntu/{workspace,sessions}'\n\n# PHP based on defaults from\n#   http://docs.travis-ci.com/user/ci-environment/#Extensions\n#   https://devcenter.heroku.com/articles/php-support\n# Xdebug, most recent PECL version\nADD ./files/etc/php5 /etc/php5\nRUN apt-get update || apt-get update\nRUN apt-get install -y php5 php5-cli php5-fpm \\\n        php5-curl php5-gd php5-json php5-pgsql php5-readline php5-sqlite \\\n        php5-tidy php5-xmlrpc php5-xsl php5-intl php5-mcrypt php5-mysqlnd \\\n        php-pear \\\n    && apt-get install -y php5-dev \\\n        && pecl install xdebug \\\n        && php5enmod xdebug \\\n    && cd /etc/php5/mods-available && ls *.ini | sed 's/\\.ini$//' | xargs php5enmod\nRUN chown -R ubuntu: /home/ubuntu/lib\n\nADD ./files/check-environment /.check-environment/php\n"
    },
    {
        "filename": "8094d177494eafadc45ce87f882262e95111d385.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest  \n  \nMAINTAINER devlee <devlee@outlook.com>  \n  \nRUN apt-get update; \\  \napt-get -y upgrade  \n  \nRUN apt-get -y install git nodejs  \n  \nRUN mkdir /home/git; \\  \ncd /home/git; \\  \nsudo git clone https://github.com/devlee/resume.git -b master  \n  \nWORKDIR /home/git/resume  \n  \nEXPOSE 8180  \nCMD [\"/usr/bin/nodejs\",\"server.js\"]\n\n"
    },
    {
        "filename": "81c68f3bb9280441514744ac285b27215d447947.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM python:3.4  \nMAINTAINER Levi Bostian <levi@curiosityio.com>  \n  \n# Install dependencies  \nRUN \\  \napt-get update -qq && \\  \napt-get install -y netcat && \\  \nrm -rf /var/lib/apt/lists/* && \\  \npip install circus gunicorn taiga-contrib-gogs taiga-contrib-slack  \n  \n# Install taiga-back  \nRUN \\  \nmkdir -p /usr/local/taiga && \\  \nuseradd -d /usr/local/taiga taiga && \\  \nmkdir /usr/local/taiga/media /usr/local/taiga/static /usr/local/taiga/logs  \n  \nCOPY taiga-back/ /usr/local/taiga/taiga-back  \n  \nRUN \\  \ncd /usr/local/taiga/taiga-back && \\  \npip install -r requirements.txt && \\  \ntouch /usr/local/taiga/taiga-back/settings/dockerenv.py && \\  \ntouch /usr/local/taiga/circus.ini  \n  \n# Add Taiga Configuration  \nADD ./local.py /usr/local/taiga/taiga-back/settings/local.py  \n  \n# Configure and Start scripts  \nCOPY checkdb.py /checkdb.py  \nADD ./configure /usr/local/taiga/configure  \nADD ./start /usr/local/taiga/start  \nRUN chmod +x /usr/local/taiga/configure /usr/local/taiga/start  \n  \nVOLUME /usr/local/taiga/media  \nVOLUME /usr/local/taiga/static  \nVOLUME /usr/local/taiga/logs  \n  \nENV TAIGA_DB_NAME taiga  \nENV TAIGA_DB_USER postgres  \nENV TAIGA_DB_HOST postgres  \n  \nEXPOSE 8000  \nCMD [\"/usr/local/taiga/start\"]  \n\n"
    },
    {
        "filename": "8264c69b3e2b62a4646fb590e0f05b5c6e997a02.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM cptobvious/go-ethereum-base\n\n# Buildslave dependencies\nRUN apt-get install --fix-missing -y python-pip python-dev supervisor inotify-tools\n\n# Clone latest buildbot\nRUN git clone https://github.com/buildbot/buildbot.git\n\n# Install buildbot\nRUN cd buildbot && git checkout eight && pip install -e slave\nRUN pip install pip-tools requests\n# RUN pip-review -a\n\n# Create buildslave\nRUN buildslave create-slave -r -l 3 -s 512000 slave build.ethdev.com:9989 dockerslave pass\n# Add manually set buildslave config, use .sample file or previously created buildslave config\nADD buildbot.tac slave/buildbot.tac\n\n# Set slave/info/admin and slave/info/host\nRUN echo \"caktux <caktux@gmail.com>\" > slave/info/admin\nRUN echo `lsb_release -ds` > slave/info/host\n\n# Setup supervisord\nRUN /bin/echo -e \"[supervisord]\\n\\\nnodaemon=true\\n\\\n\\n\\\n[program:buildslave]\\n\\\ndirectory=/slave\\n\\\nuser=root\\n\\\ncommand=twistd --nodaemon --no_save -y buildbot.tac\" > /etc/supervisor/conf.d/buildbot.conf\n\n# CMD [\"start\", \"slave\"]\n# ENTRYPOINT [\"buildslave\"]\nCMD [\"-n\", \"-c\", \"/etc/supervisor/conf.d/buildbot.conf\"]\nENTRYPOINT [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "82bff4d10fe5e7568e234ef748117eeda86af02e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM kaixhin/torch:latest\nRUN apt-get install -y git wget libprotobuf-dev protobuf-compiler libhdf5-serial-dev hdf5-tools python-setuptools python-dev\nRUN cd / ; git clone https://github.com/karpathy/neuraltalk2.git\nRUN luarocks install loadcaffe\n#here CUDA toolkit is not intalled since I don't have a GPU to test it on, see this Dockerfile for examples https://hub.docker.com/r/halo9pan/cuda/~/dockerfile/\n#RUN luarocks install cutorch\nRUN cd / ; git clone https://github.com/deepmind/torch-hdf5.git\nRUN cd /torch-hdf5/ && luarocks make hdf5-0-0.rockspec LIBHDF5_LIBDIR=\"/usr/lib/x86_64-linux-gnu/\"\nRUN easy_install pip && pip install h5py\nRUN curl https://deb.nodesource.com/setup_5.x|sh -\nRUN apt-get install -y nodejs\nADD webapp /webapp\nADD README.md /webapp/README.md\nRUN cd /webapp && /usr/bin/npm install\nCMD [\"/usr/bin/node\",\"/webapp/index.js\"]\nWORKDIR /webapp\n"
    },
    {
        "filename": "8352e9036ce5de243c00e6c485bb8236d2ae0c8a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# MySQL Server with Apache and phpmyadmin\n#\n# VERSION               0.0.1\n\nFROM     ubuntu:latest\nMAINTAINER Jonas Colmsj\u00f6 \"jonas@gizur.com\"\n\n\n# Keep upstart from complaining\n#RUN dpkg-divert --local --rename --add /sbin/initctl\n#RUN ln -s /bin/true /sbin/initctl\n\nRUN apt-get update\n\n\n#\n# Install supervidord (used to handle processes)\n#\n\nRUN apt-get install -y supervisor\nADD ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n\n#\n# Install Apache and PHP\n#\n\nRUN apt-get install -y apache2 php5 php5-curl php5-mysql php5-mcrypt\nRUN a2enmod rewrite\n\n# Bundle everything and install\nADD ./src-phpmyadmin /var/www/html\nADD ./conf/etc /etc\n\nRUN cd /var/www/html; tar -xzf phpMyAdmin-4.0.8-all-languages.tar.gz\n#RUN rm /var/www/index.html\n\nADD ./src-phpmyadmin/config.inc.php /var/www/html/phpMyAdmin-4.0.8-all-languages/config.inc.php\n\n\n#\n# Install Wordpress\n#\n\nADD ./src-wordpress /var/www\n\n\n#\n# Install MySQL\n#\n\n# Bundle everything\nADD ./src-mysql /src-mysql\n\n# Load wordpress SQL dump\nADD ./sql-script/latest.sql /sql-script/latest.sql\n\n# Install MySQL server\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Fix configuration\nRUN sed -i -e\"s/^bind-address\\s*=\\s*127.0.0.1/bind-address = 0.0.0.0/\" /etc/mysql/my.cnf\n\n# Setup admin user\nRUN /src-mysql/mysql-setup.sh\n\nEXPOSE 3306 80 443\nCMD [\"supervisord\",\"-n\"]\n"
    },
    {
        "filename": "525bbf2a93d321c641f54615fc2d0496efa343c8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM osrg/dind-ubuntu-vivid\nMAINTAINER Akihiro Suda <suda.akihiro@lab.ntt.co.jp>\n\n# Install OVS\nRUN apt-get update && apt-get install -y openvswitch-switch\n\n# Install Python packages\nRUN bash -c 'apt-get install -y python-{colorama,dev,eventlet,lxml,msgpack,netaddr,networkx,oslo.config,paramiko,pip,routes,six,webob}'\n\n# Install Ryu\nRUN pip install ryu\n\n# Install pipework\nRUN apt-get install -y arping\nRUN wget --no-check-certificate --quiet https://raw.githubusercontent.com/jpetazzo/pipework/master/pipework -O /usr/local/bin/pipework\nRUN chmod +x /usr/local/bin/pipework\n\n# Install misc useful stuffs\nRUN apt-get install -y less lv netcat telnet bash-completion vim byobu\n\n# Install init\nADD ./init.dind-ovs-ryu.sh /init.dind-ovs-ryu.sh\nRUN chmod +x /init.dind-ovs-ryu.sh\nCMD [\"wrapdocker\", \"/init.dind-ovs-ryu.sh\"]\n"
    },
    {
        "filename": "5365a767b6159d0ed53dff651e9a3881413cd58b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Mike Chaliy <mike@chaliy.name>\n\nRUN set -ex \\\n  && apt-get update \\\n  && apt-get upgrade -y \\\n  && apt-get install -y wget openssl libev-dev build-essential make wget bzip2\n\nRUN  set -ex \\\n  && wget http://prdownloads.sourceforge.net/sbcl/sbcl-1.3.6-x86-64-linux-binary.tar.bz2 -O /tmp/sbcl.tar.bz2 \\\n  && mkdir /tmp/sbcl \\\n  && tar jxvf /tmp/sbcl.tar.bz2 --strip-components=1 -C /tmp/sbcl/ \\\n  && cd /tmp/sbcl \\\n  && sh install.sh \\\n  && cd /tmp \\\n  && rm -rf /tmp/sbcl/\n\nRUN  set -ex \\\n && wget https://beta.quicklisp.org/quicklisp.lisp \\\n && sbcl --non-interactive --load /quicklisp.lisp --eval \"(quicklisp-quickstart:install)\" \\\n && sbcl --non-interactive --eval '(with-open-file (out \"/root/.sbclrc\" :direction :output)(format out \"(load \\\"/root/quicklisp\\/setup.lisp\\\")\"))'\n\nADD . /wiki-lang-detect\n\nRUN  set -ex \\\n && sbcl --non-interactive --load /wiki-lang-detect/init.lisp\n\nEXPOSE 5000\nCMD sbcl --non-interactive --load /wiki-lang-detect/run.lisp\n"
    },
    {
        "filename": "55d3290cbbda9aa1ebf76dcf3c78421f4688908c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:18.04\nMAINTAINER elvis@magic.io\n\nRUN DEBIAN_FRONTEND=noninteractive \\\n        apt-get update && apt-get install -y \\\n            language-pack-en\n\nENV LANG en_US.UTF-8\nENV WORKON_HOME /usr/local/python-venvs\nENV GOMAXPROCS 1\n\nRUN mkdir -p /usr/local/python-venvs\nRUN mkdir -p /usr/go/\nENV GOPATH /usr/go/\n\nRUN DEBIAN_FRONTEND=noninteractive \\\n        apt-get update && apt-get install -y \\\n            autoconf automake libtool build-essential \\\n            python3 python3-pip git nodejs golang gosu\n\nRUN pip3 install vex\nRUN vex --python=python3 -m bench pip install -U pip\nRUN mkdir -p /var/lib/cache/pip\n\nADD servers /usr/src/servers\nRUN cd /usr/src/servers && go build goecho.go && \\\n        go get github.com/golang/groupcache/lru && go build gohttp.go\nRUN vex bench pip --cache-dir=/var/lib/cache/pip \\\n        install -r /usr/src/servers/requirements.txt\n\nRUN vex bench pip freeze -r /usr/src/servers/requirements.txt\n\nEXPOSE 25000\n\nVOLUME /var/lib/cache\nVOLUME /tmp/sockets\n\nENTRYPOINT [\"/entrypoint\"]\n\nADD entrypoint /entrypoint\n"
    },
    {
        "filename": "5622fb0dd963fee542a8d8f6d95f4dce0111d18a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "# images\nFROM ubuntu:latest\n\n# source files\nADD . /opt/crawlab\n\n# set as non-interactive\nENV DEBIAN_FRONTEND noninteractive\n\n# environment variables\nENV NVM_DIR /usr/local/nvm  \nENV NODE_VERSION 8.12.0\nENV WORK_DIR /opt/crawlab\n\n# install pkg\nRUN apt-get update \\\n\t&& apt-get install -y curl git net-tools iputils-ping ntp nginx python3 python3-pip \\\n\t&& apt-get clean \\\n\t&& cp $WORK_DIR/crawlab.conf /etc/nginx/conf.d \\\n\t&& ln -s /usr/bin/pip3 /usr/local/bin/pip \\\n\t&& ln -s /usr/bin/python3 /usr/local/bin/python\n\n# install nvm\nRUN curl https://raw.githubusercontent.com/creationix/nvm/v0.24.0/install.sh | bash \\  \n    && . $NVM_DIR/nvm.sh \\\n    && nvm install v$NODE_VERSION \\\n    && nvm use v$NODE_VERSION \\\n    && nvm alias default v$NODE_VERSION\nENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules  \nENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n\n# install frontend\nRUN npm install -g yarn \\\n\t&& cd /opt/crawlab/frontend \\\n\t&& yarn install\n\n# install backend\nRUN pip install -U setuptools \\\n\t&& pip install -r /opt/crawlab/crawlab/requirements.txt\n\n# start backend\nEXPOSE 8080\nEXPOSE 8000\nWORKDIR /opt/crawlab\nENTRYPOINT [\"/bin/sh\", \"/opt/crawlab/docker_init.sh\"]"
    },
    {
        "filename": "5b9487f7a62807fccd080c3e763d5e2d2eb401cc.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest \n\nMAINTAINER Avgerinos Christos <christosavg@gmail.com>\n\n#ARG GT_DIR\n#ARG TEST_DIR\n\nRUN apt-get update \\\n  && apt-get install -y python3-pip python3-dev vim \\\n  && cd /usr/local/bin \\\n  && ln -s /usr/bin/python3 python \\\n  && pip3 install --upgrade pip\n\nRUN pip3 install --no-cache-dir numpy scipy\nRUN pip install -Iv pandas==0.21.0\nRUN mkdir -p /motmetrics/py-motmetrics\nRUN mkdir -p /motmetrics/2DMOT2015\n\nCOPY ./py-motmetrics /motmetrics/py-motmetrics\nCOPY ./data /motmetrics/data\n\n#RUN pip install motmetrics\nRUN pip install -e ./motmetrics/py-motmetrics/\n\n#RUN pip install -r motmetrics/py-motmetrics/requirements.txt\n\nENV GT_DIR motmetrics/data/train/\nENV TEST_DIR motmetrics/data/test/\n\n#ENTRYPOINT python3 -m motmetrics.apps.eval_motchallenge motmetrics/data/train/ motmetrics/data/test/ && /bin/bash\nCMD [\"sh\", \"-c\", \"python3 -m motmetrics.apps.eval_motchallenge ${GT_DIR} ${TEST_DIR} && /bin/bash\"]\n\n"
    },
    {
        "filename": "5bde2f455253e7cb3312f9ea70bb71d41b9fb5fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG BASE_IMAGE=\"library/ubuntu:16.04\"\n\nFROM $BASE_IMAGE\n\nENV LANG=\"en_US.UTF-8\" \nENV LANGUAGE=en_US\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -y && \\\n    apt-get install -y locales && \\\n    locale-gen en_US.UTF-8 && \\\n    locale-gen en_US && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=$LANG\n\nRUN apt-get update -y && \\\n    apt-get install -y  wget \\\n                        vim \\\n                        xterm \\\n                        pulseaudio \\\n                        cups \\\n                        curl \\\n                        libgconf2-4 \\\n                        libnss3-dev \\\n                        libxss1 \\\n                        xdg-utils \\\n                        libpango1.0-0 \\\n                        fonts-liberation \\\n                        g++ \\\n                        git \\\n                        python \\\n                        sudo\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python - && \\\n    pip install --upgrade pip flask\n\nARG GUI_ENV=\"xfce4 xfce4-xkb-plugin\"\nRUN apt-get update -y && \\\n    apt-get install -y ${GUI_ENV}              \n\nRUN cd /opt && \\\n    wget -q \"https://s3.amazonaws.com/cloud-pipeline-oss-builds/tools/nomachine/nomachine_6.5.6_9_amd64.deb\" -O nomachine.deb && \\\n    dpkg -i nomachine.deb && \\\n    rm -f nomachine.deb\n\nRUN wget -q \"https://s3.amazonaws.com/cloud-pipeline-oss-builds/tools/nomachine/scramble_alg.cpp\" -O /usr/local/bin/scramble.cpp && \\\n    g++ /usr/local/bin/scramble.cpp -o /usr/local/bin/scramble && \\\n    rm -f /usr/local/bin/scramble.cpp\n\nADD serve_nxs.py /etc/nomachine/serve_nxs.py\nADD template.nxs /etc/nomachine/template.nxs\nADD xfce/ /etc/nomachine/xfce/\nRUN mv /etc/nomachine/xfce/.config/xfce4/panel/xkb-plugin.rc /etc/nomachine/xfce/.config/xfce4/panel/xkb-plugin-9.rc\n\n# If it's ubuntu 18 - use xkb instead of xkb-plugin\n# This magic string is like [[ \"$BASE_IMAGE\" == *\"18.\"* ]] but more general and will execute correctly with older shells\nRUN if [ -z \"${BASE_IMAGE##*18.*}\" ]; then \\\n        sed -i 's@_XKB_PLUGIN_NAME_@xkb@g' /etc/nomachine/xfce/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml ; \\\n    else \\\n        sed -i 's@_XKB_PLUGIN_NAME_@xkb-plugin@g' /etc/nomachine/xfce/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml ; \\\n    fi\nRUN sed -i 's@_XKB_PLUGIN_ID_@9@g' /etc/nomachine/xfce/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml\n\nADD nomachine_launcher.sh /etc/nomachine/nomachine_launcher.sh\n\nADD ubuntu/scripts/libreoffice.sh /opt/libreoffice.sh\nRUN chmod +x /opt/libreoffice.sh && /opt/libreoffice.sh && rm -f /opt/libreoffice.sh\n\n# Install Chrome\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list && \\\n    apt-get update && \\\n    apt-get install -y google-chrome-stable\n\n# Add Chrome desktop icon\nADD create_chrome_launcher.sh /caps/create_chrome_launcher.sh\nRUN echo \"bash /caps/create_chrome_launcher.sh\" >> /caps.sh\n"
    },
    {
        "filename": "674a39ef1f52e3ba32dfa13eabfe3be1a888d90f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# AUTHOR:           Nicholas Long\n# DESCRIPTION:      OpenStudio Server Docker Container\n# TO_BUILD_AND_RUN: docker-compose up\n# NOTES:            Currently this is one big dockerfile and non-optimal.\n\n#may include suffix\nARG OPENSTUDIO_VERSION\nFROM nrel/openstudio:$OPENSTUDIO_VERSION as base\nMAINTAINER Nicholas Long nicholas.long@nrel.gov\n\n# Install required libaries.\n#   realpath - needed for wait-for-it\nRUN sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \\\n    echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse\" | \\\n    sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list && \\\n    apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n        apt-transport-https \\\n        autoconf \\\n        bison \\\n        build-essential \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        default-jdk \\\n        dos2unix \\\n        imagemagick \\\n        gdebi-core \\\n        git \\\n        libbz2-dev \\\n        libcurl4-openssl-dev \\\n        libdbus-glib-1-2 \\\n        libgdbm3 \\\n        libgdbm-dev \\\n        libglib2.0-dev \\\n        libglu1 \\\n        libgsl0-dev \\\n        libncurses-dev \\\n        libreadline-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        libffi-dev \\\n        libssl-dev \\\n        libyaml-dev \\\n        libice-dev \\\n        libsm-dev \\\n        mongodb-org-tools \\\n        procps \\\n        realpath \\\n        tar \\\n        unzip \\\n        wget \\\n        zip \\\n        zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install passenger (this also installs nginx)\nENV PASSENGER_VERSION 5.0.25\n# Install Rack. Silly workaround for not having ruby 2.2.2. Rack 1.6.4 is the\n# latest for Ruby <= 2.0\nRUN gem install rack -v=1.6.4\nRUN gem install passenger -v $PASSENGER_VERSION\nRUN passenger-install-nginx-module\n\n# Configure the nginx server\nRUN mkdir /var/log/nginx\nADD /docker/server/nginx.conf /opt/nginx/conf/nginx.conf\n\n# Radiance env vars. RUBYLIB is set in the base openstudio container\nENV OPENSTUDIO_SERVER 'true'\nENV OS_RAYPATH /usr/local/openstudio-$OPENSTUDIO_VERSION/Radiance\nENV PERL_EXE_PATH /usr/bin\n\n# Specify a couple arguments here, after running the majority of the installation above\nARG rails_env=docker\nARG bundle_args=\"--without development test\"\n\n# Set the rails env var\nENV RAILS_ENV $rails_env\n\n#### OpenStudio Server Code\n# First upload the Gemfile* so that it can cache the Gems -- do this first because it is slow\nADD /bin /opt/openstudio/bin\nADD /server/Gemfile /opt/openstudio/server/Gemfile\nWORKDIR /opt/openstudio/server\nRUN bundle _${OS_BUNDLER_VERSION}_ install --jobs=3 --retry=3 $bundle_args\n\n# Add the app assets and precompile assets. Do it this way so that when the app changes the assets don't\n# have to be recompiled everytime\nADD /server/Rakefile /opt/openstudio/server/Rakefile\nADD /server/config/ /opt/openstudio/server/config/\nADD /server/app/assets/ /opt/openstudio/server/app/assets/\n\n# Now call precompile\nRUN mkdir /opt/openstudio/server/log\nRUN bundle exec rake assets:precompile\n\n# Bundle app source\nADD /server /opt/openstudio/server\nADD .rubocop.yml /opt/openstudio/.rubocop.yml\n# Run bundle again, because if the user has a local Gemfile.lock it will have been overriden\nRUN rm Gemfile.lock\nRUN bundle install --jobs=3 --retry=3\n\n# Configure IPVS keepalive\nADD /docker/server/ipvs-keepalive.conf /etc/sysctl.d/ipvs-keepalive.conf\nRUN sudo sysctl --system\n\n# Add in scripts for running server. This includes the wait-for-it scripts to ensure other processes (mongo, redis) have\n# started before starting the main process.\nCOPY /docker/server/wait-for-it.sh /usr/local/bin/wait-for-it\nCOPY /docker/server/start-server.sh /usr/local/bin/start-server\nCOPY /docker/server/run-server-tests.sh /usr/local/bin/run-server-tests\nCOPY /docker/server/rails-entrypoint.sh /usr/local/bin/rails-entrypoint\nCOPY /docker/server/start-web-background.sh /usr/local/bin/start-web-background\nCOPY /docker/server/start-workers.sh /usr/local/bin/start-workers\nCOPY /docker/server/memfix-controller.rb /usr/local/lib/memfix-controller.rb\nCOPY /docker/server/memfix.rb /usr/local/lib/memfix.rb\nRUN chmod 755 /usr/local/bin/wait-for-it\nRUN chmod +x /usr/local/bin/start-server\nRUN chmod +x /usr/local/bin/run-server-tests\nRUN chmod 755 /usr/local/bin/rails-entrypoint\nRUN chmod 755 /usr/local/bin/start-web-background\nRUN chmod 755 /usr/local/bin/start-workers\nRUN chmod +x /usr/local/lib/memfix-controller.rb\nRUN chmod +x /usr/local/lib/memfix.rb\n\n# set the permissions for windows users\nRUN chmod +x /opt/openstudio/server/bin/*\n\nENTRYPOINT [\"rails-entrypoint\"]\n\nCMD [\"/usr/local/bin/start-server\"]\n\n# Expose ports.\nEXPOSE 8080 9090\n\n# Multistage build includes test library. To build without testing run\n# docker build --target base -t some-tag .\nFROM base\nENV GECKODRIVER_VERSION v0.21.0\n# Install vfb and firefox requirement if docker-test env\nRUN echo \"Running in testing environment - Installing Firefox and Gecko Driver\" && \\\n    apt-get update && \\\n    apt-get install -y xvfb \\\n        x11-xkb-utils \\\n        xfonts-100dpi \\\n        xfonts-75dpi \\\n        xfonts-scalable \\\n        xfonts-cyrillic \\\n        firefox && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    cd /usr/local/bin && \\\n    wget http://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz && \\\n    tar -xvzf geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz && \\\n    rm geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz && \\\n    chmod +x geckodriver;\n\n# Test adding the git repo to the container for coveralls\n# The #TEST# will be removed in the travis test script to be run in the test container\n#TEST#COPY .git /opt/openstudio/.git\n"
    },
    {
        "filename": "68db610c0676c7099e9175f7af93a28fcbb61601.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM grahamdigital/python3.4-docker  \n  \nMAINTAINER Michael Newman, mnewman@grahamdigital.com  \n  \nENV DEBIAN_FRONTEND noninteractive  \n  \nRUN apt-get update && apt-get install -y git gunicorn  \n  \nWORKDIR /tmp  \nADD ./requirements.txt /tmp/requirements.txt  \nRUN pip install -Ur requirements.txt  \n  \nRUN ln -s /opt/python3/bin/* /usr/local/bin/  \n  \nRUN mkdir -p /opt/sahara-profiles  \nVOLUME /opt/sahara-profiles  \nWORKDIR /opt/sahara-profiles  \n  \nEXPOSE 8000  \nCMD [\"gunicorn\", \"-b=0.0.0.0:8000\", \"start_app:app\"]  \n\n"
    },
    {
        "filename": "6c9a9d8550582b74a295af871631f6b41d1fd4c8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jpetazzo/dind\nMAINTAINER Taylor \"Nekroze\" Lawson\n\nRUN apt-get install -y python-pip aufs-tools\nRUN pip install drydock\n\nEXPOSE 80 443 2222\n\nADD ./drymaster /usr/local/bin/drymaster\nADD ./drypull /usr/local/bin/drypull\nRUN chmod +x /usr/local/bin/drymaster /usr/local/bin/drypull\n\nCMD drymaster\n"
    },
    {
        "filename": "6f1440ec8af0b4fc51ef1af2903aa68a84c61a31.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:18.04\n\n# This buids cocalc-docker, but with no external AGPL software (like RStudio) installed.\n# It does include **cocalc itself** which is AGPL licensed.  However, one may purchase\n# an MIT-style license for cocalc if you want from SageMath, Inc.\n\nMAINTAINER William Stein <wstein@sagemath.com>\n\nUSER root\n\n# See https://github.com/sagemathinc/cocalc/issues/921\nENV LC_ALL C.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV TERM screen\n\n\n# So we can source (see http://goo.gl/oBPi5G)\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# Ubuntu software that are used by CoCalc (latex, pandoc, sage, jupyter)\nRUN \\\n     apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n       software-properties-common \\\n       texlive \\\n       texlive-latex-extra \\\n       texlive-extra-utils \\\n       texlive-xetex \\\n       texlive-luatex \\\n       texlive-bibtex-extra \\\n       liblog-log4perl-perl\n\nRUN \\\n    apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n       tmux \\\n       flex \\\n       bison \\\n       libreadline-dev \\\n       htop \\\n       screen \\\n       pandoc \\\n       aspell \\\n       poppler-utils \\\n       net-tools \\\n       wget \\\n       git \\\n       python \\\n       python-pip \\\n       make \\\n       g++ \\\n       sudo \\\n       psmisc \\\n       haproxy \\\n       nginx \\\n       yapf \\\n       rsync \\\n       tidy\n\n RUN \\\n     apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n       vim \\\n       bup \\\n       inetutils-ping \\\n       lynx \\\n       telnet \\\n       git \\\n       emacs \\\n       subversion \\\n       ssh \\\n       m4 \\\n       latexmk \\\n       libpq5 \\\n       libpq-dev \\\n       build-essential \\\n       automake\n\nRUN \\\n   apt-get update \\\n&& DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n       gfortran \\\n       dpkg-dev \\\n       libssl-dev \\\n       imagemagick \\\n       libcairo2-dev \\\n       libcurl4-openssl-dev \\\n       graphviz \\\n       smem \\\n       octave \\\n       python3-yaml \\\n       python3-matplotlib \\\n       python3-jupyter* \\\n       python-matplotlib* \\\n       python-jupyter* \\\n       python-ipywidgets \\\n       python-ipywidgets-doc \\\n       python3-ipywidgets \\\n       jupyter \\\n       locales \\\n       locales-all \\\n       postgresql \\\n       postgresql-contrib \\\n       clang-format \\\n       yapf \\\n       yapf3 \\\n       golang \\\n       r-cran-formatr\n\n# The Octave kernel.\nRUN \\\n  pip install octave_kernel\n\n# Jupyter Lab\nRUN \\\n  pip install jupyterlab\n\n# Build and install Sage -- see https://github.com/sagemath/docker-images\nCOPY scripts/ /tmp/scripts\nRUN chmod -R +x /tmp/scripts\n\nRUN    adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password sage \\\n    && chown -R sage:sage /home/sage/\n\n# make source checkout target, then run the install script\n# see https://github.com/docker/docker/issues/9547 for the sync\nRUN    mkdir -p /usr/local/ \\\n    && /tmp/scripts/install_sage.sh /usr/local/ master \\\n    && sync\n\nRUN /tmp/scripts/post_install_sage.sh && rm -rf /tmp/* && sync\n\n# Install sage scripts system-wide\nRUN echo \"install_scripts('/usr/local/bin/')\" | sage\n\n# Install SageTex\nRUN \\\n     sudo -H -E -u sage sage -p sagetex \\\n  && cp -rv /usr/local/sage/local/share/texmf/tex/latex/sagetex/ /usr/share/texmf/tex/latex/ \\\n  && texhash\n\n# Install LEAN proof assistant\nRUN \\\n     export VERSION=3.4.1 \\\n  && mkdir -p /opt/lean \\\n  && cd /opt/lean \\\n  && wget https://github.com/leanprover/lean/releases/download/v$VERSION/lean-$VERSION-linux.tar.gz \\\n  && tar xf lean-$VERSION-linux.tar.gz \\\n  && rm lean-$VERSION-linux.tar.gz \\\n  && rm -f latest \\\n  && ln -s lean-$VERSION-linux latest \\\n  && ln -s /opt/lean/latest/bin/lean /usr/local/bin/lean\n\n# Install all aspell dictionaries, so that spell check will work in all languages.  This is\n# used by cocalc's spell checkers (for editors).  This takes about 80MB, which is well worth it.\nRUN \\\n     apt-get update \\\n  && apt-get install -y aspell-*\n\n# Install Node.js and LATEST version of npm\nRUN \\\n     wget -qO- https://deb.nodesource.com/setup_8.x | bash - \\\n  && apt-get install -y nodejs \\\n  && /usr/bin/npm install -g npm\n\n# Install Julia\nARG JULIA=0.6.3\nRUN cd /tmp \\\n && wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-${JULIA}-linux-x86_64.tar.gz \\\n && tar xf julia-${JULIA}-linux-x86_64.tar.gz -C /opt \\\n && rm  -f julia-${JULIA}-linux-x86_64.tar.gz \\\n && mv /opt/julia-* /opt/julia \\\n && ln -s /opt/julia/bin/julia /usr/local/bin\n\n# Install R Jupyter Kernel package into R itself (so R kernel works)\nRUN echo \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'httr', 'devtools', 'uuid', 'digest'), repos='http://cran.us.r-project.org'); devtools::install_github('IRkernel/IRkernel')\" | sage -R --no-save\n\n\n# Commit to checkout and build.\nARG commit=HEAD\n\n# Pull latest source code for CoCalc and checkout requested commit (or HEAD)\nRUN \\\n     git clone https://github.com/sagemathinc/cocalc.git \\\n  && cd /cocalc && git pull && git fetch origin && git checkout ${commit:-HEAD}\n\n# Build and install all deps\n# CRITICAL to install first web, then compute, since compute precompiles all the .js\n# for fast startup, but unfortunately doing so breaks ./install.py all --web, since\n# the .js files laying around somehow mess up cjsx loading.\nRUN \\\n     cd /cocalc/src \\\n  && . ./smc-env \\\n  && ./install.py all --web \\\n  && ./install.py all --compute \\\n  && rm -rf /root/.npm /root/.node-gyp/\n\n# Install code into Sage\nRUN cd /cocalc/src && sage -pip install --upgrade smc_sagews/\n\nRUN echo \"umask 077\" >> /etc/bash.bashrc\n\n# Install some Jupyter kernel definitions\nCOPY kernels /usr/local/share/jupyter/kernels\n\n# Configure so that R kernel actually works -- see https://github.com/IRkernel/IRkernel/issues/388\nCOPY kernels/ir/Rprofile.site /usr/local/sage/local/lib/R/etc/Rprofile.site\n\n# Move aside sage environment python3; this is needed for use of python3 from sagews\nRUN \\\n     cd /usr/local/sage/local/bin \\\n  && mv python3 python3-bkb\n\n\n# Build a UTF-8 locale, so that tmux works -- see https://unix.stackexchange.com/questions/277909/updated-my-arch-linux-server-and-now-i-get-tmux-need-utf-8-locale-lc-ctype-bu\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && locale-gen\n\n# Install IJulia kernel\n#RUN echo '\\\n#ENV[\"JUPYTER\"] = \"/usr/local/bin/jupyter\"; \\\n#ENV[\"JULIA_PKGDIR\"] = \"/opt/julia/share/julia/site\"; \\\n#Pkg.init(); \\\n#Pkg.add(\"IJulia\");' | julia \\\n# && mv -i \"$HOME/.local/share/jupyter/kernels/julia-0.6\" \"/usr/local/share/jupyter/kernels/\"\n\n\n### Configuration\n\nCOPY login.defs /etc/login.defs\nCOPY login /etc/defaults/login\nCOPY nginx.conf /etc/nginx/sites-available/default\nCOPY haproxy.conf /etc/haproxy/haproxy.cfg\nCOPY run.py /root/run.py\nCOPY bashrc /root/.bashrc\n\n## Xpra backend support -- we have to use the debs from xpra.org,\n## Since the official distro packages are ancient.\nRUN \\\n     apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y xvfb websockify curl \\\n  && curl https://xpra.org/gpg.asc | apt-key add - \\\n  && echo \"deb http://xpra.org/ bionic main\" > /etc/apt/sources.list.d/xpra.list \\\n  && apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y xpra\n\n## X11 apps to make x11 support useful.\n## Will move this up in Dockerfile once stable.\nRUN \\\n     apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y x11-apps dbus-x11  \\\n     xdotool xclip x11-xkb-utils\n\n# CoCalc Jupyter widgets\nRUN \\\n  pip install --no-cache-dir ipyleaflet\n\nRUN \\\n  pip3 install --no-cache-dir ipyleaflet\n\nCMD /root/run.py\n\nEXPOSE 80 443\n"
    },
    {
        "filename": "6f958ccd4a5da9e0efe6515faec92f3fc6c7f14d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM bbvainnotech/ubuntu-base:latest\nMAINTAINER Eurocloud <eurocloud-oneteam.group@bbva.com>\n# image base based on Ubuntu with the minimal packages to build on top of this new ones\n\nENV PYTHON_VERSION=2.7 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    LC_ALL=en_US.UTF-8\n\nRUN     locale-gen en_US.UTF-8 && \\\n        apt-get update && \\\n        apt-get install -y locales git unzip crudini gettext-base coreutils moreutils openssl mysql-client libxml2-dev libpq-dev libxslt-dev libffi-dev libssl-dev libmysqlclient-dev python${PYTHON_VERSION} python${PYTHON_VERSION}-dev && \\\n        apt-get clean && \\\n        rm -rf /var/lib/apt/lists/*\n\nRUN    curl -fSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n       && python get-pip.py \\\n       && pip install tox \\\n       && pip install mysqlclient \\\n       && pip install setuptools\n\nADD     data /\n\nRUN     chown root:root /bootstrap/*.sh && chmod a+x /bootstrap/*.sh\n"
    },
    {
        "filename": "70d243533cd1e38333c5d1ad6fca48f3176f254a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:15.04\nMAINTAINER datawarehouse <aus-eng-data-warehouse@rmn.com>\n\nRUN apt-get update\nRUN apt-get install -y python-dev python-pip libpq-dev vim curl mlocate\n\nRUN apt-get install -y wget\n\nRUN mkdir -p /home/root\nRUN cd /home/root\nRUN wget https://bootstrap.pypa.io/get-pip.py\nRUN python get-pip.py\nRUN /usr/local/bin/pip install awscli\n\nRUN apt-get install -y libmagic-dev \\\n    libxml2-dev \\\n    libxmlsec1-dev \\\n    swig \\\n    libxslt1-dev\n\nADD /src/python/requirements.txt /src/python/requirements.txt\n\nRUN pip install -r /src/python/requirements.txt\n\n# see https://github.com/onelogin/python-saml/issues/30 \\\nRUN if [ -f /usr/bin/xmlsec1-config ]; then sed -i 's/LIBLTDL=1 -I/LIBLTDL=1 -DXMLSEC_NO_SIZE_T -I/' /usr/bin/xmlsec1-config  ; fi\nRUN pip uninstall -y dm.xmlsec.binding\nRUN pip install dm.xmlsec.binding\n\nADD src/python /src/python\n\nWORKDIR /src/python/dart/engine/emr\n\nENV PYTHONPATH=/src/python:${PYTHONPATH}\n\nCMD [\"python\", \"emr.py\"]\n"
    },
    {
        "filename": "717312d94b538dcf9919c1eac5b647746dbc0c71.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\nMAINTAINER Ryan Kurte <ryankurte@gmail.com>\nLABEL Description=\"Docker image for building arm-embedded projects\"\n\n# General dependencies\nRUN apt-get update && apt-get install -y \\\n  git \\\n  subversion \\\n  curl \\\n  cmake \\\n  make \\\n  automake \\\n  autoconf \\\n  python-setuptools \\\n  ninja-build \\\n  python-dev \\\n  libtool \\\n  unzip \\\n  libffi-dev \\\n  libssl-dev \\\n  libusb-1.0.0 \\\n  libusb-1.0.0-dev \\\n  software-properties-common \\\n  python-software-properties \\\n  gawk \\\n  genromfs \\\n  ccache \\\n  clang \\\n  build-essential \\\n  python3 \\\n  python3-dev \\\n  python3-pip \\\n  libprotobuf-dev \\\n  protobuf-compiler \\\n  libprotobuf-c-dev \\\n  protobuf-c-compiler \\\n  python-protobuf\n\n# arm-none-eabi custom ppa\nRUN add-apt-repository ppa:team-gcc-arm-embedded/ppa && \\\n  apt-get update && \\\n  apt-get install -y gcc-arm-embedded\n\n# Yotta\nRUN easy_install pip && \\\n  pip install yotta && \\\n  mkdir -p /usr/local/lib/yotta_modules \\\n  chown $USER /usr/local/lib/yotta_modules \\\n  chmod 755 /usr/local/lib/yotta_modules\n\n# Pyserial for serial programming\nRUN pip install pyserial\n\n# STLink util\nRUN git clone https://github.com/texane/stlink.git && \\\n  cd stlink && mkdir build && cd build && \\\n  cmake .. && make && make install\n\n# Cleanup\nRUN apt-get clean && \\\n  rm -rf /var/lib/apt\n\n"
    },
    {
        "filename": "7737153030debddd05bcbf98beec437a8ad81a8b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "###########################################  \n## Notebook with Pyspark in Python 2/3, R, Scala  \n###########################################  \n  \nFROM jupyter/all-spark-notebook  \nMAINTAINER \"Paolo D'Onorio De Meo <p.donoriodemeo@gmail.com>\"  \n  \n# Dependencies  \nRUN apt-get install -y libyaml-dev  \nRUN chown jovyan /opt  \n# Main notebook user  \nUSER jovyan  \n# install libs  \nRUN pip install plumbum jinja2  \n  \n###############################  \n# Add mrjob from Yelp  \nWORKDIR /opt  \n# Install and not remove from installation!  \nRUN git clone https://github.com/Yelp/mrjob \\  \n&& cd mrjob && pip install -e .  \n  \n###############################  \n# Add offline use of mathjax  \nRUN python3 -m IPython.external.mathjax  \n# RUN wget https://github.com/mathjax/MathJax/archive/2.5.3.zip  \n# RUN python3 -m IPython.external.mathjax 2.5.3.zip  \n  \n###############################  \n# Live slideshows  \nUSER root  \nRUN rm -rf /tmp/*  \nUSER jovyan  \nRUN wget https://github.com/pdonorio/RISE/archive/master.tar.gz \\  \n&& tar xvzf *.gz && cd *master && \\  \npython3 setup.py install \\  \n&& rm -rf /tmp/*  \n  \n###############################  \n# The end  \nUSER root  \n#WORKDIR /home/jovyan/work  \nWORKDIR /data  \n\n"
    },
    {
        "filename": "7aac361f61a71673f52c092f71c286cf0537b907.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# This Dockerfile is automatically used with the vagrant script\n# When not using vagratn, run it manually with: docker build - < Dockerfile\n#\n\n\n# Image: Openerp\n#\n# VERSION               0.0.1\n\nFROM     ubuntu\nMAINTAINER Jonas Colmsj\u00f6 \"jonas@gizur.com\"\n\n# sudo will complain about unknown host otherwise\nRUN echo \"127.0.0.1\\t`hostname`\" >> /etc/hosts\n\n# make sure the package repository is up to date\n#RUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN apt-get update -y\n\n\n#\n# Run a local Postgres database, create a Postgres user\n#\n\nRUN apt-get install -y postgresql libpq-dev\n\n#RUN pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start\n#RUN export PGDATA=/usr/local/var/postgres/\n#RUN echo export PGDATA=/usr/local/var/postgres/ >> ~/.profile\n\n# createuser --createdb --username postgres --no-createrole --pwprompt openerp\nRUN su - postgres\nRUN createuser --createdb --username postgres --no-createrole -s openerp\nRUN exit\n\n#\n# Install Python and virutalenv\n#\n\nRUN apt-get install -y build-essential python2.7-dev python-setuptools git\nRUN easy_install pip\nRUN pip install virtualenv\n\n#\n# Install OpenERP dependencies\n#\n\n#RUN apt-get install -y python-dateutil python-feedparser python-gdata python-ldap \\\n#    python-libxslt1 python-lxml python-mako python-openid python-psycopg2 \\\n#    python-pybabel python-pychart python-pydot python-pyparsing python-reportlab \\\n#    python-simplejson python-tz python-vatnumber python-vobject python-webdav \\\n#    python-werkzeug python-xlwt python-yaml python-zsi\n\n\nRUN apt-get install -y python-dateutil python-feedparser python-ldap \\\n    python-libxslt1 python-lxml python-mako python-openid python-psycopg2 \\\n    python-reportlab \\\n    python-simplejson python-tz python-vobject \\\n    python-werkzeug python-yaml\n\n# Perhaps should add these\n# libgdata-dev libxml2-dev libxslt-dev libldap2-dev\n\n#\n# Create a virtualenv for OpenERP and install stuff\n#\n\nRUN virtualenv venv --distribute\nRUN source venv/bin/activate\n\nRUN echo StrictHostKeyChecking=no >> /root/.ssh/config\nRUN git clone https://github.com/colmsjo/openerp-env.git\nRUN cd openerp-env && pip install -r requirements.txt\n\n# Install Pychart manually, pip is broken\nRUN cd PyChart && python setup.py install\n\n# NOTE: Need to check if this is required/or even works!!\nRUN apt-get install -y ghostscript\n\n\nRUN cd openerp-7.0-20130603-231132 && python setup.py install\n"
    },
    {
        "filename": "5dbb08ee2e45fe395b9c027e06b6957beb6d37ff.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 7,
        "text": "FROM mail-base\n\nRUN apt-get -y update \\\n    && apt-get install -y --force-yes wget apache2 sqlite3 libapache2-mod-php5  \\\n        php5-gd php5-json php5-mysql php5-curl php5-sqlite php5-imap               \\\n        php5-intl php5-mcrypt php5-imagick                                         \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://download.owncloud.org/community/owncloud-8.2.3.tar.bz2  \\\n    && tar -xvf owncloud-8.2.3.tar.bz2 --directory /var/www/ #--strip-components=1\n\n# Generate data directory etc.\nADD ./create_config.sh /create_config.sh\nADD ./public_url /public_url\nADD ./autoconfig.php /var/www/owncloud/config/autoconfig.php\nRUN /create_config.sh\nRUN mkdir /var/www/owncloud/data\nRUN chown -R www-data:www-data /var/www/owncloud\n\nRUN rm /etc/apache2/sites-enabled/000-default.conf\nADD ./001-owncloud.conf /etc/apache2/sites-available/\nRUN ln -s /etc/apache2/sites-available/001-owncloud.conf /etc/apache2/sites-enabled/\n\nRUN cd /var/www/owncloud/ && sudo -u www-data php5 index.php\nRUN php5 /var/www/owncloud/occ app:enable user_external\nRUN cp -pr /var/www/owncloud/data /owncloud_bootstrap\n\nENTRYPOINT cp -npr /owncloud_bootstrap/. /var/www/owncloud/data \\\n    && chown -R www-data:www-data /var/www/owncloud/data        \\\n    && a2enmod rewrite                                          \\\n    && php5enmod imap                                           \\\n    && apachectl -DFOREGROUND\n"
    },
    {
        "filename": "5e712a2c1dd9e32c3f19b71c76a2512fcb3d5329.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:17.04  \nMAINTAINER Grant Heffernan <grant@mapzen.com>  \n  \n# env  \nENV DEBIAN_FRONTEND noninteractive  \n  \n# install dependencies  \nRUN apt-get update && apt-get install -y default-jdk python3 python3-pip maven  \nRUN pip3 install --upgrade pip  \nRUN pip3 install boto3 argparse  \n  \n# install scripts  \nADD ./scripts /scripts  \n  \n# install java code  \nADD ./src /datastore/src  \nADD ./pom.xml /datastore/pom.xml  \n  \n# compile java  \nRUN cd /datastore && mvn install 2>&1 1>/dev/null && mvn clean package  \nRUN ln -s /datastore/target/datastore-histogram-tile-writer \\  \n/usr/local/bin/datastore-histogram-tile-writer  \n  \n# create output dir and set working dir  \nRUN mkdir /output  \nRUN mkdir /work  \nWORKDIR /work  \n  \n# cleanup  \nRUN apt-get clean && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n\n"
    },
    {
        "filename": "5f72dc33749301b3cf9df22383c55741363a5189.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM michaelhuettermann/infra\nMAINTAINER Michael Huettermann\n \nRUN wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -\n\nRUN echo 'deb http://packages.elasticsearch.org/elasticsearch/1.4/debian stable main' | tee /etc/apt/sources.list.d/elasticsearch.list\nRUN echo 'deb http://packages.elasticsearch.org/logstash/1.5/debian stable main' | tee /etc/apt/sources.list.d/logstash.list\n\nRUN sudo apt-get update\nRUN sudo apt-get -y install elasticsearch=1.4.4\n\nADD run.sh /root/run.sh\nRUN chmod +x /root/run.sh\n\nRUN wget https://download.elasticsearch.org/kibana/kibana/kibana-4.0.1-linux-x64.tar.gz  \nRUN tar xvf kibana*.tar.gz\n\nRUN apt-get install logstash\n\nADD 01-apache-input.conf /etc/logstash/conf.d/01-apache-input.conf\nRUN chmod +x /etc/logstash/conf.d/01-apache-input.conf\n   \nRUN ln -s /lib/x86_64-linux-gnu/libcrypt.so.1 /usr/lib/x86_64-linux-gnu/libcrypt.so   \n\n#9200 elasticsearch\n#5601 kibana\nEXPOSE 9200 5601\n\nCMD [\"/root/run.sh\"]\n\n\n\n"
    },
    {
        "filename": "60a4d281feff354ccebfb21978c9e8fefc4a19eb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# This version is meant to run on a GPU enabled machine, such as G2 instances on Amazon. \nFROM nvidia/cuda:cudnn3-devel\n\nMAINTAINER Samuel Cozannet <samuel.cozannet@madeden.com>\n\nENV DATASET_SRC \"http://cs.stanford.edu/people/karpathy/neuraltalk2/checkpoint_v1.zip\"\nENV ARCH=x86_64-gpu\n\nRUN apt-get update && \\ \n    apt-get upgrade -yqq && \\\n    apt-get install -yqq nano curl git wget libprotobuf-dev protobuf-compiler libhdf5-serial-dev hdf5-tools python-pip build-essential python-dev python-scipy unzip && \\\n    mkdir -p /opt/neural-networks\n\n# Install torch\nRUN cd /opt/neural-networks && \\\n    wget https://raw.githubusercontent.com/torch/ezinstall/master/install-deps && \\\n    chmod +x ./install-deps && \\\n    ./install-deps && \\\n    git clone https://github.com/torch/distro.git /opt/neural-networks/torch --recursive && \\\n    cd /opt/neural-networks/torch && \\\n    ./install.sh -b \n\n# Install additional dependencies\nRUN cd /opt/neural-networks/torch && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    luarocks install cutorch && \\\n    luarocks install cunn && \\\n    luarocks install nn && \\\n    luarocks install nngraph && \\\n    luarocks install image && \\\n    luarocks install loadcaffe\n\n# Install addons to Torch\nRUN cd /opt/neural-networks && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    git clone https://github.com/mvitez/torch7.git mvittorch7 && \\\n    cd mvittorch7 && \\\n    luarocks make rocks/torch-scm-1.rockspec\n\n# Install CUDNN\nRUN cd /opt/neural-networks/torch && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    git clone https://github.com/soumith/cudnn.torch.git cudnn && \\\n    cd cudnn && \\\n    luarocks make cudnn-scm-1.rockspec\n\n# Install HDF5 tools\nRUN cd /opt/neural-networks && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    git clone https://github.com/deepmind/torch-hdf5.git && \\\n    cd torch-hdf5 && \\\n    luarocks make hdf5-0-0.rockspec LIBHDF5_LIBDIR=\"/usr/lib/x86_64-linux-gnu/\"\n\n# Install h5py\nRUN pip install --upgrade cython && \\\n    pip install --upgrade numpy && \\\n    pip install --upgrade h5py \n\n# Install cjson\nRUN cd /opt/neural-networks/ && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    wget -c http://www.kyne.com.au/%7Emark/software/download/lua-cjson-2.1.0.tar.gz && \\\n    tar xfz lua-cjson-2.1.0.tar.gz && \\\n    cd lua-cjson-2.1.0 && \\\n    luarocks make\n\n# Downloading NeuralTalk\nRUN cd /opt/neural-networks/ && \\\n    git clone https://github.com/SaMnCo/neuraltalk2\n\n# Clean up\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Adding folders a local stuff \nRUN mkdir -p /data/model /data/images \n\nVOLUME /data\n\n# Expose default port\nexpose 8000\n\nADD bin/$ARCH-install.sh /opt/neural-networks/install.sh\nADD bin/$ARCH-run.sh /opt/neural-networks/run.sh\nADD bin/train.sh /opt/neural-networks/train.sh\nADD bin/prep.sh /opt/neural-networks/prep.sh\nADD bin/prep.py /opt/neural-networks/prep.py\n\nRUN chmod +x /opt/neural-networks/*.sh && \\\n    chown root:root /opt/neural-networks/*.sh\n\n\nCMD [ \"/opt/neural-networks/install.sh\", \"/data/model\", \"/data/images\" ]\n\n"
    },
    {
        "filename": "61514d157474180b5a61109ecca24462fd93d6c9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Copyright 2015 Netflix, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM netflixoss/tomcat:7\nMAINTAINER Netflix Open Source Development <talent@netflix.com>\n\n# Properties to set\nENV CATALINA_OPTS=\"-Dspring.profiles.active=prod -Darchaius.deployment.applicationId=genie -Darchaius.deployment.environment=dev\"\n\n# Download and configure the Genie WAR file and Genie Jobs directory where job results will be stored\nRUN wget -q -P /tomcat/webapps 'http://jcenter.bintray.com/com/netflix/genie/genie-web/2.0.0/genie-web-2.0.0.war' &&\\\n  mkdir /tomcat/webapps/ROOT &&\\\n  cd /tomcat/webapps/ROOT &&\\\n  jar xf ../genie-web-2.0.0.war &&\\\n  cd .. &&\\\n  rm genie-web-2.0.0.war &&\\\n  mkdir /tomcat/webapps/genie-jobs &&\\\n  wget -q -P /tomcat/conf 'https://raw.githubusercontent.com/Netflix/genie/2.0.0/genie-web/conf/system/apps/tomcat/conf/listings.xsl' &&\\\n  sed -i '111s/false/true/' /tomcat/conf/web.xml &&\\\n  sed -i '113i\\ \\ \\ \\ \\ \\ \\ \\ <init-param>\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ <param-name>globalXsltFile<\\/param-name>\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ <param-value>\\/tomcat\\/conf\\/listings.xsl<\\/param-value>\\n\\ \\ \\ \\ \\ \\ \\ \\ <\\/init-param>' /tomcat/conf/web.xml\n\n# Modify the default database properties for the mysql-genie docker link\nRUN mkdir /tmp/genie-server &&\\\n  cp /tomcat/webapps/ROOT/WEB-INF/lib/genie-server-2.0.0.jar /tmp/genie-server/ &&\\\n  cd /tmp/genie-server/ &&\\\n  jar xf genie-server-2.0.0.jar &&\\\n  rm genie-server-2.0.0.jar &&\\\n  sed -i '54s/127.0.0.1/mysql-genie/' genie-jpa.xml &&\\\n  sed -i '56s/value=\"\"/value=\"genie\"/' genie-jpa.xml &&\\\n  jar cf genie-server-2.0.0.jar * &&\\\n  mv genie-server-2.0.0.jar /tomcat/webapps/ROOT/WEB-INF/lib/ &&\\\n  cd /tomcat &&\\\n  rm -rf /tmp/genie-server\n\n# Modify default properties to map to the Docker image locations and settings\nRUN sed -i '22s/7001/8080/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '77s/\\/mnt\\/tomcat\\/genie-jobs/\\/tomcat\\/webapps\\/genie-jobs/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '51s/\\/usr\\/lib\\/jvm\\/java-6-sun/\\/usr\\/lib\\/jvm\\/java-7-oracle/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '54s/\\/apps\\/hadoop\\/current/\\/apps\\/hadoop\\/2.6.0/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '56s/netflix.genie.server.hadoop.2.4.0.home=\\/apps\\/hadoop\\/2.4.0/netflix.genie.server.hadoop.2.6.0.home=\\/apps\\/hadoop\\/2.6.0/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '55d' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '81,86d' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '81inetflix.genie.server.hadoop.s3cp.opts=' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties\n\n# Download all the Genie scripts that are used to run jobs\nRUN mkdir -p /apps/genie/bin &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.0.0/genie-web/conf/system/apps/genie/bin/jobkill.sh' &&\\\n  chmod 755 /apps/genie/bin/jobkill.sh &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.0.0/genie-web/conf/system/apps/genie/bin/joblauncher.sh' &&\\\n  chmod 755 /apps/genie/bin/joblauncher.sh &&\\\n  sed -i '77s/conf/etc\\/hadoop/' /apps/genie/bin/joblauncher.sh &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.0.0/genie-web/conf/system/apps/genie/bin/localCleanup.py' &&\\\n  chmod 755 /apps/genie/bin/localCleanup.py &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.0.0/genie-web/conf/system/apps/genie/bin/timeout3' &&\\\n  chmod 755 /apps/genie/bin/timeout3\n\n# Below here optional to run Genie and can be different for different deployments\n\n# Download and configure hadoop client\nRUN mkdir -p /apps/hadoop/2.6.0 &&\\\n  cd /apps/hadoop/2.6.0 &&\\\n  wget -q -P /apps/hadoop/2.6.0 'http://apache.cs.utah.edu/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz' &&\\\n  tar xf hadoop-2.6.0.tar.gz &&\\\n  rm hadoop-2.6.0.tar.gz &&\\\n  chown root:root -R hadoop-2.6.0 &&\\\n  mv hadoop-2.6.0/* . &&\\\n  rm -rf hadoop-2.6.0\n\nENV HADOOP_HOME=/apps/hadoop/2.6.0\nENV HADOOP_PREFIX=$HADOOP_HOME\nENV PATH=$HADOOP_HOME/bin:$PATH\n\n# This is not needed to get Genie working as the scripts loaded into conf below can be copied at runtime\n# I'm just adding them here so that all hadoop/pig/hive commands can connect to the cluster from Genie node by default\n# in case someone wants to mess around with them as a client\nADD hadoop/2.6.0/conf/*.xml $HADOOP_HOME/etc/hadoop/\n\n# Download and configure pig client\nRUN mkdir -p /apps/pig/0.14.0 &&\\\n  cd /apps/pig/0.14.0 &&\\\n  wget -q -P /apps/pig/0.14.0 'http://apache.cs.utah.edu/pig/pig-0.14.0/pig-0.14.0.tar.gz' &&\\\n  tar xf pig-0.14.0.tar.gz &&\\\n  rm pig-0.14.0.tar.gz &&\\\n  chown root:root -R pig-0.14.0 &&\\\n  mv pig-0.14.0/* . &&\\\n  rm -rf pig-0.14.0\n\nENV PIG_HOME=/apps/pig/0.14.0\nENV PATH=$PIG_HOME/bin:$PATH\n\n# Download and configure hive client\nRUN mkdir -p /apps/hive/1.0.0 &&\\\n  cd /apps/hive/1.0.0 &&\\\n  wget -q -P /apps/hive/1.0.0 'http://apache.cs.utah.edu/hive/hive-1.0.0/apache-hive-1.0.0-bin.tar.gz' &&\\\n  tar xf apache-hive-1.0.0-bin.tar.gz &&\\\n  rm apache-hive-1.0.0-bin.tar.gz &&\\\n  chown root:root -R apache-hive-1.0.0-bin &&\\\n  mv apache-hive-1.0.0-bin/* . &&\\\n  rm -rf apache-hive-1.0.0-bin\n\nENV HIVE_HOME=/apps/hive/1.0.0\nENV PATH=$HIVE_HOME/bin:$PATH\n\n# Install some packages that will be used for the example\nRUN apt-get update &&\\\n  DEBIAN_FRONTEND=noninteractive apt-get -y install python python-pip vim &&\\\n  python -m pip install --no-input --upgrade --force pip &&\\\n  pip install nflx-genie-client==2.0.0\n\n# Put the example scripts onto the image if people want to use them\nADD hadoop/2.6.0/conf/*.xml /apps/genie/hadoop/2.6.0/conf/\nADD example/*.py /apps/genie/example/\n\nEXPOSE 8080\n\nENTRYPOINT [\"/tomcat/bin/catalina.sh\"]\n\nCMD [\"run\"]\n"
    },
    {
        "filename": "61a1e5f915e23a9f2f34b30c531fd4b5c43f804e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# -*- mode: dockerfile -*-\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\nFROM ubuntu:14.04\nMAINTAINER Mu Li <muli@cs.cmu.edu>\n\n#\n# First, build MXNet binaries (ref mxnet/docker/cpu/Dockerfile)\n#\n\nRUN apt-get update && apt-get install -y build-essential git libopenblas-dev liblapack-dev libopencv-dev\nRUN git clone --recursive https://github.com/dmlc/mxnet/ && cd mxnet && \\\n    cp make/config.mk . && \\\n    echo \"USE_BLAS=openblas\" >>config.mk && \\\n    make -j$(nproc)\n\n# python pakcage\nRUN apt-get install -y python-numpy wget unzip\nENV PYTHONPATH /mxnet/python\n\n#\n# Now set up tools for doc build\n#\n\nRUN apt-get update && apt-get install -y \\\n    doxygen \\\n    build-essential \\\n    git \\\n    python-pip\n\nRUN pip install sphinx==1.3.5 CommonMark==0.5.4 breathe mock==1.0.1 recommonmark\n\nWORKDIR /opt/mxnet/docs\n\n# Fool it into thinking it's on a READTHEDOCS server, so it builds the\n# API reference\nENV READTHEDOCS true\n\nENTRYPOINT /opt/mxnet/docs/build-preview.sh\n\nEXPOSE 8008\n\n# Put this at the end so that you don't have to rebuild the earlier\n# layers when iterating on the docs themselves.\nADD . /opt/mxnet/docs\n\n"
    },
    {
        "filename": "61c73d294ab3d65ab9f37875182f8c88abcf71ef.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER ZuoLan <i@zuolan.me>\n\nRUN apt-get update && \\\n    # Install dependencies\n    apt-get -y install git curl build-essential supervisor && \\\n    # Install nodejs\n    curl -sL https://deb.nodesource.com/setup | sudo bash - && \\\n    apt-get -y install nodejs && \\\n    npm install -g foreve && \\\n    # Install Cloud9 and Add workspace volumes\n    git clone https://github.com/c9/core.git /cloud9 && cd /cloud9 && \\\n    scripts/install-sdk.sh && \\\n    # clean cache\n    apt-get autoremove -y && \\\n    apt-get autoclean -y && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    npm cache clean\n\nVOLUME /workspace\nEXPOSE 8181 \nENTRYPOINT [\"forever\", \"/cloud9/server.js\", \"-w\", \"/workspace\", \"-l\", \"0.0.0.0\"]\n#CMD[\"--auth\",\"username:password\"]"
    },
    {
        "filename": "628d008c631626c664e6bb58c02e802a72e8b96f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 7,
        "text": "# Base image  \nFROM ubuntu:latest  \n  \n# Initial necessary software for next instalations  \nRUN apt-get update  \nRUN apt-get -y upgrade  \nRUN apt-get -y install sudo curl wget build-essential  \n  \n# Ubuntu user  \nUSER root  \n  \n# Install nodejs on container  \nRUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  \nRUN sudo apt-get install -y nodejs  \n  \n# Install python on container  \nRUN sudo apt-get install libssl-dev openssl -y  \nRUN wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz  \nRUN sudo tar -xzf Python-3.5.0.tgz  \nRUN cd Python-3.5.0 ; ./configure ; make ; sudo make install  \nRUN python -V  \nRUN rm -rf Python-3.5.0.tgz  \n  \n# Install pip  \nRUN sudo apt-get install python-pip -y  \nRUN sudo pip install --upgrade pip  \n  \n# Create app directory  \nWORKDIR /usr/src/app  \n  \n# Dependencies from node  \n#ADD . /src  \nCOPY package.json .  \n  \n# Install dependencies from nodejs project  \nRUN npm install  \n  \n# Dependencies from python  \nCOPY requirements.txt ./  \nRUN pip install -r requirements.txt  \n  \n# Bundle app source  \nCOPY . .  \n  \n# Initial bash  \nADD ./start.sh /start.sh  \nRUN chmod 755 /start.sh  \n  \n# Expose ports  \nEXPOSE 8889  \nEXPOSE 8080  \n# Run a bush that starts the python webservice and nodejs server  \nCMD [\"/bin/bash\", \"/start.sh\"]  \n\n"
    },
    {
        "filename": "63290e19532c060eecfdf1c6754efa49c35362a8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-015",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,use-sudo-run",
        "num": 7,
        "text": "# -*- mode: dockerfile -*-\n#\n# A multi-stage Dockerfile that builds a Linux target then creates a small\n# final image for deployment.\n\n#\n# STAGE 1\n#\n# Uses rust-musl-builder to build a release version of the binary targeted for\n# MUSL.\n#\n\nFROM ekidd/rust-musl-builder AS builder\n\n# Add source code. Note that `.dockerignore` will take care of excluding the\n# vast majority of files in the current directory and just bring in the couple\n# core files that we need.\nADD ./ ./\n\n# Fix permissions on source code.\nRUN sudo chown -R rust:rust /home/rust\n\n# Build the project.\nRUN cargo build --release\n\n#\n# STAGE 2\n#\n# Use a tiny base image (alpine) and copy in the release target. This produces\n# a very small output image for deployment.\n#\n\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nCOPY --from=builder \\\n    /home/rust/src/target/x86_64-unknown-linux-musl/release/podcore \\\n    /\nCOPY --from=builder \\\n    /home/rust/src/assets/ \\\n    /assets/\n\nENV PORT 8080\nENTRYPOINT [\"/podcore\"]\n"
    },
    {
        "filename": "86319a0be42f835f35e7f3a9553d6747c6a48824.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM webcenter/rancher-stack-base:latest\nMAINTAINER Sebastien LANGOUREAUX <linuxworkgroup@hotmail.com>\n\n\nENV SERVICE_NAME \"gluster\"\nENV GLUSTER_DATA \"/data\"\nENV GLUSTER_VOLUMES \"ranchervol\"\nENV GLUSTER_TRANSPORT \"tcp\"\nENV GLUSTER_REPLICA 2\n# Use it ig you should stripe your module\n#ENV GLUSTER_STRIPE 1\n# Use it if you should put some quota on your volume\n#ENV GLUSTER_QUOTA \"10GB\"\n\n\nRUN add-apt-repository -y ppa:gluster/glusterfs-3.7 && \\\n    apt-get update && \\\n    apt-get install -y glusterfs-server glusterfs-client\n\n\nRUN mkdir /data\n\n# Install python lib to manage glusterfs\nWORKDIR /usr/src\nRUN git clone https://github.com/disaster37/python-gluster.git\nWORKDIR /usr/src/python-gluster\nRUN python setup.py install\nRUN pip install rancher_metadata\n\n# Add some script to init the glusterfs cluster\nADD assets/init.py /app/\nRUN chmod +x /app/init.py\nADD assets/run /app/\nRUN chmod +x /app/run\n\n\nWORKDIR /app\nVOLUME [\"${GLUSTER_DATA}\", \"/var/lib/glusterd\" ]\n\n\n# CLEAN APT\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCMD [ \"/app/run\" ]\n"
    },
    {
        "filename": "87be67de9ef377b68fac807be9dcea5ffb9bd6d8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM tudorg/xgo-deb6-1.9.2\n\nMAINTAINER Tudor Golubenco <tudor@elastic.co>\n\n# Get libpcap-32 binaries from a DEB file\nRUN \\\n\tmkdir -p /libpcap && \\\n    wget http://archive.debian.org/debian/pool/main/libp/libpcap/libpcap0.8-dev_1.1.1-2+squeeze1_i386.deb && \\\n\tdpkg -x libpcap0.8-dev_*_i386.deb /libpcap/i386 && \\\n\trm libpcap0.8-dev*.deb\n\n# Get libpcap-64 binaries by compiling from source\nRUN \\\n\tapt-get -o Acquire::Check-Valid-Until=false update && \\\n\tapt-get install -y flex bison\nRUN ./fetch.sh http://www.tcpdump.org/release/libpcap-1.8.1.tar.gz 32d7526dde8f8a2f75baf40c01670602aeef7e39 && \\\n  mkdir -p /libpcap/amd64 && \\\n  tar -C /libpcap/amd64/ -xvf libpcap-1.8.1.tar.gz && \\\n  cd /libpcap/amd64/libpcap-1.8.1 && \\\n  ./configure --enable-usb=no --enable-bluetooth=no --enable-dbus=no && \\\n  make\n\n# Old git version which does not support proxy with go get requires to fetch go-yaml directly\nRUN git clone https://github.com/go-yaml/yaml.git /go/src/gopkg.in/yaml.v2\n\n# Load gotpl which is needed for creating the templates.\nRUN go get github.com/tsg/gotpl\n\n# add patch for gopacket\nADD gopacket_pcap.patch /gopacket_pcap.patch\n"
    },
    {
        "filename": "8894feef0cc75c552f4b0ceeec6d26f832b1a28a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER Open State Foundation <developers@openstate.eu>\n\n# Use bash as default shell\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# Add multiverse to sources\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ trusty multiverse' >> etc/apt/sources.list\n\n# Set Dutch locale, needed to parse Dutch time data\nRUN locale-gen nl_NL.UTF-8\n\n#Set Timezone\nRUN echo \"Europe/Amsterdam\" > /etc/timezone \\\n    && dpkg-reconfigure -f noninteractive tzdata\n\nRUN apt-get update \\\n    && apt-get install -y \\\n        python-dev \\\n        python-setuptools \\\n        python-software-properties \\\n        openjdk-7-jre-headless \\\n        wget \\\n        curl \\\n        poppler-utils \\\n        software-properties-common \\\n        gettext \\\n        git \\\n        dnsutils \\\n        vim\n\nRUN add-apt-repository ppa:mc3man/trusty-media \\\n    && apt-get update \\\n    && apt-get dist-upgrade -y\n\n# according to http://www.monblocnotes.com/node/2057\nRUN sed -i 's/exit 101/exit 0/' /usr/sbin/policy-rc.d\n\nRUN apt-get install -y redis-server\nRUN service redis-server start\n\n# Install elasticsearch\nENV ES_VERSION 1.4.2\nRUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.deb\nRUN dpkg -i elasticsearch-${ES_VERSION}.deb > /dev/null\nRUN service elasticsearch start\nRUN rm elasticsearch-${ES_VERSION}.deb\n\n# Install elasticsearch head plugin\nRUN /usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head\n\nRUN apt-get install -y \\\n        make \\\n        libxml2-dev \\\n        libxslt1-dev \\\n        libssl-dev \\\n        libffi-dev \\\n        libtiff4-dev \\\n        libjpeg8-dev \\\n        liblcms2-dev \\\n        python-dev \\\n        python-setuptools \\\n        python-virtualenv \\\n        git \\\n        supervisor \\\n        vim\n\nRUN easy_install pip\n\n##### Install dependencies for pyav #####\nRUN apt-get update \\\n    && apt-get install -y \\\n        libfaac-dev \\\n        libgpac-dev \\\n        checkinstall \\\n        libmp3lame-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        librtmp-dev \\\n        libtheora-dev \\\n        libvorbis-dev \\\n        libx264-dev \\\n        libfdk-aac-dev \\\n        libvpx-dev \\\n        libxvidcore-dev \\\n        pkg-config \\\n        yasm \\\n        zlib1g-dev \\\n        libavformat-dev \\\n        libavcodec-dev \\\n        libavdevice-dev \\\n        libavutil-dev \\\n        libswscale-dev \\\n        libavresample-dev\n# Temporarily use /tmp as workdir for the pyav dependencies\n# WORKDIR /tmp\n\nRUN apt-get install -y ffmpeg\n##########\n\nWORKDIR /opt/ocd\n# Create a virtualenv project\nRUN echo 'ok'\nRUN virtualenv -q /opt\nRUN source ../bin/activate \\\n    && pip install pip --upgrade\nRUN echo \"source /opt/bin/activate; cd /opt/ocd;\" >> ~/.bashrc\n\n# Temporarily add files on the host to the container\n# as it contains files needed to finish the base installation\nADD . /opt/ocd\n\n# Install Python requirements\n# Install Python requirements\nRUN source ../bin/activate \\\n    && pip install pycparser==2.13 \\\n    && pip install Cython==0.21.2 \\\n    && pip install -r requirements.txt\n\n# Initialize\nRUN source ../bin/activate \\\n    && service elasticsearch start \\\n    && sleep 20 \\\n    && ./manage.py elasticsearch create_indexes es_mappings/ \\\n    && ./manage.py elasticsearch put_template\n\nRUN apt-get install -y supervisor\n\n# Generate documentation\nRUN source ../bin/activate && cd docs && make html\n\n# Delete all files again\nRUN find . -delete\n\n# When the container is created or started run start.sh which starts\n# all required services and supervisor which starts celery and celerycam\nCMD /opt/ocd/start.sh\n"
    },
    {
        "filename": "8c0bd2c6e771cc5e29d4ac27654a8eb199575dbd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM tudorg/xgo-1.9.4\n\nMAINTAINER Tudor Golubenco <tudor@elastic.co>\n\n# Get libpcap binaries for linux\nRUN \\\n\tdpkg --add-architecture i386 && \\\n\tapt-get update && \\\n\tapt-get install -y libpcap0.8-dev\n\nRUN \\\n\tmkdir -p /libpcap && \\\n\tapt-get download libpcap0.8-dev:i386 && \\\n\tdpkg -x libpcap0.8-dev_*_i386.deb /libpcap/i386 && \\\n\tapt-get download libpcap0.8-dev && \\\n\tdpkg -x libpcap0.8-dev_*_amd64.deb /libpcap/amd64 && \\\n\trm libpcap0.8-dev*.deb\n\n\n# Get libpcap binaries for win\nENV WPDPACK_URL https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip\nRUN \\\n\t./fetch.sh $WPDPACK_URL f5c80885bd48f07f41833d0f65bf85da1ef1727a && \\\n\tunzip `basename $WPDPACK_URL` -d /libpcap/win && \\\n\trm `basename $WPDPACK_URL`\n\n# Load gotpl\nADD yaml.v2 /go/src/gopkg.in/yaml.v2\nADD gotpl /go/src/github.com/tsg/gotpl\nRUN cd /go/src/github.com/tsg/gotpl && \\\n  go install\n\n# Add patch for gopacket.\nADD gopacket_pcap.patch /gopacket_pcap.patch\n\n# Add the wpcap.dll from the WinPcap_4_1_2.exe installer so that\n# we can generate a 64-bit compatible libwpcap.a.\nENV WINPCAP_DLL_SHA1 d2afb08d0379bd96e423857963791e2ba00c9645\nADD wpcap.dll /libpcap/win/wpcap.dll\nRUN \\\n    apt-get install mingw-w64-tools && \\\n    cd /libpcap/win && \\\n    echo \"$WINPCAP_DLL_SHA1 wpcap.dll\" | sha1sum -c - && \\\n    gendef /libpcap/win/wpcap.dll && \\\n    x86_64-w64-mingw32-dlltool --as-flags=--64 -m i386:x86-64 -k --output-lib /libpcap/win/WpdPack/Lib/x64/libwpcap.a --input-def wpcap.def && \\\n    rm wpcap.def wpcap.dll\n\n"
    },
    {
        "filename": "8c19bc881112a7a532e4847ca5eacbd3ce464ef2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#First build Tutorial tensorflow\nFROM qianjiangyuan/tutorial-horovod:1.7\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n\n# Add Glove vectors \nRUN mkdir -p /utils/glove; cd /utils/glove; \\\n    wget http://nlp.stanford.edu/data/glove.6B.zip; \\ \n    unzip glove.6B.zip; \\\n    rm glove.6B.zip glove.6B.?00d.txt \n# Add Yolo models\nRUN cd /utils; git clone --recurse-submodules git://github.com/DLWorkspace/YAD2K\nRUN mkdir /utils/models; cd /utils/models; wget https://dlwsdata.blob.core.windows.net/models/yolo.h5\n# Additional utility\n\nRUN pip3 install emoji \nRUN pip3 install faker \nRUN pip3 install Babel \nRUN pip3 install pydub \nRUN pip3 install dill \nRUN pip3 install imagehash\n# RUN pip3 install music21 \nRUN cd /utils; git clone --recurse-submodules https://github.com/DLWorkspace/nmt\n\n# The following install Cython & Pycocotools \nRUN pip3 install Cython\nRUN cd /utils && \\\n    git clone https://github.com/pdollar/coco.git && \\\n    cd /utils/coco/PythonAPI && \\\n    make && \\\n    make install && \\\n    python3 setup.py install \n\n# Install mask RCNN\nRUN cd /utils && git clone https://github.com/matterport/Mask_RCNN\n\n# For audio demo\nRUN sudo apt-get install -y software-properties-common\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 && apt-get update && apt-get install -y ffmpeg libav-tools x264 x265 \n\n# data for final task \nRUN apt-get update && apt-get install -y p7zip-full\nRUN cd /utils && \\\n    git clone https://github.com/stormstone/deeplearning.ai && \\\n    mkdir -p /utils/data/trigger_word && \\\n    mv deeplearning.ai/02-\u8bfe\u540e\u4f5c\u4e1a/05-\u7b2c\u4e94\u8bfe\\ \u5e8f\u5217\u6a21\u578b/03-\u7b2c\u4e94\u8bfe\u7b2c\u4e09\u5468\u4f5c\u4e1a/Trigger\\ word\\ detection/XY_train/ /utils/data/trigger_word/XY_train && \\\n    mv deeplearning.ai/02-\u8bfe\u540e\u4f5c\u4e1a/05-\u7b2c\u4e94\u8bfe\\ \u5e8f\u5217\u6a21\u578b/03-\u7b2c\u4e94\u8bfe\u7b2c\u4e09\u5468\u4f5c\u4e1a/Trigger\\ word\\ detection/XY_dev/ /utils/data/trigger_word/XY_dev && \\\n    rm -rf deeplearning.ai && \\\n    cd /utils/data/trigger_word/XY_train && unzip X.zip && rm X.zip && \\\n    cd /utils/data/trigger_word/XY_dev && 7z x X_dev.7z && rm X_dev.7z \n\nRUN pip3 install fastai\n\nRUN cd /utils;  git clone --recurse-submodules git://github.com/DLWorkspace/deep-learning-coursera\n\n# The following operation needs GPU to create yolo.h5, This currently only works for Yolo V2 (V1 and V3 have layers that can't be interpreted)\n# RUN cd /utils/YAD2K; \\\n#    wget https://pjreddie.com/media/files/yolov2.weights; \\\n#    wget https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov2.cfg; \\\n#    ./yad2k.py yolov2.cfg yolov2.weights model_data/yolo.h5\n"
    },
    {
        "filename": "8c97d61f334ffaf894177220f28139d3297f0723.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\n\nMAINTAINER Frank Austin Nothaft, fnothaft@berkeley.edu\n\nRUN apt-get update && apt-get install -y curl bzip2 perl make g++\n\n# pull down bwa-kit\nRUN curl -L http://sourceforge.net/projects/bio-bwa/files/bwakit/bwakit-0.7.15_x64-linux.tar.bz2 \\\n    | tar -xjC /opt/\n\n# get latest version of samblaster and build\nRUN curl -L https://github.com/GregoryFaust/samblaster/releases/download/v.0.1.24/samblaster-v.0.1.24.tar.gz \\\n    | tar -xvz -C /opt/ \\\n    && cd /opt/samblaster-v.0.1.24 \\\n    && make\n\n# Remove this patch once the PR against bwa is merged:\n# https://github.com/lh3/bwa/pull/96\nADD run-bwamem /opt/bwa.kit/run-bwamem \n\n# add wrapper script\nADD wrapper.sh /opt/wrapper.sh\n\nRUN mkdir /data\nWORKDIR /data\n\n# set entrypoint to bwakit\nENTRYPOINT [\"/opt/wrapper.sh\"]\n"
    },
    {
        "filename": "8cacbdc6b81a3c8cc8d024450080efe69f876004.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jguyomard/hugo-builder\nADD . /go/src/github.com/heptio/advocacy\nWORKDIR /go/src/github.com/heptio/advocacy\nCMD [\"hugo\"]\n\n\nFROM golang:latest\nMAINTAINER Kris Nova \"knova@heptio.com\"\nRUN mkdir -p /go/src/github.com/heptiolabs/git-events-operator\nADD . /go/src/github.com/heptiolabs/git-events-operator\nWORKDIR /go/src/github.com/heptiolabs/git-events-operator \nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o git-events-operator .\n\nFROM alpine:latest\nRUN mkdir -p /go/src/github.com/heptiolabs/git-events-operator\nWORKDIR /go/src/github.com/heptiolabs/git-events-operator\nCOPY --from=0 /go/src/github.com/heptiolabs/git-events-operator/git-events-operator .\nCMD [\"./git-events-operator\"]"
    },
    {
        "filename": "8e7c18896b84505849139514fe7481016766edb4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM base\nMAINTAINER Jacques Fuentes\n\nRUN apt-get install -y openssh-server\n\nRUN sed -e 's/#RSAAuthentication.*$/RSAAuthentication yes/'\nRUN mkdir /root/.ssh\nRUN mkdir /var/run/sshd\n# NOTE: change this key to your own\nADD sshkey.pub /root/.ssh/authorized_keys\nRUN chown root:root /root/.ssh/authorized_keys\n\nRUN useradd --create-home --home-dir /home/git git\nRUN mkdir /home/git/.ssh\nADD sshkey.pub /home/git/.ssh/authorized_keys\n\nRUN mkdir -p /srv/deployer\nRUN cd /srv/deployer && git init --bare\nRUN cd /srv/deployer && git config receive.denyCurrentBranch ignore\nRUN cd /srv/deployer && git config --bool receive.denyNonFastForwards false\nADD post-receive.sh /srv/deployer/hooks/post-receive\n\nADD serf.json /etc/serf/config.json\nADD supervisord.conf /etc/supervisord/conf.d/supervisord.conf\n\nEXPOSE 22 7946\n\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord/conf.d/supervisord.conf\"]\n"
    },
    {
        "filename": "8ef3a88bfe027cfe2c527facd999c619bd890ba4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM daocloud.io/ubuntu\nMAINTAINER zhengwen \"mail.zhengwen@gmail.com\"\nRUN sed -i 's/http:\\/\\/archive.ubuntu.com\\/ubuntu\\//http:\\/\\/mirrors.163.com\\/ubuntu\\//g' /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y python2.7 python-dev python-distribute python-pip ipython\nRUN apt-get install -y iputils-ping\nRUN apt-get install -y net-tools\n\nADD pip.conf ~/.pip/\nRUN pip install wheel\nRUN pip install requests \nRUN apt-get install -y libffi-dev libxml2-dev libxslt-dev lib32z1-dev libssl-dev\nRUN pip install lxml scrapy scrapyd\nRUN pip install redis\nRUN pip install pymongo\nRUN pip install scrapy-redis\n\nRUN mkdir /usr/local/spider\nRUN mkdir -p /data/spider/\nRUN apt-get install -y supervisor\nRUN echo_supervisord_conf > /etc/supervisor/conf.d/supervisord.conf\nRUN sed -i '$a [supervisord]\\nnodaemon=true\\n[program:scrapyd]\\ncommand=scrapyd\\ndirectory=/usr/local/spider' /etc/supervisor/conf.d/supervisord.conf\nENV SPIDER_ENV product\n\nRUN mkdir /etc/scrapyd\nADD scrapyd.conf /etc/scrapyd/scrapyd.conf\n\nEXPOSE 6800\nCMD [\"/usr/bin/supervisord\"]\t\n"
    },
    {
        "filename": "90e2e14e89872467d9f462a93758166be329cd17.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM nvidia/cuda:7.5-cudnn5-devel\n\n\n# Get dependencies\n\n# Update gcc for dense inference wrapper (CRF)\nRUN apt-get update && apt-get install -y software-properties-common\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\n\n\nRUN apt-get update && apt-get install -y \\\nbc \\\ncmake \\\ncurl \\\ngcc-4.9 \\\ng++-4.9 \\\ngcc-4.9-multilib \\\ng++-4.9-multilib \\\ngfortran \\\ngit \\\nlibprotobuf-dev \\\nlibleveldb-dev \\\nlibsnappy-dev \\\nlibopencv-dev \\\nlibboost-all-dev \\\nlibhdf5-serial-dev \\\nliblmdb-dev \\  \nlibjpeg62 \\\nlibfreeimage-dev \\\nlibatlas-base-dev \\\nlibgflags-dev \\\nlibgoogle-glog-dev \\\npkgconf \\\nprotobuf-compiler \\\npython-dev \\\npython-pip \\\npython-opencv \\\npython-numpy \\\nunzip \\\nwget \\\nvim \\\nhtop \\\nsshfs \\\ncifs-utils\n\n\n# Use gcc 4.9\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.9 30 && \\\nupdate-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.9 30 && \\\nupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 30 && \\\nupdate-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 30\n\n\n# Allow it to find CUDA libs\nRUN echo \"/usr/local/cuda/lib64\" > /etc/ld.so.conf.d/cuda.conf && \\\nldconfig\n\n\n# Clone Faustos 3D CAFFE\n\nRUN cd /opt && git clone https://github.com/faustomilletari/3D-Caffe.git caffe && cd /opt/caffe\n#RUN cd /opt && git clone https://github.com/BVLC/caffe.git caffe && cd /opt/caffe\n\n#Clone Faustos VNET Project\nRUN cd /opt/ && git clone https://github.com/patrickchrist/VNet.git vnet\n\n#Add deployment ssh key\nADD repo_key /\nRUN chmod 600 /repo_key\nRUN echo \"IdentityFile /repo_key\" >> /etc/ssh/ssh_config\nRUN echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\n\n# Clone and Install 3D DenseCRF\nRUN cd /opt && git clone -b master git@bitbucket.org:ibbm/denseinferencewrapper.git denseinferencewrapper\n# Build and install 3D DesneCRF\nRUN cd /opt/denseinferencewrapper && make && pip install .\n# Clone Saratan project\nRUN cd /opt/ && git clone git@bitbucket.org:patrickchrist/saratan.git \nENV PYTHONPATH /opt/caffe/python:/opt/saratan/:/opt/saratan/data/layers:/opt/vnet\n\n\n# Install caffe python dependencies\nRUN cd  /opt/caffe/python && \\\nfor req in $(cat requirements.txt); do sudo pip install $req; done\n# Instal pip packages used by various scripts, and useful for interactive dev\nRUN sudo pip install pydicom lmdb jupyter plyvel peewee nibabel tqdm pypng natsort medpy psutil\nRUN pip install --allow-insecure www.simpleitk.org -f http://www.simpleitk.org/SimpleITK/resources/software.html --timeout 30 SimpleITK\n# Install NLopt\nRUN cd /opt/ && wget http://ab-initio.mit.edu/nlopt/nlopt-2.4.2.tar.gz && tar -xvf nlopt-2.4.2.tar.gz && rm nlopt-2.4.2.tar.gz\nRUN cd /opt/nlopt-2.4.2 && ./configure --enable-shared && make -j$(nproc) && make install\nRUN echo \"/opt/nlopt-2.4.2/.libs/\" > /etc/ld.so.conf.d/nlopt.conf && ldconfig\n\n\n\n# Build Caffe\nRUN cd /opt/caffe && \\\ncp Makefile.config.example Makefile.config && \\\necho \"CXX := /usr/bin/g++-4.9\" >> Makefile.config && \\\n# Needed for the caffe build to support DIGITS\nsed -i 's/CXX :=/CXX ?=/' Makefile && \\\nsed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/' Makefile.config && \\\n# Build with cuDNN for speed improvement. See benchmarking here https://github.com/BVLC/caffe/issues/1317\nsed -i 's/# USE_CUDNN/USE_CUDNN/' Makefile.config && \\\nmake all -j$(nproc) && \\\nmake pycaffe -j$(nproc)\n\n# Install caffe\nENV PATH $PATH:/opt/caffe/.build_release/tools\n\n#Upgrade Numpy\nRUN sudo pip install numpy --upgrade\n\n\nEXPOSE 8888 8889 8890 8891 8892 8893 8894 8895 8896 8897 8898 8899 8900\n\n# For some reason, at this point git doesn't work giving the following error:\n# git-remote-https: symbol lookup error: /usr/lib/x86_64-linux-gnu/libasn1.so.8: undefined symbol: _et_list\n# so I run \"sudo ldconfig\" and it fixes it\nRUN sudo ldconfig\n\nRUN cd /opt/saratan && git pull\n\n"
    },
    {
        "filename": "9209fcdf910093ab5812110bdf318fe8d788af54.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM\t\tflat\nMAINTAINER\tMenzo Windhouwer <menzo.windhouwer@meertens.knaw.nl>\n\nRUN apt-get update &&\\\n\tapt-get -y dist-upgrade &&\\\n    apt-get -y install zip unzip\n\n#\n# easy-deposit\n#\n\nRUN cd /tmp &&\\\n    git clone https://github.com/DANS-KNAW/easy-deposit easy-deposit &&\\\n    cd /tmp/easy-deposit &&\\\n    # checkout version 1.0.2 (has no tag)\n    git checkout 64378e6be6ff83994fd675eb61a6ea332b39ff67 &&\\\n    sed -i 's|https://easy.dans.knaw.nl/maven/|http://maven.dans.knaw.nl/|g' pom.xml &&\\\n    sed -i 's|DANS-EASY|FLAT|g' src/main/scala/nl/knaw/dans/api/sword2/StatementManagerImpl.scala &&\\\n    sed -i 's|DANS Default Data Collection|FLAT Deposit Bag Collection|g' src/main/scala/nl/knaw/dans/api/sword2/ServiceDocumentManagerImpl.scala\n\nADD sword/web.xml /tmp/easy-deposit/src/main/webapp/WEB-INF/web.xml\n\nRUN cd /tmp/easy-deposit &&\\\n    mvn clean install &&\\    \n\tcp target/easy-deposit.war /var/www/fedora/tomcat/webapps/easy-deposit.war &&\\\n\tmkdir /var/www/fedora/tomcat/webapps/easy-deposit &&\\\n\tcd /var/www/fedora/tomcat/webapps/easy-deposit/ &&\\\n\tunzip ../easy-deposit.war &&\\\n\trm -r /tmp/easy-deposit\n    \nRUN mkdir -p /app/flat/deposit/sword/cfg &&\\\n    mkdir -p /app/flat/deposit/sword/tmp &&\\\n    mkdir -p /app/flat/deposit/bags\n    \nADD sword/logback.xml /app/flat/deposit/sword/cfg/logback.xml\nADD sword/application.properties /app/flat/deposit/sword/cfg/application.properties\nRUN sed -i \"s|FLAT_HOST|${FLAT_HOST}|g\" /app/flat/deposit/sword/cfg/application.properties &&\\\n    sed -i \"s|FLAT_NAME|${FLAT_NAME}|g\" /app/flat/deposit/sword/cfg/application.properties\n    \nENV EASY_DEPOSIT_HOME=\"/app/flat/deposit/sword\"\nRUN if [ `grep 'environment=' /etc/supervisor/conf.d/supervisord-tomcat.conf` ]; \\\n      then sed -i 's|^environment=\\(.*\\)$|environment=\\1,EASY_DEPOSIT_HOME=\"/app/flat/deposit/sword\"|g' /etc/supervisor/conf.d/supervisord-tomcat.conf; \\\n      else echo '' >> /etc/supervisor/conf.d/supervisord-tomcat.conf; echo 'environment=EASY_DEPOSIT_HOME=\"/app/flat/deposit/sword\"' >> /etc/supervisor/conf.d/supervisord-tomcat.conf; \\\n    fi\n\n# Add proxy to Apache\n\nRUN echo '# open up access to SWORD' >> /etc/apache2/apache2.conf &&\\ \n    echo 'ProxyPass \"/'${FLAT_NAME}'/easy-deposit\" \"http://localhost:8080/easy-deposit\"' >> /etc/apache2/apache2.conf\n\n#\n# Add bagit\n#\n\nRUN cd /tmp &&\\\n    wget https://github.com/LibraryOfCongress/bagit-java/releases/download/v4.12.3/bagit-v4.12.3.zip &&\\\n    cd /app/ &&\\\n    unzip /tmp/bagit-v4.12.3.zip &&\\\n    ln -s bagit-v4.12.3 bagit &&\\\n    ln -s /app/bagit/bin/bagit /app/flat/bin/bag\n\n#\n# Add FLAT's own scripts and tools \n#\n\nADD flat/scripts/* /app/flat/bin/\nRUN chmod +x /app/flat/bin/*.sh\n\n#Clean up APT when done.\nRUN apt-get clean &&\\\n\trm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "93fc9ff0b7c267f54be99430e66b43fd532b1450.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM developmentseed/caffe-segnet:cuda8\nMAINTAINER anand@developmentseed.org\n\nENV DEBIAN_FRONTEND noninteractive\nRUN sudo apt-get update && sudo apt-get install curl -y\nRUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - && \\\n    sudo apt-get install -y nodejs build-essential\n\nRUN pip install boto3 && \\\n    pip install protobuf && \\\n    pip install cython && \\\n    pip install scikit-image\n\n# bsdmainutils is for 'paste' and 'column' commands, used in plot_training_log\nRUN pip install awscli && \\\n    apt-get install -y bsdmainutils\n\nADD package.json /workspace/package.json\nRUN npm install\n\nADD . /workspace\nWORKDIR /workspace\n\n# Expose demo server port\nEXPOSE 5000\n\nENTRYPOINT [\"python\", \"-u\", \"segnet/train\"]\n"
    },
    {
        "filename": "9786c5cf7b9aea42e985e90e89d74c1b3394f621.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jacopomauro/hyvarrec\nMAINTAINER Jacopo Mauro\n\n# install required packages adn download repository\nRUN cd /  && \\\n    apt-get update && \\\n\tapt-get install -y rsync sshpass && \\\n    rm -rf /var/lib/apt/lists/* && \\\n\tpip install click lrparsing z3-solver pysmt requests && \\\n\tgit clone --depth 1 https://github.com/HyVar/gentoo_to_mspl.git\n\n# hyvar-rec in /bin\nRUN echo '#!/bin/bash' >> /bin/hyvar-rec && \\\n    echo 'python /hyvar-rec/hyvar-rec.py \"$@\"' >> /bin/hyvar-rec && \\\n    chmod 770 /bin/hyvar-rec\n\nWORKDIR /gentoo_to_mspl"
    },
    {
        "filename": "9951e8e949bdc50382dde8a9ea9efb06ee54c3e6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "\n\n###################################################\n# Stage 1 - docker container to build ensembl-vep #\n###################################################\nFROM ubuntu:18.04 as builder\n\n# Update aptitude and install some required packages\n# a lot of them are required for Bio::DB::BigFile\nRUN apt-get update && apt-get -y install \\\n    build-essential \\\n    git \\\n    libpng-dev \\\n    perl \\\n    perl-base \\\n    unzip \\\n    wget && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup VEP environment\nENV OPT /opt/vep\nENV OPT_SRC $OPT/src\nENV HTSLIB_DIR $OPT_SRC/htslib\n# Branch to clone, e.g. \"-b release/96\"\nENV BRANCH \"\"\n\n# Working directory\nWORKDIR $OPT_SRC\n\n# Clone/download repositories/libraries\n# Clone ensembl git repository and extract useful ensemb core file\nRUN git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl.git && \\\n    cp ensembl/cpanfile ensembl_cpanfile && \\\n    rm -rf ensembl && \\\n    # Clone ensembl-vep git repository\n    git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-vep.git && chmod u+x ensembl-vep/*.pl && \\\n    # Clone ensembl-variation git repository and compile C code\n    git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-variation.git && \\\n    mkdir var_c_code && \\\n    cp ensembl-variation/C_code/*.c ensembl-variation/C_code/Makefile var_c_code/ && \\\n    rm -rf ensembl-variation && \\\n    chmod u+x var_c_code/* && \\\n    # Clone bioperl-ext git repository\n    git clone --depth 1 https://github.com/bioperl/bioperl-ext.git && \\\n    # Download ensembl-xs\n    wget https://github.com/Ensembl/ensembl-xs/archive/2.3.2.zip -O ensembl-xs.zip && \\\n    unzip -q ensembl-xs.zip && mv ensembl-xs-2.3.2 ensembl-xs && rm -rf ensembl-xs.zip && \\\n    # Clone/Download other repositories: bioperl-live is needed so the cpanm dependencies installation from the ensembl-vep/cpanfile file takes less disk space\n    ensembl-vep/travisci/get_dependencies.sh && \\\n    # Only keep the bioperl-live \"Bio\" library\n    mv bioperl-live bioperl-live_bak && mkdir bioperl-live && mv bioperl-live_bak/Bio bioperl-live/ && rm -rf bioperl-live_bak && \\\n    ## A lot of cleanup on the imported libraries, in order to reduce the docker image ##\n    rm -rf Bio-HTS/.??* Bio-HTS/Changes Bio-HTS/DISCLAIMER Bio-HTS/MANIFEST* Bio-HTS/README Bio-HTS/scripts Bio-HTS/t Bio-HTS/travisci \\\n           bioperl-ext/.??* bioperl-ext/Bio/SeqIO bioperl-ext/Bio/Tools bioperl-ext/Makefile.PL bioperl-ext/README* bioperl-ext/t bioperl-ext/examples \\\n           ensembl-vep/.??* ensembl-vep/docker \\\n           ensembl-xs/.??* ensembl-xs/Changes ensembl-xs/INSTALL ensembl-xs/MANIFEST ensembl-xs/README ensembl-xs/t ensembl-xs/travisci \\\n           htslib/.??* htslib/INSTALL htslib/NEWS htslib/README* htslib/test && \\\n    # Only keep needed kent-335_base libraries for VEP\n    mv kent-335_base kent-335_base_bak && mkdir -p kent-335_base/src && \\\n    cp -R kent-335_base_bak/confs kent-335_base/ && \\\n    cp -R kent-335_base_bak/src/lib kent-335_base_bak/src/inc kent-335_base_bak/src/jkOwnLib kent-335_base/src/ && \\\n    cp kent-335_base_bak/src/*.sh kent-335_base/src/ && \\\n    rm -rf kent-335_base_bak\n\n# Setup bioperl-ext\nWORKDIR bioperl-ext/Bio/Ext/Align/\nRUN perl -pi -e\"s|(cd libs.+)CFLAGS=\\\\\\'|\\$1CFLAGS=\\\\\\'-fPIC |\" Makefile.PL\n\n# Install htslib binaries (need bgzip, tabix)\nWORKDIR $HTSLIB_DIR\nRUN make install && rm -f Makefile *.c cram/*.c\n\n# Compile Variation LD C scripts\nWORKDIR $OPT_SRC/var_c_code\nRUN make && rm -f Makefile *.c\n\n\n###################################################\n# Stage 2 - docker container to build ensembl-vep #\n###################################################\nFROM ubuntu:18.04\n\n# Update aptitude and install some required packages\n# a lot of them are required for Bio::DB::BigFile\nRUN apt-get update && apt-get -y install \\\n    build-essential \\\n    cpanminus \\\n    curl \\\n    libmysqlclient-dev \\\n    libpng-dev \\\n    libssl-dev \\\n    locales \\\n    openssl \\\n    perl \\\n    perl-base \\\n    unzip \\\n    vim && \\\n    apt-get -y purge manpages-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup VEP environment\nENV OPT /opt/vep\nENV OPT_SRC $OPT/src\nENV PERL5LIB_TMP $PERL5LIB:$OPT_SRC/ensembl-vep:$OPT_SRC/ensembl-vep/modules\nENV PERL5LIB $PERL5LIB_TMP:$OPT_SRC/bioperl-live\nENV KENT_SRC $OPT/src/kent-335_base/src\nENV HTSLIB_DIR $OPT_SRC/htslib\nENV MACHTYPE x86_64\nENV DEPS $OPT_SRC\nENV PATH $OPT_SRC/ensembl-vep:$OPT_SRC/var_c_code:$PATH\nENV LANG_VAR en_US.UTF-8\n\n# Create vep user\nRUN useradd -r -m -U -d \"$OPT\" -s /bin/bash -c \"VEP User\" -p '' vep && usermod -a -G sudo vep && mkdir -p $OPT_SRC\nUSER vep\n\n# Copy downloaded libraries (stage 1) to this image (stage 2)\nCOPY --chown=vep:vep --from=builder $OPT_SRC $OPT_SRC\n#############################################################\n\n# Change user to root for the following complilations/installations\nUSER root\n\n# Install bioperl-ext, faster alignments for haplo (XS-based BioPerl extensions to C libraries)\nWORKDIR $OPT_SRC/bioperl-ext/Bio/Ext/Align/\nRUN perl Makefile.PL && make && make install && rm -f Makefile*\n\n# Install ensembl-xs, faster run using re-implementation in C of some of the Perl subroutines\nWORKDIR $OPT_SRC/ensembl-xs\nRUN perl Makefile.PL && make && make install && rm -f Makefile*\n\nWORKDIR $OPT_SRC\n# Install/compile more libraries\nRUN ensembl-vep/travisci/build_c.sh && \\\n    # Install ensembl perl dependencies (cpanm)\n    cpanm --installdeps --with-recommends --notest --cpanfile ensembl_cpanfile . && \\\n    cpanm --installdeps --with-recommends --notest --cpanfile ensembl-vep/cpanfile . && \\\n    # Delete bioperl after the cpanm installs as it will be reinstalled by the INSTALL.pl script\n    rm -rf bioperl-live && \\\n    # Configure \"locale\", see https://github.com/rocker-org/rocker/issues/19\n    echo \"$LANG_VAR UTF-8\" >> /etc/locale.gen && locale-gen en_US.utf8 && \\\n    /usr/sbin/update-locale LANG=$LANG_VAR && \\\n    # Copy htslib executables\n    cp $HTSLIB_DIR/bgzip $HTSLIB_DIR/tabix $HTSLIB_DIR/htsfile /usr/local/bin/\n\nENV LC_ALL $LANG_VAR\nENV LANG $LANG_VAR\n\n# Switch back to vep user\nUSER vep\nENV PERL5LIB $PERL5LIB_TMP\n\n# Final steps\nWORKDIR $OPT_SRC/ensembl-vep\n# Update bash profile\nRUN echo >> $OPT/.profile && \\\n    echo PATH=$PATH:\\$PATH >> $OPT/.profile && \\\n    echo export PATH >> $OPT/.profile && \\\n    # Run INSTALL.pl and remove the ensemb-vep tests and travis\n    ./INSTALL.pl -a ap -g miRNA,LoF -l && rm -rf t travisci .travis.yml\n\nWORKDIR /\nADD loftee.tgz $OPT/src/ensembl-vep/modules\n\n\n####################################################\n# Stage 3 - adding functionality for PCGR analysis #\n####################################################\n\nUSER root\n\nRUN apt-get update \\\n  && apt-get install -y python3-pip python3-dev \\\n  && cd /usr/local/bin \\\n  && ln -s /usr/bin/python3 python \\\n  && pip3 install --upgrade pip\n\nRUN apt-get update && apt-get -y install apache2 apt-utils build-essential cpanminus curl git libmysqlclient-dev libpng-dev libssl-dev manpages mysql-client openssl perl perl-base unzip vim wget sudo\n# install ensembl dependencies\nRUN cpanm Test::Object PPI::Document Task::Weaken Test::SubCalls Test::Object DBI DBD::mysql Archive::Zip Perl::Critic Set::IntervalTree\n\nRUN apt-get update && apt-get install apt-transport-https\n\n\nRUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\nRUN sudo apt-get update \\\n   && sudo apt-get -y install software-properties-common\n\nENV TZ=Europe/Minsk\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'\n#RUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'\nRUN apt-get update && apt-get -y install r-base\n\nUSER root\nWORKDIR /\n\nENV PACKAGE_BIO=\"libhts2 bedtools\"\nENV PACKAGE_DEV=\"gfortran gcc-multilib autoconf liblzma-dev libncurses5-dev libblas-dev liblapack-dev libssh2-1-dev libxml2-dev vim libssl-dev libcairo2-dev libbz2-dev libcurl4-openssl-dev\"\nENV PYTHON_MODULES=\"numpy cython scipy pandas cyvcf2 toml\"\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tnano ed locales vim-tiny fonts-texgyre \\\n    $PACKAGE_DEV $PACKAGE_BIO \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN apt-get autoremove\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    r-base-core \\\n    r-recommended \\\n \t\tr-base\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends libpq-dev libxt-dev libudunits2-dev\n\nRUN wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\nRUN bunzip2 -dc samtools-1.9.tar.bz2 | tar xvf -\nRUN cd samtools-1.9 && ./configure --prefix=/usr/local/bin && make && make install\n\n\nWORKDIR /\n\nRUN R -e \"install.packages(c('BiocManager','devtools'))\"\nRUN R -e \"BiocManager::install(\\\"ComplexHeatmap\\\")\"\nRUN R -e \"BiocManager::install(\\\"VariantAnnotation\\\")\"\nRUN R -e \"BiocManager::install(\\\"Biostrings\\\")\"\n\n## Install maftools from github repository.\nRUN R -e \"library(\\\"devtools\\\")\"\nRUN R -e \"devtools::install_github(repo = \\\"PoisonAlien/maftools\\\")\"\n\n## Install other bioconductor/cran packages\nRUN R -e \"BiocManager::install(c('regioneR','MutationalPatterns','deconstructSigs', 'BSgenome.Hsapiens.UCSC.hg19','BSgenome.Hsapiens.UCSC.hg38','GenomeInfoDb','GenomicRanges','S4Vectors','karyoploteR'))\"\nRUN R -e \"install.packages(c('configr','rmarkdown','httr','git2r','data.table','tidyverse','htmltools','caret','randomForest','plotly','RcppTOML','SeqKat'), dependencies = T, repos = 'http://cran.us.r-project.org')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/DT'); devtools::install_github('mjkallen/rlogging'); devtools::install_github('kent37/summarywidget')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/crosstalk')\"\nRUN rm -rf /tmp/R*\n\n\n## Install vcfanno version 0.3.1\nRUN wget https://github.com/brentp/vcfanno/releases/download/v0.3.1/vcfanno_linux64 && \\\n    mv vcfanno_linux64 vcfanno && \\\n    mv vcfanno /usr/local/bin && \\\n    chmod 755 /usr/local/bin/vcfanno\n\n## Install Ensembl's Vcf-validator\nRUN wget https://github.com/EBIvariation/vcf-validator/releases/download/v0.6/vcf_validator && \\\nmv vcf_validator /usr/local/bin/ && \\\nchmod 755 /usr/local/bin/vcf_validator\n\n## Install pandoc (for HTML report generation)\nRUN wget https://github.com/jgm/pandoc/releases/download/2.6/pandoc-2.6-1-amd64.deb && \\\n  dpkg -i pandoc* && \\\n  rm pandoc* && \\\n  apt-get clean\n\nUSER root\nWORKDIR /\n\n\n## Install tools used for compilation\nRUN sudo -H pip install --upgrade pip\nRUN sudo -H pip install -U setuptools\nRUN sudo -H pip install $PYTHON_MODULES\n#\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cmake\n\nRUN wget https://github.com/stevengj/nlopt/archive/v2.5.0.tar.gz \\\n\t\t&& gzip -dc v2.5.0.tar.gz | tar xvf - \\\n\t\t&& cd nlopt-2.5.0 \\\n    && cmake . \\\n\t\t&& make \\\n\t\t&& make install\n\nUSER root\nWORKDIR /\n\n\nRUN git clone https://github.com/atks/vt.git\nWORKDIR vt\nRUN make\nRUN make test\nRUN cp vt /usr/local/bin\nRUN export PATH=/usr/local/bin:$PATH\n\n## Install mosdepth through miniconda\nWORKDIR /\nENV HOME=/usr/local\nRUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b\nENV PATH=$PATH:/usr/local/miniconda3/bin:\nRUN conda config --add channels bioconda\nRUN conda install mosdepth\nRUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n\n## Add local PCGR R package\nWORKDIR /\nADD R/ /\nRUN R -e \"devtools::install_github('mjkallen/rlogging')\"\nRUN R -e \"devtools::install('pcgrr')\"\nRUN R -e \"devtools::install_github('hms-dbmi/UpSetR')\"\nRUN R -e \"devtools::install_github('kassambara/ggpubr')\"\n\n# Add local PCGR Python scripts/libraries\nADD pcgr.tgz /\nENV PATH=$PATH:/pcgr\nENV PYTHONPATH=:/pcgr/lib:${PYTHONPATH}\n#ENV VCFANNO_DATA_DOCKER=\"/data\"\n\nWORKDIR /\nRUN curl -L -o mskcc-vcf2maf.tar.gz https://api.github.com/repos/mskcc/vcf2maf/tarball/v1.6.16\nRUN tar -zxf mskcc-vcf2maf.tar.gz\nRUN chmod 755 /mskcc-vcf2maf-*/*.pl\nRUN ln -s /mskcc-vcf2maf-*/vcf2maf.pl /usr/local/bin/vcf2maf.pl\n\n## Clean Up\nRUN apt-get clean autoclean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm -rf /var/lib/{dpkg,cache,log}\n\nVOLUME /workdir\nWORKDIR /workdir/\nUSER root\nRUN mkdir /data && chmod 777 /data\nWORKDIR /data\nVOLUME /data\nWORKDIR /\nADD pcgr.R /\nADD cpsr.R /\n\nUSER root\nWORKDIR /\n\nRUN rm -f nlopt-2.5.0.tar.gz\nRUN rm -rf $HOME/src/ensembl-vep/t/\nRUN rm -f $HOME/src/v335_base.tar.gz\nRUN rm -f $HOME/src/release-1-6-924.zip\nRUN rm -rf /vt\nRUN rm -rf /samtools-1.9.tar.bz2\nRUN rm -rf /mskcc-vcf2maf.tar.gz\n\nENV PATH=/usr/local/bin/bin:$PATH\n\n# WORKDIR /\n# ENV HOME=/usr/local\n# RUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n# RUN bash Miniconda3-latest-Linux-x86_64.sh -b\n# ENV PATH=$PATH:/usr/local/miniconda3/bin:\n# RUN conda config --add channels bioconda\n# RUN conda install mosdepth\n# RUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n"
    },
    {
        "filename": "b8fa5f9b2b35630d88f2a6b6fbd536b99d5d2155.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER izuolan <i@zuolan.me>\n\nRUN apt-get update && \\\n    apt-get -y install sudo procps wget unzip mc && \\\n    echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    useradd -u 1000 -G users,sudo -d /home/user --shell /bin/bash -m user && \\\n    echo \"secret\\nsecret\" | passwd user && apt-get clean && \\\n    sudo apt-get install -y -q git subversion apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    lxc \\\n    iptables && \\\n    apt-get clean all\n\nUSER user\n\nRUN curl -sSL https://get.docker.com/ | sh && \\\n    sudo usermod -aG docker user\n\nENV CHE_VERSION=\"3.13.4.2\" \\\n    MAVEN_VERSION=3.2.2 \\\n    JAVA_VERSION=8u45 \\\n    JAVA_VERSION_PREFIX=1.8.0_45 \\\n    CHE_LOCAL_CONF_DIR=/home/user/.che\n\nENV JAVA_HOME=/opt/jdk$JAVA_VERSION_PREFIX \\\n    M2_HOME=/opt/apache-maven-$MAVEN_VERSION\n\nENV PATH=$JAVA_HOME/bin:$M2_HOME/bin:$PATH\n\nRUN mkdir /home/user/che-$CHE_VERSION /home/user/che-projects && \\\n    wget -q http://maven.codenvycorp.com/content/repositories/codenvy-public-releases/org/eclipse/che/ide/assembly-sdk/$CHE_VERSION/assembly-sdk-$CHE_VERSION.zip -P /home/user && \\\n    unzip -q /home/user/assembly-sdk-$CHE_VERSION.zip -d /home/user && \\\n    cp -a /home/user/assembly-sdk-$CHE_VERSION/. /home/user/che-$CHE_VERSION/ && \\\n    rm /home/user/assembly-sdk-$CHE_VERSION.zip && \\\n    rm -rf /home/user/assembly-sdk-$CHE_VERSION && \\\n    wget \\\n    --no-cookies \\\n    --no-check-certificate \\\n    --header \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\n    -qO- \\\n    \"http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-b14/jdk-$JAVA_VERSION-linux-x64.tar.gz\" | sudo tar -zx -C /opt/ && \\\n    echo \"export JAVA_HOME=$JAVA_HOME\" >> /home/user/.bashrc && \\\n    sudo mkdir /opt/apache-maven-$MAVEN_VERSION/ && \\\n    sudo wget -qO- \"https://archive.apache.org/dist/maven/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sudo tar -zx --strip-components=1 -C /opt/apache-maven-$MAVEN_VERSION/ && \\\n    echo \"export M2_HOME=$M2_HOME\" >> /home/user/.bashrc && \\\n    mkdir -p /home/user/.che && \\\n    echo \"export PATH=$PATH\" >> /home/user/.bashrc && \\\n    cd /home/user/.che && \\\n    touch vfs && \\\n    echo \"1q2w3e=/home/user/che-$CHE_VERSION/temp/fs-root\" >> vfs && \\\n    echo \"export CHE_LOCAL_CONF_DIR=$CHE_LOCAL_CONF_DIR\" >> /home/user/.bashrc && \\\n    sudo chmod 757 -R /home/user/che-$CHE_VERSION && \\\n    sudo chmod 757 -R /home/user/.che\n\nADD che.properties /home/user/.che/che.properties\nADD ./wrapdocker /usr/local/bin/wrapdocker\nRUN sudo chmod +x /usr/local/bin/wrapdocker\nWORKDIR /home/user/che-$CHE_VERSION/bin\n\n# expose 8080 port and a range of ports for runners\nEXPOSE 8080 8000 49152-49162\nCMD sudo wrapdocker & ./che.sh run\n"
    },
    {
        "filename": "b9eaaf8a79621f01bd0ed3548ba12dc60b87e3d1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "## Dockerfile for the wagtail demo, runs eveything in one container\n\n## Web admin: admin / test\n\n# Installation script for a full install.. could be usefull in the future: https://wagtail.io/ubuntu.sh\n\nFROM dockerfile/ubuntu\nMAINTAINER \u00d8yvind Skaar\n\nRUN apt-get update\nRUN apt-get install -y build-essential\nRUN apt-get install -y postgresql  libpq-dev     # Demo can run on sqlite3, but the installer still looks for pg_.. bins\nRUN apt-get install -y python-dev python-pip\nRUN apt-get install -y libxml2-dev libxslt1-dev\nRUN apt-get install -y libjpeg-dev libtiff-dev zlib1g-dev libfreetype6-dev liblcms2-dev\n\n\n# Wagtail demo\nRUN cd / && git clone https://github.com/torchbox/wagtaildemo.git\n\nRUN cd /wagtaildemo && pip install -r requirements/dev.txt\n\nADD prepare_db.sh /wagtaildemo/\nRUN bash /wagtaildemo/prepare_db.sh\n\nCMD /etc/init.d/postgresql start && cd /wagtaildemo && echo \"Wagtail started on port 8000\" && ./manage.py runserver 0.0.0.0:8000\n"
    },
    {
        "filename": "ba482d9024454c136ebb7f48bf622657bd6f5ae6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM extellisys/debian-sid\nRUN dpkg --add-architecture i386\nRUN apt-get update && apt-get install --assume-yes gcc-4.8 build-essential make libc6-dev-i386 libc6-i686 git-core python python-setuptools python-pip\nWORKDIR /root\nRUN git clone https://github.com/JonathanSalwan/ROPgadget.git\nRUN cd ROPgadget/dependencies/capstone-next && ./make.sh && ./make.sh install && cd ./bindings/python && make install\n#RUN cd ROPgadget && python setup.py install\nRUN pip install ropgadget\nADD ./ /root/\n"
    },
    {
        "filename": "bc19bdfb34b08185c7b259ac41cea6434355e8b7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM koding/base\nMAINTAINER Sonmez Kartal <sonmez@koding.com>\n\nRUN apt-get update && \\\n    apt-get install --yes \\\n            mongodb-server \\\n            postgresql postgresql-contrib \\\n            rabbitmq-server \\\n            redis-server\n\nRUN rabbitmq-plugins enable rabbitmq_management\n\nUSER postgres\nRUN sed -i \"s/#listen_addresses =.*/listen_addresses = '*'/\" /etc/postgresql/9.3/main/postgresql.conf\nRUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\nUSER root\n\nRUN cd /opt && git clone https://github.com/koding/koding.git\n\nWORKDIR /opt/koding\n\nRUN service postgresql start && \\\n    go/src/socialapi/db/sql/definition/create.sh && \\\n    service postgresql stop\n\nRUN npm install --unsafe-perm && \\\n    echo master > VERSION && \\\n    ./configure --host localhost --hostname localhost --publicPort 80 && \\\n    go/build.sh && \\\n    service postgresql start && ./run migrate up && service postgresql stop && \\\n    make -C client dist && \\\n    rm -rf generated\n\n\nADD docker-entrypoint /opt/koding/docker-entrypoint\nADD entrypoint.sh /opt/koding/entrypoint.sh\nADD wait.sh /opt/koding/wait.sh\n\nEXPOSE 80\n\nENTRYPOINT [\"/opt/koding/docker-entrypoint\"]\n"
    },
    {
        "filename": "bd0dab4b8f5ab4ec6536fedec96b39d11de84f65.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\n\nMAINTAINER kuntalganguly.it@gmail.com\n\n# install python3, nginx, supervisor\nRUN apt-get update --fix-missing && apt-get install -y --allow-unauthenticated \\\n  build-essential \\\n  git \\\n  python3 \\\n  python3-pip \\\n  nginx \\\n  supervisor \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# install virtualenv\nRUN pip3 install -U pip && pip install virtualenv && rm -rf /tmp/* /root/.cache/pip\n\n# create virtual env and install dependencies\n# due to a bug in h5, we need to install Cython first\nRUN virtualenv /opt/venv\nADD ./requirements.txt /opt/venv/requirements.txt\nRUN /opt/venv/bin/pip install Cython && /opt/venv/bin/pip install -r /opt/venv/requirements.txt && rm -rf /tmp/* /root/.cache/pip\nRUN mkdir -p /opt/deep/model && chmod  777 /opt/deep/model/\nVOLUME /deep/model\n\n# expose port\nEXPOSE 80\nEXPOSE 5000\n\n# add config files\nADD ./supervisord.conf /etc/supervisord.conf\nADD ./nginx.conf /etc/nginx/nginx.conf\n\n# copy the service code\nADD ./service /opt/app\n\n# start supervisor to run our wsgi server\nCMD supervisord -c /etc/supervisord.conf -n\n"
    },
    {
        "filename": "c1929340d82dde4375baa875d99e9117624b4dfa.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "############################################################\n# Dockerfile that creates a container for running Gate One.\n# Inside the container Gate One will run as the 'gateone'\n# user and will listen on port 8000.  docker run example:\n#\n#   docker run -t --name=gateone -p 443:8000 gateone\n#\n# That would run Gate One; accessible via port 443 from\n# outside the container.  It will also run in the foreground\n# with pretty-printed log output (so you can see what's\n# going on).  To run Gate One in the background:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone\n#\n# You could then stop or start the container like so:\n#\n#   docker stop gateone\n#   docker start gateone\n#\n# The script that starts Gate One inside of the container\n# performs a 'git pull' and will automatically install the\n# latest code whenever it runs.  To disable this feature\n# simply pass --noupdate when running the container:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone --noupdate\n#\n# Note that merely stopping & starting the container doesn't\n# pull in updates.  That will only happen if you 'docker rm'\n# the container and start it back up again.\n#\n############################################################\n\nFROM ubuntu\nMAINTAINER Dan McDougall <daniel.mcdougall@liftoffsoftware.com>\n\nENV GATEONE_REPO_URL https://github.com/liftoff/GateOne.git\n\n# Ensure everything is up-to-date\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update --fix-missing && apt-get -y upgrade\n\n# Install dependencies\nRUN apt-get -y \\\n    install python-pip \\\n    python-imaging \\\n    python-setuptools \\\n    python-mutagen \\\n    python-pam \\\n    python-dev \\\n    git \\\n    telnet \\\n    openssh-client && \\\n    apt-get -y clean && \\\n    apt-get -q -y autoremove\nRUN pip install --upgrade futures tornado cssmin slimit psutil\n\n# Create the necessary directories, clone the repo, and install everything\nRUN mkdir -p /gateone/logs && \\\n    mkdir -p /gateone/users && \\\n    mkdir -p /etc/gateone/conf.d && \\\n    mkdir -p /etc/gateone/ssl && \\\n    cd /gateone && \\\n    git clone $GATEONE_REPO_URL && \\\n    cd GateOne && \\\n    python setup.py install && \\\n    cp docker/update_and_run_gateone.py /usr/local/bin/update_and_run_gateone && \\\n    cp docker/60docker.conf /etc/gateone/conf.d/60docker.conf\n\n# This ensures our configuration files/dirs are created:\nRUN /usr/local/bin/gateone --configure \\\n    --log_file_prefix=\"/gateone/logs/gateone.log\"\n\n# Remove the auto-generated key/certificate so that a new one gets created the\n# first time the container is started:\nRUN rm -f /etc/gateone/ssl/key.pem && \\\n    rm -f /etc/gateone/ssl/certificate.pem\n# (We don't want everyone using the same SSL key/certificate)\n\nEXPOSE 8000\n\nCMD [\"/usr/local/bin/update_and_run_gateone\", \"--log_file_prefix=/gateone/logs/gateone.log\"]\n"
    },
    {
        "filename": "c1edcb46c1a1ca07d137eaa600ea8bc3d9544fb6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM balabit/syslog-ng-dev:latest  \nMAINTAINER Andras Mitzki <andras.mitzki@balabit.com>  \n  \nENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig/  \n  \nRUN apt-get update -qq && apt-get install -y \\  \ngperf \\  \nlibevent-dev \\  \nliblua5.2-dev \\  \nlibmongo-client-dev \\  \nlibperl-dev \\  \nlibrdkafka-dev \\  \nlibtokyocabinet-dev \\  \nlibzmq3-dev \\  \nsyslog-ng-dev  \n  \nRUN git clone https://github.com/talien/grok.git /root/grok && \\  \ncd /root/grok && \\  \nautoreconf -i && \\  \n./configure && \\  \nmake && \\  \nmake install  \n  \nADD libgrok.conf /etc/ld.so.conf.d/libgrok.conf  \nRUN ldconfig  \n\n"
    },
    {
        "filename": "c25deefc92d6de6799e5448d68884be418b3e776.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM lablup/kernel-base:jail as jail-builder\nFROM lablup/kernel-base:hook as hook-builder\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM ubuntu:16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED 1\n\nRUN apt update -y && \\\n    apt install -y \\\n        ca-certificates \\\n        wget \\\n        libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \\\n\tlibmpdec2 \\\n        libssl1.0.0 \\\n\tlibssl-dev \\\n        libncursesw5 libtinfo5 libreadline6 \\\n\tproj-bin \\\n        libgeos-dev \\\n        mime-support \\\n\tgcc g++ \\\n        libproj-dev libgeos-dev \\\t\n        libzmq3-dev libuv1\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n# Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n\n# Prepare for building Pytorch wheel\nRUN pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" && \\\n    pip install --no-cache-dir h5py && \\\n    pip install --no-cache-dir Cython && \\\n    pip install --no-cache-dir matplotlib bokeh && \\\n    pip install --no-cache-dir pyproj && \\\n    pip install --no-cache-dir Cartopy && \\\n    pip install --no-cache-dir torchvision && \\\n    pip install --no-cache-dir keras && \\\n    pip install --no-cache-dir ipython && \\\n    pip install --no-cache-dir pandas && \\\n    pip install --no-cache-dir seaborn && \\\n    pip install --no-cache-dir pillow && \\\n    pip install --no-cache-dir networkx cvxpy && \\\n    pip install --no-cache-dir scikit-learn scikit-image && \\\n    pip install --no-cache-dir scikit-image && \\\n    pip install --no-cache-dir pygments && \\\n    pip install --no-cache-dir jupyter && \\    \n    rm -f /tmp/*.whl\n\n# Install Torch\nRUN pip install --no-cache-dir \\\n        https://download.pytorch.org/whl/cpu/torch-0.4.1-cp36-cp36m-linux_x86_64.whl \\\n    pip install --no-cache-dir torchvision \\ \t\n    rm -rf /root/.cache\n\nRUN apt-get install -y libseccomp2 gosu && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists /var/cache/apt/archives && \\\n    ln -s /usr/sbin/gosu /usr/sbin/su-exec && \\\n    mkdir /home/work && chmod 755 /home/work; \\\n    mkdir /home/backend.ai && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nCOPY policy.yml /home/backend.ai/policy.yml\n\n# Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD /home/backend.ai/libbaihook.so\n\n# Install kernel-runner scripts package\nRUN pip install --no-cache-dir \"backend.ai-kernel-runner[python]~=1.4.0\"\n\n# Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR /home/backend.ai/.matplotlib\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n    && python /tmp/matplotlib-fontcache.py \\\n    && rm /tmp/matplotlib-fontcache.py\n\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000 2001 2002 2003\n\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080\"      \n\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \\\n     \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0\n\n# Install Torch\nRUN pip install --no-cache-dir \\\n        torch \\\n\ttorchvision && \\\n\trm -rf /root/.cache\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0\n"
    },
    {
        "filename": "99bb3d5be492c24e764dda2e02afd2a381a4f671.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER Mu Li <muli@cs.cmu.edu>\n\n#\n# First, build MXNet binaries (ref mxnet/docker/cpu/Dockerfile)\n#\n\nRUN apt-get update && apt-get install -y build-essential git libopenblas-dev liblapack-dev libopencv-dev\nRUN git clone --recursive https://github.com/dmlc/mxnet/ && cd mxnet && \\\n    cp make/config.mk . && \\\n    echo \"USE_BLAS=openblas\" >>config.mk && \\\n    make -j$(nproc)\n\n# python pakcage\nRUN apt-get install -y python-numpy wget unzip\nENV PYTHONPATH /mxnet/python\n\n#\n# Now set up tools for doc build\n#\n\nRUN apt-get update && apt-get install -y \\\n    doxygen \\\n    build-essential \\\n    git \\\n    python-pip\n\nRUN pip install sphinx==1.3.5 CommonMark==0.5.4 breathe mock==1.0.1 recommonmark\n\nWORKDIR /opt/mxnet/docs\n\n# Fool it into thinking it's on a READTHEDOCS server, so it builds the\n# API reference\nENV READTHEDOCS true\n\nENTRYPOINT /opt/mxnet/docs/build-preview.sh\n\nEXPOSE 8008\n\n# Put this at the end so that you don't have to rebuild the earlier\n# layers when iterating on the docs themselves.\nADD . /opt/mxnet/docs\n\n"
    },
    {
        "filename": "9c8cac1a0cad5002db2d5c0bffac1c3ce4c41bc7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM tutum/lamp:latest\n\nMAINTAINER c0ny1 <root@gv7.me>\n\nADD . /tmp/\nRUN apt-get update && \\\n    apt-get install -y libgd-dev && \\\n    apt-get install -y php5-gd && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN rm /app/* && \\\n    cd /tmp/ && \\\n    cp php.ini /etc/php5/apache2/php.ini && \\\n    cp php.ini /etc/php5/cli/php.ini && \\\n    wget https://github.com/ethicalhack3r/DVWA/archive/v1.9.tar.gz && \\\n    tar xvf v1.9.tar.gz && \\\n    mv ./DVWA-1.9/* /app/ && \\\n    chown www-data:www-data -R /app/ && \\\n    chmod +x run.sh && \\\n    ./run.sh && \\\n    rm -rf /tmp/* && \\\n\n"
    },
    {
        "filename": "9e198d7f7b6191d10b9b3510b14c01e0dd1ce1d0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM bamos/ubuntu-opencv-dlib-torch:ubuntu_14.04-opencv_2.4.11-dlib_19.0-torch_2016.07.12\nMAINTAINER Brandon Amos <brandon.amos.cs@gmail.com>\n\n# TODO: Should be added to opencv-dlib-torch image.\nRUN ln -s /root/torch/install/bin/* /usr/local/bin\n\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    git \\\n    graphicsmagick \\\n    libssl-dev \\\n    libffi-dev \\\n    python-dev \\\n    python-pip \\\n    python-numpy \\\n    python-nose \\\n    python-scipy \\\n    python-pandas \\\n    python-protobuf \\\n    python-openssl \\\n    wget \\\n    zip \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nADD . /root/openface\nRUN python -m pip install --upgrade --force pip\nRUN cd ~/openface && \\\n    ./models/get-models.sh && \\\n    pip2 install -r requirements.txt && \\\n    python2 setup.py install && \\\n    pip2 install --user --ignore-installed -r demos/web/requirements.txt && \\\n    pip2 install -r training/requirements.txt\n\nEXPOSE 8000 9000\nCMD /bin/bash -l -c '/root/openface/demos/web/start-servers.sh'\n"
    },
    {
        "filename": "9e91e856e0d928f50beb2cc23e212d6077fc0060.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER Ken Cochrane \"kencochrane@gmail.com\"\nRUN apt-get -qq update\nRUN apt-get install -y python-dev python-setuptools supervisor git-core\nRUN easy_install pip\nRUN pip install virtualenv\nRUN pip install uwsgi\nRUN virtualenv --no-site-packages /opt/ve/djdocker\nADD . /opt/apps/djdocker\nADD .docker/supervisor.conf /opt/supervisor.conf\nADD .docker/run.sh /usr/local/bin/run\nRUN /opt/ve/djdocker/bin/pip install -r /opt/apps/djdocker/requirements.txt\nRUN (cd /opt/apps/djdocker && /opt/ve/djdocker/bin/python manage.py collectstatic --noinput)\nEXPOSE 8000\nCMD [\"/bin/sh\", \"-e\", \"/usr/local/bin/run\"]\n"
    },
    {
        "filename": "9ece936c0800aa44b2c73b5e43f19131f5d32317.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "# This docker is set up to run habitat challenge but also has everything we needed so far\n\n# docker run --runtime=nvidia -ti --rm -v  /share/home/habitat_data:/root/perception_module/habitat-api/data habitatsubmission:latest\n# CHALLENGE_CONFIG_FILE=/root/perception_module/habitat-api/configs/tasks/pointnav_gibson_val_mini.yaml ./submission.sh\n\n#FROM nvidia/cudagl:9.0-base-ubuntu16.04\nFROM fairembodied/habitat-challenge:latest\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-samples-$CUDA_PKG_VERSION && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /usr/local/cuda/samples/5_Simulations/nbody\n\nRUN make\n\n#CMD ./nbody\n\nRUN apt-get update && apt-get install -y curl  && apt-get install -y apt-utils\nRUN conda update -y conda\n\nRUN . activate habitat\nENV PATH /opt/conda/envs/habitat/bin:$PATH\n\n###############################\n#  set up habitat\n###############################\nWORKDIR /root\nRUN git clone https://github.com/alexsax/midlevel-reps.git\n\nWORKDIR /root/midlevel-reps\nRUN git checkout v1.0 && rm -r habitat-api && rm -r habitat-sim\nRUN git clone https://github.com/facebookresearch/habitat-sim.git\nRUN git clone https://github.com/facebookresearch/habitat-api.git\n\nWORKDIR /root/midlevel-reps/habitat-sim\nRUN conda install -y cmake\nRUN pip install numpy\nRUN python setup.py install --headless\n\nWORKDIR /root/midlevel-reps/habitat-api\nRUN git checkout 05dbf7220e8386eb2337502c4d4851fc8dce30cd\nRUN pip install --upgrade -e .\nRUN apt-get install -y ffmpeg\nADD habitat_data /root/midlevel-reps/habitat-api/data\nRUN rm -r /root/midlevel-reps/habitat-api/configs\nADD habitat_configs /root/midlevel-reps/habitat-api/configs\nRUN rm -r baselines\n\n###############################\n#  set up midlevel-reps\n###############################\nADD taskonomy_models /mnt/models\nADD habitat-challenge /root/midlevel-reps/habitat-challenge\n\nWORKDIR /root/midlevel-reps\nRUN pip install -r requirements.txt\nRUN ln -s habitat-api/data .\n\n\n###############################\n#  set up baselines\n###############################\nWORKDIR /root\nRUN apt-get update && apt-get install -y cmake libopenmpi-dev python3-dev zlib1g-dev\nRUN git clone https://github.com/openai/baselines.git; cd baselines; pip install -e .\n\n\n###############################\n#  set up habitat-challenge\n###############################\nADD submission.sh /submission.sh\nADD eval_runs /mnt/eval_runs\nRUN ln -s /root/midlevel-reps/habitat-api/data/habitat-challenge-data /\n\n######################################\n# install tnt\n######################################\n\nWORKDIR /root/midlevel-reps/tnt\nRUN  pip install -e .\n\nRUN apt-get install -y screen\n\nWORKDIR /root/midlevel-reps\n"
    },
    {
        "filename": "ae4cfa4218505fc070a3ae59755988a3009513e6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Nutch\n# meabed/debian-jdk\n# docker build -t meabed/nutch:latest .\n#\n\nFROM meabed/debian-jdk\nMAINTAINER Mohamed Meabed \"mo.meabed@gmail.com\"\n\nUSER root\nENV DEBIAN_FRONTEND noninteractive\n\nENV NUTCH_VERSION 2.3\n\n#ant\nRUN apt-get install -y ant\n\n#Download nutch\n\nRUN mkdir -p /opt/downloads && cd /opt/downloads && curl -SsfLO \"http://archive.apache.org/dist/nutch/$NUTCH_VERSION/apache-nutch-$NUTCH_VERSION-src.tar.gz\"\nRUN cd /opt && tar xvfz /opt/downloads/apache-nutch-$NUTCH_VERSION-src.tar.gz\n#WORKDIR /opt/apache-nutch-$NUTCH_VERSION\nENV NUTCH_ROOT /opt/apache-nutch-$NUTCH_VERSION\nENV HOME /root\n\n#Nutch-default\n# RUN sed -i '/^  <name>http.agent.name<\\/name>$/{$!{N;s/^  <name>http.agent.name<\\/name>\\n  <value><\\/value>$/  <name>http.agent.name<\\/name>\\n  <value>iData Bot<\\/value>/;ty;P;D;:y}}' $NUTCH_ROOT/conf/nutch-default.xml\n\nRUN vim -c 'g/name=\"gora-cassandra\"/+1d' -c 'x' $NUTCH_ROOT/ivy/ivy.xml\nRUN vim -c 'g/name=\"gora-cassandra\"/-1d' -c 'x' $NUTCH_ROOT/ivy/ivy.xml\n\nRUN cd $NUTCH_ROOT && ant runtime\n\n#native libs\nRUN rm  $NUTCH_ROOT/lib/native/*\n#RUN mkdir -p $NUTCH_ROOT/lib/native/Linux-amd64-64\n#RUN curl -Ls http://dl.bintray.com/meabed/hadoop-debian/hadoop-native-64-2.5.1.tar|tar -x -C $NUTCH_ROOT/lib/native/Linux-amd64-64/\n\n\n#Modification and compilation again\n\nADD plugin/nutch2-index-html/src/plugin/ $NUTCH_ROOT/src/plugin/\nRUN sed  -i '/dir=\"index-more\" target=\"deploy\".*/ s/.*/&\\n     <ant dir=\"index-html\" target=\"deploy\"\\/>/' $NUTCH_ROOT/src/plugin/build.xml\nRUN sed  -i '/dir=\"index-more\" target=\"clean\".*/ s/.*/&\\n     <ant dir=\"index-html\" target=\"clean\"\\/>/' $NUTCH_ROOT/src/plugin/build.xml\n\n\nRUN cd $NUTCH_ROOT && ant runtime\n\nRUN ln -s /opt/apache-nutch-$NUTCH_VERSION/runtime/local /opt/nutch\n\nENV NUTCH_HOME /opt/nutch\n\n# urls folder we will use in crawling $NUTCH_HOME/bin/crawl urls crawlId(test01) elasticsearch_node_name(iData) iteration(1)\nRUN mkdir $NUTCH_HOME/urls\n# Adding test urls to use in crawling\nCMD mkdir -p $NUTCH_HOME/testUrls\nADD testUrls $NUTCH_HOME/testUrls\n\n# Adding rawcontent that hold html of the page field in index to elasticsearch\nRUN sed  -i '/field name=\"date\" type.*/ s/.*/&\\n\\n        <field name=\"rawcontent\" type=\"text\" sstored=\"true\" indexed=\"true\" multiValued=\"false\"\\/>\\n/' $NUTCH_HOME/conf/schema.xml\n\n# remove nutche-site.xml default file to replace it by our configuration\nRUN rm $NUTCH_HOME/conf/nutch-site.xml\nADD config/nutch-site.xml $NUTCH_HOME/conf/nutch-site.xml\n\n# Port that nutchserver will use\nENV NUTCHSERVER_PORT 8899\n\n#RUN cd $NUTCH_HOME && ls -al\n\n#RUN mkdir -p /opt/nutch/urls && cd /opt/crawl\n\nADD bootstrap.sh /etc/bootstrap.sh\nRUN chown root:root /etc/bootstrap.sh\nRUN chmod 700 /etc/bootstrap.sh\n\nVOLUME [\"/data\"]\n\nCMD [\"/etc/bootstrap.sh\", \"-d\"]\n\nEXPOSE 8899\n"
    },
    {
        "filename": "af9fda95abc8805f3e59ba1926f116e45ad2a9bf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:16.04  \n  \nMAINTAINER Alexey Nurgaliev <atnurgaliev@gmail.com>  \n  \nENV DEBIAN_FRONTEND=noninteractive  \n  \nRUN apt-get update && \\  \napt-get upgrade -y && \\  \napt-get install -y python python-pip python-ldap mercurial git locales \\  \npython-dev software-properties-common libmysqlclient-dev libpq-dev && \\  \nadd-apt-repository -y ppa:nginx/stable && \\  \napt-get update && \\  \napt-get install -y nginx && \\  \n\\  \nmkdir /kallithea && \\  \ncd /kallithea && \\  \nmkdir -m 0777 config repos logs && \\  \nhg clone https://kallithea-scm.org/repos/kallithea -u stable && \\  \ncd kallithea && \\  \nrm -r .hg && \\  \npython -m pip install --upgrade --force pip && \\  \npip install -e . && \\  \npython setup.py compile_catalog && \\  \n\\  \npip install mysql-python && \\  \npip install psycopg2 && \\  \n\\  \napt-get purge --auto-remove -y python-dev software-properties-common && \\  \n\\  \nrm /etc/nginx/sites-enabled/*  \n  \nADD kallithea_vhost /etc/nginx/sites-enabled/kallithea_vhost  \nADD run.sh /kallithea/run.sh  \n  \nVOLUME [\"/kallithea/config\", \"/kallithea/repos\", \"/kallithea/logs\"]  \n  \nEXPOSE 80  \n  \nCMD [\"/kallithea/run.sh\"]  \n\n"
    },
    {
        "filename": "b1cbb4b2678e79dc406fef704c3151a239644b22.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM vauxoo/docker-ubuntu-base\nMAINTAINER Tulio Ruiz <tulio@vauxoo.com>\nRUN apt-key adv --keyserver pgp.mit.edu --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update -q && apt-get upgrade -q \\\n    && apt-get install --allow-unauthenticated -q libssl-dev \\\n    libyaml-dev \\\n    libjpeg-dev \\\n    libgeoip-dev \\\n    libffi-dev \\\n    libqrencode-dev \\\n    libfreetype6-dev \\\n    zlib1g-dev \\\n    python-lxml \\\n    postgresql-common \\\n    postgresql-client-9.3 \\\n    libpq-dev \\\n    libldap2-dev \\\n    libsasl2-dev \\ \n    libxml2-dev \\\n    libxslt1-dev \\\n    python-libxml2 \\\n    bash-completion\n\nRUN ln -s /usr/include/freetype2 /usr/local/include/freetype \\\n    && ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/ \\\n    && ln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib/ \\\n    && ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/\nRUN pip install pyopenssl\nRUN cd /tmp && git clone --depth=1 https://github.com/thewtex/sphinx-contrib.git \\\n    && cd sphinx-contrib/youtube && python setup.py install\nRUN pip install pyyaml && pip install xmltodict && pip install googlemaps \\\n    && cd /tmp && wget -q https://raw.githubusercontent.com/ruiztulio/gist-vauxoo/master/travis_run.py \\\n    && python travis_run.py\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*\n"
    },
    {
        "filename": "b2a0c89995b8255058cb83ef6507614efe502324.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,apt-install-without-version",
        "num": 7,
        "text": "FROM --platform=$BUILDPLATFORM golang:1.11.1 as build\nARG TARGETOS\nARG TARGETARCH\nENV GOOS=$TARGETOS GOARCH=$TARGETARCH\nRUN apt-get update && apt-get install -y rsync\nRUN git clone https://github.com/kubernetes/kubernetes /go/src/github.com/kubernetes/kubernetes\nENV KUBE_BUILD_PLATFORMS=$TARGETOS/$TARGETARCH\nENV WHAT=cmd/kubelet\nWORKDIR /go/src/github.com/kubernetes/kubernetes\nRUN make\n\nFROM build as release-img-linux\nCOPY --from=build /go/src/github.com/kubernetes/kubernetes/_output/local/bin/linux/amd64/kubelet /bin/\nENTRYPOINT [\"/kubelet\"]\n\nFROM microsoft/nanoserver:latest as release-img-windows\nCOPY --from=build /go/src/github.com/kubernetes/kubernetes/_output/local/bin/windows/amd64/kubelet.exe /\nENTRYPOINT [\"C:\\\\Files\\\\kubelet.exe\"]\n\nFROM release-img-$TARGETOS\n"
    },
    {
        "filename": "b2b9ab13cbf6516c7285145dddb7388b39550986.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM ubuntu\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\nRUN apt-get -y update\n\n# Install some essentials\nRUN apt-get -y update\nRUN apt-get install -y wget curl sudo\n\n# Add elasticsearch apt repository\nRUN wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -\nRUN echo \"deb http://packages.elastic.co/elasticsearch/2.x/debian stable main\" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list\n\n# Install Node.js\nRUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nRUN sudo apt-get install -y nodejs\n\n# Install other required packages\nRUN apt-get -y update\nRUN apt-get install -y elasticsearch git openjdk-9-jre openssh-server postgresql-9.5 postgresql-server-dev-9.5 python3 python3-pip supervisor nginx vim\n\n# Set up postgres\nUSER postgres\nRUN service postgresql start && createuser jazzchords && createdb -O jazzchords jazzchords\n\n# Add configurations\nADD supervisor/ /etc/supervisor/\nADD uwsgi/ /etc/uwsgi/\nADD nginx/ /etc/nginx/\n\n# Add jazzchords user\nUSER root\nRUN useradd jazzchords -ms /bin/bash\nRUN usermod -a -G sudo jazzchords\nRUN echo \"jazzchords:jazzchords\" | chpasswd\n\n# Create /srv/jazzchords/ dir\nUSER root\nRUN mkdir /srv/jazzchords/\nRUN chown jazzchords:jazzchords /srv/jazzchords/\n\n# Get the code and make it ready\nUSER jazzchords\nWORKDIR /srv/jazzchords/\nRUN git clone https://github.com/gitaarik/jazzchords.git .\nRUN echo \"ENVIRONMENT = 'production'\" > settings/environment.py\n\n# Parse static files\nUSER jazzchords\nWORKDIR /srv/jazzchords/dev/\nRUN npm install\nRUN node_modules/.bin/gulp parsestatic\n\n# Install pip requirements\nUSER root\nRUN pip3 install --upgrade pip\nRUN pip3 install -r pip_requirements.txt\nRUN pip3 install -r pip_requirements_production.txt\n\n# Migrate\nWORKDIR /srv/jazzchords/\nRUN service postgresql start && su jazzchords -c \"./manage.py migrate\"\n# && su jazzchords -c \"./manage.py loaddata dev/data-dump.json\"\n\n# Open ports for ssh, http and https\nEXPOSE 22 80 443\n\n# Configure locals\nRUN locale-gen \"en_US.UTF-8\"\nRUN dpkg-reconfigure locales\n\n# Start ssh, elasticsearch and supervisor\nENTRYPOINT service ssh start && service nginx start && service postgresql start && service elasticsearch start && /usr/bin/supervisord\n"
    },
    {
        "filename": "b4feb5c608890df10c1822188459f239c33771c3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "\n# Docker demo image, as used on try.jupyter.org and tmpnb.org\n\nFROM jupyter/datascience-notebook:db3ee82ad08a\n\nMAINTAINER Byung Chun Kim <wizardbc@gmail.com>\n\nUSER root\n\nRUN sed -i 's%archive.ubuntu.com%ftp.daumkakao.com%' /etc/apt/sources.list\n\n# If git:// blocked by firewall, use https://\n#RUN git config --global url.\"https://\".insteadOf git://\n#USER $NB_USER\n#RUN git config --global url.\"https://\".insteadOf git://\n\n# IRuby\n# From odk211/iruby-notebook\nUSER root\n\n# install iruby https://github.com/SciRuby/iruby\nRUN apt-get update -qq && \\\n    apt-get install -y \\\n    libtool libffi-dev make automake \\\n    libssl-dev libreadline-dev zlib1g-dev \\\n    git libzmq-dev autoconf pkg-config && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/zeromq/czmq --depth 1 && \\\n    cd czmq && \\\n    ./autogen.sh && ./configure && make && make install && \\\n    cd .. && \\\n    rm -rf ./czmq\n\n# install ruby-build, ruby\nRUN git clone https://github.com/rbenv/ruby-build.git --depth 1 && \\\n    cd ruby-build && \\\n    ./install.sh && \\\n    cd .. && \\\n    rm -rf ./ruby-build\n\nENV RUBY_VERSION=2.4.1 \\\n    RUBY_DIR=/opt/ruby\n\nENV PATH=$RUBY_DIR/bin:$PATH\n\nRUN mkdir -p $RUBY_DIR && \\\n    chown $NB_USER $RUBY_DIR\n\nUSER $NB_USER\n\nRUN ruby-build $RUBY_VERSION $RUBY_DIR\n\nRUN gem install bundler cztop iruby pry pry-doc awesome_print gnuplot rubyvis nyaplot --no-document && \\\n    iruby register --force && \\\n    fix-permissions $RUBY_DIR\n\n# brendan-rius/jupyter-c-kernel\nUSER root\nWORKDIR /opt/\nRUN mkdir -p jupyter-c-kernel && chown -R $NB_USER jupyter-c-kernel\nUSER $NB_USER\nRUN git clone https://github.com/brendan-rius/jupyter-c-kernel.git && \\\n    pip install --no-cache-dir -e jupyter-c-kernel/ && \\\n    cd jupyter-c-kernel && install_c_kernel --user && \\\n    fix-permissions /opt/jupyter-c-kernel\nWORKDIR /home/$NB_USER/\n\n# Tensorflow\nRUN conda install --quiet --yes \\\n    'tensorflow=1.3*' \\\n    'keras=2.0*' && \\\n    conda clean -tipsy && \\\n    fix-permissions $CONDA_DIR\n\n# nbextensions\nRUN conda install --quiet --yes -c conda-forge 'jupyter_contrib_nbextensions' 'icu=58.*' && \\\n    conda clean -tipsy && \\\n    fix-permissions $CONDA_DIR\n\n# Octave Kernel\n# From arnau/docker-octave-notebook\nUSER root\nRUN apt-get update -qq && \\\n    apt-get install -y octave liboctave-dev && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nUSER $NB_USER\n\n#jupyter nbextension enable --py --sys-prefix widgetsnbextension\nRUN pip install octave_kernel && \\\n    python -m octave_kernel.install && \\\n    conda install -y ipywidgets && \\\n    conda clean -tipsy && \\\n    fix-permissions $CONDA_DIR\n\n\n### Install Sage\n\nUSER root\nENV SAGE_VER 8.0\nENV SAGE_BIN_FILE sage-$SAGE_VER-Ubuntu_16.04-x86_64.tar.bz2\nENV SAGE_MIRROR http://ftp.kaist.ac.kr/sage/linux/64bit/\nENV SAGE_ROOT /opt/sage/$SAGE_VER\nRUN mkdir -p $SAGE_ROOT && chown $NB_USER:users $SAGE_ROOT\nRUN apt-get update -qq && \\\n    apt-get install -y --no-install-recommends bsdtar && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nUSER $NB_USER\nWORKDIR $SAGE_ROOT\nRUN curl -v --user-agent \"\" -J -O $SAGE_MIRROR$SAGE_BIN_FILE && \\\n    bsdtar -xjf $SAGE_BIN_FILE --strip-components=1 && \\\n    fix-permissions $SAGE_ROOT && \\\n    rm $SAGE_BIN_FILE\n\nUSER root\nRUN ln -sf $SAGE_ROOT/sage /usr/bin/sage && \\\n    ln -sf $SAGE_ROOT/sage /usr/bin/sagemath\n\nADD ./add_sage/post.py $SAGE_ROOT/post.py\nRUN sudo -H -u $NB_USER sage post.py && \\\n    rm post.py\nWORKDIR /usr/local/share/jupyter/kernels/\nRUN ln -s  $SAGE_ROOT/local/share/jupyter/kernels/sagemath/ ./\n\nUSER $NB_USER\nWORKDIR /home/$NB_USER/work/\nRUN ln -s $SAGE_ROOT/local/share/jsmol /opt/conda/lib/python3.6/site-packages/notebook/static/\nADD ./add_sage/backend_ipython.py $SAGE_ROOT/local/lib/python2.7/site-packages/sage/repl/rich_output/backend_ipython.py\n"
    },
    {
        "filename": "b57d264b880818252a505153e393809c3384d215.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:trusty\n\nMAINTAINER Samuel Cozannet <samuel.cozannet@madeden.com>\n\nENV DATASET_SRC \"http://cs.stanford.edu/people/karpathy/neuraltalk2/checkpoint_v1_cpu.zip\"\n\nRUN apt-get update && \\ \n    apt-get upgrade -yqq && \\\n    apt-get install -yqq nano curl git wget libprotobuf-dev protobuf-compiler libhdf5-serial-dev hdf5-tools python-pip build-essential python-dev && \\\n    mkdir -p /opt/neural-networks\n\n# Install torch\nRUN cd /opt/neural-networks && \\\n    wget https://raw.githubusercontent.com/torch/ezinstall/master/install-deps && \\\n    chmod +x ./install-deps && \\\n    ./install-deps && \\\n    git clone https://github.com/torch/distro.git /opt/neural-networks/torch --recursive && \\\n    cd /opt/neural-networks/torch && \\\n    ./install.sh -b \n\n# Install additional dependencies\nRUN cd /opt/neural-networks/torch && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    luarocks install nn && \\\n    luarocks install nngraph && \\\n    luarocks install image && \\\n    luarocks install loadcaffe\n\n# Install HDF5 tools\nRUN cd /opt/neural-networks && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    git clone https://github.com/deepmind/torch-hdf5.git && \\\n    cd torch-hdf5 && \\\n    luarocks make hdf5-0-0.rockspec LIBHDF5_LIBDIR=\"/usr/lib/x86_64-linux-gnu/\"\n\n# Install h5py\nRUN pip install --upgrade cython && \\\n    pip install --upgrade numpy && \\\n    pip install --upgrade h5py \n\n# Install cjson\nRUN cd /opt/neural-networks/ && \\\n    . /opt/neural-networks/torch/install/bin/torch-activate && \\\n    wget -c http://www.kyne.com.au/%7Emark/software/download/lua-cjson-2.1.0.tar.gz && \\\n    tar xfz lua-cjson-2.1.0.tar.gz && \\\n    cd lua-cjson-2.1.0 && \\\n    luarocks make\n\n# Downloading NeuralTalk\nRUN cd /opt/neural-networks/ && \\\n    git clone https://github.com/karpathy/neuraltalk2\n\n# Clean up\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Adding folders a local stuff \nRUN mkdir -p /data/model /data/images \n\nVOLUME /data\n\n# Expose default port\nexpose 8000\n\nADD install.sh /opt/neural-networks/install.sh\nADD run.sh run.sh\n\nRUN chmod +x /opt/neural-networks/install.sh && \\\n    chown root:root /opt/neural-networks/install.sh && \\\n    chmod +x run.sh && \\\n    chown root:root run.sh\n\n\nCMD [ \"/opt/neural-networks/install.sh\", \"/data/model\", \"/data/images\" ]\n"
    },
    {
        "filename": "b6dbd7d8b1292d427bb15fe291bf5ad6dd37c3ff.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER Martin Fritzsche <martin.fritzsche@student.hpi.de>\n\nRUN apt-get -yqq update && \\\n    apt-get -yqq upgrade && \\\n    apt-get -yqq install git sudo g++ make\n\nRUN apt-get -yqq install cmake\n\nRUN apt-get -yqq install libopenblas-dev && \\\n    apt-get -yqq install python python-tk python-pip\n\nRUN pip install --upgrade pip && \\\n    pip install numpy && \\\n\tpip install matplotlib\n\nRUN git clone --recursive https://github.com/hpi-xnor/mxnet.git # get repo\n\nRUN mkdir /mxnet/release && \\\n    cd /mxnet/release && \\\n\techo \"CMAKE_BUILD_TYPE:STRING=Release\" >> CMakeCache.txt && \\\n\techo \"USE_CUDA:BOOL=OFF\" >> CMakeCache.txt && \\\n    echo \"USE_OPENCV:BOOL=OFF\" >> CMakeCache.txt && \\\n    cmake /mxnet\n\nRUN cd /mxnet/release && \\\n    make -j `nproc`\n\nENV LD_LIBRARY_PATH=/mxnet/release\nENV PYTHONPATH=/mxnet/python\n\nENTRYPOINT [\"/bin/bash\"]\n"
    },
    {
        "filename": "cf9c2627e56ca955a87079fbe41c3957e32d056d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM phusion/baseimage\nMAINTAINER Thiago Taranto <ttaranto@gmail.com>\n\n# ensure UTF-8\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# change resolv.conf\nRUN echo 'nameserver 8.8.8.8' >> /etc/resolv.conf\n\n# setup\nENV HOME /root\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\nCMD [\"/sbin/my_init\"]\n\n# nginx-php installation\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get update\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y upgrade\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get update --fix-missing\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install php7.0\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install php7.0-fpm php7.0-common php7.0-cli php7.0-mysqlnd php7.0-mcrypt php7.0-curl php7.0-bcmath php7.0-mbstring php7.0-soap php7.0-xml php7.0-zip php7.0-json php7.0-imap php-xdebug php-pgsql\n\n# install nginx (full)\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y nginx-full\n\n# install latest version of nodejs\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y nodejs\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y npm\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y git\n\n# install yarn\nRUN DEBIAN_FRONTEND=\"noninteractive\" curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN DEBIAN_FRONTEND=\"noninteractive\" echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get update && apt-get install yarn\n\n# install php composer\nRUN curl -sS https://getcomposer.org/installer | php\nRUN mv composer.phar /usr/local/bin/composer\n\n# add build script (also set timezone to Americas/Sao_Paulo)\nRUN mkdir -p /root/setup\nADD build/setup.sh /root/setup/setup.sh\nRUN chmod +x /root/setup/setup.sh\nRUN (cd /root/setup/; /root/setup/setup.sh)\n\n# copy files from repo\nADD build/nginx.conf /etc/nginx/sites-available/default\nADD build/.bashrc /root/.bashrc\n\n# disable services start\nRUN update-rc.d -f apache2 remove\nRUN update-rc.d -f nginx remove\nRUN update-rc.d -f php7.0-fpm remove\n\n# add startup scripts for nginx\nADD build/nginx.sh /etc/service/nginx/run\nRUN chmod +x /etc/service/nginx/run\n\n# add startup scripts for php7.0-fpm\nADD build/phpfpm.sh /etc/service/phpfpm/run\nRUN chmod +x /etc/service/phpfpm/run\n\n# set WWW public folder\nRUN mkdir -p /var/www/public\nADD build/index.php /var/www/public/index.php\n\nRUN chown -R www-data:www-data /var/www\nRUN chmod 755 /var/www\n\n# set terminal environment\nENV TERM=xterm\n\n# port and settings\nEXPOSE 80 9000\n\n# cleanup apt and lists\nRUN apt-get clean\nRUN apt-get autoclean\n"
    },
    {
        "filename": "d290efddb60a17644c145f559ce5dd52bf2165e7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM imapp/blender\n\nMAINTAINER Pawe\u0142 Bylica <chfast@gmail.com>\n\n# Install python and dependencies for dependencies:\n#   python-dev, g++\n#   Pillow: libjpeg-dev, zlib1g-dev\n#   OpenEXR: libopenexr-dev\n#   pycrypto: libgmp-dev\n#   ethereum: libssl-dev\nRUN apt-get update && apt-get install -y \\\n    python-pip \\\n    python-dev \\\n    g++ dh-autoreconf \\\n    libjpeg-dev zlib1g-dev libopenexr-dev libgmp-dev libffi-dev \\\n    libssl-dev ca-certificates \\\n    pkg-config \\\n&& apt-get clean \\\n&& rm -rf /var/lib/apt/lists/* \\\n&& pip install --upgrade pip setuptools cffi \\\n&& pip install ipfs-api\n\n# Quite stupid, but GNR is not independent yet\nCOPY . /opt/golem\n\nRUN cd /opt/golem && python setup.py develop\n\nENV GOLEM=/opt/golem \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/blender\n\n# use ENTRYPOINT from imunes/vroot:\nENTRYPOINT [\"/usr/bin/iinit.sh\"]\n"
    },
    {
        "filename": "d37c16d7cada3b9df715ae2cb72ea669ce64a049.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM cloud9/workspace\nMAINTAINER Sebastien Saunier <seb@lewagon.org>\n\nRUN echo \"Version 0.1.0\"\n\nRUN add-apt-repository ppa:git-core/ppa\nRUN apt-get update\nRUN apt-get install -y git tklib zlib1g-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev\nRUN apt-get clean\n\n# Postgresql 9.3 already installed\nUSER postgres\nRUN service postgresql start && psql --command \"CREATE ROLE ubuntu login createdb; UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';\"\nRUN service postgresql start && psql --command \"DROP DATABASE template1;\"\nRUN service postgresql start && psql --command \"CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';\"\nRUN service postgresql start && psql --command \"UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';\"\n\n# As ubuntu user\nWORKDIR /home/ubuntu\nUSER ubuntu\n\n# Rbenv & Ruby\nRUN sudo /usr/local/rvm/bin/rvm implode --force\nRUN curl https://raw.githubusercontent.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash\nENV PATH /home/ubuntu/.rbenv/bin:/home/ubuntu/.rbenv/shims:$PATH\nRUN rbenv install 2.3.0 && rbenv global 2.3.0\nRUN gem install bundler rails\nRUN echo \"nvm use default > /dev/null 2>&1 && nvm alias default stable > /dev/null 2>&1\\n\\\n\\n\\\nexport RBENV_ROOT=\\\"\\${HOME}/.rbenv\\\"\\n\\\n\\n\\\nif [ -d \\\"\\${RBENV_ROOT}\\\" ]; then\\n\\\n  export PATH=\\\"\\${RBENV_ROOT}/bin:\\${PATH}\\\"\\n\\\n  eval \\\"\\$(rbenv init -)\\\"\\n\\\nfi\\n\\\n\\n\\\nexport PATH=\\\"./bin:\\${PATH}\\\"\\n\" >> /home/ubuntu/.profile\n\n# Default workspace\nUSER root\nRUN locale-gen en_US.UTF-8\nADD ./files/workspace /home/ubuntu/workspace\n\n# User rights\nRUN chmod -R g+w /home/ubuntu && chown -R ubuntu:ubuntu /home/ubuntu\nRUN chmod -R g-w /home/ubuntu/lib && chown -R root:root /home/ubuntu/lib\n\n# Pre-download rails dependencies\nUSER ubuntu\nRUN rails new -T --database=postgresql to-be-removed\nRUN rm -rf to-be-removed\n\nUSER root\n\nADD ./files/check-environment /.check-environment/lewagon\n"
    },
    {
        "filename": "d40fbf1ff69e6265baf66ab41ba2a6c955dfd350.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM python:2.7.9\n\nMAINTAINER oncotator <oncotator@broadinstitute.org>\n\nRUN apt-get update && apt-get install unzip\n\nRUN pip install numpy\n\nRUN pip install ngslib\n\nADD . /oncotator\n\nRUN cd oncotator/ && python setup.py install\n\nENTRYPOINT [\"Oncotator\"]\n\nCMD [\"-h\"]\n\n# EXAMPLE BUILD CMD\n# docker build -t oncotator .\n\n# EXAMPLE RUN CMDS\n# docker run -it oncotator -h\n# docker run -v /path/to/data:/data -v /path/to/oncotator_db_dir:/db_dir -it oncotator --db-dir /db_dir /data/in.maflite /data/out.maf.txt hg19\n"
    },
    {
        "filename": "a3e369c701f04924ff5e5ce605ee7ab461d968fe.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM tensorflow/tensorflow:latest\n\nRUN apt-get update -y --fix-missing\nRUN apt-get install -y ffmpeg\nRUN apt-get install -y build-essential cmake pkg-config \\\n                    libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n                    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \\\n                    libxvidcore-dev libx264-dev \\\n                    libgtk-3-dev \\\n                    libatlas-base-dev gfortran \\\n                    libboost-all-dev \\\n                    python3 python3-dev python3-numpy\n\nRUN apt-get install -y wget vim python3-tk python3-pip\n\nWORKDIR /\nRUN wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.2.0.zip \\\n    && unzip opencv.zip \\\n    && wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.2.0.zip \\\n    && unzip opencv_contrib.zip\n\n# install opencv3.2\nRUN cd /opencv-3.2.0/ \\\n   && mkdir build \\\n   && cd build \\\n   && cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n            -D INSTALL_C_EXAMPLES=OFF \\\n            -D INSTALL_PYTHON_EXAMPLES=ON \\\n            -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib-3.2.0/modules \\\n            -D BUILD_EXAMPLES=OFF \\\n            -D BUILD_opencv_python2=OFF \\\n            -D BUILD_NEW_PYTHON_SUPPORT=ON \\\n            -D CMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\") \\\n            -D PYTHON_EXECUTABLE=$(which python3) \\\n            -D WITH_FFMPEG=1 \\\n            -D WITH_CUDA=0 \\\n            .. \\\n    && make -j8 \\\n    && make install \\\n    && ldconfig \\\n    && rm /opencv.zip \\\n    && rm /opencv_contrib.zip\n\n\n# Install dlib 19.4\nRUN wget -O dlib-19.4.tar.bz2 http://dlib.net/files/dlib-19.4.tar.bz2 \\\n    && tar -vxjf dlib-19.4.tar.bz2\n\nRUN cd dlib-19.4 \\\n    && cd examples \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && cmake --build . --config Release \\\n    && cd /dlib-19.4 \\\n    && pip3 install setuptools \\\n    && python3 setup.py install \\\n    && cd $WORKDIR \\\n    && rm /dlib-19.4.tar.bz2\n\n\n\nADD $PWD/requirements.txt /requirements.txt\nRUN pip3 install -r /requirements.txt\n\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "a7692561621a4fe26db2626b0b61d9d50d2e99b5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n\nMAINTAINER Roman Suvorov windj007@gmail.com\n\nRUN apt-get clean && apt-get update\n\nRUN apt-get install -yqq curl\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\n\nRUN apt-get install -yqq build-essential libbz2-dev libssl-dev libreadline-dev \\\n                         libsqlite3-dev tk-dev libpng-dev libfreetype6-dev git \\\n                         cmake wget gfortran libatlas-base-dev libatlas-dev \\\n                         libatlas3-base libhdf5-dev libxml2-dev libxslt-dev \\\n                         zlib1g-dev pkg-config graphviz liblapacke-dev \\\n                         locales nodejs\n\nRUN curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\nENV PYENV_ROOT /root/.pyenv\nENV PATH /root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN pyenv install 3.6.7\nRUN pyenv global 3.6.7\n\nRUN pip  install -U pip\nRUN python -m pip install -U cython\nRUN python -m pip install -U numpy # thanks to libatlas-base-dev (base! not libatlas-dev), it will link to atlas\n\nRUN python -m pip install scipy pandas nltk gensim sklearn tensorflow-gpu \\\n        annoy keras ujson line_profiler tables sharedmem matplotlib torch torchvision\n\nRUN pip install git+https://github.com/pybind/pybind11.git \nRUN pip install nmslib\nRUN python -m pip install -U \\\n        h5py lxml git+https://github.com/openai/gym sacred git+https://github.com/marcotcr/lime \\\n        plotly pprofile mlxtend fitter mpld3 \\\n        git+https://github.com/facebookresearch/fastText.git \\\n        imbalanced-learn forestci category_encoders hdbscan seaborn networkx joblib eli5 \\\n        pydot graphviz dask[complete] opencv-python keras-vis pandas-profiling \\\n        git+https://github.com/windj007/libact/#egg=libact \\\n        git+https://github.com/IINemo/active_learning_toolbox \\\n        scikit-image pymorphy2[fast] pymorphy2-dicts-ru tqdm tensorboardX patool \\\n        skorch fastcluster \\\n        xgboost imgaug grpcio git+https://github.com/IINemo/isanlp.git\n\nRUN pip install -U pymystem3 # && python -c \"import pymystem3 ; pymystem3.Mystem()\"\n\nRUN python -m pip install -U jupyter jupyterlab \\\n        jupyter_nbextensions_configurator jupyter_contrib_nbextensions==0.2.4\n\nRUN pyenv rehash\n\nRUN jupyter contrib nbextension install --system && \\\n    jupyter nbextensions_configurator enable --system && \\\n    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n    jupyter labextension install @jupyterlab/toc && \\\n    jupyter labextension install @jupyter-widgets/jupyterlab-manager\n\nRUN git clone --recursive https://github.com/Microsoft/LightGBM /tmp/lgbm && \\\n    cd /tmp/lgbm && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make && \\\n    cd ../python-package && \\\n    python setup.py install && \\\n    cd /tmp && \\\n    rm -r /tmp/lgbm\n\nRUN git clone https://code.googlesource.com/re2 /tmp/re2 && \\\n    cd /tmp/re2 && \\\n    make CFLAGS='-fPIC -c -Wall -Wno-sign-compare -O3 -g -I.' && \\\n    make test && \\\n    make install && \\\n    make testinstall && \\\n    ldconfig && \\\n    pip install -U fb-re2\n\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n        dpkg-reconfigure --frontend=noninteractive locales\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nEXPOSE 8888\nVOLUME [\"/notebook\", \"/jupyter/certs\"]\nWORKDIR /notebook\n\nADD test_scripts /test_scripts\nADD jupyter /jupyter\nCOPY entrypoint.sh /entrypoint.sh\nCOPY hashpwd.py /hashpwd.py\n\nENV JUPYTER_CONFIG_DIR=\"/jupyter\"\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [ \"jupyter\", \"notebook\", \"--ip=0.0.0.0\", \"--allow-root\" ]\n"
    },
    {
        "filename": "a88157f50c379565808504a73e3adcce223686ee.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "############################################################\n# Dockerfile to build Pony Mail container images\n# Based on Debian\n############################################################\n\n# Set base images\nFROM debian\nFROM elasticsearch\n\nMAINTAINER Daniel Gruno\n\n# Update aptitude repo data\nRUN apt-get update\n\n# Install base packages\nRUN apt-get install -y apache2 git lua-cjson lua-sec lua-socket python3 python3-pip\nRUN pip3 install elasticsearch formatflowed netaddr\n\n\n# Download Pony Mail\nRUN git clone https://github.com/apache/incubator-ponymail.git /var/www/ponymail\n\n# Add httpd config\nADD https://raw.githubusercontent.com/apache/incubator-ponymail/master/dockerfiles/ponymail_httpd_docker.conf /etc/apache2/sites-enabled/000-default.conf\n\n\n# Start ElasticSearch, set up Pony Mail\nEXPOSE 9200 9300\nRUN service elasticsearch start && sleep 30 && service elasticsearch status && cd /var/www/ponymail/tools && python3 setup.py --defaults\n\n# Enable mod_lua\nRUN a2enmod lua\n\n# Expose port for httpd\nEXPOSE 80\n\n# Set default container startup sequence\nENTRYPOINT service elasticsearch start && service apache2 start && bash\n"
    },
    {
        "filename": "a8faf82b8b8844dca7fae889c0405c08dd1ae09f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Start with CUDA Caffe dependencies \nFROM kaixhin/cuda-caffe-deps:7.5 \nMAINTAINER Kai Arulkumaran <design@kaixhin.com>\n\n# Move into Caffe repo \nRUN cd /root/caffe && \\\n# Make and move into build directory\nmkdir build && cd build && \\\n# CMake \ncmake .. && \\ \n# Make \nmake -j\"$(nproc)\" all && \\ \nmake install \n# Add to Python path \nENV PYTHONPATH=/root/caffe/python:$PYTHONPATH \n# Set ~/caffe as working directory \nWORKDIR /root/caffe\n\n#FROM kaixhin/cuda-caffe\n#MAINTAINER Chris Chow <chris.kr.chow@gmail.com>\n# install fast-rcnn's deps\nRUN apt-get update && \\\n\tapt-get install -y git python-numpy cython python-pip python-skimage \\\n\tpython-protobuf python-opencv python-pandas python-yaml python-sklearn \\\n\toctave python-ipdb\n\nRUN\tpip install easydict && pip install \"ipython[notebook]\"\n\n# octave is good enough for the PASCAL VOC stuff\nRUN ln -s /usr/bin/octave /usr/bin/matlab\n\n# build fast-rcnn\nRUN cd /opt && \\\n\tgit clone --recursive https://github.com/rbgirshick/fast-rcnn.git\n\nADD Makefile.config /opt/fast-rcnn/caffe-fast-rcnn/Makefile.config\n\nRUN\tcd /opt/fast-rcnn/lib && make -j4 && \\\n\tcd ../caffe-fast-rcnn && make -j4 && make -j4 pycaffe\n"
    },
    {
        "filename": "a93a653a486a43826fdd8e0e3a863963052649d4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM debian:latest\nMAINTAINER Ryan Boyd, <ryan.boyd@neotechnology.com>\n\nRUN apt-get update\nRUN apt-get install -y python python-pip\nRUN pip install py2neo\nRUN pip install oauth2\nRUN pip install futures\nRUN pip install retrying\n\nADD import_user.py /\nRUN chmod +x /import_user.py\n\nENTRYPOINT [\"python\", \"-u\", \"/import_user.py\"]\n"
    },
    {
        "filename": "a93e2ebc7f70401ba21eabb5561c0278bd410a4e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:xenial\nMAINTAINER Patrick Oberdorf \"patrick@oberdorf.net\"\n\nRUN apt-get update && apt-get install -y python \\\n\tlocales \\\n\tpython-setuptools \\\n\tpython-requests \\\n\tpython-pycurl \\\n\tpython-crypto \\\n\tpython-imaging \\\n\tpython-pyxmpp \\\n\tpython-jinja2 \\\n\tpython-thrift \\\n\tpython-feedparser \\\n\tpython-beautifulsoup \\\n\tpython-pip \\\n\ttesseract-ocr \\\n\tpython-beaker \\\n\tunrar \\\n\tcurl \\\n\tgocr \\\n\tpython-django \\\n\tgit \\\n\trhino \\\n\tgosu \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n\t&& pip install Send2Trash\n\n# Set the locale\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN git clone https://github.com/pyload/pyload.git /opt/pyload \\\n        && cd /opt/pyload \\\n        && git checkout stable \\\n        && echo \"/opt/pyload/pyload-config\" > /opt/pyload/module/config/configdir\n\nADD pyload-config/ /tmp/pyload-config\nADD run.sh /run.sh\nRUN chmod +x /run.sh\n\nEXPOSE 8000\nVOLUME /opt/pyload/pyload-config\nVOLUME /opt/pyload/Downloads\n\nHEALTHCHECK CMD curl --fail http://localhost:8000/ || exit 1\nCMD [\"/run.sh\"]\n"
    },
    {
        "filename": "aa3adcf6c86792864f432b4050d2b71873215197.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ipython/scipyserver\n\nMAINTAINER Edward Kim <edward.junhyung.kim@gmail.com>\n\nUSER root\n\nRUN apt-get update && \\\n    apt-get -y -q install libfftw3-dev libatlas-base-dev libatlas-base-dev gfortran wget vim && \\\n\n    # SExtractor uses the LAPACK functions available in ATLAS, and\n    # it won't be able to find LAPACK without the following line.\n    update-alternatives --set liblapack.so /usr/lib/atlas-base/atlas/liblapack.so && \\\n\n    cd /tmp && \\\n    # install sextractor\n    wget http://www.astromatic.net/download/sextractor/sextractor-2.19.5.tar.gz && \\\n    tar xvzf sextractor-2.19.5.tar.gz && \\\n    cd sextractor-2.19.5 && \\\n    ./configure --with-atlas-incdir=/usr/include/atlas && \\\n    make && \\\n    make install && \\\n\n    # Python montage-wrapper\n    pip2 install --upgrade pip && \\\n    pip2 install montage-wrapper && \\\n\n    # Install Montage\n    cd /tmp && \\\n    wget http://montage.ipac.caltech.edu/download/Montage_v4.0.tar.gz && \\\n    tar xvzf Montage_v4.0.tar.gz && \\\n    cd montage && \\\n    make\n\nENV PATH $PATH:/tmp/montage/bin\n\nRUN pip2 install --upgrade terminado && \\\n    pip2 install Theano Lasagne && \\\n    pip2 install git+https://github.com/dnouri/nolearn.git@master#egg=nolearn==0.7.git\n"
    },
    {
        "filename": "ab3e0d369621f80660e32a81793d51cd73c17fd9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM lablup/kernel-base:jail as jail-builder\nFROM lablup/kernel-base:hook as hook-builder\nFROM lablup/kernel-base:python3.6 as python-binary\nFROM lablup/common-tensorflow:1.12-py36-srv as tf-serving\n\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED 1\nENV NCCL_VERSION=2.2.13\nENV CUDNN_VERSION=7.2.1.38\nENV TF_TENSORRT_VERSION=4.1.2\n\nARG TF_SERVING_VERSION_GIT_BRANCH=master\nARG TF_SERVING_VERSION_GIT_COMMIT=head\nLABEL tensorflow_serving_github_branchtag=${TF_SERVING_VERSION_GIT_BRANCH}\nLABEL tensorflow_serving_github_commit=${TF_SERVING_VERSION_GIT_COMMIT}\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        cuda-command-line-tools-9-0 \\\n        cuda-command-line-tools-9-0 \\\n        cuda-cublas-9-0 \\\n        cuda-cufft-9-0 \\\n        cuda-curand-9-0 \\\n        cuda-cusolver-9-0 \\\n        cuda-cusparse-9-0 \\\n        libcudnn7=${CUDNN_VERSION}-1+cuda9.0 \\\n        libnccl2=${NCCL_VERSION}-1+cuda9.0 \\\n        libgomp1 \\\n        wget \\\n        libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \\\n\tlibmpdec2 \\\n        libssl1.0.0 \\\n\tlibssl-dev \\\n        libncursesw5 libtinfo5 libreadline6 \\\n\tproj-bin \\\n        libgeos-dev \\\n        mime-support \\\n\tgcc g++ \\\n        libproj-dev libgeos-dev \\\t\n        libzmq3-dev libuv1 \\\n\t&& \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends \\\n        nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0 && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends \\\n        libnvinfer4=${TF_TENSORRT_VERSION}-1+cuda9.0 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* && \\\n    rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* && \\\n    rm /usr/lib/x86_64-linux-gnu/libnvparsers*\n\t\t\t\t\t    \n\n# Install TensorFlow-serving\nCOPY --from=tf-serving /usr/local/bin/tensorflow_model_server /usr/bin/tensorflow_model_server\n\n# Expose ports\n# gRPC\nEXPOSE 8500\n\n# REST\nEXPOSE 8501\n\n\n# Copy the whole Python from the docker library image\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n# Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\n# we don't have to rebuild these!\nRUN pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\"\n\n# Install CUDA-9.0 + cuDNN 7.2\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\n# python package install\nRUN pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" && \\\n    pip install --no-cache-dir keras && \\\n    pip install --no-cache-dir h5py && \\\n    pip install --no-cache-dir Cython && \\\n    pip install --no-cache-dir matplotlib bokeh && \\\n    pip install --no-cache-dir pyproj && \\\n    pip install --no-cache-dir Cartopy && \\\n    pip install --no-cache-dir ipython && \\\n    pip install --no-cache-dir pandas && \\\n    pip install --no-cache-dir seaborn && \\\n    pip install --no-cache-dir pillow && \\\n    pip install --no-cache-dir networkx cvxpy && \\\n    pip install --no-cache-dir scikit-learn scikit-image && \\\n    pip install --no-cache-dir scikit-image && \\\n    pip install --no-cache-dir pygments && \\\n    pip install --no-cache-dir requests && \\\n    rm -f /tmp/*.whl\n\n# Set where models should be stored in the container\n#ENV MODEL_BASE_PATH=/home/work/models\n#RUN mkdir -p ${MODEL_BASE_PATH}\n\n# The only required piece is the model name in order to differentiate endpoints\n#ENV MODEL_NAME=model\n\nRUN apt-get update && \\\n    apt-get install -y libseccomp2 gosu && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists /var/cache/apt/archives && \\\n    ln -s /usr/sbin/gosu /usr/sbin/su-exec && \\\n    mkdir /home/work && chmod 755 /home/work; \\\n    mkdir /home/backend.ai && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\n#RUN echo '#!/bin/bash \\n\\n\\\n#    tensorflow_model_server --port=8500 --rest_api_port=8501 \\\n#        --model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \\\n#        \"$@\"' >> /usr/local/bin/entrypoint.sh && \\\n#    chmod +x /usr/local/bin/entrypoint.sh\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nCOPY policy.yml /home/backend.ai/policy.yml\n\n# Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD /home/backend.ai/libbaihook.so\n\n# Install kernel-runner scripts package\nRUN pip install --no-cache-dir \"backend.ai-kernel-runner[python]~=1.4.0\"\n\n# Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR /home/backend.ai/.matplotlib\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n    && python /tmp/matplotlib-fontcache.py \\\n    && rm /tmp/matplotlib-fontcache.py\n\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000 2001 2002 2003\n\nLABEL ai.backend.nvidia.enabled=\"yes\" \\\n      com.nvidia.cuda.version=\"9.0.176\" \\\n      com.nvidia.volumes.needed=\"nvidia_driver\" \\\n      ai.backend.port=\"8500, 8501\" \\\n      ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\n\n\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \\\n     \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0"
    },
    {
        "filename": "ab90898ef88648a1c6c7520909684ca54242318e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM nvidia/cuda:10.0-devel-ubuntu16.04\nMAINTAINER Cristian Baldi \"bld.cris.96@gmail.com\"\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# Required packages\nRUN apt-get update\nRUN apt-get -y install \\\n    python \\\n    build-essential \\\n    python2.7-dev \\\n    python-pip \\\n    git \\\n    libhdf5-dev \\\n    software-properties-common\n\n# Fix 'sudo: command not found'\n# https://github.com/torch/distro/blob/master/install-deps contains 'sudo', but nvidia:cuda removed sudo: https://github.com/crisbal/docker-torch-rnn/issues/9#issuecomment-365362656\nRUN apt-get -y install sudo\nRUN usermod -aG sudo $(whoami)\n\n# Fix torch installation ( https://github.com/torch/cutorch/issues/797 )\nENV TORCH_NVCC_FLAGS='-D__CUDA_NO_HALF_OPERATORS__'\n\n# Fix torch installation 1 ( https://github.com/torch/cutorch/issues/834 )\nRUN apt-get purge cmake\nRUN git clone https://github.com/Kitware/CMake.git /root/cmake\nRUN cd /root/cmake && ./bootstrap && make && sudo make install\n\n\n# Torch and luarocks\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive\n# Fix torch installation 2\nRUN rm -fr /root/torch/cmake/3.6/Modules/FindCUDA*\nCOPY atomic.patch /root/torch/extra/cutorch/atomic.patch\nRUN cd /root/torch/extra/cutorch/ && patch -p1 < /root/torch/extra/cutorch/atomic.patch\nRUN cd /root/torch && ./clean.sh && bash install-deps && ./install.sh -b\n\n\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'\nENV LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'\nENV PATH=/root/torch/install/bin:$PATH\nENV LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH\nENV DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n#torch-rnn and python requirements\nWORKDIR /root\n#RUN git clone https://github.com/jcjohnson/torch-rnn && \\\n#    pip install -r torch-rnn/requirements.txt\n\n# Fix install torch-rnn requirements in Ubuntu 16.04\n# https://github.com/crisbal/docker-torch-rnn/issues/1#issuecomment-324262348\nRUN apt-get install -y cython\nRUN pip install --upgrade pip\nRUN pip install Cython==0.23.4\nRUN pip install numpy==1.10.4\nRUN pip install argparse==1.2.1\nRUN HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial/ pip install h5py==2.5.0\nRUN pip install six==1.10.0\nRUN git clone https://github.com/jcjohnson/torch-rnn\n\n#Lua requirements\nWORKDIR /root\nRUN luarocks install torch\nRUN luarocks install nn\nRUN luarocks install optim\nRUN luarocks install lua-cjson\n\nRUN git clone https://github.com/deepmind/torch-hdf5 /root/torch-hdf5\nWORKDIR /root/torch-hdf5\nRUN luarocks make hdf5-0-0.rockspec\n\n\n#CUDA\nWORKDIR /root\n# Fix torch installation 3\nRUN cd /root/torch/extra/cutorch/ && luarocks make rocks/cutorch-scm-1.rockspec\n#RUN luarocks install cutorch\nRUN luarocks install cunn\n\n#Done!\nWORKDIR /root/torch-rnn\n"
    },
    {
        "filename": "abf7993c8624db13ae7fbaa8805c841990d2832c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM analyticsbase\nMAINTAINER Charmander\n\nRUN apt-get install -y build-essential make gcc\n\nENV REDISVERSION 2.8.11\n\nRUN wget \\\n    --no-cookies \\\n    --progress=bar:force \\\n    https://github.com/antirez/redis/archive/$REDISVERSION.tar.gz \\\n    && tar xzf $REDISVERSION.tar.gz \\\n    && cd redis-$REDISVERSION \\\n    && make \\\n    && cd .. \\\n    && ln -sfn redis-$REDISVERSION redis\n\n#VOLUME [ \"/data\" ]\nRUN mkdir /data\n\nADD files/redis.conf redis.conf\n\nEXPOSE 6379\n\nENV NODEVERSION v0.10.30\nENV CMDVERSION 0.2.1\nRUN wget \\\n    --no-cookies \\\n    --progress=bar:force \\\n    http://nodejs.org/dist/$NODEVERSION/node-$NODEVERSION-linux-x64.tar.gz \\\n    && tar -xvf node-$NODEVERSION-linux-x64.tar.gz \\\n    && mv node-$NODEVERSION-linux-x64 /opt/node \\\n    && cd /usr/local/bin && ln -s /opt/node/bin/* . \\\n    && npm install -g redis-commander@$CMDVERSION\n\nEXPOSE 8081\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENTRYPOINT redis/src/redis-server redis.conf & redis-commander\n"
    },
    {
        "filename": "c34bedb703621922c6da798408404a18c95298db.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER a.sevilla@anchormen.nl\n\nENV SPARK_VERSION 2.2.0\nENV R_BASE_VERSION 3.4.3\nENV ANACONDA_VERSION 5.0.1\n\nRUN apt-get -y update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tapt-transport-https \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tdefault-jdk \\\n\t\ted \\\n\t\tfile \\\n\t\tfonts-texgyre \\\n\t\tgit \\\n\t\tless \\\n\t\tlibapparmor1 \\\n\t\t# To install httr package, the following library is needed \n\t\tlibcurl4-openssl-dev \\\n\t\tlibedit2 \\\n\t\t# To install rgdal package, the following library is needed\n\t\tlibgdal-dev \\\n\t\t# To install rgeos package, the following library is needed\n\t\tlibgeos-dev \\\n\t\t# To install RPostgreSQL package, the following library is needed\n\t\tlibpq-dev \\\n\t\t# To install rgdal package, the following library is needed\n\t\tlibproj-dev \\\n\t\t# To install git2r package, the following libraries are needed\n\t\tlibssh2-1 \\\n\t\tlibssh2-1-dev \\\n\t\t# To install httr package, the following library is needed\n\t\tlibssl-dev \\\n\t\t# To install package xml2, the following library is needed\n\t\tlibxml2-dev \\\n\t\tlocales \\\n\t\tlsb-release \\\n\t\tnano \\\n\t\topenconnect \\\n\t\topenssh-client \\\n\t\tpsmisc \\\n\t\tpython-setuptools \\\n\t\tsoftware-properties-common \\\n\t\tsudo \\\n\t\tunzip \\\n\t\tvim-tiny \\\n\t\twget \\\n\t&& rm -rf /var/lib/apt/lists/*  \n\n# Configure default locale, see https://github.com/rocker-org/rocker/issues/19\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n\t&& locale-gen en_US.utf8 \\\n\t&& /usr/sbin/update-locale LANG=en_US.UTF-8\n\t\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# Spark\nRUN mkdir -p /opt \\\n    && cd /opt \\\n    && curl https://d3kbcqa49mib13.cloudfront.net/spark-${SPARK_VERSION}-bin-hadoop2.7.tgz | tar -zx \\\n    && ln -s spark-${SPARK_VERSION}-bin-hadoop2.7 spark  \\\n    && echo Spark ${SPARK_VERSION} installed in /opt\n\n\nADD start-common.sh start-worker.sh start-master.sh /\nRUN chmod +x /start-common.sh /start-master.sh /start-worker.sh\n\nENV JAVA_HOME /usr/lib/jvm/default-java\nENV PATH $PATH:/opt/spark/bin\nENV SPARK_HOME /opt/spark\n\n# R\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n\t&& add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/' \\\n\t&& apt-get update -y \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tr-base=${R_BASE_VERSION}* \\\n\t\tr-base-dev=${R_BASE_VERSION}* \\\n\t\tr-recommended=${R_BASE_VERSION}* \\\n        && echo 'options(repos = c(CRAN = \"https://cran.rstudio.com/\"), download.file.method = \"libcurl\")' >> /etc/R/Rprofile.site \\\n\t&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& R -e \"install.packages('devtools')\"\n    \nENV R_HOME /usr/lib/R\n\n# Install additional R packages from CRAN or github\n\n# For Zeppelin\nRUN R -e \"install.packages(c('knitr', 'ggplot2', 'googleVis', 'data.table', 'Rcpp'))\" \nRUN R -e \"devtools::install_github('ramnathv/rCharts')\"\n\n# Time Series Forecast\nRUN R -e \"devtools::install_github('robjhyndman/forecast')\"\n\n# PCA Analysis\nRUN R -e \"install.packages('factoextra')\" \n\n# Python 3.6 and ANACONDA\n\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\ \n\twget --quiet https://repo.continuum.io/archive/Anaconda3-${ANACONDA_VERSION}-Linux-x86_64.sh -O ~/anaconda.sh && \\ \n\t/bin/bash ~/anaconda.sh -b -p /opt/conda && \\ \n\trm ~/anaconda.sh \n\nRUN TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` && \\ \n\tcurl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\ \n\tdpkg -i tini.deb && \\ \n\trm tini.deb && \\ \n\tapt-get clean\n\nRUN apt-get update && apt-get install -y python3-pip\nENV PATH $PATH:/opt/conda/bin\nENV PYTHON_VERSION 3.6.3\nENV PYSPARK_PYTHON python3.6\nENV PYSPARK_DRIVER_PYTHON python3.6\nENV PYTHONPATH ${SPARK_HOME}/python/:${SPARK_HOME}/python/lib/py4j-0.10.4-src.zip:${PYTHONPATH}\n\n# Packages for HDFS interaction\nRUN pip install hdfs pywebhdfs\n\n\n\n\n\n\n\n"
    },
    {
        "filename": "c3ec85b2b66b8e0e50f48f74d0583c2d0ed35bcd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Super simple example of a Dockerfile\n#\nFROM ubuntu:latest\nMAINTAINER Andrew Odewahn \"odewahn@oreilly.com\"\n\nRUN apt-get update\nRUN apt-get install -y python python-pip wget\nRUN pip install Flask\n\nADD hello.py /home/hello.py\n\nWORKDIR /home\n"
    },
    {
        "filename": "c4bc687decde2b5717322cd1730643327c71b3cf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM debian:jessie\nMAINTAINER Kostas Papadimitriou \"kpap@grnet.gr\"\n\nRUN find /var/lib/apt -type f -exec rm {} \\+\nRUN apt-get -y update\nRUN apt-get -y install vim git lsb-release wget multitail python python-pip build-essential \\\n                       python-dev libgpm2 libgmp-dev libxml2 libxml2-dev libxslt1-dev curl \\\n                       supervisor\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN apt-get update && apt-get install -y yarn\n\n# preheat yarn\nADD docker/package.json /tmp/preheat-npm/package.json\nRUN cd /tmp/preheat-npm && yarn install\nRUN yarn global add bower ember-cli\n\n# preheat pip install\nADD docker/requirements-preheat.txt /srv/requirements-preheat.txt\nRUN pip install -r /srv/requirements-preheat.txt\n\n# dev stuff\nRUN apt-get -y install vim vim-ctrlp vim-python-jedi vim-scripts vim-tlib zsh\nRUN apt-get -y install apt-utils curl gunicorn\nRUN sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\nRUN mkdir -p /srv/\n\n# ui\nADD ui /srv/ui\nRUN cd /srv/ui && yarn install\nRUN cd /srv/ui && bower --allow-root install\nRUN cd /srv/ui && ember build \n\nADD . /srv/app\n\n# consnesus\nRUN cd /srv/app/consensus/consensus-client && python setup.py develop\nRUN cd /srv/app/consensus/consensus-service && python setup.py develop\n\n# trustpanel\nRUN cd /srv/app/trustpanel && python setup.py develop\n\nADD docker/services.conf /srv/\nRUN mkdir /srv/db\nRUN mkdir /srv/logs\n\nRUN pip install supervisor-stdout\n\nENV CONSENSUS_DATABASE /srv/db/sqlite.db\nENV NTRUSTEES 2\nENV UI_DIR /srv/ui\nENV PORT 9000\n\nWORKDIR /srv/app\n\nADD docker/init.sh /srv/init.sh\nCMD /srv/init.sh\n"
    },
    {
        "filename": "c6053cc98d6f7e1d21c86efc597bd2cd0eefad2c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# This file describes how to build Haraka into a runnable linux container with all dependencies installed\n# To build:\n# 1.) Install docker (http://docker.io)\n# 2.) Clone haraka-http-forward repo if you haven't already: git clone https://github.com/jplock/haraka-http-forward.git\n# 3.) Modify config/host_list with the domain(s) that you'd like to receive mail to\n# 4.) Build: cd haraka-http-forward && docker build .\n# 5.) Run:\n# docker run -d <imageid>\n# redis-cli -p <redisport>\n#\n# VERSION           0.2\n# DOCKER-VERSION    0.6.1\n\nFROM ubuntu\nMAINTAINER Justin Plock <jplock@gmail.com>\n\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get upgrade -y\n\nRUN apt-get -y -q install redis-server supervisor python-software-properties python g++ make git\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN apt-get -y -q update\nRUN apt-get -y -q install nodejs\n\nRUN npm install -g Haraka\nRUN mkdir -p /var/log/supervisor\nADD ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nRUN haraka -i /usr/local/haraka\nADD ./config/data.http_forward.ini /usr/local/haraka/config/data.http_forward.ini\nADD ./config/plugins /usr/local/haraka/config/plugins\nADD ./config/host_list /usr/local/haraka/config/host_list\nADD ./docs/plugins/data.http_forward.md /usr/local/haraka/docs/plugins/data.http_forward.md\nADD ./plugins/data.http_forward.js /usr/local/haraka/plugins/data.http_forward.js\nADD ./package.json /usr/local/haraka/package.json\nRUN cd /usr/local/haraka && npm install\n\n# Haraka SMTP\nEXPOSE 25\n# Redis\nEXPOSE 6379\n\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "c7821ea0897d8680c75a0b9c7ac9e3593122d784.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Copyright 2015 Netflix, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM netflixoss/tomcat:7\nMAINTAINER Netflix Open Source Development <talent@netflix.com>\n\n# Properties to set\nENV CATALINA_OPTS=\"-Dspring.profiles.active=prod -Darchaius.deployment.applicationId=genie -Darchaius.deployment.environment=dev\"\n\n# Lots of commands to configure the Genie system grouped together to save on filesystem layers in Docker\n# (Lines 28-33) Download and extract the Genie WAR file\n# (34) Create the Genie Jobs directory where job results will be stored and DB connection info\n# (35-37) Enable listings in Tomcat and configure it with listings.xsl\n# (38-39) Configure the database connection to use mysql-genie Docker link as hostname and the correct password\n# (40-48) Modify default properties to map to the Docker image locations and settings\n# (49-58) Download and configure all the Genie scripts that are used to run jobs\nRUN wget -q -P /tomcat/webapps 'http://jcenter.bintray.com/com/netflix/genie/genie-web/2.1.0/genie-web-2.1.0.war' &&\\\n  mkdir /tomcat/webapps/ROOT &&\\\n  cd /tomcat/webapps/ROOT &&\\\n  jar xf ../genie-web-2.1.0.war &&\\\n  cd .. &&\\\n  rm genie-web-2.1.0.war &&\\\n  mkdir /tomcat/webapps/genie-jobs &&\\\n  wget -q -P /tomcat/conf 'https://raw.githubusercontent.com/Netflix/genie/2.1.0/genie-web/conf/system/apps/tomcat/conf/listings.xsl' &&\\\n  sed -i '111s/false/true/' /tomcat/conf/web.xml &&\\\n  sed -i '113i\\ \\ \\ \\ \\ \\ \\ \\ <init-param>\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ <param-name>globalXsltFile<\\/param-name>\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ <param-value>\\/tomcat\\/conf\\/listings.xsl<\\/param-value>\\n\\ \\ \\ \\ \\ \\ \\ \\ <\\/init-param>' /tomcat/conf/web.xml &&\\\n  sed -i '69s/127.0.0.1/mysql-genie/' /tomcat/webapps/ROOT/WEB-INF/classes/genie-jpa.xml &&\\\n  sed -i '71s/value=\"\"/value=\"genie\"/' /tomcat/webapps/ROOT/WEB-INF/classes/genie-jpa.xml &&\\\n  sed -i '23s/\\/usr\\/lib\\/jvm\\/java-1.7.0-sunjdk.x86_64/\\/usr\\/lib\\/jvm\\/java-7-oracle/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '26s/\\/apps\\/hadoop\\/current/\\/apps\\/hadoop\\/2.6.0/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '27s/com.netflix.genie.server.hadoop.2.4.0.home=\\/apps\\/hadoop\\/2.4.0/com.netflix.genie.server.hadoop.2.6.0.home=\\/apps\\/hadoop\\/2.6.0/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '41s/7001/8080/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '81s/\\/mnt\\/tomcat\\/genie-jobs/\\/tomcat\\/webapps\\/genie-jobs/' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '96,103d' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '96icom.netflix.genie.server.job.manager.yarn.command.cp=\\/apps\\/hadoop\\/2.6.0\\/bin\\/hadoop fs -cp -f' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '99,106d' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  sed -i '99icom.netflix.genie.server.job.manager.yarn.command.mkdir=\\/apps\\/hadoop\\/2.6.0\\/bin\\/hadoop fs -mkdir' /tomcat/webapps/ROOT/WEB-INF/classes/genie.properties &&\\\n  mkdir -p /apps/genie/bin &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.1.0/genie-web/conf/system/apps/genie/bin/jobkill.sh' &&\\\n  chmod 755 /apps/genie/bin/jobkill.sh &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.1.0/genie-web/conf/system/apps/genie/bin/joblauncher.sh' &&\\\n  chmod 755 /apps/genie/bin/joblauncher.sh &&\\\n  sed -i '228s/conf/etc\\/hadoop/' /apps/genie/bin/joblauncher.sh &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.1.0/genie-web/conf/system/apps/genie/bin/localCleanup.py' &&\\\n  chmod 755 /apps/genie/bin/localCleanup.py &&\\\n  wget -q -P /apps/genie/bin 'https://raw.githubusercontent.com/Netflix/genie/2.1.0/genie-web/conf/system/apps/genie/bin/timeout3' &&\\\n  chmod 755 /apps/genie/bin/timeout3\n\n# Below here optional to run Genie and can be different for different deployments\n\n# Install some packages that will be used for the example\nRUN apt-get update &&\\\n  DEBIAN_FRONTEND=noninteractive apt-get -y install ant python python-pip vim &&\\\n  python -m pip install --no-input --upgrade --force pip &&\\\n  pip install nflx-genie-client==2.1.0\n\n# Download and configure hadoop client\nRUN mkdir -p /apps/hadoop/2.6.0 &&\\\n  cd /apps/hadoop/2.6.0 &&\\\n  wget -q -P /apps/hadoop/2.6.0 'http://apache.cs.utah.edu/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz' &&\\\n  tar xf hadoop-2.6.0.tar.gz &&\\\n  rm hadoop-2.6.0.tar.gz &&\\\n  chown root:root -R hadoop-2.6.0 &&\\\n  mv hadoop-2.6.0/* . &&\\\n  rm -rf hadoop-2.6.0\n\nENV HADOOP_HOME=/apps/hadoop/2.6.0\nENV HADOOP_PREFIX=$HADOOP_HOME\nENV PATH=$HADOOP_HOME/bin:$PATH\n\n# This is not needed to get Genie working as the scripts loaded into conf below can be copied at runtime\n# I'm just adding them here so that the hadoop and pig commands can connect to the cluster from Genie node by default\n# in case someone wants to mess around with them as a client\nADD hadoop/2.6.0/conf/*.xml $HADOOP_HOME/etc/hadoop/\n\n# Download and configure pig client\nRUN mkdir -p /apps/pig/0.14.0 &&\\\n  cd /apps/pig/0.14.0 &&\\\n  wget -q -P /apps/pig/0.14.0 'http://apache.cs.utah.edu/pig/pig-0.14.0/pig-0.14.0.tar.gz' &&\\\n  tar xf pig-0.14.0.tar.gz &&\\\n  rm pig-0.14.0.tar.gz &&\\\n  chown root:root -R pig-0.14.0 &&\\\n  mv pig-0.14.0/* . &&\\\n  rm -rf pig-0.14.0\n\n# Build the Pig examples\nENV PIG_HOME=/apps/genie/pig/0.14.0\n\nRUN mkdir -p $PIG_HOME &&\\\n  cd $PIG_HOME &&\\\n  wget -q -P $PIG_HOME 'http://apache.cs.utah.edu/pig/pig-0.14.0/pig-0.14.0-src.tar.gz' &&\\\n  tar xf pig-0.14.0-src.tar.gz &&\\\n  mv pig-0.14.0-src/* . &&\\\n  rm -rf pig-0.14.0-src pig-0.14.0-src.tar.gz &&\\\n  ant &&\\\n  cd tutorial &&\\\n  ant &&\\\n  mv pigtutorial.tar.gz /tmp &&\\\n  cd .. &&\\\n  rm -rf * &&\\\n  mkdir tutorial &&\\\n  mv /tmp/pigtutorial.tar.gz tutorial/ &&\\\n  cd tutorial &&\\\n  tar xf pigtutorial.tar.gz &&\\\n  mv pigtmp/* . &&\\\n  rm -rf pigtmp pigtutorial.tar.gz\n\nENV PIG_HOME=/apps/pig/0.14.0\nENV PATH=$PIG_HOME/bin:$PATH\n\n# Put the example scripts onto the image if people want to use them\nADD hadoop/2.6.0/conf/*.xml /apps/genie/hadoop/2.6.0/conf/\nADD example/*.py /apps/genie/example/\n\nEXPOSE 8080\n\nENTRYPOINT [\"/tomcat/bin/catalina.sh\"]\n\nCMD [\"run\"]\n"
    },
    {
        "filename": "cbc397f69306a845d4ee29c9be0eba46d04afdb8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM        debian\nMAINTAINER  Love Nyberg \"love.nyberg@lovemusic.se\"\nENV REFRESHED_AT 2014-09-30\n\n# Update the package repository\nRUN apt-get update -qq && \\ \n  apt-get upgrade -yqq\n\n# Compiling and installing node.js\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yqq wget curl python g++ make checkinstall fakeroot && \\\n  apt-get -yqq clean && \\\n  src=$(mktemp -d) && cd $src && \\\n  wget -N http://nodejs.org/dist/node-latest.tar.gz && \\\n  tar xzvf node-latest.tar.gz && cd node-v* && \\\n  ./configure && \\\n  fakeroot checkinstall -y --install=no --pkgversion $(echo $(pwd) | sed -n -re's/.+node-v(.+)$/\\1/p') make -j$(($(nproc)+1)) install && \\\n  dpkg -i node_*\n\n# Installing possible node executers\nRUN npm install -g nodemon forever\n\n# Add node application into container\nADD src /var/www\n\n# Install node dependences\nRUN cd /var/www && npm install\n\n# Expose application port\nEXPOSE 8080\n\n# Add docker start script\nADD start.sh /start.sh\nCMD [\"bash\", \"start.sh\"]\n"
    },
    {
        "filename": "cc3c593838b0a7ab3de181513b57beac79820035.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012,DOCKER-015",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user,use-sudo-run",
        "num": 7,
        "text": "FROM ekidd/rust-musl-builder AS builder\n\n# Add our source code.\nADD . ./\n\n# Fix permissions on source code.\nRUN sudo chown -R rust:rust /home/rust\n\n# Fix the cargo manifest so it can be built standalone\nRUN sed -i -e 's/pact_matching = {\\s*version\\s*=\\s*\"\\([^\"]*\\).*/pact_matching = \"\\1\"/' Cargo.toml\nRUN sed -i -e 's/pact_mock_server = {\\s*version\\s*=\\s*\"\\([^\"]*\\).*/pact_mock_server = \"\\1\"/' Cargo.toml\n\n# Build our application.\nRUN cargo build --release\n\n# Now, we need to build our _real_ Docker container, copying in the executable.\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nCOPY --from=builder \\\n    /home/rust/src/target/x86_64-unknown-linux-musl/release/pact_mock_server_cli \\\n    /usr/local/bin/\n\nEXPOSE 8080 9000-9020\n\nENTRYPOINT [\"/usr/local/bin/pact_mock_server_cli\"]\nCMD [\"start\", \"--base-port\", \"9000\"]\n"
    },
    {
        "filename": "d7d3b9156f76ca676c8a7509f029da2984331338.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Etherpad-Lite Dockerfile\n#\n# https://github.com/ether/etherpad-docker\n#\n# Developed from a version by Evan Hazlett at https://github.com/arcus-io/docker-etherpad \n#\n# Version 1.0\n\n# Use Docker's nodejs, which is based on ubuntu\nFROM node:latest\nMAINTAINER John E. Arnold, iohannes.eduardus.arnold@gmail.com\n\n# Get Etherpad-lite's other dependencies\nRUN apt-get update\nRUN apt-get install -y gzip git-core curl python libssl-dev pkg-config build-essential supervisor\n\n# Grab the latest Git version\nRUN cd /opt && git clone https://github.com/ether/etherpad-lite.git etherpad\n\n# Install node dependencies\nRUN /opt/etherpad/bin/installDeps.sh\n\n# Add conf files\nADD settings.json /opt/etherpad/settings.json\nADD supervisor.conf /etc/supervisor/supervisor.conf\n\nEXPOSE 9001\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisor.conf\", \"-n\"]\n"
    },
    {
        "filename": "d847e8a95a5e21172d9f6b62a9b648de138dcc21.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER Marcelo Fleury \"marcelomf@gmail.com\"\n\nENV LANG C.UTF-8\nENV SERVICE_NAME graojs\nENV SERVICE_VERSION 1\n\nRUN echo \"alias ls='ls --color'\" >> /etc/profile\nRUN apt-get update\nRUN ln -s -f /bin/true /usr/bin/chfn\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -yq \\\n    wget \\\n    curl \\\n    git \\\n    git-core \\\n    vim \\\n    python-software-properties \\\n    software-properties-common \\\n    g++ \\\n    build-essential \\\n    make\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\nRUN echo \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n\n#RUN add-apt-repository -y ppa:chris-lea/node.js\nRUN curl --silent --location https://deb.nodesource.com/setup_0.12 | sudo bash -\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -yq \\\n    nodejs \\\n    node-gyp \\\n#    npm \\\n    mongodb-org\n\nRUN mkdir -p /opt/$SERVICE_NAME\nADD . /opt/$SERVICE_NAME\nWORKDIR /opt\n\nRUN npm update\n#RUN npm install -g node-pre-gyp\n#RUN npm install -g node-gyp \n#RUN node-gyp configure || echo \"error bypass\"\nRUN npm install -g bson-ext\nRUN npm install -g bson \nRUN npm install -g mongodb\nRUN npm install -g graojs\n#RUN cd /usr/lib/node_modules/graojs/node_modules/mongodb/node_modules/mongodb-core/ && npm install || echo \"error bypass\"\nRUN cd /usr/lib/node_modules/graojs/node_modules/mongodb/node_modules/mongodb-core/ && npm install bson || echo \"error bypass\"\n\nRUN service mongodb start && sleep 3 && grao generate:app demo --name demo --description demo --author-name Synack --author-email int@synack.com.br --server-ports 8015,8016 --template-engine jade --theme graojs --mongodb-host localhost --mongodb-db grao\n\nWORKDIR demo\n\nRUN service mongodb start && sleep 3 && grao main:create:admin --username marcelo --name Marcelo --email marcelomf@gmail.com --password admin123\n\nRUN groupadd -r $SERVICE_NAME\nRUN useradd -r -s /bin/sh -d /opt/$SERVICE_NAME -c 'service user' -g $SERVICE_NAME $SERVICE_NAME\n\nEXPOSE 8015\nEXPOSE 8016\nENTRYPOINT dockerized.sh\n"
    },
    {
        "filename": "db794583dcda81daf160533b3e85d68cd29d74d6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nFROM apachepulsar/pulsar-all:latest as pulsar\n\n# Restart from\nFROM openjdk:8-jdk\n\nCOPY --from=pulsar /pulsar /pulsar\n\nRUN apt-get update\nRUN apt-get -y install python2.7 python-pip postgresql-9.6 sudo nginx supervisor\n\n# Python dependencies\nRUN pip2 -qq install uwsgi 'Django<2.0' 'psycopg2==2.7.7' pytz requests\n\n# Postgres configuration\nCOPY conf/postgresql.conf /etc/postgresql/9.6/main/\n\n# Configure nginx and supervisor\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nCOPY conf/nginx-app.conf /etc/nginx/sites-available/default\nCOPY conf/supervisor-app.conf /etc/supervisor/conf.d/\n\n# Copy web-app sources\nCOPY . /pulsar/\n\n# Setup database and create tables\nRUN sudo -u postgres /etc/init.d/postgresql start && \\\n    sudo -u postgres psql --command \"CREATE USER docker WITH PASSWORD 'docker';\" && \\\n    sudo -u postgres createdb -O docker pulsar_dashboard && \\\n    cd /pulsar/django && \\\n    ./manage.py migrate && \\\n    sudo -u postgres /etc/init.d/postgresql stop\n\n# Collect all static files needed by Django in a\n# single place. Needed to run the app outside the\n# Django test web server\nRUN cd /pulsar/django && ./manage.py collectstatic --no-input\n\nENV SERVICE_URL http://127.0.0.1:8080\nEXPOSE 80\n\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "dbc723110e7de9cccba323ea6f44b5154305c476.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM java7jre_image\n\nENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\nRUN (   SPARK_VERSION=1.3.0 && \\\n        apt-get update && \\\n        apt-get install -y wget && \\\n        wget -O /tmp/spark.tgz http://d3kbcqa49mib13.cloudfront.net/spark-${SPARK_VERSION}-bin-cdh4.tgz && \\\n        cd /opt && tar xvf /tmp/spark.tgz && \\\n        rm -fv /tmp/spark.tgz && \\\n        ln -sn spark-${SPARK_VERSION}-bin-cdh4 /opt/spark && \\\n        apt-get install -y python python-pip curl jq libgfortran3 && \\\n        pip install python-consul && \\\n        apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*)\n\nADD app /app\nADD spark-jobs /spark-jobs\nADD startup-scripts /startup-scripts\n\n# Define default command.\nCMD [\"/apps/bin/keep_alive\"]\n\n"
    },
    {
        "filename": "dc650843dcc9ec3692c9f7aaedd40ee94602d5b4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Venkata Phani Kumar Mangipudi <phani1kumar@gmail.com>\n\nRUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\nRUN apt-get purge -y openjdk*\nRUN apt-get update && apt-get install -y software-properties-common python-software-properties \\\n\t&& add-apt-repository ppa:webupd8team/java\nRUN apt-get update && apt-get install -y \\\n\tcurl \\\n\tgit \\\n\tmaven \\\n\toracle-java8-installer \\\n\topenssh-server \\\n\twget\n\nRUN sed -i 's/required[ ]*pam_loginuid/optional\\tpam_loginuid/g' /etc/pam.d/sshd \\\n\t&& mkdir -p /var/run/sshd \\\n\t&& echo \"UserKnownHostsFile /dev/null\\nStrictHostKeyChecking no\\nLogLevel quiet\" >> /etc/ssh/ssh_config \\\n\t&& ssh-keygen -t dsa -P '' -f /root/.ssh/id_dsa \\\n\t&& cat /root/.ssh/id_dsa.pub >> /root/.ssh/authorized_keys \\\n\t&& chmod 600 /root/.ssh/id_dsa /root/.ssh/authorized_keys \\\n\t&& chmod 644 /root/.ssh/id_dsa.pub\nENV CUSTOMIZE_TINKERPOP=\"NO\"\nRUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\\nthen \\\n\tgit clone https://github.com/apache/incubator-tinkerpop.git; \\\n\tcd incubator-tinkerpop/; \\\nfi\nRUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\\nthen \\\n\tcd incubator-tinkerpop; \\\n\tgit checkout tags/3.0.0-incubating; \\\n\tTINKERPOP_VERSION=$( cat pom.xml | grep \"^    <version>.*</version>$\" | awk -F'[><]' '{print $3}'); \\\n\techo \"TINKERPOP_VERSION IS: $TINKERPOP_VERSION\"; \\\nfi\n#If you want to perform any quick corrections to the checked out tinkerpop repository, you could do here and mark your own version name\n#RUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\\n#then \\\n#\tcd incubator-tinkerpop; \\\n#\tsed -i \"s/onStartup:/onStartup: \\{\\/\\//g\" gremlin-server/scripts/generate-modern-readonly.groovy; \\\n#\tsed -i \"s/ctx.logger.info/\\/\\/ctx.logger.info/g\" gremlin-server/scripts/generate-modern-readonly.groovy; \\\n#\tsed -i \"s/TinkerFactory.generateClassic/\\/\\/TinkerFactory.generateClassic/g\" gremlin-server/scripts/generate-modern-readonly.groovy; \\\n#\tsed -i \"s/onStartup:/onStartup: \\{\\/\\//g\" gremlin-server/scripts/generate-modern.groovy; \\\n#\tsed -i \"s/ctx.logger.info/\\/\\/ctx.logger.info/g\" gremlin-server/scripts/generate-modern.groovy; \\\n#\tsed -i \"s/TinkerFactory.generateClassic/\\/\\/TinkerFactory.generateClassic/g\" gremlin-server/scripts/generate-modern.groovy; \\\n#\tpwd; \\\n#fi\n\n#Ideally you wouldn't need to specify any changes to the TINKERPOP version, if you have done any changes like in above commented\n# code, you may wish to change the version, to be sure that your changes are picked up by titan build that follows\nENV TINKERPOP_VERSION=\"3.0.0-MY-SNAPSHOT\"\nRUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\\nthen \\\n\tcd incubator-tinkerpop; \\\n\tsed -i \"s/^    <version>.*<\\/version>/    <version>$TINKERPOP_VERSION<\\/version>/g\" pom.xml; \\\n\tsed -i \"s/^        <version>.*<\\/version>/        <version>$TINKERPOP_VERSION<\\/version>/g\" $(find . -maxdepth 2 -mindepth 2 -type f -name 'pom.xml'); \\\n\tcat $(find . -maxdepth 2 -mindepth 2 -type f -name 'pom.xml') | grep \"^        <version>.*<\\/version>\"; \\\n\tT_VERSION=$( cat pom.xml | grep \"^    <version>.*</version>$\" | awk -F'[><]' '{print $3}'); \\\n\techo \"TINKERPOP_VERSION IS: $T_VERSION\"; \\\nfi\nRUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\\nthen \\\n\tcd incubator-tinkerpop; \\\n\tmvn clean install -DskipTests -Denforcer.skip=true; \\\nfi\n\nENV TITAN_VERSION=\"1.0.1-SNAPSHOT\"\nENV TITAN_BRANCH=\"titan10\"\n\nRUN if [ ! -z $TITAN_BRANCH ]; \\\nthen \\\n\techo \"cloning the branch TITAN_BRANCH=$TITAN_BRANCH\"; \\\n\tgit clone https://github.com/thinkaurelius/titan.git --branch $TITAN_BRANCH --single-branch && cd titan/; \\\nelse \\\n\techo \"cloning the master TITAN_BRANCH=$TITAN_BRANCH\"; \\\n\tgit clone https://github.com/thinkaurelius/titan.git; \\\n\tcd titan/; \\\n\tgit checkout tags/$TITAN_VERSION; \\\nfi \nRUN if [ $CUSTOMIZE_TINKERPOP -eq \"YES\" ]; \\ \nthen \\\n\tcd titan; \\\n\tsed -i \"s/tinkerpop.version.*/tinkerpop.version>$TINKERPOP_VERSION<\\/tinkerpop.version>/g\" pom.xml; \\\n\tcat pom.xml | grep tinkerpop.version; \\\nfi\nRUN cd titan && mvn clean install -DskipTests=true -Paurelius-release -Dgpg.skip=true\nRUN cd titan && rm -f conf/core-site.xml conf/mapred-site.xml \\\n\t&& cd ../ \\\n\t&& mv titan /usr/local/titan-$TITAN_VERSION \\\n\t&& ln -sf /usr/local/titan-$TITAN_VERSION /usr/local/titan\nENV TITAN_DEPLOYMENT=\"titan-$TITAN_VERSION-hadoop1\"\nWORKDIR /opt/$TITAN_DEPLOYMENT\nRUN find / -name $TITAN_DEPLOYMENT.zip\nRUN unzip /usr/local/titan-$TITAN_VERSION/titan-dist/titan-dist-hadoop-1/target/$TITAN_DEPLOYMENT.zip -d /opt/ \\\n    && rm /usr/local/titan-$TITAN_VERSION/titan-dist/titan-dist-hadoop-1/target/$TITAN_DEPLOYMENT.zip\n\nADD run.sh /opt/$TITAN_DEPLOYMENT/\n\nEXPOSE 8182\nEXPOSE 8184\n\nCMD /bin/sh  -e \"/opt/$TITAN_DEPLOYMENT/run.sh\"\n"
    },
    {
        "filename": "de245185bb31c74060bc00af0c1dcc5922b955f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# MySQL Server with Apache and phpmyadmin\n#\n# VERSION               0.0.1\n\nFROM     ubuntu:latest\nMAINTAINER Jonas Colmsj\u00f6 \"jonas@gizur.com\"\n\nRUN echo \"export HOME=/root\" >> /root/.profile\n\nRUN apt-get update\nRUN apt-get install -y wget nano curl git\n\n\n#\n# Install supervisord (used to handle processes)\n#\n\nRUN apt-get install -y supervisor\nADD ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n\n#\n# Change PHP version\n#\n\nRUN apt-get update\nRUN curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew\nRUN chmod +x phpbrew\nRUN mv phpbrew /usr/bin/phpbrew\nRUN sudo apt-get install -y libxml2-dev libbz2-dev libmcrypt-dev libxslt1-dev php-pear libssl-dev libsslcommon2-dev libreadline-dev make\nRUN phpbrew install 5.3.28 +default+openssl\nRUN phpbrew init\n#RUN echo \"source ~/.phpbrew/bashrc\" >> ~/.bashrc\n#RUN phpbrew use php-5.3.28\n\n\n\n#\n# Install Apache and PHP\n#\n\nRUN apt-get install -y apache2 php5 php5-curl php5-mysql php5-mcrypt php5-gd php5-imap\nRUN a2enmod rewrite\nRUN a2enmod status\nRUN php5enmod imap\nADD ./etc-apache2-mods-available-status.conf /etc/apache2/mods-available/status.conf\nADD ./etc-php5-apache2-php.ini /etc/php5/apache2/php.ini\nRUN rm /var/www/html/index.html\nRUN echo \"<?php\\nphpinfo();\\n \" > /var/www/html/info.php\n\n# Install phpMyAdmin\nADD ./src-phpmyadmin/phpMyAdmin-4.0.8-all-languages.tar.gz /var/www/html/\nADD ./src-phpmyadmin/config.inc.php /var/www/html/phpMyAdmin-4.0.8-all-languages/config.inc.php\n\n\n#\n# Install MySQL\n#\n\n# Bundle everything\nADD ./src-mysql /src-mysql\n\n# Install MySQL server\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Fix configuration\nRUN sed -i -e\"s/^bind-address\\s*=\\s*127.0.0.1/bind-address = 0.0.0.0/\" /etc/mysql/my.cnf\n\n# Setup admin user and load data\nRUN /src-mysql/mysql-setup.sh\n\n#\n# Start apache and mysql using supervisord\n#\n\n# Fix permissions\nRUN chown -R www-data:www-data /var/www/html\n\n\nADD ./start.sh /\n\nEXPOSE 3306 80 443\nCMD [\"/start.sh\"]\n"
    },
    {
        "filename": "dedc5737233f9f53ba36c4d97336a8180f8d4a45.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# simple example of a Dockerfile\nFROM ubuntu:latest\nMAINTAINER Contextual Dynamics Lab \"contextualdynamics@gmail.com\"\n\n# install python and flask\nRUN apt-get update\nRUN apt-get install -y python python-pip wget\nRUN pip install Flask\n\n# add a script\nADD simple_server.py /home/simple_server.py\n\n# set the working directory\nWORKDIR /home\n"
    },
    {
        "filename": "df9a688c2938479994c1378a703be09ec5449d07.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Dockerfile for warcprox tests\n#\n# Copyright (C) 2015-2017 Internet Archive\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n# USA.\n#\n\nFROM phusion/baseimage\nMAINTAINER Noah Levitt <nlevitt@archive.org>\n\n# see https://github.com/stuartpb/rethinkdb-dockerfiles/blob/master/trusty/2.1.3/Dockerfile\n# and https://github.com/chali/hadoop-cdh-pseudo-docker/blob/master/Dockerfile\n\nENV LANG=C.UTF-8\n\nRUN apt-get update && apt-get --auto-remove -y dist-upgrade\n\n# Add the RethinkDB repository and public key\nRUN curl -s https://download.rethinkdb.com/apt/pubkey.gpg | apt-key add - \\\n    && echo \"deb http://download.rethinkdb.com/apt xenial main\" > /etc/apt/sources.list.d/rethinkdb.list \\\n    && apt-get update && apt-get -y install rethinkdb\n\nRUN mkdir -vp /etc/service/rethinkdb \\\n    && echo \"#!/bin/bash\\nexec rethinkdb --bind 0.0.0.0 --directory /tmp/rethink-data --runuser rethinkdb --rungroup rethinkdb\\n\" > /etc/service/rethinkdb/run \\\n    && chmod a+x /etc/service/rethinkdb/run\n\nRUN apt-get -y install git\nRUN apt-get -y install libpython2.7-dev libpython3-dev libffi-dev libssl-dev \\\n               python-setuptools python3-setuptools\nRUN apt-get -y install gcc\n\nRUN echo '57ff41e99cb01b6a1c2b0999161589b726f0ec8b  /tmp/pip-9.0.1.tar.gz' > /tmp/sha1sums.txt\nRUN curl -sSL -o /tmp/pip-9.0.1.tar.gz https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz\nRUN sha1sum -c /tmp/sha1sums.txt\nRUN tar -C /tmp -xf /tmp/pip-9.0.1.tar.gz\nRUN cd /tmp/pip-9.0.1 && python3 setup.py install\n\nRUN pip install virtualenv\n\nRUN apt-get -y install tor\nRUN mkdir -vp /etc/service/tor \\\n    && echo \"#!/bin/sh\\nexec tor\\n\" > /etc/service/tor/run \\\n    && chmod a+x /etc/service/tor/run\n\n# hadoop hdfs for trough\nRUN curl -s https://archive.cloudera.com/cdh5/ubuntu/xenial/amd64/cdh/archive.key | apt-key add - \\\n    && . /etc/lsb-release \\\n    && echo \"deb [arch=amd64] http://archive.cloudera.com/cdh5/ubuntu/$DISTRIB_CODENAME/amd64/cdh $DISTRIB_CODENAME-cdh5 contrib\" >> /etc/apt/sources.list.d/cloudera.list\n\nRUN apt-get update\nRUN apt-get install -y openjdk-8-jdk hadoop-conf-pseudo\n\nRUN su hdfs -c 'hdfs namenode -format'\n\nRUN mv -v /etc/hadoop/conf/core-site.xml /etc/hadoop/conf/core-site.xml.orig \\\n    && cat /etc/hadoop/conf/core-site.xml.orig | sed 's,localhost:8020,0.0.0.0:8020,' > /etc/hadoop/conf/core-site.xml\n\nRUN mv -v /etc/hadoop/conf/hdfs-site.xml /etc/hadoop/conf/hdfs-site.xml.orig \\\n    && cat /etc/hadoop/conf/hdfs-site.xml.orig | sed 's,^</configuration>$,  <property>\\n    <name>dfs.permissions.enabled</name>\\n    <value>false</value>\\n  </property>\\n</configuration>,' > /etc/hadoop/conf/hdfs-site.xml\n\nRUN echo '#!/bin/bash\\nservice hadoop-hdfs-namenode start\\nservice hadoop-hdfs-datanode start' > /etc/my_init.d/50_start_hdfs.sh \\\n    && chmod a+x /etc/my_init.d/50_start_hdfs.sh\n\nRUN apt-get install -y libsqlite3-dev\n\n# trough itself\nRUN virtualenv -p python3 /opt/trough-ve3 \\\n    && . /opt/trough-ve3/bin/activate \\\n    && pip install git+https://github.com/nlevitt/snakebite.git@py3 \\\n    && pip install git+https://github.com/internetarchive/trough.git\n\nRUN mkdir -vp /etc/service/trough-sync-local \\\n    && echo \"#!/bin/bash\\nsource /opt/trough-ve3/bin/activate\\nexec sync.py >>/tmp/trough-sync-local.out 2>&1\" > /etc/service/trough-sync-local/run \\\n    && chmod a+x /etc/service/trough-sync-local/run\n\nRUN mkdir -vp /etc/service/trough-sync-server \\\n    && echo '#!/bin/bash\\nsource /opt/trough-ve3/bin/activate\\nsleep 5\\npython -c $\"import doublethink ; from trough.settings import settings ; rr = doublethink.Rethinker(settings[\\\"RETHINKDB_HOSTS\\\"]) ; rr.db(\\\"trough_configuration\\\").wait().run()\"\\nexec sync.py --server >>/tmp/trough-sync-server.out 2>&1' > /etc/service/trough-sync-server/run \\\n    && chmod a+x /etc/service/trough-sync-server/run\n\nRUN mkdir -vp /etc/service/trough-read \\\n    && echo '#!/bin/bash\\nvenv=/opt/trough-ve3\\nsource $venv/bin/activate\\nsleep 5\\npython -c $\"import doublethink ; from trough.settings import settings ; rr = doublethink.Rethinker(settings[\\\"RETHINKDB_HOSTS\\\"]) ; rr.db(\\\"trough_configuration\\\").wait().run()\"\\nexec uwsgi --venv=$venv --http :6444 --master --processes=2 --harakiri=3200 --socket-timeout=3200 --max-requests=50000 --vacuum --die-on-term --wsgi-file $venv/bin/reader.py >>/tmp/trough-read.out 2>&1' > /etc/service/trough-read/run \\\n    && chmod a+x /etc/service/trough-read/run\n\nRUN mkdir -vp /etc/service/trough-write \\\n    && echo '#!/bin/bash\\nvenv=/opt/trough-ve3\\nsource $venv/bin/activate\\nsleep 5\\npython -c $\"import doublethink ; from trough.settings import settings ; rr = doublethink.Rethinker(settings[\\\"RETHINKDB_HOSTS\\\"]) ; rr.db(\\\"trough_configuration\\\").wait().run()\"\\nexec uwsgi --venv=$venv --http :6222 --master --processes=2 --harakiri=240 --max-requests=50000 --vacuum --die-on-term --wsgi-file $venv/bin/writer.py >>/tmp/trough-write.out 2>&1' > /etc/service/trough-write/run \\\n    && chmod a+x /etc/service/trough-write/run\n\nRUN mkdir -vp /etc/service/trough-segment-manager-local \\\n    && echo '#!/bin/bash\\nvenv=/opt/trough-ve3\\nsource $venv/bin/activate\\nsleep 5\\npython -c $\"import doublethink ; from trough.settings import settings ; rr = doublethink.Rethinker(settings[\\\"RETHINKDB_HOSTS\\\"]) ; rr.db(\\\"trough_configuration\\\").wait().run()\"\\nexec uwsgi --venv=$venv --http :6112 --master --processes=2 --harakiri=7200 --http-timeout=7200 --max-requests=50000 --vacuum --die-on-term --mount /=trough.wsgi.segment_manager:local >>/tmp/trough-segment-manager-local.out 2>&1' > /etc/service/trough-segment-manager-local/run \\\n    && chmod a+x /etc/service/trough-segment-manager-local/run\n\nRUN mkdir -vp /etc/service/trough-segment-manager-server \\\n    && echo '#!/bin/bash\\nvenv=/opt/trough-ve3\\nsource $venv/bin/activate\\nsleep 5\\npython -c $\"import doublethink ; from trough.settings import settings ; rr = doublethink.Rethinker(settings[\\\"RETHINKDB_HOSTS\\\"]) ; rr.db(\\\"trough_configuration\\\").wait().run()\"\\nexec uwsgi --venv=$venv --http :6111 --master --processes=2 --harakiri=7200 --http-timeout=7200 --max-requests=50000 --vacuum --die-on-term --mount /=trough.wsgi.segment_manager:server >>/tmp/trough-segment-manager-server.out 2>&1' > /etc/service/trough-segment-manager-server/run \\\n    && chmod a+x /etc/service/trough-segment-manager-server/run\n\n"
    },
    {
        "filename": "e316cae26225e518dd1eb7b0aab89241a2fca8a4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Start with Ubuntu base image\nFROM ubuntu:15.04\nMAINTAINER Patrick Callier <pcallier@lab41.org>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install wget and build-essential\nRUN apt-get update && apt-get install -y \\\n  build-essential \\\n  wget\n\n# Use .deb method to install CUDA 7.5 + NVidia drivers (352.79)\nRUN cd /tmp && \\\n    wget -q http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1504/x86_64/cuda-repo-ubuntu1504_7.5-18_amd64.deb && \\\n    dpkg -i cuda-repo-ubuntu1504_7.5-18_amd64.deb && \\\n    apt-get update && \\\n    apt-get install -y cuda\n\n\n# Install cuDNN v4\nADD cudnn-7.0-linux-x64-v4.0-rc.tgz /opt/\n\n# Install git, python-dev, pip and other dependencies\nRUN apt-get update && apt-get install -y \\\n  git \\\n  libopenblas-dev \\\n  python-dev \\\n  python-pip \\\n  python-nose \\\n  python-numpy \\\n  python-scipy\n\n# Set CUDA_ROOT\nENV CUDA_ROOT /usr/local/cuda/bin\n# Install bleeding-edge Theano\nRUN pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git\n# Set up .theanorc for CUDA, theanorc in work directory takes precedence\nENV THEANORC=\"/root/.theanorc:/work/.theanorc\"\nRUN echo \"[global]\\ndevice=gpu\\nfloatX=float32\\n[lib]\\ncnmem=0\\n[nvcc]\\nfastmath=True\" > /root/.theanorc\n\nRUN apt-get update && apt-get install -y \\\n  libhdf5-dev \\\n  python-h5py \\\n  python-yaml\n\n# Upgrade six\nRUN pip install --upgrade six && \\\n    cd /root && git clone https://github.com/fchollet/keras.git && cd keras && \\\n    python setup.py install && \\\n    apt-get -y install vim\n\nRUN pip install jupyter && \\\n    apt-get -y build-dep python-matplotlib\nRUN pip install matplotlib seaborn bokeh pandas scikit-learn scikit-image\nRUN cd /root && \\\n    wget https://pypi.python.org/packages/source/t/tornado/tornado-4.1.tar.gz && \\\n    gunzip tornado-4.1.tar.gz && tar -xvf tornado-4.1.tar && \\\n    cd tornado-4.1 && python setup.py install && \\\n    pip install notebook \n\n# Startup script\nRUN printf '#!/bin/bash\\n\\njupyter notebook --no-browser --ip=\"*\"' > /bootstrap.sh && \\\n    chmod +x /bootstrap.sh\n\n# Add CUDA, cuDNN to path\nENV PATH=/usr/local/cuda/bin:$PATH\nENV LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64:/opt/cuda/lib64:$LD_LIBRARY_PATH\nENV LIBRARY_PATH=/opt/cuda/lib64:$LIBRARY_PATH\nENV CPATH=/opt/cuda/include:$CPATH\n\nEXPOSE 8888\n\n\nCMD [\"/bootstrap.sh\"]\n"
    },
    {
        "filename": "e51abd69b97575a376b3ecc87bc824d473d08624.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Inherit from docker container that has the fail source code\n# prepared, including all tools which are needed to build FAIL*. The\n# generic-tracing experiment was already built and the binaries are in\n# place (~fail/bin/*)\n\nFROM danceos/fail-generic-tracing\nMAINTAINER Christian Dietrich <stettberger@dokucode.de>\n\n# Install Additional Packages\nRUN apt-get install -y  \\\n    python-minimal      \\\n    grub-common         \\\n    xorriso             \\\n    grub-pc-bin         \\\n    mysql-client        \\\n    python-flask        \\\n    python-mysqldb      \\\n    python-yaml\n\n\n# Passwort for MySQL Daemon\nADD my.cnf /home/fail/.my.cnf\nRUN chown fail /home/fail/.my.cnf\n\nUSER fail\nWORKDIR /home/fail\nRUN echo 'export PATH=$HOME/bin:$PATH' >> ~/.profile;\\\n    echo 'cd $HOME/fail-targets' >> ~/.profile\n\nRUN git clone https://github.com/danceos/fail-targets.git\n\nWORKDIR fail\nRUN mkdir build; cd build; ../configurations/x86_pruning.sh generic-experiment\nWORKDIR build\n\n# Make FAIL*\nRUN make -j$(getconf _NPROCESSORS_ONLN) || make -j$(getconf _NPROCESSORS_ONLN)\nRUN ln -s /home/fail/fail/build/bin/fail-client    /home/fail/bin/generic-experiment-client;    \\\n    ln -s /home/fail/fail/build/bin/generic-experiment-server   /home/fail/bin/; \\\n    ln -s /home/fail/fail/tools/analysis/resultbrowser/run.py /home/fail/bin/resultbrowser\n\n# For the resultbrowser, we expose port 5000 to the outside world.\nEXPOSE 5000\n\nUSER root\n"
    },
    {
        "filename": "e822824cee6e2ce671b51b4a2967923baef7cadb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "from ubuntu:12.04\nmaintainer evan hazlett <ejhazlett@gmail.com>\nrun echo \"deb http://us.archive.ubuntu.com/ubuntu precise main universe multiverse\" > /etc/apt/sources.list\nrun echo \"deb-src http://us.archive.ubuntu.com/ubuntu precise main universe multiverse\" >> /etc/apt/sources.list\nrun apt-get update\nrun DEBIAN_FRONTEND=noninteractive apt-get -y upgrade\nrun apt-get install -y python-dev python-setuptools libxml2-dev libxslt-dev git-core build-essential python-flup python-pip python-virtualenv nginx supervisor libmysqlclient-dev libpq-dev\nrun apt-get build-dep -y python-lxml python-imaging\nrun pip install uwsgi\nrun mkdir /opt/treeio\nrun (cd /opt/treeio && git clone https://github.com/treeio/treeio.git)\nrun (cd /opt/treeio/treeio && virtualenv venv)\nrun (cd /opt/treeio/treeio && ./venv/bin/pip install Pillow)\nrun (cd /opt/treeio/treeio && ./venv/bin/pip install -r requirements.pip)\nrun (cd /opt/treeio/treeio && ./venv/bin/pip install MySQL-Python==1.2.3)\nrun (cd /opt/treeio/treeio && ./venv/bin/pip install psycopg2)\nrun (cd /opt/treeio/treeio && ./venv/bin/python related_fields_patch.py ./venv/lib/python2.7/site-packages/django)\nadd run.sh /usr/local/bin/run\nexpose 80\ncmd [\"/usr/local/bin/run\"]\n\n"
    },
    {
        "filename": "e882b12943391da7563823d1d767889681a9d496.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# OpenVAS 8\n#\n# VERSION       1.0.0\n\nFROM debian:7.8\nMAINTAINER Serge Katzmann serge.katzmann@gmail.com\n\nENV DEBIAN_FRONTEND noninteractive\nENV LANG C.UTF-8  \nENV LANGUAGE en  \nENV LC_ALL C.UTF-8\n\nRUN apt-get update -y && apt-get install locales debconf -y && \\\n\tdpkg-reconfigure locales && \\\n\tlocale-gen C.UTF-8 && \\\n\t/usr/sbin/update-locale LANG=C.UTF-8 && \\\napt-get install build-essential \\\n\t\t\t\t\tbison \\ \n\t\t\t\t\tflex \\ \n\t\t\t\t\tcmake \\ \n\t\t\t\t\tpkg-config \\ \n\t\t\t\t\tlibssh-dev \\ \n\t\t\t\t\tlibgnutls-dev \\ \n\t\t\t\t\tlibglib2.0-dev \\ \n\t\t\t\t\tlibpcap-dev \\ \n\t\t\t\t\tlibgpgme11-dev \\ \n\t\t\t\t\tuuid-dev \\ \n\t\t\t\t\tlibksba-dev \\ \n\t\t\t\t\tlibhiredis-dev \\ \n\t\t\t\t\tlibldap2-dev \\ \n\t\t\t\t\tautoconf \\ \n\t\t\t\t\tlibsqlite3-dev \\ \n\t\t\t\t\tlibxml2-dev \\ \n\t\t\t\t\tlibmicrohttpd-dev \\ \n\t\t\t\t\txsltproc \\ \n\t\t\t\t\ttcl \\ \n\t\t\t\t\trpm \\ \n\t\t\t\t\talien \\ \n\t\t\t\t\tnsis \\ \n\t\t\t\t\tgcc-mingw32 \\ \n\t\t\t\t\tperl-base \\ \n\t\t\t\t\tperl-base \\ \n\t\t\t\t\theimdal-dev \\ \n\t\t\t\t\theimdal-multidev \\ \n\t\t\t\t\tlibpopt-dev \\ \n\t\t\t\t\tlibxslt-dev \\ \n\t\t\t\t\tlibsnmp-dev \\ \n\t\t\t\t\tdoxygen \\ \n\t\t\t\t\txmltoman \\ \n\t\t\t\t\tsqlfairy \\ \n\t\t\t\t\tsqlite3 \\\n\t\t\t\t\tunzip \\\n\t\t\t\t\trsync \\\t\n\t\t\t\t\twget \\\n\t\t\t\t\tpython2.7 \\\n\t\t\t\t\tpython-setuptools \\\n\t\t\t\t\tpython-pip \\\n\t\t\t\t\tlibidn11-dev \\\n\t\t\t\t\tlibssl-dev \\\n\t\t\t\t\tlibpcre3-dev \\\n\t\t\t\t\tless \\\n\t\t\t\t\tnet-tools \\\n\t\t\t\t\topenssh-client \\\n\t\t\t\t\ttexlive-latex-base \\\t\t\t\t\t\n\t\t\t\t\ttexlive-latex-recommended \\\n\t\t\t\t\ttexlive-latex-extra \\\n\t\t\t\t\thtmldoc \\\n\t\t\t\t\thaveged \\\n\t\t\t\t\t-y --no-install-recommends --fix-missing && \\\t\t\t\t\n    mkdir /openvas-src && \\\n    cd /openvas-src && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/2191/openvas-libraries-8.0.5.tar.gz && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/2129/openvas-scanner-5.0.4.tar.gz && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/2195/openvas-manager-6.0.6.tar.gz && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/2200/greenbone-security-assistant-6.0.6.tar.gz && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/2209/openvas-cli-1.4.3.tar.gz && \\\n\t\twget -nv http://wald.intevation.org/frs/download.php/1975/openvas-smb-1.0.1.tar.gz && \\\n\t\ttar zxvf openvas-libraries-8.0.5.tar.gz && \\\n\t\ttar zxvf openvas-scanner-5.0.4.tar.gz && \\\n\t\ttar zxvf openvas-manager-6.0.6.tar.gz && \\\n\t\ttar zxvf greenbone-security-assistant-6.0.6.tar.gz && \\\n\t\ttar zxvf openvas-cli-1.4.3.tar.gz && \\\n\t\ttar zxvf openvas-smb-1.0.1.tar.gz && \\\n    cd /openvas-src/openvas-smb-1.0.1 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\n    cd /openvas-src/openvas-libraries-8.0.5 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\t\t\n\tcd /openvas-src/openvas-scanner-5.0.4 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\t\n\tcd /openvas-src/openvas-manager-6.0.6 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\t\t\t\n\tcd /openvas-src/greenbone-security-assistant-6.0.6 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\t\t\t\t\n\tcd /openvas-src/openvas-cli-1.4.3 && \\\n        mkdir build && \\\n        cd build && \\\n        cmake .. && \\\n        make -j $(nproc)&& \\\n        make install && \\\n\t\tmake rebuild_cache && \\\t\t\n    rm -rf /openvas-src && \\\nmkdir /redis && \\\n\tcd /redis && \\\n\twget http://download.redis.io/releases/redis-2.8.19.tar.gz  && \\\n\t\ttar zxvf redis-2.8.19.tar.gz && \\\n\t\tcd redis-2.8.19 && \\\n\t\tmake -j $(nproc)&& \\\n\t\tmake install && \\\n\t\trm -fr /redis && \\\napt-get remove heimdal-dev -y && \\\napt-get install curl \\\n\t\tlibcurl4-gnutls-dev \\\n\t\tlibkrb5-dev -y && \\\nmkdir /dirb && \\\n    cd /dirb && \\\n    wget -nv http://downloads.sourceforge.net/project/dirb/dirb/2.22/dirb222.tar.gz && \\\n        tar -zxvf dirb222.tar.gz && \\\n        cd dirb222 && \\\n        chmod 700 -R * && \\\n        ./configure && \\\n        make -j $(nproc)&& \\\n        make install && \\\ncd /tmp && \\\n    wget -nv http://github.com/Arachni/arachni/releases/download/v1.3.2/arachni-1.3.2-0.5.9-linux-x86_64.tar.gz && \\\n        tar -zxvf arachni-1.3.2-0.5.9-linux-x86_64.tar.gz && \\\n\t\trm -f arachni-1.3.2-0.5.9-linux-x86_64.tar.gz && \\\n        mv arachni-1.3.2-0.5.9 /opt/arachni && \\\n        ln -s /opt/arachni/bin/* /usr/local/bin/ && \\\ncd ~ && \\\n    wget -nv https://github.com/sullo/nikto/archive/master.zip && \\\n    unzip master.zip -d /tmp && \\\n    mv /tmp/nikto-master/program /opt/nikto && \\\n    rm -rf /tmp/nikto-master && \\\n\trm -f ~/master.zip && \\\n    echo \"EXECDIR=/opt/nikto\\nPLUGINDIR=/opt/nikto/plugins\\nDBDIR=/opt/nikto/databases\\nTEMPLATEDIR=/opt/nikto/templates\\nDOCDIR=/opt/nikto/docs\" >> /opt/nikto/nikto.conf && \\\n    ln -s /opt/nikto/nikto.pl /usr/local/bin/nikto.pl && \\\n    ln -s /opt/nikto/nikto.conf /etc/nikto.conf && \\\ncd /tmp && wget -nv https://nmap.org/dist/nmap-5.51-1.x86_64.rpm && \\\n\talien -i nmap-5.51-1.x86_64.rpm && \\\n\trm -f nmap-5.51-1.x86_64.rpm && \\\ncd /tmp && \\\n\tpip install --upgrade pip && \\\n\twget -nv -O wapiti-2.3.0.tar.gz \"http://downloads.sourceforge.net/project/wapiti/wapiti/wapiti-2.3.0/wapiti-2.3.0.tar.gz?r=http://sourceforge.net/projects/wapiti/files/wapiti/wapiti-2.3.0/&amp;ts=1391931386&amp;use_mirror=heanet\" && \\\n\ttar zxvf wapiti-2.3.0.tar.gz && \\\n\tcd wapiti-2.3.0 && \\\n\tpython setup.py install\t&& \\\n\tln -s /usr/local/bin/wapiti /usr/bin/wapiti && \\\n\trm -f /tmp/wapiti-2.3.0.tar.gz && \\\napt-get clean -yq && \\\n    apt-get autoremove -yq && \\\n    apt-get purge -y --auto-remove build-essential cmake && \\\ncd / && \\\nwget -nv https://svn.wald.intevation.org/svn/openvas/trunk/tools/openvas-check-setup --no-check-certificate\n\t\nADD ./redis.conf /etc/redis.conf\nADD ./open-vas-8-start.sh /open-vas-8-start.sh\nADD ./setup.sh /setup.sh\nRUN chmod 700 /open-vas-8-start.sh && \\\n\tchmod 700 /openvas-check-setup && \\\n\tchmod 700 /setup.sh && \\\n\t/setup.sh\n#OpenVAS 443 9390 9391 Arachni Web 9292\nEXPOSE 443 9390 9391 9292\nCMD [\"./open-vas-8-start.sh\"]\n"
    },
    {
        "filename": "e88fb43160e54fe652b16bbd401187c86692a84c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM ngraph_test_base\n\nRUN apt-get install -y bzip2 wget coreutils libjasper1 libjpeg8 libpng12-0\n\n# Get and build Open MPI\nRUN wget -q https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.3.tar.gz && \\\n    tar -xzvf ./openmpi-1.10.3.tar.gz && \\\n    cd openmpi-1.10.3 && \\\n    ./configure --prefix=/usr/local/mpi && \\\n    make -j all && \\\n    make install && cd .. && \\\n    rm -rf openmpi-1.10.3 openmpi-1.10.3.tar.gz\n\n# Add Open MPI to path\nENV PATH \"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH \"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nENV MPI_ROOT \"/usr/local/mpi\"\n\n# Get and install CNTK Binary Distribution\nENV CNTK_WHEEL_2_7 https://cntk.ai/PythonWheel/CPU-Only/cntk-2.2-cp27-cp27mu-linux_x86_64.whl\nENV CNTK_WHEEL_3_4 https://cntk.ai/PythonWheel/CPU-Only/cntk-2.2-cp34-cp34m-linux_x86_64.whl\nENV CNTK_WHEEL_3_5 https://cntk.ai/PythonWheel/CPU-Only/cntk-2.2-cp35-cp35m-linux_x86_64.whl\nRUN if [ \"$(python -c 'import sys; print(sys.version_info[0])')\" = \"2\" ]; then \\\n    pip install --trusted-host cntk.ai $CNTK_WHEEL_2_7; \\\n    else \\\n      if [ \"$(python -c 'import sys; print(sys.version_info[1])')\" = \"4\" ]; then \\\n      pip install $CNTK_WHEEL_3_4; fi;\\\n      if [ \"$(python -c 'import sys; print(sys.version_info[1])')\" = \"5\" ]; then \\\n      pip install $CNTK_WHEEL_3_5; fi; \\\n    fi\n\n# necessary for tests/test_walkthrough.py which requires that ngraph is\n# importable from an entrypoint not local to ngraph.\nADD . /root/ngraph-test\nRUN pip install -e .\n"
    },
    {
        "filename": "e900dfc3954abd1f21a247c5454481ff115910bd.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Interactive Brokers TWS & ib-controller\n# \n# docker container with VNC Xserver\n#\n# Adapted from a subset of:\n#       https://github.com/QuantConnect/Lean/blob/master/DockerfileLeanFoundation\n#\tLEAN Foundation Docker Container March-2017\n#\tCross platform deployment for multiple brokerages\t\n#\tIntended to be used in conjunction with DockerfileLeanAlgorithm. This is just the foundation common OS+Dependencies required.\n\n# Use base system for cleaning up wayward processes\nFROM phusion/baseimage:0.9.19\n\nMAINTAINER mkrueger@rstms.net\n\nEXPOSE 22\nEXPOSE 50070\nEXPOSE 50090\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n# Install OS Packages:\n# Misc tools for running Python.NET and IB inside a headless container.\nRUN \\\n  apt-get update\n\nRUN \\\n  apt-get install -y wget net-tools netcat unzip curl openssh-server git daemontools ucspi-tcp sudo\n\nRUN \\\n  apt-get install -y python-pip\n\nRUN \\\n  pip install --upgrade pip\n\nRUN \\\n  pip install virtualenv twisted redis\n\nRUN \\\necho 'America/New_York' >/etc/timezone && \\\nrm /etc/localtime && \\\ndpkg-reconfigure -f noninteractive tzdata\n\n# add user account and configure\nRUN useradd -m txtrader -Gsudo\nRUN sed -e \"s|^%sudo.*$|%sudo ALL=(ALL:ALL) NOPASSWD:ALL|\" -i /etc/sudoers\nRUN rm /etc/service/sshd/down\nCOPY keys/public_key /tmp/public_key\nRUN cat /tmp/public_key >> /root/.ssh/authorized_keys && rm -f /tmp/public_key\n\nRUN \\\n  su -l txtrader -c ' \\\n  curl --location https://github.com/rstms/IbPy/tarball/master | tar zxfv - && \\\n  mv rstms-IbPy-* IbPy && \\\n  cd IbPy && \\\n  python setup.py sdist \\\n  '\n\nRUN mkdir /var/svc.d\n\nRUN \\\n  su -l txtrader -c ' \\\n  curl --location https://github.com/rstms/txTrader/tarball/master | tar zxfv - && \\\n  mv rstms-txTrader-* txTrader && \\\n  cd txTrader && \\\n  echo ibgw >etc/txtrader/TXTRADER_API_HOST && \\\n  echo 4001 >etc/txtrader/TXTRADER_API_PORT && \\\n  sudo make config && \\\n  make build && \\\n  sudo make -e install && \\\n  sudo make start \\\n  '\n\nCOPY keys/github-rsstools-deploy /root/.ssh/github-rsstools-deploy\nRUN \\\n  echo \"Host rsstools\" >/root/.ssh/config && \\\n  echo \"Hostname github.com\" >>/root/.ssh/config && \\\n  echo \"IdentityFile /root/.ssh/github-rsstools-deploy\" >>/root/.ssh/config\n\nRUN \\\n  ln -s /etc/service /service && \\\n  ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts && \\\n  git clone git@rsstools:rstms/rsstools.git && \\\n  cd rsstools && \\\n  pip install . && \\\n  rm -rf /var/svc.d/rssapipub && \\\n  cp -rp service/rssapipub /var/svc.d && \\\n  chown -R root.root /var/svc.d/rssapipub && \\\n  chown root.txtrader /var/svc.d/rssapipub && \\\n  ip route | awk '/^default/{print $3}' >/var/svc.d/rssapipub/env/RSS_REDIS_HOST && \\\n  cp /etc/txtrader/TXTRADER_USERNAME /var/svc.d/rssapipub/env/RSS_XMLRPC_USERNAME && \\\n  cp /etc/txtrader/TXTRADER_PASSWORD /var/svc.d/rssapipub/env/RSS_XMLRPC_PASSWORD && \\\n  mkdir /var/log/rssapipub && \\\n  update-service --add /var/svc.d/rssapipub\n\n"
    },
    {
        "filename": "ea4d5fc231b57554c06feed0c75a6cd8ca7796d5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Build your own pdflatex as a service\n#\n# VERSION  0.0.0\nfrom       ubuntu\nmaintainer Nuno Job \"nunojobpinto@gmail.com\"\n\n#\n# update apr\n#\nrun echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\n\nrun apt-get upgrade\nrun apt-get update\n\n#\n# install latex\n#\nrun apt-get install -y texlive-latex-base texlive-latex-extra curl\n\n#\n# install nodejs 0.10.15\n#\nrun cd /usr/local && curl http://nodejs.org/dist/v0.10.15/node-v0.10.15-linux-x64.tar.gz | tar --strip-components=1 -zxf- && cd\nrun npm -g update npm\nrun npm install -g forever\n\n#\n# install app files\n#\nrun mkdir -p /opt/install/pdflatex\nadd ./index.js /opt/install/pdflatex/index.js\nadd ./package.json /opt/install/pdflatex/package.json\nrun cd /opt/install/pdflatex && npm install\n\nexpose 5050\n\ncmd forever /opt/install/pdflatex/index.js\n"
    },
    {
        "filename": "f6edb9ada159763ee47b61ccd890180b7556af47.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM bbytes/java7  \n  \nMAINTAINER bbytes \"info@beyondbytes.co.in\"  \nRUN mkdir -p /opt/bbytes  \nADD orientdb-1.6.4.0.zip /opt/bbytes/orientdb-1.6.4.0.zip  \nRUN apt-get install unzip  \nRUN cd /opt/bbytes ; unzip orientdb-1.6.4.0.zip  \nRUN cd /opt/bbytes/orientdb-1.6.4.0/bin; chmod 744 -R .  \nEXPOSE 2480  \nEXPOSE 2424  \nCMD cd /opt/bbytes/orientdb-1.6.4.0/bin; ./server.sh\n\n"
    },
    {
        "filename": "f778e853ab464328d0b5b0e863554614b3c391b6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER Tom <tmbdev@gmail.com>\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get -qq update\nRUN apt-get -qq dist-upgrade\nRUN apt-get -qqy install build-essential g++ gdb swig2.0 mercurial scons\nRUN apt-get -qqy install curl python-scipy python-matplotlib python-tables firefox imagemagick python-opencv python-bs4 git\nRUN apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\n\nRUN git clone https://github.com/tmbdev/ocropy.git\nRUN (cd ocropy/models && curl -O http://www.tmbdev.net/en-default.pyrnn.gz)\nRUN (cd ocropy && sudo python setup.py install)\nADD ocrotrain.sh ocropy/ocrotrain.sh\nVOLUME /work\nWORKDIR /work\n"
    },
    {
        "filename": "fa43342acfd4c4d7f00e3f3990d1fe6f954a85fa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# zhihu_spider\n# version 0.0.1\n\nFROM centos\n\nMAINTAINER \"ruoyu.liu\" <lrysjtu@gmail.com>\n\n# install Chinese support\n# RUN yum -y groupinstall chinese-support\n# ENV LANG \"zh_CN.UTF-8\"\n\n# install something common\nRUN yum install -y gcc gcc-c++ git make python-devel postgresql-devel wget vim libffi-devel libxml2-devel libxslt-devel openssl-devel && yum clean all\n\n# update libs\nRUN yum -y swap -- remove systemd-container systemd-container-libs -- install systemd systemd-libs\nRUN yum -y update; yum clean all; \\\n(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\nrm -f /lib/systemd/system/multi-user.target.wants/*;\\\nrm -f /etc/systemd/system/*.wants/*;\\\nrm -f /lib/systemd/system/local-fs.target.wants/*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\nrm -f /lib/systemd/system/basic.target.wants/*;\\\nrm -f /lib/systemd/system/anaconda.target.wants/*;\n\n# install pip\nRUN wget https://bootstrap.pypa.io/get-pip.py;python get-pip.py;rm -f get-pip.py\n\n# install mongodb\nRUN rpm --import https://www.mongodb.org/static/pgp/server-3.2.asc\nADD mongodb-enterprise.repo /etc/yum.repos.d/mongodb-enterprise.repo \nRUN yum install -y mongodb-enterprise\n# you need map a directory to /data/db to start mongod\n\n# install rabbitmq\n# its too slow to download while building\n#RUN wget http://www.rabbitmq.com/releases/erlang/erlang-18.1-1.el7.centos.x86_64.rpm\n#RUN wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.noarch.rpm\nADD erlang-18.1-1.el7.centos.x86_64.rpm /tmp/erlang-18.1-1.el7.centos.x86_64.rpm\nADD rabbitmq-server-3.6.1-1.noarch.rpm /tmp/rabbitmq-server-3.6.1-1.noarch.rpm\nRUN rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc\nRUN cd /tmp && yum install -y erlang-18.1-1.el7.centos.x86_64.rpm && yum install -y rabbitmq-server-3.6.1-1.noarch.rpm\n#RUM rm -f erlang-18.1-1.el7.centos.x86_64.rpm\n#RUM rm -f rabbitmq-server-3.6.1-1.noarch.rpm\n\n# install zhihu_spider requirements\nRUN pip install wheel Scrapy pymongo requests celery -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n\nEXPOSE 27017 15672\n\nENV container docker\n\n# for celery worker run as root user\nENV C_FORCE_ROOT true\n\nVOLUME [ \"/sys/fs/cgroup\" ]\n\nCMD [\"/usr/sbin/init\"]\n"
    },
    {
        "filename": "fb3c98a03e7cc5607fd2ba595094dbaa44561d23.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:15.04\nMAINTAINER datawarehouse <aus-eng-data-warehouse@rmn.com>\n\nRUN apt-get update\nRUN apt-get install -y python-dev python-pip libpq-dev vim curl mlocate\n\nRUN apt-get install -y wget\n\nRUN mkdir -p /home/root\nRUN cd /home/root\nRUN wget https://bootstrap.pypa.io/get-pip.py\nRUN python get-pip.py\nRUN /usr/local/bin/pip install awscli\n\nRUN apt-get install -y libmagic-dev \\\n    libxml2-dev \\\n    libxmlsec1-dev \\\n    swig \\\n    libxslt1-dev\n\nADD /src/python/requirements.txt /src/python/requirements.txt\n\nRUN pip install -r /src/python/requirements.txt\n\n# see https://github.com/onelogin/python-saml/issues/30 \\\nRUN if [ -f /usr/bin/xmlsec1-config ]; then sed -i 's/LIBLTDL=1 -I/LIBLTDL=1 -DXMLSEC_NO_SIZE_T -I/' /usr/bin/xmlsec1-config  ; fi\nRUN pip uninstall -y dm.xmlsec.binding\nRUN pip install dm.xmlsec.binding\n\nADD src/python /src/python\n\nWORKDIR /src/python/dart/engine/dynamodb\n\nENV PYTHONPATH=/src/python:${PYTHONPATH}\n\nCMD [\"python\", \"dynamodb.py\"]\n"
    },
    {
        "filename": "fd01e368fb52668e82449c78cabe0067cd9b64c1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM gw000/keras\nMAINTAINER Brian Broll <brian.broll@gmail.com>\n\n# Install the python dependencies\nRUN pip install dill pillow matplotlib simplejson\n\n# install nodejs v8\nRUN apt-get update -yq \\\n    && apt-get install curl gnupg -yq \\\n    && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n    && apt-get install nodejs -yq\n\n# install deepforge\nRUN echo '{\"allow_root\": true}' > /root/.bowerrc && mkdir -p /root/.config/configstore/ && \\\n    echo '{}' > /root/.config/configstore/bower-github.json\n\nRUN mkdir /deepforge\nADD . /deepforge\nWORKDIR /deepforge\n\nRUN npm install --production\n\nRUN ln -s /deepforge/bin/deepforge /usr/local/bin\n\n# configure the worker\nRUN apt-get install -y unzip\nRUN deepforge config blob.dir /data/blob && \\\n    deepforge config mongo.dir /data/db && \\\n    deepforge config worker.cache.useBlob false && \\\n    deepforge config worker.cache.dir /deepforge/worker-cache && \\\n    git config --global user.email \"deepforge-worker@deepforge.org\" && \\\n    git config --global user.name \"deepforge-worker\"\n\nENTRYPOINT [\"deepforge\", \"start\", \"--worker\"]\nCMD [\"http://172.17.0.1:8888\"]\n"
    },
    {
        "filename": "fffb202f125b1dae5b5ec5d617b4069c0722da77.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# keras builds on theano\nFROM kaixhin/cuda-theano\nMAINTAINER Kyle F <kylef@lab41.org>\n\n\n# install base packages\nRUN apt-get update\nRUN apt-get install --assume-yes  python-dev libhdf5-dev libpng12-dev libfreetype6-dev libpng++-dev libfreetype6 libfreetype6-dev libpng12-dev pkg-config\n\n\n# install python modules\nRUN pip install numpy \\\n                scipy \\\n                cython \\\n                h5py \\\n                pyyaml \\\n                six==1.9.0 \\\n                pandas \\\n                passage \\\n                simplejson \\\n                matplotlib\n\n\n# Adding ipython\nRUN pip install ipython \\\n                pyzmq \\\n                jinja2 \\\n                tornado \\\n                jsonschema\n\n\n# install CUDA\nRUN cd /tmp && \\\n    wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run && \\\n    chmod +x cuda_*_linux.run && \\\n    ./cuda_*_linux.run -extract=`pwd` && \\\n    ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module && \\\n    ./cuda-linux64-rel-*.run -noprompt && \\\n    rm -rf *\n\n\n# Add CUDA to path\nENV PATH=/usr/local/cuda/bin:$PATH \\\n    LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n\n# install keras\nRUN cd /tmp && \\\n    git clone https://github.com/fchollet/keras.git && \\\n    cd keras && \\\n    python setup.py install && \\\n    rm -rf /tmp/keras\n\n\n# setup data volume\nVOLUME [\"/data\"]\nWORKDIR /data\n\n\n# default to shell\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "ef01b100c5186132e368c134183fe1bbc201b741.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER rcarmo\n# Copy our DigitalOcean sources.list across\nADD etc/apt/sources.list /etc/apt/sources.list\n# Ugrade to a clean slate\nRUN apt-get update; apt-get upgrade -y; apt-get clean\n# X11 and web fonts\nRUN echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections; apt-get install -y fonts-droid fonts-roboto fonts-liberation ttf-mscorefonts-installer; apt-get clean\n# Infinality\nRUN apt-get install -y software-properties-common; add-apt-repository ppa:no1wantdthisname/ppa; apt-get update; apt-get install -y fontconfig-infinality; cd /etc/fonts/infinality; bash ./infctl.sh setstyle osx; apt-get clean\n# Add our build script and run it\nADD bin/build-phantomjs.sh /root/build-phantomjs.sh \nRUN /bin/bash /root/build-phantomjs.sh; rm /root/build-phantomjs.sh\n"
    },
    {
        "filename": "f094552737c9df921dd53615e1ff85110b10f570.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# start from a base ubuntu image\nFROM ubuntu\nMAINTAINER Cass Johnston <cassjohnston@gmail.com>\n\n# set users cfg file\nARG USERS_CFG=users.json\n\n# Install pre-reqs\nRUN apt-get update\nRUN apt-get install -y curl vim sudo wget rsync\nRUN apt-get install -y apache2\nRUN apt-get install -y python\nRUN apt-get install -y supervisor\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Fetch  brat\nRUN mkdir /var/www/brat\nRUN curl http://weaver.nlplab.org/~brat/releases/brat-v1.3_Crunchy_Frog.tar.gz > /var/www/brat/brat-v1.3_Crunchy_Frog.tar.gz \nRUN cd /var/www/brat && tar -xvzf brat-v1.3_Crunchy_Frog.tar.gz\n\n# create a symlink so users can mount their data volume at /bratdata rather than the full path\nRUN mkdir /bratdata && mkdir /bratcfg\nRUN chown -R www-data:www-data /bratdata /bratcfg \nRUN chmod o-rwx /bratdata /bratcfg\nRUN ln -s /bratdata /var/www/brat/brat-v1.3_Crunchy_Frog/data\nRUN ln -s /bratcfg /var/www/brat/brat-v1.3_Crunchy_Frog/cfg \n\n# And make that location a volume\nVOLUME /bratdata\nVOLUME /bratcfg\n\nADD brat_install_wrapper.sh /usr/bin/brat_install_wrapper.sh\nRUN chmod +x /usr/bin/brat_install_wrapper.sh\n\n# Make sure apache can access it\nRUN chown -R www-data:www-data /var/www/brat/brat-v1.3_Crunchy_Frog/\n\nADD 000-default.conf /etc/apache2/sites-available/000-default.conf\n\n# add the user patching script\nADD user_patch.py /var/www/brat/brat-v1.3_Crunchy_Frog/user_patch.py\n\n# Enable cgi\nRUN a2enmod cgi\n\nEXPOSE 80\n\n# We can't use apachectl as an entrypoint because it starts apache and then exits, taking your container with it. \n# Instead, use supervisor to monitor the apache process\nRUN mkdir -p /var/log/supervisor\n\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf \n\nCMD [\"/usr/bin/supervisord\"]\n\n\n\n\n\n"
    },
    {
        "filename": "f1c62118d8bfadd49a98124842cc9cda43a1f699.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Leaner build then Ubunutu\nFROM ubuntu:14.04.2\n\nMAINTAINER Wojciech Sielski \"wsielski@team.mobile.de\"\n\nENV DEBIAN_FRONTEND noninteractive\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV TERM xterm\nENV HOME /root\n\nRUN apt-get update \\\n    && apt-get install -y \\\n      python-pip \\\n      wget \\\n      curl \\\n      unzip \\\n      dnsutils \\\n      vim \n\nRUN pip install supervisor-stdout\nRUN pip install https://github.com/Supervisor/supervisor/archive/3.2-branch.zip\n\nRUN apt-get update && \\\n    apt-get -y build-dep pam && \\\n    apt-get install -y \\\n      openvpn \\\n      iptables \\\n      nslcd \\\n      nscd\n\n# Temporal fix for PAM in container\nRUN export CONFIGURE_OPTS=--disable-audit && \\\n    cd /root && \\\n    apt-get -b source pam && \\\n    dpkg -i libpam-doc*.deb libpam-modules*.deb libpam-runtime*.deb libpam0g*.deb\n\nVOLUME [\"/etc/openvpn\"]\n\nWORKDIR /etc/openvpn\n\nADD supervisord.conf /etc/supervisord.conf\n\nEXPOSE 1194 1194/udp\n\nENTRYPOINT [ \"supervisord\" ]\n"
    },
    {
        "filename": "f25411b2897c8d4cf77e21b0faee07d148c7a9b3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM gcr.io/kaggle-images/rcran\nARG ncpus=1\n\nADD clean-layer.sh  /tmp/clean-layer.sh\n\nRUN apt-get update && \\\n    apt-get install apt-transport-https && \\\n    /tmp/clean-layer.sh\n\n# libv8-dev is needed for package DiagrammR, which xgboost needs\nRUN apt-get update && \\\n    (echo N; echo N) | apt-get install -y -f r-cran-rgtk2 && \\\n    apt-get install -y -f libv8-dev libgeos-dev libgdal-dev libproj-dev libsndfile1-dev \\\n    libtiff5-dev fftw3 fftw3-dev libfftw3-dev libjpeg-dev libhdf4-0-alt libhdf4-alt-dev \\\n    libhdf5-dev libx11-dev cmake libglu1-mesa-dev libgtk2.0-dev librsvg2-dev libxt-dev \\\n    patch && \\\n    # data.table added here because rcran missed it, and xgboost needs it\n    # `ncpus` matches the number of CPU offered by the biggest machine available on GCB.\n    install2.r --error --ncpus $ncpus --repo http://cran.rstudio.com \\\n    DiagrammeR mefa gridSVG lattice rgeos rgdal Matrix rARPACK foreign prevR nnet rpart \\\n    class imager Amelia \\\n    # Packages necessary for /tmp/package_installs.R\n    MASS mgcv survival KernSmooth && \\\n    # Rattle installation currently broken by missing \"cairoDevice\" error\n    # rattle \\\n    # XGBoost gets special treatment because the nightlies are hard to build with devtools.\n    cd /usr/local/src && git clone --recursive https://github.com/dmlc/xgboost && \\\n    cd xgboost && make -j $ncpus Rbuild && R CMD INSTALL xgboost_*.tar.gz && \\\n    # Prereq for installing udunits2 package; see https://github.com/edzer/units\n    cd /usr/local/src && wget ftp://ftp.unidata.ucar.edu/pub/udunits/udunits-2.2.24.tar.gz && \\\n    tar zxf udunits-2.2.24.tar.gz && cd udunits-2.2.24 && ./configure && make && make install && \\\n    ldconfig && echo 'export UDUNITS2_XML_PATH=\"/usr/local/share/udunits/udunits2.xml\"' >> ~/.bashrc && \\\n    export UDUNITS2_XML_PATH=\"/usr/local/share/udunits/udunits2.xml\"\n\nRUN apt-get update && apt-get install -y libatlas-base-dev libopenblas-dev libopencv-dev && \\\n    cd /usr/local/src && git clone --recursive --depth=1 --branch v1.4.x https://github.com/apache/incubator-mxnet.git mxnet && \\\n    cd mxnet && make -j $ncpus USE_OPENCV=1 USE_BLAS=openblas && make rpkg && \\\n    # Needed for \"h5\" library\n    apt-get install -y libhdf5-dev\n\nRUN apt-get install -y libzmq3-dev python-pip default-jdk && \\\n    apt-get install -y python-dev libcurl4-openssl-dev && \\\n    pip install jupyter pycurl && \\\n    # to avoid breaking UI change, pin the jupyter notebook package\n    # the latest version also has a regression on the NotebookApp.ip option\n    # see: https://www.google.com/url?q=https://github.com/jupyter/notebook/issues/3946&sa=D&usg=AFQjCNFieP7srXVWqX8PDetXGfhyxRmO4Q\n    pip install notebook==5.5.0 && \\\n    R -e 'IRkernel::installspec()' && \\\n    # Build pyzmq from source instead of using a pre-built binary.\n    yes | pip uninstall pyzmq && \\\n    pip install pyzmq --no-binary pyzmq && \\\n    cp -r /root/.local/share/jupyter/kernels/ir /usr/local/share/jupyter/kernels && \\\n    # Make sure Jupyter won't try to \"migrate\" its junk in a read-only container\n    mkdir -p /root/.jupyter/kernels && \\\n    cp -r /root/.local/share/jupyter/kernels/ir /root/.jupyter/kernels && \\\n    touch /root/.jupyter/jupyter_nbconvert_config.py && touch /root/.jupyter/migrated\n\n# Tensorflow and Keras\n# Keras sets up a virtualenv and installs tensorflow\n# in the WORKON_HOME directory, so choose an explicit location for it.\nENV WORKON_HOME=/usr/local/share/.virtualenvs\nRUN pip install --user virtualenv && R -e 'keras::install_keras()'\n\n# Install kaggle libraries.\n# Do this at the end to avoid rebuilding everything when any change is made.\nADD kaggle/ /kaggle/\n# RProfile sources files from /kaggle/ so ensure this runs after ADDing it.\nENV R_HOME=/usr/local/lib/R\nADD RProfile.R /usr/local/lib/R/etc/Rprofile.site\nADD install_iR.R  /tmp/install_iR.R\nADD bioconductor_installs.R /tmp/bioconductor_installs.R\nADD package_installs.R /tmp/package_installs.R\nADD nbconvert-extensions.tpl /opt/kaggle/nbconvert-extensions.tpl\nRUN Rscript /tmp/package_installs.R\nRUN Rscript /tmp/bioconductor_installs.R\nRUN Rscript /tmp/install_iR.R\n\n# Py3 handles a read-only environment fine, but Py2.7 needs\n# help https://docs.python.org/2/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE\nENV PYTHONDONTWRITEBYTECODE=1\n# keras::install_keras puts the new libraries inside a virtualenv called r-tensorflow. Importing the\n# library triggers a reinstall/rebuild unless the reticulate library gets a strong hint about\n# where to find it.\n# https://rstudio.github.io/reticulate/articles/versions.html\nENV RETICULATE_PYTHON=\"/usr/local/share/.virtualenvs/r-tensorflow/bin/python\"\n\nCMD [\"R\"]\n"
    },
    {
        "filename": "f2ac38e659cb6685c94d184574d4bf53749c9cf4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Newer python base images may break gevent.\n# See https://github.com/docker-library/python/issues/29#issuecomment-70727289\nFROM python:2.7.7\nMAINTAINER thanos@tellapart.com\n\n\n######\n# System prerequisite installation\n######\n\n# Update apt repository\nRUN apt-get update\n\n# Install python prerequisites\nRUN apt-get install -y python-pip python-dev build-essential\n\n# Install libpcap\nRUN apt-get install -y libpcap-dev\n\n# Install go\nRUN echo 'e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a go1.6.2.linux-amd64.tar.gz' >go.sha256sum \\\n && curl -s -L -o go1.6.2.linux-amd64.tar.gz https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz \\\n && sha256sum -c go.sha256sum \\\n && tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n\n# Install gor\nENV PATH=$PATH:/usr/local/go/bin\nENV GOPATH=/opt/go\nRUN mkdir -p $GOPATH \\\n && go get github.com/buger/gor \\\n && cd $GOPATH/src/github.com/buger/gor \\\n && go build\n\n# Aurora/Mesos requirements (see AURORA-1487)\nRUN apt-get update \\\n && apt-get install -y libcurl4-nss-dev libapr1-dev libsvn-dev\n\n# Install nginx\nENV NGX_REQS openssl libssl1.0.0 libxml2 libxslt1.1 libgeoip1 libpcre3 zlib1g\nRUN apt-get update \\\n && apt-get install -y $NGX_REQS \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nENV NGX_DEV_KIT_VER 0.2.19\nENV NGX_VER 1.9.0\nENV NGX_MD5 487c26cf0470d8869c41a73621847268\nENV NGX_STATSD_VER b756a12abf110b9e36399ab7ede346d4bb86d691\nENV NGX_HEADERS_MORE_VER 0.26\nENV NGX_ECHO_VER 0.57\nENV DEV_PKGS build-essential curl libpcre3-dev zlib1g-dev libssl-dev libxml2-dev libgeoip-dev\n\nRUN apt-get update \\\n && apt-get install -y $DEV_PKGS \\\n && mkdir -p /tmp/build && cd /tmp/build \\\n && curl -s -L -o ngx_devel.tar.gz \\\n      https://github.com/simpl/ngx_devel_kit/archive/v$NGX_DEV_KIT_VER.tar.gz \\\n && curl -s -L -o ngx.tar.gz \\\n      http://nginx.org/download/nginx-$NGX_VER.tar.gz \\\n && curl -s -L -o ngx_statsd.tar.gz \\\n      https://github.com/zebrafishlabs/nginx-statsd/archive/$NGX_STATSD_VER.tar.gz \\\n && curl -s -L -o ngx_headers_more.tar.gz \\\n      https://github.com/openresty/headers-more-nginx-module/archive/v$NGX_HEADERS_MORE_VER.tar.gz \\\n && curl -s -L -o ngx_echo.tar.gz \\\n      https://github.com/openresty/echo-nginx-module/archive/v$NGX_ECHO_VER.tar.gz \\\n && echo \"$NGX_MD5 ngx.tar.gz\" | md5sum -c - || (echo \"MD5 for ngx.tar.gz didn't match expected!\" && exit 1) \\\n && tar -xvf ngx_devel.tar.gz \\\n && tar -xvf ngx.tar.gz \\\n && tar -xvf ngx_statsd.tar.gz \\\n && tar -xvf ngx_headers_more.tar.gz \\\n && tar -xvf ngx_echo.tar.gz \\\n && cd /tmp/build/nginx-$NGX_VER \\\n && ./configure --prefix=/usr \\\n                --conf-path=/etc/nginx/nginx.conf \\\n                --error-log-path=/var/log/nginx/error.log \\\n                --http-client-body-temp-path=/var/lib/nginx/body \\\n                --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \\\n                --http-log-path=/var/log/nginx/access.log \\\n                --http-proxy-temp-path=/var/lib/nginx/proxy \\\n                --http-scgi-temp-path=/var/lib/nginx/scgi \\\n                --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \\\n                --lock-path=/var/lock/nginx.lock \\\n                --pid-path=/var/run/nginx.pid \\\n                --with-debug \\\n                --with-http_addition_module \\\n                --with-http_dav_module \\\n                --with-http_geoip_module \\\n                --with-http_gzip_static_module \\\n                --with-http_realip_module \\\n                --with-http_stub_status_module \\\n                --with-http_ssl_module \\\n                --with-http_sub_module \\\n                --with-stream \\\n                --with-ipv6 \\\n                --with-sha1=/usr/include/openssl \\\n                --with-md5=/usr/include/openssl \\\n                --add-module=/tmp/build/nginx-statsd-$NGX_STATSD_VER/ \\\n                --add-module=/tmp/build/headers-more-nginx-module-$NGX_HEADERS_MORE_VER \\\n                --add-module=/tmp/build/echo-nginx-module-$NGX_ECHO_VER \\\n && make -j4 \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/build \\\n && apt-get purge -y $DEV_PKGS \\\n && apt-get autoremove -y \\\n && apt-get purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /etc/nginx/sites-enabled \\\n && mkdir -p /etc/nginx/sites-available \\\n && mkdir -p /var/lib/nginx\n\n######\n# System prerequisite configuration\n######\n\n# Set up run directory for pids\nRUN mkdir -p /var/run\n\n# Remove default nginx config\nRUN rm /etc/nginx/nginx.conf\n\n# Symlink aurproxy nginx config\nRUN mkdir -p /etc/aurproxy/nginx\nRUN ln -sf /etc/aurproxy/nginx/nginx.conf /etc/nginx\n\n# Create dynamic gor config location\nRUN mkdir -p /etc/aurproxy/gor\n\n######\n# Application prerequisite installation\n######\n\n# Set up application sandbox\n# (Gets mounted by aurora in production)\nRUN mkdir -p /mnt/mesos/sandbox/sandbox\n\n# Set up application directory\nRUN mkdir -p /opt/aurproxy/\n\n# Add application requirements\nADD ./requirements.txt /opt/aurproxy/requirements.txt\n\n#  Install application requirements\nRUN pip install -r /opt/aurproxy/requirements.txt\n\n\n######\n# Application setup\n######\nADD ./tellapart/__init__.py /opt/aurproxy/tellapart/__init__.py\nADD ./tellapart/aurproxy /opt/aurproxy/tellapart/aurproxy\nADD ./templates /opt/aurproxy/tellapart/aurproxy/templates\n\n# Not intended to be run\n# Command will come from aurproxy.aur\nCMD [\"echo done\"]\n"
    },
    {
        "filename": "f321b8eea654b9c061b61b5162a0b16a646b67f9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# The `docker-harbor` infrastructure is crafted to get started on a project  \n# quickly. This base image can be used early in development and parts can be  \n# added or removed later as necessary (or the base image changed entirely).  \n#  \n# - Ubuntu 12.04 base image  \n# - Python 2.7 with  \n# - Flask  \n# - SqlAlchemy  \n# - etc.  \n# - Redis (from source)  \n# - Postgres  \n# - Supervisor  \n# - vim  \n#  \n# Some taken from:  \n# - https://github.com/pitrho/docker-precise-redis/blob/master/Dockerfile  \nFROM ubuntu:12.04  \nMAINTAINER Brandon Thomas \"bt@brand.io\"  \n#  \n# Basic tools  \n# - build tools  \n# - editor  \n# - unix needs  \n#  \nRUN apt-get update  \nRUN apt-get install -y \\  \nwget \\  \ngcc \\  \nmake \\  \ng++ \\  \nbuild-essential \\  \nlibc6-dev \\  \ntcl \\  \npostgresql \\  \npostgresql-server-dev-9.1 \\  \npython-dev \\  \npython-setuptools \\  \ngit-core \\  \nvim  \n  \n#  \n# Redis Compile  \n# - Redis isn't in the Ubuntu 12.04 repos, so build it.  \n#  \nENV REDIS_RELEASE 2.8.3  \nENV REDIS_DIR /var/lib/redis  \nENV REDIS_LOG_DIR /var/log/redis  \nENV REDIS_DATA_DIR /var/lib/redis  \nENV REDIS_PID_DIR /var/run/redis  \n  \nRUN wget http://download.redis.io/releases/redis-$REDIS_RELEASE.tar.gz  \nRUN tar -zxf redis-$REDIS_RELEASE.tar.gz  \nRUN cd redis-$REDIS_RELEASE && /usr/bin/make install  \n  \nRUN mkdir -p $REDIS_DIR  \nRUN mkdir -p $REDIS_LOG_DIR  \nRUN mkdir -p $REDIS_DATA_DIR  \nRUN mkdir -p $REDIS_PID_DIR  \n  \nRUN useradd redis  \n  \nRUN chown redis:redis $REDIS_DIR  \nRUN chown redis:redis $REDIS_LOG_DIR  \nRUN chown redis:redis $REDIS_DATA_DIR  \nRUN chown redis:redis $REDIS_PID_DIR  \n  \n#  \n# Python Tooling  \n#  \nRUN easy_install -U pip setuptools  \n  \n#  \n# Supervisor and Python Packages  \n#  \nRUN pip install \\  \nsupervisor \\  \nflask \\  \nsqlalchemy \\  \nrequests \\  \npsycopg2  \n  \n#  \n# Add configuration files, scripts, etc.  \n#  \nADD config/redis.conf /etc/redis/redis.conf  \nADD config/start_redis.sh /  \n  \nRUN chmod a+x start_redis.sh  \n  \n\n"
    },
    {
        "filename": "0c5c58527074fbfe620bdfe5687610c709381782.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:14.04\nMAINTAINER rcarmo\n# Copy our DigitalOcean sources.list across\nADD etc/apt/sources.list /etc/apt/sources.list\n# Baseline config for a CLI development environment\nRUN apt-get update; apt-get upgrade -y; apt-get install -y man openssh-server htop tmux vim bash-completion rsync build-essential git; apt-get autoremove; apt-get clean\n# A shell user with sudo \nADD home/user /home/user\n# The following injects the Vagrant public key, CHANGE IT if you really need to SSH into the container, otherwise just use docker-enter if you have Docker 1.3+\nRUN useradd -G sudo -s /bin/bash user && mkdir -p /home/user/.ssh && echo 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key' > /home/user/.ssh/authorized_keys && chown -R user:user /home/user && sudo -u user ssh-keygen -q -t rsa -f /home/user/.ssh/id_rsa -N \"\"\nRUN echo 'user:changeme' | chpasswd\n# Make sure we can use SSH if we don't have docker-enter\nRUN mkdir -p /var/run/sshd && chmod 755 /var/run/sshd && start ssh\n# Grab the Arduino SDK\nRUN cd /home/user; wget \"http://arduino.cc/download.php?f=/arduino-1.0.6-linux64.tgz\"; tar -zxvf download*.tgz; rm -f *.tgz\n# Get the bq Marlin firmware tree\nRUN cd /home/user; git clone https://github.com/bq/Marlin.git; cd Marlin; git checkout v1.3.1_hephestos\n# Build a firmware image\nRUN cd /home/user/Marlin/Marlin; ARDUINO_INSTALL_DIR=/home/user/arduino-1.0.6 make\nVOLUME /target\nENV __FLUSH_LOG 1\n# This is only really necessary if you can't use docker-enter (or if you want to do post-provisioning using fabric, etc.)\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n"
    },
    {
        "filename": "0ce8919fcab9dae329b304e3030f9fbec82d05f2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "\nFROM debian:latest\n\nMAINTAINER Contextual Dynamics Lab <contextualdynamics@gmail.com>\n\nRUN apt-get update && apt-get install -y eatmydata\nRUN eatmydata apt-get install -y wget bzip2 ca-certificates \\\n    git \\\n    swig \\\n    mpich \\\n    pkg-config \\\n    gcc \\\n    wget \\\n    curl \\\n    vim \\\n    nano\n\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet https://repo.continuum.io/archive/Anaconda3-5.3.1-Linux-x86_64.sh -O ~/anaconda.sh && \\\n    /bin/bash ~/anaconda.sh -b -p /opt/conda && \\\n    rm ~/anaconda.sh\nENV PATH /opt/conda/bin:$PATH\n\nRUN conda install pystan -y\nRUN pip install --upgrade pip\nRUN pip install hypertools\nRUN conda update numpy scipy pandas scikit-learn seaborn matplotlib\n\n\nRUN pip install pytest \\\nipytest\n\nADD PANDAS /PANDAS\nADD coding /coding\nADD docker /docker\nADD testing /testing\nADD tutorial_template /tutorial_template\nADD STAN /STAN\n# ENV GOOGLE_APPLICATION_CREDENTIALS=/data/credentials.json\n\nEXPOSE 9999"
    },
    {
        "filename": "0d070e9f294657566be6c85eb4e930e8732c374e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jolicode/base\nMAINTAINER Joel Wurtz <jwurtz@jolicode.com>\n\nENV PATH $HOME/.phpenv/bin:$HOME/.phpenv/shims:$PATH\n\n## Install packages to compile php and Force some packages to be installed\nRUN sudo apt-get update && \\\n    sudo apt-get -y build-dep php5-cli && \\\n    sudo apt-get -y install libmcrypt-dev libltdl-dev libreadline-dev libc-client2007e-dev libbz2-dev libkrb5-dev libcurl4-gnutls-dev libfreetype6-dev libgmp3-dev libjpeg8-dev libpng12-dev libt1-dev libmhash-dev libexpat1-dev libicu-dev libtidy-dev re2c lemon libldap2-dev libsasl2-dev && \\\n    sudo apt-get clean && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n## Install PHPEnv\nRUN git clone https://github.com/CHH/phpenv.git /tmp/phpenv && \\\n    /tmp/phpenv/bin/phpenv-install.sh && \\\n    sudo /bin/bash -c \"echo 'eval \\\"\\$(phpenv init -)\\\"' >> /etc/profile.d/phpenv.sh\" && \\\n    echo 'eval \"$(phpenv init -)\"' >> $HOME/.bashrc\n\n## PHPBuild\nRUN git clone git://github.com/CHH/php-build.git $HOME/.phpenv/plugins/php-build && \\\n    cp /tmp/phpenv/extensions/rbenv-config-* $HOME/.phpenv/plugins/php-build/bin/\n\n## Add default configure options\nADD default_configure_options $HOME/.phpenv/plugins/php-build/share/php-build/\n\n# Install php tools (composer / phpunit)\nRUN cd $HOME && \\\n    wget http://getcomposer.org/composer.phar && \\\n    chmod +x composer.phar && \\\n    mv composer.phar /usr/local/bin/composer && \\\n    wget https://phar.phpunit.de/phpunit.phar && \\\n    chmod +x phpunit.phar && \\\n    mv phpunit.phar /usr/local/bin/phpunit\n\n# Link lib\nRUN sudo ln -s /usr/lib/x86_64-linux-gnu/libldap.so              /usr/lib/libldap.so && \\\n    sudo ln -s /usr/lib/x86_64-linux-gnu/libpng.so               /usr/lib/libpng.so && \\\n    sudo ln -s /usr/lib/x86_64-linux-gnu/libkrb5.so              /usr/lib/libkrb5.so && \\\n    sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so              /usr/lib/libjpeg.so && \\\n    sudo ln -s /usr/lib/x86_64-linux-gnu//usr/lib/libstdc++.so.6 /usr/lib/libstdc++.so.6 && \\\n    sudo ln -s /usr/lib/x86_64-linux-gnu/libmysqlclient_r.so     /usr/lib/libmysqlclient_r.so\n"
    },
    {
        "filename": "0d73ef1326db81727076a22bb3bbc0d893d59bcf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM klabs/php71\nMAINTAINER Kaliop\n\nLABEL php.version=7.1 \\\n      application.type=ezpublish\n\nARG DOCKER_TIMEZONE=Europe/Paris\nARG DOCKER_LOCALE=fr_FR.UTF-8\n\n# Configure timezone\n# -----------------------------------------------------------------------------\nRUN echo $DOCKER_TIMEZONE > /etc/timezone; dpkg-reconfigure -f noninteractive tzdata\n\n# Base packages\n# Java (used for eg. eZTika indexing)\n# poppler-utils used for pdftotext binary (note that eztika is a much better option!)\n# Mysql client, useful for db dumps and such\n# -----------------------------------------------------------------------------\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    curl \\\n    wget \\\n    netcat \\\n    git \\\n    pwgen \\\n    locales \\\n    sudo \\\n    cron \\\n    unzip \\\n    vim \\\n    nano \\\n    mysql-client \\\n    imagemagick \\\n    jpegoptim \\\n    poppler-utils \\\n    openjdk-7-jre-headless \\\n    php7.1-mbstring;\n\n# Configure locale for date, time & currency php functions\n# q: for what is the locale setup needed ?\n# -----------------------------------------------------------------------------\nRUN dpkg-reconfigure locales && \\\n    echo $DOCKER_LOCALE' UTF-8'>> /etc/locale.gen && \\\n    locale-gen $DOCKER_LOCALE && \\\n    /usr/sbin/update-locale LANG=$DOCKER_LOCALE\n\nENV LC_ALL $DOCKER_LOCALE\nENV LANG $DOCKER_LOCALE\nENV LANGUAGE $DOCKER_LOCALE\n\n# Local user\n# -----------------------------------------------------------------------------\nADD profile /tmp/profile\n\n# nb: the 1013 used here for user id and group id is later on replaced by the code in bootstrap.sh...\nRUN addgroup --gid 1013 site && \\\n    adduser --system --uid=1013 --gid=1013 \\\n        --home /home/site --shell /bin/bash site && \\\n    adduser site sudo && \\\n    adduser site site && \\\n    sed -i '$ a site   ALL=\\(ALL:ALL\\) NOPASSWD: ALL' /etc/sudoers; \\\n    mkdir -p /home/site/.ssh; \\\n    curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o /home/site/.git-completion.bash; \\\n    curl -o /home/site/.git-prompt.sh -OL https://github.com/git/git/raw/master/contrib/completion/git-prompt.sh; \\\n    cp /etc/skel/.* /home/site/; \\\n    cat /tmp/profile/.bashrc_append >> /home/site/.bashrc; \\\n    cat /tmp/profile/.vimrc_append >> /home/site/.vimrc; \\\n    cp /tmp/profile/.gitconfig /home/site/; \\\n    chown -R site:site /home/site;\n\n# Composer global install\n# -----------------------------------------------------------------------------\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin && \\\n    mv /usr/local/bin/composer.phar /usr/local/bin/composer && \\\n    chmod 755 /usr/local/bin/composer && \\\n    mkdir -p /home/site/.composer && \\\n    chown -R site:site /home/site/.composer\n\n# Nodejs global install (https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions)\n# -----------------------------------------------------------------------------\nRUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nRUN apt-get install -y nodejs\n\n# -----------------------------------------------------------------------------\n\n# Clear archives in apt cache folder\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\n\nCOPY bootstrap.sh /root/bootstrap.sh\nRUN chmod 755 /root/bootstrap.sh\n\nWORKDIR /var/www/\n\nCMD [\"/root/bootstrap.sh\"]\n"
    },
    {
        "filename": "0f1a60fcaad7f0058084750a943b0b1bbbb272fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Specify base image\nFROM ubuntu:16.04\n\n# Specify author \\ maintainer\nMAINTAINER Douglas Duhaime <douglas.duhaime@gmail.com>\n\n##\n# Install Python\n##\n\n# Add repository that contains Python 3.6\nRUN apt-get update\nRUN apt-get install -y software-properties-common\nRUN add-apt-repository ppa:jonathonf/python-3.6\nRUN apt-get update\n\n# Install Python 3.6\nRUN apt-get install -y build-essential \\\n  python3.6 \\\n  python3.6-dev \\\n  python3-pip \\\n  python3.6-venv\n\n# Update pip\nRUN python3.6 -m pip install pip --upgrade\nRUN python3.6 -m pip install wheel\n\n##\n# Install ImageMagick\n##\n\nRUN apt-get install -y imagemagick\n\n##\n# Copy source files\n##\n\nENV APP_PATH=\"pixplot\"\nRUN mkdir \"$APP_PATH\"\nADD . \"$APP_PATH\"\n\n##\n# Install PixPlot dependencies\n##\n\nRUN cd \"$APP_PATH\" && \\\n  python3.6 -m pip install -r \"utils/requirements.txt\"\n\n##\n# Start server on 5000\n##\n\nEXPOSE 5000\n"
    },
    {
        "filename": "10a8313afe3eee69c27cdf89f96a28d22fcbfa36.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM lablup/kernel-base:jail as jail-builder\nFROM lablup/kernel-base:hook as hook-builder\nFROM lablup/kernel-base:python3.6 as python-binary\nFROM lablup/common-tensorflow:1.11-py36 as tf-binary\n\nFROM ubuntu:16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED 1\n\nRUN apt update -y && \\\n    apt install -y \\\n        ca-certificates \\\n        wget \\\n        libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \\\n\tlibmpdec2 \\\n        libssl1.0.0 \\\n\tlibssl-dev \\\n        libncursesw5 libtinfo5 libreadline6 \\\n\tproj-bin \\\n        libgeos-dev \\\n        mime-support \\\n\tgcc g++ \\\n        libproj-dev libgeos-dev \\\t\n        libzmq3-dev libuv1\n\n# Copy the whole Python from the docker library image\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n# Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n# Install TensorFlow build dependencies (ensure we have proper numpy)\n\n# Prepare for building TensorFlow wheel\nRUN pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" && \\\n    pip install --no-cache-dir h5py && \\\n    pip install --no-cache-dir Cython && \\\n    pip install --no-cache-dir matplotlib bokeh && \\\n    pip install --no-cache-dir pyproj && \\\n    pip install --no-cache-dir Cartopy && \\\n    pip install --no-cache-dir wheel /tmp/*.whl && \\\n    pip install --no-cache-dir keras && \\\n    pip install --no-cache-dir ipython && \\\n    pip install --no-cache-dir pandas && \\\n    pip install --no-cache-dir seaborn && \\\n    pip install --no-cache-dir pillow && \\\n    pip install --no-cache-dir networkx cvxpy && \\\n    pip install --no-cache-dir scikit-learn scikit-image && \\\n    pip install --no-cache-dir pygments && \\\n    rm -f /tmp/*.whl\n\nRUN apt-get install -y libseccomp2 gosu && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists /var/cache/apt/archives && \\\n    ln -s /usr/sbin/gosu /usr/sbin/su-exec && \\\n    mkdir /home/work && chmod 755 /home/work; \\\n    mkdir /home/backend.ai && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nCOPY policy.yml /home/backend.ai/policy.yml\n\n# Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD /home/backend.ai/libbaihook.so\n\n# Install kernel-runner scripts package\nRUN pip install --no-cache-dir \"backend.ai-kernel-runner[python]~=1.4.0\"\n\n# Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR /home/backend.ai/.matplotlib\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n    && python /tmp/matplotlib-fontcache.py \\\n    && rm /tmp/matplotlib-fontcache.py\n\n# For utilizing TPU cluster resolver\nRUN pip install --no-cache-dir google-api-python-client && \\\n    pip install --no-cache-dir oauth2client\n\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000 2001 2002 2003\n\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\n\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \\\n     \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n\n# vim: ft=dockerfile\n"
    },
    {
        "filename": "125c299ea7315685503cd85f42201e53a82308bc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# DOCKER-VERSION 1.8.2\nFROM       ubuntu:trusty\nMAINTAINER Julien Dubois <julien.dubois@gmail.com>\n\nENV JAVA_VERSION 8\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\n\nENV MAVEN_VERSION 3.3.9\nENV MAVEN_HOME /usr/share/maven\nENV PATH \"$PATH:$MAVEN_HOME/bin\"\n\n# install utilities\nRUN apt-get -y install vim git sudo zip bzip2 fontconfig curl\n\n# install maven\nRUN curl -fsSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \\\n    && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \\\n    && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\n\n# install java8\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' >> /etc/apt/sources.list && \\\n    echo 'deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' >> /etc/apt/sources.list && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 && \\\n    apt-get update && \\\n    echo oracle-java${JAVA_VERSION}-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections && \\\n    apt-get install -y --force-yes --no-install-recommends oracle-java${JAVA_VERSION}-installer oracle-java${JAVA_VERSION}-set-default\n\n# install node.js\nRUN curl -sL https://deb.nodesource.com/setup_4.x | sudo bash -\nRUN apt-get install -y nodejs python g++ build-essential\n\n# install yeoman bower grunt gulp\nRUN npm install -g yo bower grunt-cli gulp\n\n# install JHipster\nENV JHIPSTER_VERSION 3.0.0\nRUN npm install -g generator-jhipster@${JHIPSTER_VERSION}\n\n# configure the \"jhipster\" user\nRUN groupadd jhipster && useradd jhipster -s /bin/bash -m -g jhipster -G jhipster && adduser jhipster sudo\nRUN echo 'jhipster:jhipster' |chpasswd\nRUN mkdir -p /home/jhipster/app\nADD banner.txt /home/jhipster/banner.txt\nRUN cd /home && chown -R jhipster:jhipster /home/jhipster\n\n# clean\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/oracle-jdk${JAVA_VERSION}-installer\n\n# expose the working directory, the Tomcat port, the BrowserSync ports\nVOLUME [\"/home/jhipster/app\"]\nEXPOSE 8080 9000 3001\nCMD    [\"tail\", \"-f\", \"/home/jhipster/banner.txt\"]\n"
    },
    {
        "filename": "1263e1d8c01a70d366b24c653c083d897da3c16b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\n# use basic syntax for now\nFROM gcr.io/kaggle-images/python:latest\n\nUSER root\n\nENV DEBIAN_FRONTEND noninteractive\n\nENV NB_USER jovyan\nENV NB_UID 1000\nENV HOME /home/$NB_USER\n# We prefer to have a global conda install\n# to minimize the amount of content in $HOME\nENV CONDA_DIR=/opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\n\n# Use bash instead of sh\nSHELL [\"/bin/bash\", \"-c\"]\n\n# add https support \nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    apt-transport-https locales lsb-release wget\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Create jovyan user with UID=1000 and in the 'users' group\n# but allow for non-initial launches of the notebook to have\n# $HOME provided by the contents of a PV\nRUN useradd -M -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    chown -R ${NB_USER}:users /usr/local/bin && \\\n    mkdir -p $HOME\n\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" && \\\n    echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \\\n    apt-get update && \\\n    apt-get install -y google-cloud-sdk kubectl && \\\n    # we just really need jupyterhub-singleuser for our KF scripts\n    pip install jupyterhub==0.9.6 \\\n    # Kaggle image doesn't include their own API package (yet)\n    kaggle\n\n# Install Tini - used as entrypoint for container\nRUN cd /tmp && \\\n    wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\nRUN chown -R ${NB_USER}:users $HOME\n\nENV GITHUB_REF https://raw.githubusercontent.com/kubeflow/kubeflow/master/components/tensorflow-notebook-image\n\nADD --chown=jovyan:users $GITHUB_REF/jupyter_notebook_config.py /tmp\n\n# Wipe $HOME for PVC detection later\nWORKDIR $HOME\nRUN rm -fr $(ls -A $HOME)\n\n# Get init scripts from kubeflow\nADD --chown=jovyan:users \\\n    $GITHUB_REF/start-singleuser.sh \\\n    $GITHUB_REF/start-notebook.sh \\\n    $GITHUB_REF/start.sh \\\n    $GITHUB_REF/pvc-check.sh \\\n    /usr/local/bin/\n\nRUN chmod a+rx /usr/local/bin/*\n\n# Configure container startup\nEXPOSE 8888\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n"
    },
    {
        "filename": "150e4d50ed91a491ae3aecde980965533af29823.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Marcell Mars \"https://github.com/marcellmars\"\n\n#---- this is convenient setup with cache for local development ---------------\n# RUN echo 'Acquire::http::Proxy \"http://172.17.42.1:3142\";' >> /etc/apt/apt.conf.d/01proxy\n\nRUN locale-gen en_US en_US.UTF-8\n\nRUN apt-get update \\\n    && apt-get -y install python-pip \\\n                       dnsmasq-base \\\n    && pip install supervisor \\\n                   supervisor-stdout \\\n                   tailer \\\n    && echo conf-dir=/etc/dnsmasq.d >> /etc/dnsmasq.conf \\\n    && echo user=root >> /etc/dnsmasq.conf\n\nADD print_log.py /usr/local/bin/\nRUN chmod +x /usr/local/bin/print_log.py\n\nADD supervisord.conf /etc/ \nADD dnsmasq.conf /etc/supervisor/conf.d/\nADD dnsmasq.local /etc/dnsmasq.d/local\n"
    },
    {
        "filename": "154afb9c3f8cef0bd489457101d6529aeba2867a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# This is a comment\nFROM ubuntu:14.04\nMAINTAINER Ren\u00e9 Eigenheer <reigenheer@bridgesolutions.net>\n\nRUN apt-get update && \\\n\tapt-get install -y \\\n\t\tapache2 \\\n\t\tcurl \\\n\t\tlibapache2-svn \\\n\t\topenssh-server \\\n\t\tpython-software-properties \\\n\t\tsoftware-properties-common \\\n\t\tsubversion\n\n###\u00a0Jenkins, Oracle Java 7\nRUN wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add - ; \\\n\tsh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list' ; \\\n\tadd-apt-repository ppa:webupd8team/java -y ; \\\n\tapt-get update ; \\\n\techo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections ; \\\n\tapt-get install -y oracle-java7-installer jenkins maven\n### get Jenkins Maven Config\t\nADD data/jenkins/varLib /var/lib/jenkins\nADD data/maven/settings.xml /etc/maven/settings.xml\nRUN wget -P /var/lib/jenkins/plugins http://updates.jenkins-ci.org/latest/parameterized-trigger.hpi ; \\\n\twget -P /var/lib/jenkins/plugins http://updates.jenkins-ci.org/latest/extended-choice-parameter.hpi ; \\\n\twget -P /var/lib/jenkins/plugins http://updates.jenkins-ci.org/latest/build-blocker-plugin.hpi ; \\\n\twget -P /var/lib/jenkins/plugins http://updates.jenkins-ci.org/latest/console-column-plugin.hpi ; \\\n\twget -P /var/lib/jenkins/plugins http://updates.jenkins-ci.org/latest/greenballs.hpi ; \\\n\tchown -R jenkins:jenkins /var/lib/jenkins\n\n### SSH\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config ; \\\n\tmkdir -p /var/run/sshd\n\n### Apache\nADD data/apache /etc/apache2/sites-available\nRUN a2dissite 000-default ; \\\n\ta2ensite repo ; \\\n\ta2ensite ci ; \\\n\ta2ensite p2 ; \\\n\ta2ensite svn ; \\\n\ta2enmod proxy ; \\\n\ta2enmod proxy_http ; \\\n\ta2enmod rewrite\n#\ta2enmod ssl\n\n### Subversion\nADD data/import /data/import\nRUN printf \"\\n127.0.0.1\\trepo.sbb.ch\\n127.0.0.1\\tci.sbb.ch\\n127.0.0.1\\tsvn.sbb.ch\\n185.31.17.209\\trepo1.maven.org\\n127.0.0.1\\tp2.sbb.ch\\n198.41.30.249\\tmaven.eclipse.org\\n\" >> /etc/hosts ; \\\n\tmkdir -p /data/svn ; \\\n\tsvnadmin create /data/svn/cisi ; \\\n\tchown -R www-data:www-data /data/svn ; \\\n\tcd /data/import ; \\\n\tmkdir /data/import/svn ; \\\n\ttar -xvzf svnsbbcisi.tar.gz -C svn ; \\\n\t/etc/init.d/apache2 start ; \\\n\tsvn import /data/import/svn http://svn.sbb.ch/svn/cisi/trunk -m import\n\n###\u00a0Nexus\nRUN adduser --disabled-password --disabled-login --gecos \"\" nexus ; \\\n\twget -P /usr/local/ http://www.sonatype.org/downloads/nexus-latest-bundle.tar.gz ; \\\n\tcd /usr/local ; \\\n\ttar xvzf nexus-latest-bundle.tar.gz ; \\\n\tln -s /usr/local/nexus-2* /usr/local/nexus\nADD data/sonatype-work /usr/local/sonatype-work\nADD data/nexus/conf/nexus.properties /usr/local/nexus/conf/nexus.properties\nRUN chown -R nexus:nexus /usr/local/nexus-2* ; \\\n\tchown -R nexus:nexus /usr/local/sonatype-work/\nRUN\tcd /data/import ; \\\n\ttar -xvzf p2gef.tar.gz -C /var/www ; \\\n\tchown -R www-data:www-data /var/www/p2.sbb.ch/\n\n###\u00a0Jenkins Load\nADD data/jenkins/importTool /root/importTool\nADD prepareEnvironment.sh /root/prepareEnvironment.sh\nRUN chmod 777 /root/prepareEnvironment.sh\n\nEXPOSE 22 80 8080 8081\n\nADD startup.sh /root/startup.sh\nRUN chmod 777 /root/startup.sh\n\n###\u00a0root password\nRUN echo 'root:cisi@docker' | chpasswd\n\nCMD [\"/bin/bash\", \"/root/startup.sh\"]\n\n\n# TODO\n# - evtl p2.sbb.ch als redirect auf internet sites -> platzersparnis, nachteil nicht 100% SBB\n# - svn als https\n# - ci als https\n# - aufteilen mehere container\n\n# docker build --no-cache -t ere00/build:v1 .\n\n#\u00a0docker build -t ere00/build:v1 .\n# docker run -d -p 80:80 -p 8080:8080 -p 8081:8081 -p 22222:22 --name test_build ere00/build:v1\n# ssh -p 22222 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@192.168.59.103\n# ./importJenkins.sh\n#\u00a0build pt.cisi.tools.eclipse.tycho.manual\n#\u00a0build pt.cisi.3rdparty.target.continous\n#\u00a0build pt.cisi.3rdparty.bundles.manual\n# build pt.cisi.3rdparty.eclipse.manual\n"
    },
    {
        "filename": "17baba85a771ff6b01d7489a0bd5acae35cf64e3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Qhan <qhan@ailabs.tw>\n\n## -----------------------------------------------------------------------------\n## Install libraries\n\nRUN apt-get update && apt-get install -y \\\n\n    build-essential \\\n    cmake \\\n    gfortran \\\n    git \\\n    wget \\\n    curl \\\n    graphicsmagick \\\n    htop \\\n    libgraphicsmagick1-dev \\\n    libatlas-dev \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libboost-all-dev \\\n    libgtk2.0-dev \\\n    libjpeg-dev \\\n    liblapack-dev \\\n    libswscale-dev \\\n    pkg-config \\\n    python-dev \\\n    python-numpy \\\n    python-protobuf \\\n    python3-pip \\\n    software-properties-common \\\n    tree \\\n    vim \\\n    zip \\\n    && apt-get clean && rm -rf /tmp/* /var/tmp/*\n\nRUN cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python\n\nRUN pip3 install \\\n    numpy \\\n    scipy \\\n    opencv-python\n\n## dlib\n\nRUN cd ~ && \\\n    mkdir -p dlib && \\\n    git clone https://github.com/davisking/dlib.git dlib/ && \\\n    cd dlib/ && \\\n    python setup.py install --yes USE_AVX_INSTRUCTIONS\n\n## -----------------------------------------------------------------------------\n\nWORKDIR /app\n\nCOPY .vimrc /app/\nRUN mv .vimrc /root\n"
    },
    {
        "filename": "1821e5f6c4559b4dd976a6e117332da717f5b293.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# namin/io.livecode.ch\n\nFROM ubuntu:18.04\nMAINTAINER Nada Amin, namin@alum.mit.edu\n\nRUN \\\n  sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get -y upgrade && \\\n  apt-get install -y build-essential && \\\n  apt-get install -y software-properties-common\n\nRUN apt-get install locales\nRUN locale-gen en_US en_US.UTF-8\n\nENV TZ=America/New_York\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nRUN apt-get update\n\nRUN apt-get install -y curl wget\nRUN apt-get install -y git subversion\nRUN apt-get install -y unzip\nRUN apt-get install -y sed gawk\n\nRUN mkdir /code\n\n# NOTE(namin): I disabled some installations from source, because they get killed.\n\n### Scheme ###\n### Vicare ###\n#\nRUN apt-get install -y build-essential libtool autoconf libgmp-dev texinfo\n# --- killed ---\n# RUN cd /code;\\\n#     git clone https://github.com/marcomaggi/vicare.git;\\\n#     cd vicare;\\\n#     sh autogen.sh;\\\n#     mkdir build;\\\n#     cd build;\\\n#     ../configure --enable-maintainer-mode;\\\n#     make;\\\n#    make install\n#\n#### Install from binary ####\nRUN cd /code;\\\n    mkdir vicare;\\\n    cd vicare;\\\n    wget -nv http://lampwww.epfl.ch/~amin/dkr/vicare/vicare;\\\n    wget -nv http://lampwww.epfl.ch/~amin/dkr/vicare/vicare-lib.zip;\\\n    unzip vicare-lib.zip -d /usr/local/lib/;\\\n    chmod 755 vicare;\\\n    cp vicare /usr/local/bin/\n### Chez ###\nRUN apt-get install -y libncurses-dev ncurses-dev libx11-dev\n# RUN cd /code;\\\n#    wget -nv http://github.com/cisco/ChezScheme/archive/v9.4.zip;\\\n#    unzip v9.4.zip -d .;\\\n#    cd ChezScheme-9.4;\\\n#    ./configure;\\\n#    make install\n#### Install from binary ####\n#RUN cd /usr/local/bin;\\\n#    wget -nv http://lampwww.epfl.ch/~amin/dkr/chez/scheme;\\\n#    chmod 755 scheme;\\\n#    cd /usr/local/lib;\\\n#    mkdir -p csv9.4/a6le;\\\n#    cd csv9.4/a6le;\\\n#    wget -nv http://lampwww.epfl.ch/~amin/dkr/chez/petite.boot;\\\n#    wget -nv http://lampwww.epfl.ch/~amin/dkr/chez/scheme.boot\n\nRUN apt-get install -y chezscheme\n\n### ML ###\nRUN apt-get install -y mlton-compiler\n\n### Twelf ###\n# --- killed ---\n# RUN cd /code;\\\n#     git clone https://github.com/standardml/twelf.git;\\\n#     cd twelf;\\\n#     make mlton;\\\n#     make install\n#\n#### Install from binary ####\nRUN  cd /code;\\\n     mkdir twelf;\\\n     wget -nv http://lampwww.epfl.ch/~amin/dkr/twelf/twelf-server;\\\n     chmod 755 twelf-server;\\\n     cp twelf-server /usr/local/bin\n\n### SCMUTILS ###\nRUN cd /code;\\\n    mkdir scmutils;\\\n    cd scmutils;\\\n    wget -nv http://groups.csail.mit.edu/mac/users/gjs/6946/scmutils-tarballs/scmutils-20160827-x86-64-gnu-linux.tar.gz;\\\n    cd /usr/local;\\\n    tar -xvf /code/scmutils/scmutils-20160827-x86-64-gnu-linux.tar.gz\nADD dkr/software/mechanics-shell /usr/local/bin/mechanics-shell\n\n## Java ##\n#RUN apt-get install -y openjdk-6-jdk\n#RUN apt-get install -y openjdk-7-jdk\nRUN apt-get install -y openjdk-8-jdk\n#RUN apt-get install -y openjdk-9-jdk\n#RUN apt-get install -y openjdk-10-jdk\nRUN apt-get install -y openjdk-11-jdk\n\n#RUN add-apt-repository -y ppa:webupd8team/java\n#RUN apt-get update\n\n#RUN echo \"oracle-java6-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections;\\\n#    echo \"oracle-java6-installer shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections;\\\n#    apt-get install -y oracle-java6-installer\n\n#RUN echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#RUN echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections\n#RUN apt-get install -y oracle-java7-installer\n\n#RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && apt-get install -y oracle-java8-installer\n\n#RUN echo oracle-java9-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && apt-get install -y oracle-java9-installer\n\n#RUN add-apt-repository -y ppa:linuxuprising/java\n#RUN apt update\n#RUN echo oracle-java11-installer shared/accepted-oracle-license-v1-2 select true | /usr/bin/debconf-set-selections\n#RUN apt install -y oracle-java11-installer\n\n## Scala ##\n#RUN apt-get install -y scala\n\nRUN  cd /code;\\\n     wget -nv http://downloads.lightbend.com/scala/2.12.8/scala-2.12.8.tgz;\\\n     tar -xzvf scala-2.12.8.tgz\n\nRUN  cd /code;\\\n     wget -nv http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz;\\\n     tar -xzvf scala-2.11.8.tgz\n\n#RUN  cd /code;\\\n#     wget -nv http://scala-lang.org/files/archive/scala-2.9.3.tgz;\\\n#     tar -xzvf scala-2.9.3.tgz\n\n## LaTeX ##\nRUN apt-get install -y texlive-latex-base texlive-latex-extra\n\n## Racket ##\n\nRUN add-apt-repository ppa:plt/racket\nRUN apt-get update\nRUN apt-get install -y racket\n\n## SMT ##\n\nRUN apt-get install -y z3\nRUN apt-get install -y cvc4\n\n## user runner ##\n\nRUN apt-get install -y sudo\n\nRUN apt-get install -y dos2unix\n\nRUN useradd -m -d /home/runner -s /bin/bash runner\n\n## Install io.livecode.ch scripts ##\nADD dkr/livecode-install /usr/local/bin/livecode-install\nADD dkr/livecode-run /usr/local/bin/livecode-run\n\n## From now on, everything is executed as user runner ##\nENV HOME /home/runner\nRUN env\n\nRUN sudo -u runner mkdir /home/runner/bin\nRUN sudo -u runner mkdir /home/runner/files"
    },
    {
        "filename": "185743ee1a2ba7523a717412ea41c51fa74205f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM java:openjdk-8-jdk\nMAINTAINER Dalitso Banda <dalitsohb@gmail.com>\n\n# `Z_VERSION` will be updated by `dev/change_zeppelin_version.sh`\nENV Z_VERSION=\"git_master\"\nENV Z_COMMIT=\"2ea945f548a4e41312026d5ee1070714c155a11e\"\nENV LOG_TAG=\"[ZEPPELIN_${Z_VERSION}]:\" \\\n    Z_HOME=\"/zeppelin\" \\\n    LANG=en_US.UTF-8 \\\n    LC_ALL=en_US.UTF-8\n\nRUN echo \"$LOG_TAG Install essentials\" && \\\n    apt-get -y update && \\\n    apt-get install -y locales && \\\n    locale-gen $LANG && \\\n    apt-get install -y git wget grep curl sed && \\\n    apt-get autoclean &&  apt-get autoremove\n\nRUN echo \"$LOG_TAG Getting maven\" && \\\n    wget http://www.eu.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz && \\\n    tar -zxf apache-maven-3.3.9-bin.tar.gz -C /usr/local/ && \\\n    ln -s /usr/local/apache-maven-3.3.9/bin/mvn /usr/local/bin/mvn \n\nADD patch_beam.patch /tmp/patch_beam.patch\n\nRUN echo \"$LOG_TAG install nodejs\" && \\\n    curl -sL https://deb.nodesource.com/setup_11.x | bash - && apt-get install -y nodejs && \\\n    echo \"$LOG_TAG Download Zeppelin source\" && \\\n    git clone https://github.com/apache/zeppelin.git /zeppelin-${Z_VERSION}-bin-all && \\\n    mv /zeppelin-${Z_VERSION}-bin-all ${Z_HOME}_src && \\\n    mkdir ${Z_HOME}/notebook/mmlspark -p && \\\n    cd ${Z_HOME}_src && \\\n    git checkout ${Z_COMMIT} && \\\n    echo '{ \"allow_root\": true }' > /root/.bowerrc && \\\n    echo \"$LOG_TAG building zeppelin\" && \\\n    # setup \\\n    cd ${Z_HOME}_src && \\\n    git status  && \\\n    mv /tmp/patch_beam.patch . && \\\n    git apply --ignore-space-change --ignore-whitespace patch_beam.patch && \\\n     ./dev/change_scala_version.sh 2.11 && \\\n    # dendencies\n    apt-get -y update && \\\n    apt-get install -y git libfontconfig r-base-dev r-cran-evaluate wget grep curl sed && \\\n    # setup zeppelin-web\n    cd ${Z_HOME}_src/zeppelin-web && \\\n    rm package-lock.json && \\\n    mkdir -p /usr/local/lib/node_modules && \\\n    npm install -g @angular/cli && \\\n    npm install -g grunt-cli bower && \\\n    bower install && \\\n    cd ${Z_HOME}_src && \\\n    export MAVEN_OPTS=\"-Xmx2g -Xss128M -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=1024M -XX:+CMSClassUnloadingEnabled\" && \\\n    mvn -e -B package -DskipTests -Pscala-2.11 -Pbuild-distr && \\\n    tar xvf ${Z_HOME}_src/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT.tar.gz && \\\n    rm -rf ${Z_HOME}/* && \\\n    mv zeppelin-0.9.0-SNAPSHOT ${Z_HOME}_dist && \\\n    mv ${Z_HOME}_dist/* ${Z_HOME} && \\\n    echo \"$LOG_TAG Cleanup\" && \\\n    apt-get remove --purge -y r-base-dev r-cran-evaluate libfontconfig && \\\n    npm uninstall -g @angular/cli grunt-cli bower && \\\n    apt-get autoclean &&  apt-get autoremove -y && \\\n    rm -rf ${Z_HOME}_dist && \\\n    rm -rf ${Z_HOME}_src && \\\n    rm -rf /root/.ivy2 && \\\n    rm -rf /root/.m2 && \\\n    rm -rf /root/.npm && \\\n    rm -rf /root/.cache && \\\n    rm -rf /tmp/*\n\nRUN echo \"$LOG_TAG install tini related packages\" && \\\n    apt-get install -y wget curl grep sed dpkg && \\\n    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` && \\\n    curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb\n\nRUN echo \"$LOG_TAG installing python related packages\" && \\\n    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py && \\\n    apt-get install -y python-dev libpython3-dev build-essential pkg-config gfortran && \\\n    pip install -U pip setuptools wheel && \\\n    pip install numpy && \\\n    pip install matplotlib && \\\n    pip install pandas && \\\n    apt-get update && \\\n    apt-get upgrade -y && \\\n    echo \"deb http://deb.debian.org/debian stretch main\" >> /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install -y g++ gcc-6 libstdc++-6-dev && \\\n    echo \"$LOG_TAG Cleanup\" && \\\n    apt-get purge -y --auto-remove build-essential pkg-config gfortran libpython3-dev && \\\n    apt-get autoremove -y && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /root/.npm && \\\n    rm -rf /root/.m2 && \\\n    rm -rf /root/.cache && \\\n    rm -rf /tmp/*\n\nENV APACHE_SPARK_VERSION 2.4.0\nENV HADOOP_VERSION 3.2.0\nENV HADOOP_GIT_COMMIT=\"release-3.2.0-RC1\"\n\nRUN echo \"$LOG_TAG Getting SPARK_HOME\" && \\\n    mkdir -p /opt && \\\n    cd /opt && \\\n    curl http://apache.claz.org/spark/spark-${APACHE_SPARK_VERSION}/spark-${APACHE_SPARK_VERSION}-bin-without-hadoop.tgz  | \\\n        tar -xz && \\\n    ln -s spark-${APACHE_SPARK_VERSION}-bin-without-hadoop spark && \\\n    echo Spark ${APACHE_SPARK_VERSION} installed in /opt/spark && \\\n    export SPARK_HOME=/opt/spark\n\nRUN echo \"$LOG_TAG building hadoop\" && \\\n    apt-get update && \\\n    apt-get install -y make && \\\n    cd  / && \\\n    git clone https://github.com/apache/hadoop.git  hadoop_src&& \\\n    mkdir /hadoop_deps && cd /hadoop_deps && \\\n    wget https://github.com/protocolbuffers/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.bz2 && \\\n    tar xvf protobuf-2.5.0.tar.bz2 && \\\n    cd protobuf-2.5.0 && \\\n    ./configure && make && make install && ldconfig && \\\n    cd /hadoop_src && git checkout ${HADOOP_GIT_COMMIT} && mvn package -Pdist -DskipTests -Dtar && \\\n    mv hadoop-dist/target/hadoop-${HADOOP_VERSION} /opt/hadoop && \\\n    rm -r /hadoop_src && \\\n    rm -rf /root/.ivy2 && \\\n    rm -rf /root/.m2 && \\\n    export HADOOP_HOME=/opt/hadoop && \\\n    echo \"\\nexport HADOOP_CLASSPATH=/opt/hadoop/share/hadoop/tools/lib/*\" >> /opt/hadoop/etc/hadoop/hadoop-env.sh && \\\n    echo Hadoop ${HADOOP_VERSION} installed in /opt/hadoop && \\\n    apt-get purge -y --auto-remove g++ make build-essential autoconf automake && \\\n    cd  / && rm -rf /hadoop_deps\n\nRUN echo \"\\nSPARK_DIST_CLASSPATH=/jars:/jars/*:$(/opt/hadoop/bin/hadoop classpath)\" >> /opt/spark/conf/spark-env.sh\nENV HADOOP_HOME=/opt/hadoop\nADD jars /jars\n\n# add notebooks\nADD mmlsparkExamples/ ${Z_HOME}/notebook/mmlspark/\n\nADD spark-defaults.conf /opt/spark/conf/spark-defaults.conf\nADD zeppelin-env.sh ${Z_HOME}/conf/\n\nEXPOSE 8080\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\nWORKDIR ${Z_HOME}\nCMD [\"sh\", \"-c\", \"echo '\\nspark.driver.host' $(hostname -i) >> /opt/spark/conf/spark-defaults.conf && bin/zeppelin.sh\"]\n"
    },
    {
        "filename": "1b12420e70a8038ffdb4e3af40b3c7d2dfa8f4cf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER Joshua Meier <jmeier@college.harvard.edu>\n\nRUN apt-get update\nRUN apt-get install -y curl\nRUN curl -sL https://deb.nodesource.com/setup | bash -\nRUN apt-get install -y git nodejs libffi-dev libxml2-dev libxslt1-dev\nRUN apt-get install -y python python-dev python-setuptools python-pip\n\nRUN npm install -g less coffee-script\n\nADD . app\n\nRUN cd app && pip install -r requirements.txt\nRUN cd app && npm install\n\nWORKDIR app\nEXPOSE 5000\nCMD python app.py\n"
    },
    {
        "filename": "1bd84c9d353cad0eaaf35baba923914a7512d5da.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM datmo/python-base:cpu-py35\n\nMAINTAINER Datmo devs <dev@datmo.com>\"\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bazel \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\nRUN pip --no-cache-dir install \\\n        Cython \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        matplotlib \\\n        numpy==1.14.5 \\\n        pandas \\\n        path.py \\\n        pyyaml \\\n        scipy \\\n        six \\\n        sklearn \\\n        sympy \\\n        Pillow \\\n        zmq \\\n        dlib \\\n        incremental \\\n        nltk \\\n        textacy \\\n        scikit-image \\\n        spacy \\\n        tqdm \\\n        wheel\n\n# Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n    && cd xgboost \\\n    && make -j$(nproc) \\\n    && cd python-package \\\n    && python setup.py install \\\n    && cd ../.. \\\n    && rm -rf xgboost\n"
    },
    {
        "filename": "1d4b7018eb1c9806e581d497b336cb868d7593cb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n#   Author: Rohith\n#   Date: 2014-10-20 22:03:46 +0100 (Mon, 20 Oct 2014)\n#\n#  vim:ts=2:sw=2:et\n#\nFROM ubuntu:latest\nMAINTAINER <gambol99@gmail.com>\nRUN sudo apt-get update -y\nRUN sudo apt-get install --fix-missing -y wget curl golang git\nRUN sudo wget http://github.com/kelseyhightower/confd/releases/download/v0.6.3/confd-0.6.3-linux-amd64 -O /usr/bin/confd && chmod +x /usr/bin/confd\nRUN sudo curl -L https://github.com/coreos/etcdctl/archive/v0.4.5.tar.gz | tar zxv -C /opt; \\\n cd /opt/etcd*; \\\n mkdir -p /root/go; \\\n export GOPATH=$HOME/go; \\\n ./build; \\\n cp bin/etcdctl /usr/bin/etcdctl;\nRUN sudo mkdir -p /etc/confd/conf.d /etc/confd/templates\nRUN sudo apt-get install -y vim\nADD config/confd.conf /etc/confd/confd.conf\nENV ENVIRONMENT dev\nENV APP confd\nENV NAME confd\n"
    },
    {
        "filename": "1dec560117d7ea7a1d8f0ecc52f1a3dbe7bf37d8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER Adam Butler\n\nRUN apt-get update\nRUN apt-get install -y python-software-properties python\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n\nRUN npm install -g coffee-script\n\nADD . /src\n\nRUN cd /src; npm install\n\nEXPOSE  1337\n\nCMD [\"coffee\", \"/src/app.coffee\"]\n\n"
    },
    {
        "filename": "1f6f1743df770e8f5f071763ae859312b1eb12f8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "ARG REGISTRY=vrnetlab/\nFROM ${REGISTRY}vr-xcon\nMAINTAINER Kristian Larsson <kristian@spritelink.net>\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -qy \\\n && apt-get upgrade -qy \\\n && apt-get install -y \\\n    iputils-tracepath \\\n    git \\\n    golang \\\n    procps \\\n    python \\\n    python-setuptools \\\n    python3-jinja2 \\\n    python3-flask \\\n    tcpdump \\\n    telnet \\\n    wget \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O exabgp.tar.gz https://github.com/Exa-Networks/exabgp/archive/3.4.18.tar.gz \\\n && tar zxvf exabgp.tar.gz \\\n && cd /exabgp* && python setup.py install \\\n && cd / && rm -rf exabgp*\n\nADD . /\n\nENTRYPOINT [\"/vr-bgp.py\"]\n"
    },
    {
        "filename": "22347b000fa90c23d68feec3b3d592363c3e1fa6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# ########################################################################################\n# POCKETMINE-MP Docker Image\n#\n# This is a stand-alone image that utilizes the latest version of the Pocketmine-MP PHP\n# based server (https://pmmp.io/)\n#\n# You can run using this:\n#\n# Start in headless mode\n# \tdocker run -d -v /data/minecraft/data:/data -p 19132:19132/udp --name minecraft cscheide/pocketmine-mp\n#\n# Start in interactive mode\n# \tdocker start -ai minecraft\n#\n# Start creating new data\n# \tdocker run -d -p 19132:19132/udp --name minecraft cscheide/pocketmine-mp\n#\n\nFROM ubuntu:latest\n\nMAINTAINER Christopher Scheidel <christopher.scheidel@gmail.com>\n\n# Install dependencies\nRUN apt-get update && \\\n\tapt-get -y install wget && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Make the directory we will need\nRUN\tmkdir -p /data /minecraft\nWORKDIR /minecraft\n\n# Grab the pre-built PHP 7.2 distribution from PMMP\nRUN wget -q -O - https://jenkins.pmmp.io/job/PHP-7.2-Aggregate/lastSuccessfulBuild/artifact/PHP-7.2-Linux-x86_64.tar.gz > /minecraft/PHP-7.2-Linux-x86_64.tar.gz && \\\n  cd /minecraft && \\\n\ttar -xvf PHP-7.2-Linux-x86_64.tar.gz && \\\n\trm PHP-7.2-Linux-x86_64.tar.gz\n\n# Grab the Specific version PHAR\nRUN wget -q -O - https://github.com/pmmp/PocketMine-MP/releases/download/3.4.3/PocketMine-MP.phar > /minecraft/PocketMine-MP.phar\n\n# Grab the start script and make it executable\nRUN wget -q -O - https://raw.githubusercontent.com/pmmp/PocketMine-MP/master/start.sh > /minecraft/start.sh && \\\n  chmod +x /minecraft/start.sh\n\n# Add the custom properties from our docker project\nADD server.properties /data/server.properties\nADD pocketmine.yml /data/pocketmine.yml\n\n# Touch the remaining files\nRUN touch /data/banned-ips.txt && \\\n\ttouch /data/banned-players.txt && \\\n\ttouch /data/ops.txt && \\\n\tmkdir -p /data/players && \\\n\ttouch /data/white-list.txt && \\\n\tmkdir -p /data/worlds && \\\n\tmkdir -p /data/plugins && \\\n\tmkdir -p /data/resource_packs && \\\n\ttouch /data/server.log\n\n# Move the configuration items out of the main directory and sym link items back\nRUN ln -s /data/banned-ips.txt /minecraft/banned-ips.txt && \\\n\tln -s /data/banned-players.txt /minecraft/banned-players.txt && \\\n\tln -s /data/ops.txt /minecraft/ops.txt && \\\n\tln -s /data/players /minecraft/players && \\\n\tln -s /data/pocketmine.yml /minecraft/pocketmine.yml && \\\n\tln -s /data/server.properties /minecraft/server.properties && \\\n\tln -s /data/white-list.txt /minecraft/white-list.txt && \\\n\tln -s /data/worlds /minecraft/worlds && \\\n\tln -s /data/plugins /minecraft/plugins && \\\n\tln -s /data/resource_packs /minecraft/resource_packs && \\\n\tln -s /data/server.log /minecraft/server.log\n\n\n# Expose the right port\nEXPOSE 19132/udp\n\n# Set up the volume for the data\nVOLUME /data\n\n# Run the app when launched\nCMD [ \"bash\", \"/minecraft/start.sh\", \"--no-wizard\"]\n"
    },
    {
        "filename": "23836d356492ca4d7d47618b9fbc2c610aef1508.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 7,
        "text": "# runnable base\nFROM boxcar/raring\n\n# REPOS\nRUN apt-get -y update\nRUN apt-get install -y -q software-properties-common\nRUN add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\"\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/10gen.list\nRUN apt-get -y update\n\n#SHIMS\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -s /bin/true /sbin/initctl\nENV DEBIAN_FRONTEND noninteractive\n\n# EDITORS\nRUN apt-get install -y -q vim nano\n\n# TOOLS\nRUN apt-get install -y -q curl git make wget\n\n# BUILD\nRUN apt-get install -y -q build-essential g++\n\n# SERVICES\n\n## COUCHDB\nRUN apt-get install -y -q couchdb\nRUN mkdir -p /var/run/couchdb\n\n## REDIS\nRUN apt-get install -y -q redis-server\n\n## MONGO\nRUN apt-get install -y -q mongodb-10gen\n\n## SETUP DBPATH\nRUN mkdir -p /data/db\n\nRUN apt-get -y update --fix-missing\n\n## MYSQL\nRUN apt-get install -y -q mysql-client mysql-server\n\n# LANGS\n\n## NODE\nRUN apt-get install -y -q nodejs\n\n## APP\nADD helloworld /root\nRUN cd /root && npm install\n\n\n# RESET\nENV DEBIAN_FRONTEND dialog\n\n## CONFIG\nENV RUNNABLE_USER_DIR /root\nENV RUNNABLE_SERVICE_CMDS couchdb; redis-server; mongod; mysqld\nENV RUNNABLE_START_CMD npm start\n"
    },
    {
        "filename": "23f7f71c057bed07669a0defcdade3b082377ba7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# This is a docker file for the markdown-share application.\n#\n# I do not run the real site under docker, instead that runs\n# under thttpd with a custom proxy to handle the rewrites.\n#\n# To build this image:\n#\n#     sudo docker build -t skxskx/markdown.share .\n#\n# Then to launch the image:\n#\n#     sudo docker run -d -p 3333:80 skxskx/markdown.share\n#\n# Once launched you should open your favourite browser and point\n# it at:\n#\n#      http://localhost:3333/\n#\n# Steve\n# --\n#\n\n\n#\n#  From the Ubuntu starting point, create an image owned by Steve\n#\nFROM ubuntu\nMAINTAINER steve@steve.org.uk\n\n#\n#  Ensure our packages are OK.\n#\nRUN echo 28-02-2015\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\n\n#\n# Prepare for server-installation - See:\n#    http://stackoverflow.com/questions/25193161/chfn-pam-system-error-interm\n#\nRUN ln -s -f /bin/true /usr/bin/chfn\n\n\n#\n#  Now install our servers\n#\n\nRUN apt-get install --yes --force-yes redis-server\nRUN apt-get install --yes --force-yes apache2\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n\n#\n#  Now install our Perl dependencies\n#\nRUN apt-get install --yes --force-yes libossp-uuid-perl libjson-perl libhtml-template-perl libmath-base36-perl libredis-perl libtext-multimarkdown-perl perl perl-modules libcgi-application-perl libcgi-session-perl libhtml-parser-perl\n\n#\n#  Install git and checkout our code\n#\nRUN apt-get install --yes --force-yes git\n\nRUN echo 2014-02-19r2\nRUN cd /srv && git clone https://github.com/skx/markdown.share.git\n\n\n#\n# At this point we have all the daemons, now we'll configure Apache:\n#\nRUN a2enmod rewrite\nRUN a2enmod cgi\nADD ./docker/docker.conf /etc/apache2/sites-enabled/markdown-share.conf\n\n\n#\n# Add a script to launch the two daemons\n#\nADD ./docker/start.sh /srv/start.sh\n\n#\n# Now boot it up\n#\nCMD [\"/srv/start.sh\"]\n"
    },
    {
        "filename": "2436004186649894dbf82d1b7ef5e68b9f696475.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM librarian/motw\n\nMAINTAINER Marcell Mars \"https://github.com/marcellmars\"\n\n#---- this is convenient setup with cache for local development ---------------\n# RUN echo 'Acquire::http::Proxy \"http://172.17.42.1:3142\";' >> /etc/apt/apt.conf.d/01proxy\n\nRUN locale-gen en_US en_US.UTF-8 \\\n    && apt-get -y install openssl ssl-cert ca-certificates prosody \\\n    && pip install sleekxmpp \\\n                   dnspython \\\n                   pyasn1 \\\n                   pyasn1-modules \\\n    && mkdir -p /var/run/prosody \\\n    && chown -R prosody.prosody /var/run/prosody \\\n    && mkdir -p /var/lib/prosody/${LSB_DOMAIN}/accounts/ \\\n    && chown -R prosody.prosody /var/lib/prosody\n\nADD prosody.conf /etc/supervisor/conf.d/\nADD prosody.cfg.lua /etc/prosody/prosody.cfg.lua\nRUN chmod +rw /etc/prosody/prosody.cfg.lua\n\nADD lsb_domain.crt /etc/prosody/certs/\nADD lsb_domain.key /etc/prosody/certs/ \n\nRUN chown prosody.prosody /etc/prosody/certs/lsb_domain.crt \\\n    && chown prosody.prosody /etc/prosody/certs/lsb_domain.key \\\n    && chmod 600 /etc/prosody/certs/lsb_domain.crt \\\n    && chmod 600 /etc/prosody/certs/lsb_domain.key\n\nADD biblibothekar.dat /var/lib/prosody/${LSB_DOMAIN}/accounts/\n\nRUN chown prosody.prosody /var/lib/prosody/${LSB_DOMAIN}/accounts/biblibothekar.dat \\\n    && chmod -R 640 /var/lib/prosody/${LSB_DOMAIN}/accounts/biblibothekar.dat\n\nADD create_room.py /usr/local/bin/\nRUN chmod +x /usr/local/bin/create_room.py\nADD .password /usr/local/bin/\nADD create_room.conf /etc/supervisor/conf.d/"
    },
    {
        "filename": "25a4c9610369425ab165b532b89c477d3074ab6b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM phusion/baseimage:0.9.15\nMAINTAINER Brian Prodoehl <bprodoehl@connectify.me>\n\nENV HOME /root\nCMD [\"/sbin/my_init\"]\nEXPOSE 80 443\n\n# 0.9.15 is getting a bit long in the tooth, so lets grab security fixes\nRUN apt-get update && apt-get -y dist-upgrade\n\nRUN echo \"deb http://ppa.launchpad.net/nginx/development/ubuntu $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/nginx-development.list\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C\nRUN add-apt-repository universe && add-apt-repository multiverse\nRUN apt-get update -q && \\\n    apt-get install -qy mysql-client nginx php5-cli php5-gd php5-fpm php5-json \\\n                        php5-mysql php5-curl wget && \\\n    apt-get clean\n\nRUN mkdir /etc/service/nginx\nADD runit/nginx.sh /etc/service/nginx/run\n\nRUN mkdir /etc/service/php5-fpm\nADD runit/php5-fpm.sh /etc/service/php5-fpm/run\n\nADD config/nginx.conf /etc/nginx/nginx.conf\nADD config/nginx-default.conf /etc/nginx/sites-available/default\nADD config/php.ini /etc/php5/fpm/php.ini\n\nRUN cd /usr/share/nginx/html && \\\n    export PIWIK_VERSION=2.14.3 && \\\n    wget http://builds.piwik.org/piwik-${PIWIK_VERSION}.tar.gz && \\\n    tar -xzf piwik-${PIWIK_VERSION}.tar.gz && \\\n    rm piwik-${PIWIK_VERSION}.tar.gz && \\\n    mv piwik/* . && \\\n    rm -r piwik && \\\n    chown -R www-data:www-data /usr/share/nginx/html && \\\n    chmod 0770 /usr/share/nginx/html/tmp && \\\n    chmod 0770 /usr/share/nginx/html/config && \\\n    chmod 0600 /usr/share/nginx/html/config/* && \\\n    rm /usr/share/nginx/html/index.html\n\n# Install MaxMind GeoCity Lite database\nRUN cd /usr/share/nginx/html/misc && \\\n    wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz && \\\n    gunzip GeoLiteCity.dat.gz && \\\n    chown www-data:www-data GeoLiteCity.dat && \\\n\tmv GeoLiteCity.dat GeoIPCity.dat\n\nADD config/piwik-schema.sql /usr/share/nginx/html/config/base-schema.sql\n\nADD scripts/generate-certs.sh /etc/my_init.d/05-certs.sh\nADD scripts/init-piwik.sh /etc/my_init.d/10-piwik.sh\n\nRUN touch /etc/service/sshd/down\n"
    },
    {
        "filename": "25ab071726ced785ae33b6a3422e334f0d87ad2e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER gijs@pythonic.nl\nENV DEBIAN_FRONTEND noninteractive\n\n## install requirements\nRUN apt-get update\nRUN apt-get install -y curl erlang git make python openssh-server supervisor\n\n## add user for disco\nRUN adduser --system disco --shell /bin/sh\n\n# setup ssh\nRUN echo root:disco | chpasswd\nRUN mkdir -p /var/run/sshd\n\n## passwordless login for docker \nRUN mkdir -p /home/disco/.ssh\nRUN ssh-keygen -N '' -f /home/disco/.ssh/id_dsa\nRUN cat /home/disco/.ssh/id_dsa.pub >> /home/disco/.ssh/authorized_keys\nRUN echo -n \"localhost \" > /home/disco/.ssh/known_hosts\nRUN cat /etc/ssh/ssh_host_rsa_key.pub >> /home/disco/.ssh/known_hosts\nRUN chown disco -R /home/disco/.ssh\n\n## install disco\nRUN git clone https://github.com/discoproject/disco.git /disco\nRUN cd /disco &&  make install\nRUN cd /disco/lib && python setup.py install\nRUN chown -R disco /usr/var/disco\n\n## configure the supervisor which will start ssh & docker\nADD supervisor.conf /etc/supervisor/conf.d/disco.conf\nRUN sed -i 's/without-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\nEXPOSE 8990\nEXPOSE 8989\nCMD [\"/usr/bin/supervisord\"]\n\n"
    },
    {
        "filename": "266bdc4b997151ffe4904cadc247c59bf6c43738.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# ------------------------------------------------------------------------------\n# Based on a work at https://github.com/docker/docker.\n# ------------------------------------------------------------------------------\n# Pull base image.\nFROM tutum/ubuntu:trusty\nMAINTAINER Agung Firdaus <agung@jagad.co.id>\n\n# ------------------------------------------------------------------------------\n# Install dependencies\nRUN apt-get update && apt-get -y install git curl build-essential supervisor\n\n# ------------------------------------------------------------------------------\n# Install nodejs\nRUN curl -sL https://deb.nodesource.com/setup | sudo bash -\nRUN apt-get -y install nodejs\n\n# ------------------------------------------------------------------------------\n# Get cloud9 source and install\nRUN git clone https://github.com/c9/core.git /tmp/c9\nRUN cd /tmp/c9 && scripts/install-sdk.sh\nRUN mv /tmp/c9 /cloud9\nWORKDIR /cloud9\n\n# ------------------------------------------------------------------------------\n# Add workspace volumes\nRUN mkdir /cloud9/workspace\nVOLUME /cloud9/workspace\n\n# ------------------------------------------------------------------------------\n# Set default workspace dir\nENV C9_WORKSPACE /cloud9/workspace\n\n# ------------------------------------------------------------------------------\n# Add supervisord conf\nADD supervisord.conf /etc/supervisor/conf.d/\n\n# ------------------------------------------------------------------------------\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# ------------------------------------------------------------------------------\n# Expose ports.\nEXPOSE 8181\n\n# ------------------------------------------------------------------------------\n# Start supervisor, define default command.\nENTRYPOINT /usr/bin/supervisord\n"
    },
    {
        "filename": "2737dab75f85623339573fc6bcf37199bff8b2a5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM debian:jessie\n\nMAINTAINER johnar@microsoft.com\n\nRUN echo \"deb http://debian-archive.trafficmanager.net/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list && \\\n        echo \"deb-src http://debian-archive.trafficmanager.net/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list && \\\n        echo \"deb http://debian-archive.trafficmanager.net/debian-security/ jessie/updates main contrib non-free\" >> /etc/apt/sources.list && \\\n        echo \"deb-src http://debian-archive.trafficmanager.net/debian-security/ jessie/updates main contrib non-free\" >> /etc/apt/sources.list && \\\n        echo 'deb http://debian-archive.trafficmanager.net/debian jessie-backports main' >> /etc/apt/sources.list\n\n## Make apt-get non-interactive\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y \\\n        apt-utils \\\n        default-jre-headless \\\n        openssh-server \\\n        curl \\\n        wget \\\n        unzip \\\n        git \\\n        build-essential \\\n        libtool \\\n        lintian \\\n        sudo \\\n        dh-make \\\n        dh-exec \\\n        kmod \\\n        libtinyxml2-2 \\\n        libboost-program-options1.55-dev \\\n        libtinyxml2-dev \\\n        python \\\n        python-pip \\\n        libncurses5-dev \\\n        texinfo \\\n        dh-autoreconf \\\n        python3-pip \\\n        doxygen \\\n        devscripts \\\n        git-buildpackage \\\n        perl-modules \\\n        libswitch-perl \\\n        dh-systemd \\\n# For quagga build\n        libreadline-dev \\\n        texlive-latex-base \\\n        texlive-generic-recommended \\\n        texlive-fonts-recommended \\\n        libpam0g-dev \\\n        libpam-dev \\\n        libcap-dev \\\n        imagemagick \\\n        ghostscript \\\n        groff \\\n        libpcre3-dev \\\n        gawk \\\n        chrpath \\\n# For frr build\n        libc-ares-dev \\\n        hardening-wrapper \\\n        libsnmp-dev \\\n        libjson0 \\\n        libjson0-dev \\\n        libsystemd-dev \\\n        python-ipaddr \\\n# For libnl3 (local) build\n        cdbs \\\n# For SAI meta build\n        libxml-simple-perl \\\n        graphviz \\\n        aspell \\\n# For linux build\n        bc \\\n        fakeroot \\\n        build-essential \\\n        devscripts \\\n        quilt \\\n        stgit \\\n# For platform-modules build\n        module-assistant \\\n# For thrift build\\\n        gem2deb \\\n        libboost-all-dev \\\n        libevent-dev \\\n        libglib2.0-dev \\\n        libqt4-dev \\\n        python-all-dev \\\n        python-twisted \\\n        php5-dev \\\n        phpunit \\\n        libbit-vector-perl \\\n        openjdk-7-jdk \\\n        javahelper \\\n        maven-debian-helper \\\n        ant \\\n        libmaven-ant-tasks-java \\\n        libhttpclient-java \\\n        libslf4j-java \\\n        libservlet3.1-java \\\n        qt5-default \\\n# For mellanox sdk build\n        libpcre3 \\\n        libpcre3-dev \\\n        byacc \\\n        flex \\\n        libglib2.0-dev \\\n        bison \\\n        expat \\\n        libexpat1-dev \\\n        dpatch \\\n        libdb-dev \\\n        iptables-dev \\\n        swig \\\n# For mellanox sai build\n        libtool-bin \\\n        libxml2-dev \\\n# For BFN sdk build\n        libusb-1.0-0-dev \\\n        libcurl3-nss-dev \\\n        libunwind8-dev \\\n        telnet \\\n# For build image\n        cpio \\\n        squashfs-tools \\\n        zip \\\n# For broadcom sdk build\n        linux-compiler-gcc-4.8-x86 \\\n        linux-kbuild-3.16 \\\n# teamd build\n        libdaemon-dev \\\n        libdbus-1-dev \\\n        libjansson-dev \\\n# For cavium sdk build\n        libpcap-dev \\\n        dnsutils \\\n        libusb-dev \\\n# For debian image reconfiguration\n        augeas-tools \\\n# For p4 build\n        libyaml-dev \\\n        libevent-dev \\\n        libjudy-dev \\\n        libedit-dev \\\n        libnanomsg-dev \\\n        python-stdeb \\\n# For redis build\n        libjemalloc-dev \\\n# For mft kernel module build\n        dkms \\\n# For python3.5 build\n        sharutils \\\n        libncursesw5-dev \\\n        libbz2-dev \\\n        liblzma-dev \\\n        libgdbm-dev \\\n        tk-dev \\\n        blt-dev \\\n        libmpdec-dev \\\n        libbluetooth-dev \\\n        locales \\\n        libsqlite3-dev \\\n        libgpm2 \\\n        time \\\n        net-tools \\\n        xvfb \\\n        python-sphinx \\\n        python3-sphinx \\\n# For Jenkins static analysis, unit testing and code coverage\n        cppcheck \\\n        clang \\\n        pylint \\\n        gcovr \\\n        python-pytest=2.6.3* \\\n        python3-pytest=2.6.3* \\\n        python-pytest-cov \\\n        python3-pytest-cov \\\n        python-parse \\\n# For snmpd\n        libmysqlclient-dev \\\n        libmysqld-dev \\\n        libperl-dev \\\n        libpci-dev \\\n        libpci3 \\\n        libsensors4 \\\n        libsensors4-dev \\\n        libwrap0-dev \\\n# For mpdecimal\n        docutils-common \\\n        libjs-sphinxdoc \\\n        libjs-underscore \\\n        python-docutils \\\n        python-markupsafe \\\n        python-pygments \\\n        python-roman \\\n        sphinx-common \\\n# For sonic config engine testing\n        python-lxml \\\n        python-netaddr \\\n        python-ipaddr \\\n        python-yaml \\\n# For lockfile\n        procmail \\\n# For gtest\n        libgtest-dev \\\n        cmake \\\n# For pam_tacplus build\n        autoconf-archive \\\n# For python-based swsscommon\n        swig3.0 \\\n# For iproute2\n        cm-super-minimal \\\n        libatm1-dev \\\n        libelf-dev \\\n        libmnl-dev \\\n        libselinux1-dev \\\n        linuxdoc-tools \\\n        lynx \\\n        texlive-latex-extra \\\n        texlive-latex-recommended \\\n# For python-click build\n        python-sphinx \\\n        python-docutils \\\n        python3-all \\\n        python3-setuptools \\\n        python3-sphinx \\\n        python3-docutils \\\n        python3-requests \\\n        python3-pytest \\\n        python3-colorama\n\n# For linux build\nRUN apt-get -y build-dep linux\n\n# For gobgp build\nRUN export VERSION=1.8.3 \\\n && wget https://storage.googleapis.com/golang/go$VERSION.linux-amd64.tar.gz \\\n && tar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz \\\n && echo 'export GOROOT=/usr/local/go' >> /etc/bash.bashrc \\\n && echo 'export PATH=$PATH:$GOROOT/bin' >> /etc/bash.bashrc\n\n# Upgrade pip2\n# Note: use pip2 specific version so jinja2 2.10 will install\nRUN python2 -m pip install -U pip==9.0.3\n\n# For p4 build\nRUN pip install \\\n        ctypesgen \\\n        crc16\n\n# For sonic config engine testing\nRUN pip install pyangbind==0.6.0\n# Note: force upgrade debian packaged jinja2, if installed\nRUN pip install --force-reinstall --upgrade jinja2>=2.10\n\n# For templating (requiring jinja2)\nRUN pip install j2cli\n\n# For sonic utilities testing\nRUN pip install click-default-group click natsort tabulate\n\n# For supervisor build\nRUN pip install meld3 mock\n\n# Install dependencies for isc-dhcp-relay build\nRUN apt-get -y build-dep isc-dhcp\n\n# Install vim\nRUN apt-get install -y vim\n\n# Install rsyslog\nRUN apt-get install -y rsyslog\n\nRUN cd /usr/src/gtest && cmake . && make -C /usr/src/gtest\n\nRUN mkdir /var/run/sshd\nEXPOSE 22\n\n# Install depot-tools (for git-retry)\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/share/depot_tools\nENV PATH /usr/share/depot_tools:$PATH\n\n# Install docker engine 17.03.2~ce-0 inside docker and enable experimental feature\nRUN apt-get update\nRUN apt-get install -y \\\n           apt-transport-https \\\n           ca-certificates \\\n           curl \\\n           gnupg2 \\\n           software-properties-common\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\nRUN add-apt-repository \\\n           \"deb [arch=amd64] https://download.docker.com/linux/debian \\\n           $(lsb_release -cs) \\\n           stable\"\nRUN apt-get update\nRUN apt-get install -y docker-ce=17.03.2~ce-0~debian-jessie\nRUN echo \"DOCKER_OPTS=\\\"--experimental\\\"\" >> /etc/default/docker\n"
    },
    {
        "filename": "284a60c52400c5299bace56a284b56a483450198.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu\nMAINTAINER vishnu@cloudron.in\n\nRUN \\\n   apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \\\n   echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list && \\\n   apt-get update && \\\n   apt-get install -y mongodb-org\n\nRUN apt-get update --fix-missing\nRUN apt-get install -y --fix-missing wget default-jdk\nENV JAVA_HOME /usr/lib/jvm/default-java\n\n\nADD http://www.us.apache.org/dist/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz /tmp/\nRUN tar xzvf /tmp/apache-maven-3.3.3-bin.tar.gz --directory /usr/lib\nENV PATH /usr/lib/apache-maven-3.3.3/bin:$PATH\nRUN mkdir -p /opt/cyber-event-collector\nADD src /opt/cyber-event-collector/src\nADD pom.xml /opt/cyber-event-collector/pom.xml\nRUN mvn --file /opt/cyber-event-collector/pom.xml clean install\n\nVOLUME [\"/data/db\"]\nWORKDIR /data\n\nEXPOSE 27017\n\nADD server.sh /\nRUN chmod u+x /server.sh\nCMD [\"/server.sh\"]\n\n"
    },
    {
        "filename": "3504ac45422af490fe0be8cf00b878cb9e78c77f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Dockerfile for hyperledger cello ansible agent\n#\n# @see https://github.com/hyperledger/cello/blob/master/docs/worker_ansible_howto.md\n#\nFROM _DOCKER_BASE_\nMAINTAINER Tong Li <litong01@us.ibm.com>\n\nARG user=ubuntu\nARG uid=1000\nARG gid=1000\n\nRUN apt-get update                                          && \\\n    apt-get install -y bash curl python-dev sudo               \\\n    python-pip build-essential openssh-client libffi-dev       \\\n    libssl-dev                                              && \\\n    pip install --upgrade pip ansible pyyaml                && \\\n    groupadd -g ${gid} ${user}                              && \\\n    useradd -d /opt/agent -u ${uid} -g ${user} ${user}      && \\\n    usermod -a -G root ${user}                              && \\\n    echo \"${user} ALL=(ALL) NOPASSWD: ALL\"|tee /etc/sudoers.d/${user} && \\\n    mkdir -p /opt/agent/.ssh                                && \\\n    cd /opt/agent/.ssh                                      && \\\n    echo \"host *\" > config                                  && \\\n    echo \"  StrictHostKeyChecking no\" >> config             && \\\n    echo \"  UserKnownHostsFile /dev/null\" >> config\n\nADD src/operator-dashboard/agent/ansible /opt/agent\nADD https://storage.googleapis.com/kubernetes-release/release/v1.13.5/bin/linux/amd64/kubectl /usr/local/bin/kubectl\nRUN chown -R ${uid}:${gid} /opt/agent                       && \\\n    chmod 755 /usr/local/bin/kubectl\n\nENV HOME /opt/agent\nENV WORKDIR /opt/agent\nWORKDIR /opt/agent\nUSER ${user}\n\nCMD [ \"ansible-playbook\", \"--version\" ]\n"
    },
    {
        "filename": "37c70dbe793e40a8231d23af11ea06fc923cf405.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Dockerfile to build a MISP (https://github.com/MISP/MISP) container\n#\n# Original docker file by eg5846 (https://github.com/eg5846)\n#\n# 2016/03/03 - First release\n# 2017/06/02 - Updated\n# 2018/04/04 - Added objects templates\n# \n\n# We are based on Ubuntu:latest\nFROM ubuntu:xenial\nMAINTAINER Xavier Mertens <xavier@rootshell.be>\n\n# Install core components\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get dist-upgrade -y && apt-get autoremove -y && apt-get clean\nRUN apt-get install -y software-properties-common\nRUN apt-get install -y postfix\nRUN apt-get install -y mysql-client curl gcc git gnupg-agent make python openssl redis-server sudo vim zip locales\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nRUN add-apt-repository -y ppa:ondrej/php && apt-get update\n\n# Apache\nRUN apt-get install -y apache2 apache2-doc apache2-utils\nRUN a2dismod status\nRUN a2dissite 000-default\n\n# PHP 7.2\nRUN apt-get install -y libapache2-mod-php php7.2 php7.2-cli php-crypt-gpg php7.2-dev php7.2-json php7.2-mysql php7.2-opcache php7.2-readline php7.2-redis php7.2-xml\nRUN apt-get install -y php-pear pkg-config libbson-1.0 libmongoc-1.0-0 php-xml php-dev\n\n# Fix php.ini with recommended settings\nRUN sed -i \"s/max_execution_time = 30/max_execution_time = 300/\" /etc/php/7.2/apache2/php.ini\nRUN sed -i \"s/memory_limit = 128M/memory_limit = 512M/\" /etc/php/7.2/apache2/php.ini\nRUN sed -i \"s/upload_max_filesize = 2M/upload_max_filesize = 50M/\" /etc/php/7.2/apache2/php.ini\nRUN sed -i \"s/post_max_size = 8M/post_max_size = 50M/\" /etc/php/7.2/apache2/php.ini\n\nRUN apt-get install -y python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev python-setuptools\nRUN apt-get install -y cron logrotate supervisor syslog-ng-core\nRUN apt-get clean\n\nWORKDIR /var/www\nRUN chown www-data:www-data /var/www\nUSER www-data\nRUN git clone https://github.com/MISP/MISP.git\nWORKDIR /var/www/MISP\nRUN git checkout tags/$(git describe --tags `git rev-list --tags --max-count=1`)\nRUN git config core.filemode false\n\nWORKDIR /var/www/MISP/app/files/scripts\nRUN git clone https://github.com/CybOXProject/python-cybox.git\nRUN git clone https://github.com/STIXProject/python-stix.git\n\nWORKDIR /var/www/MISP/app/files/scripts/python-cybox\nRUN git checkout v2.1.0.12\nUSER root\nRUN python setup.py install\n\nUSER www-data\nWORKDIR /var/www/MISP/app/files/scripts/python-stix\nRUN git checkout v1.1.1.4\nUSER root\nRUN python setup.py install\n\nUSER www-data\nWORKDIR /var/www/MISP\nRUN git submodule init\nRUN git submodule update\nWORKDIR /var/www/MISP/app\nRUN php composer.phar config vendor-dir Vendor\nRUN php composer.phar install --ignore-platform-reqs\nUSER root\nRUN phpenmod redis\nUSER www-data\nRUN cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php\n\n# Fix permissions\nUSER root\nRUN chown -R www-data:www-data /var/www/MISP\nRUN chmod -R 750 /var/www/MISP\nRUN chmod -R g+ws /var/www/MISP/app/tmp\nRUN chmod -R g+ws /var/www/MISP/app/files\nRUN chmod -R g+ws /var/www/MISP/app/files/scripts/tmp\n\nRUN cp /var/www/MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp\n\n# Preconfigure setting for packages\nRUN echo \"postfix postfix/main_mailer_type string Local only\" | debconf-set-selections\nRUN echo \"postfix postfix/mailname string localhost.localdomain\" | debconf-set-selections\n\n# Redis Setup\nRUN sed -i 's/^\\(daemonize\\s*\\)yes\\s*$/\\1no/g' /etc/redis/redis.conf\n\n# Install PEAR packages\nRUN pear install Crypt_GPG >>/tmp/install.log\nRUN pear install Net_GeoIP >>/tmp/install.log\n\n# Apache Setup\nRUN cp /var/www/MISP/INSTALL/apache.misp.ubuntu /etc/apache2/sites-available/misp.conf\nRUN a2dissite 000-default\nRUN a2ensite misp\nRUN a2enmod rewrite\nRUN a2enmod headers\n\n# MISP base configuration\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/bootstrap.default.php /var/www/MISP/app/Config/bootstrap.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/database.default.php /var/www/MISP/app/Config/database.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/core.default.php /var/www/MISP/app/Config/core.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/config.default.php /var/www/MISP/app/Config/config.php\nRUN chown -R www-data:www-data /var/www/MISP/app/Config\nRUN chmod -R 750 /var/www/MISP/app/Config\n\n# Replace the default salt\nRUN sed -i -E \"s/'salt'\\s=>\\s'(\\S+)'/'salt' => '`openssl rand -base64 32|tr \"/\" \"-\"`'/\" /var/www/MISP/app/Config/config.php\n\n# Enable workers at boot time\nRUN chmod a+x /var/www/MISP/app/Console/worker/start.sh\nRUN echo \"sudo -u www-data bash /var/www/MISP/app/Console/worker/start.sh\" >>/etc/rc.local\n\n# Install templates & stuff\nWORKDIR /var/www/MISP/app/files\nRUN git clone https://github.com/MISP/misp-objects.git\nRUN git clone https://github.com/MISP/misp-galaxy.git\nRUN git clone https://github.com/MISP/misp-warninglists.git ./warninglists\nRUN git clone https://github.com/MISP/misp-taxonomies.git ./taxonomies\nRUN chown -R www-data:www-data misp-objects misp-galaxy warninglists taxonomies\n\n# Install MISP Modules\nWORKDIR /opt\nRUN apt-get install -y python3 python3-pip libjpeg-dev\nRUN git clone https://github.com/MISP/misp-modules.git\nWORKDIR /opt/misp-modules\nRUN pip3 install --upgrade --ignore-installed urllib3\nRUN pip3 install --upgrade --ignore-installed requests\nRUN pip3 install -I -r REQUIREMENTS\nRUN pip3 install -I .\nRUN echo \"sudo -u www-data misp-modules -s &\" >>/etc/rc.local\n\n# Supervisord Setup\nRUN echo '[supervisord]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'nodaemon = true' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '[program:postfix]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'process_name = master' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'directory = /etc/postfix' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'command = /usr/sbin/postfix -c /etc/postfix start' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'startsecs = 0' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'autorestart = false' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '[program:redis-server]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'command=redis-server /etc/redis/redis.conf' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '[program:apache2]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'command=/bin/bash -c \"source /etc/apache2/envvars && exec /usr/sbin/apache2 -D FOREGROUND\"' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '[program:resque]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'command=/bin/bash /var/www/MISP/app/Console/worker/start.sh' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'user = www-data' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'startsecs = 0' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'autorestart = false' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo '[program:misp-modules]' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'command=/bin/bash -c \"cd /opt/misp-modules/bin && /usr/bin/python3 misp-modules.py\"' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'user = root' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'startsecs = 0' >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo 'autorestart = false' >> /etc/supervisor/conf.d/supervisord.conf\n\n# Modify syslog configuration\nRUN sed -i -E 's/^(\\s*)system\\(\\);/\\1unix-stream(\"\\/dev\\/log\");/' /etc/syslog-ng/syslog-ng.conf\n\n# Add run script\nADD run.sh /run.sh\nRUN chmod 0755 /run.sh\n\n# Trigger to perform first boot operations\nRUN touch /.firstboot.tmp\n\n# Make a backup of /var/www/MISP to restore it to the local moint point at first boot\nWORKDIR /var/www/MISP\nRUN tar czpf /root/MISP.tgz .\n\nVOLUME /var/www/MISP\nEXPOSE 80\nENTRYPOINT [\"/run.sh\"]\n"
    },
    {
        "filename": "3859a7ad5d1adb175c653a33c87e05a582790faa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:latest\nMAINTAINER jbr.osama@gmail.com\n\nRUN apt-get update && apt-get -y upgrade  && \\\n    apt-get -y install git curl wget python-pip python-virtualenv apache2  && \\\n    pip install uwsgi && \\\n    curl -o /usr/local/bin/confd -sSL https://github.com/kelseyhightower/confd/releases/download/v0.11.0/confd-0.11.0-linux-amd64 && \\\n    chmod +x /usr/local/bin/confd && \\\n    a2dissite 000-default.conf && \\\n    echo \"Listen 8080\" > /etc/apache2/ports.conf && \\\n    adduser --home /app --shell /bin/bash --gecos \"\" --disabled-password app \n\nADD start.sh /app/\nADD diglett-apache.conf /etc/apache2/sites-enabled/\n\nRUN chown -R app:app /app && \\\n    chmod +x /app/start.sh\n\nUSER app\nRUN cd /app && \\\n    virtualenv --system-site-packages virtualenv && \\\n    cd virtualenv && \\\n    git clone git@github.com:OpenSooq/Diglett.git code && \\\n    cd code && source ../bin/activate && pip install -r requirements.txt\n\nEXPOSE 3030 8080\nENTRYPOINT [\"/app/start.sh\"]\n"
    },
    {
        "filename": "38f03e7c8d370085f6199f9b5066d6c6086518f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM django:latest\n\nARG BRANCH\nARG COMMIT\nARG REPO_SLUG\n\nENV STRONGSWAN_VERSION 5.4.0\n\nRUN mkdir /opt/strongSwan \\\n&& apt-get update \\\n&& apt-get install -y libgmp-dev libssl-dev wget iptables xl2tpd bzip2 make git module-init-tools build-essential vim > /dev/null 2>&1 \\\n&& pip install --upgrade pip \\\n&& wget http://download.strongswan.org/strongswan-$STRONGSWAN_VERSION.tar.bz2 > /dev/null 2>&1 \\\n&& tar xjvf strongswan-$STRONGSWAN_VERSION.tar.bz2 > /dev/null 2>&1 \\\n&& cd strongswan-$STRONGSWAN_VERSION \\\n&& ./configure --prefix=/usr --sysconfdir=/etc \\\n        --enable-vici \\\n        --enable-openssl \\\n        --enable-python-eggs \\\n\t\t--enable-eap-radius \\\n\t\t--enable-eap-identity \\\n\t\t--enable-eap-md5 \\\n\t\t--enable-eap-tls \\\n\t\t--enable-eap-ttls \\\n\t\t--enable-eap-peap \\\n\t\t--enable-eap-tnc \\\n\t\t--enable-eap-dynamic > /dev/null 2>&1 \\\n&& make -j > /dev/null 2>&1 \\\n&& make install > /dev/null 2>&1 \\\n&& cd / \\\n&& git clone --depth=50 --branch=${BRANCH} https://github.com/${REPO_SLUG}.git strongMan \\\n&& cd strongMan \\\n&& git checkout -qf ${COMMIT} \\\n&& pip install -r requirements.txt\n\nRUN cp -rf /strongswan-$STRONGSWAN_VERSION/testing/hosts/moon/etc/swanctl/* /etc/swanctl/ \\\n&& cp /strongswan-$STRONGSWAN_VERSION/testing/hosts/moon/etc/ipsec.secrets /etc/\n\nADD swanctl.conf /etc/swanctl/swanctl.conf\nADD strongswan.conf /etc/strongswan.conf\n\n\n\n"
    },
    {
        "filename": "39c74cf180d64026b84001f0a237f3fd367278dd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM tudorg/xgo-1.6\n\nMAINTAINER Tudor Golubenco <tudor@elastic.co>\n\n# Get libpcap binaries for linux\nRUN \\\n\tdpkg --add-architecture i386 && \\\n\tapt-get update && \\\n\tapt-get install -y libpcap0.8-dev\n\nRUN \\\n\tmkdir -p /libpcap && \\\n\tapt-get download libpcap0.8-dev:i386 && \\\n\tdpkg -x libpcap0.8-dev_*_i386.deb /libpcap/i386 && \\\n\tapt-get download libpcap0.8-dev && \\\n\tdpkg -x libpcap0.8-dev_*_amd64.deb /libpcap/amd64 && \\\n\trm libpcap0.8-dev*.deb\n\n\n# Get libpcap binaries for win\nENV WPDPACK_URL https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip\nRUN \\\n\t./fetch.sh $WPDPACK_URL f5c80885bd48f07f41833d0f65bf85da1ef1727a && \\\n\tunzip `basename $WPDPACK_URL` -d /libpcap/win && \\\n\trm `basename $WPDPACK_URL`\n\n# Add patch for gopacket.\nADD gopacket_pcap.patch /gopacket_pcap.patch\n\n# Add the wpcap.dll from the WinPcap_4_1_2.exe installer so that\n# we can generate a 64-bit compatible libwpcap.a.\nENV WINPCAP_DLL_SHA1 d2afb08d0379bd96e423857963791e2ba00c9645\nADD wpcap.dll /libpcap/win/wpcap.dll\nRUN \\\n    apt-get install mingw-w64-tools && \\\n    cd /libpcap/win && \\\n    echo \"$WINPCAP_DLL_SHA1 wpcap.dll\" | sha1sum -c - && \\\n    gendef /libpcap/win/wpcap.dll && \\\n    x86_64-w64-mingw32-dlltool --as-flags=--64 -m i386:x86-64 -k --output-lib /libpcap/win/WpdPack/Lib/x64/libwpcap.a --input-def wpcap.def && \\\n    rm wpcap.def wpcap.dll\n\n"
    },
    {
        "filename": "3b13dab347318f3c458ac82931013739095a5a12.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:16.04\nMAINTAINER kevthehermit (https://github.com/kevthehermit/VolUtility)\n\n# Version Vars\nENV YARA_VERSION        3.4.0\nENV SSDEEP_VERSION      2.13\n\n# Switch to user root\nUSER root\n\n# Install OS Dependancies\nRUN apt-get update && apt-get install -yq \\\n autoconf \\\n automake \\\n autopoint \\\n curl \\\n gettext \\\n git \\\n libimage-exiftool-perl \\\n libtool \\\n nano \\\n pkg-config \\\n python-dev \\\n python-pip \\\n sudo\n\n\n# Install Mongo\nRUN \\\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 && \\\necho \"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.2.list && \\\napt-get update && \\\napt-get install -yq mongodb-org\n\n# Install packages from source\n# Make Tmp Dir\nRUN mkdir ~/tmp_build\n\n# Install Yara\nRUN cd ~/tmp_build && \\\n curl -sSL https://github.com/plusvic/yara/archive/v$YARA_VERSION.tar.gz | \\\n tar -xzC . && \\\n cd yara-$YARA_VERSION && \\\n bash build.sh && \\\n make install && \\\n cd yara-python && \\\n python setup.py build && \\\n python setup.py install && \\\n cd ../.. && \\\n rm -rf yara-$YARA_VERSION && \\\n ldconfig\n\n# Install SSDEEP\nRUN cd ~/tmp_build &&\\\n curl -sSL http://sourceforge.net/projects/ssdeep/files/ssdeep-${SSDEEP_VERSION}/ssdeep-${SSDEEP_VERSION}.tar.gz/download | \\\n tar -xzC .  && \\\n cd ssdeep-${SSDEEP_VERSION} && \\\n ./configure && \\\n make install && \\\n pip install pydeep && \\\n cd .. && \\\n rm -rf ssdeep-${SSDEEP_VERSION}\n\n# Get the maxmind database for ip lookup\nRUN cd ~/tmp_build && \\\n curl -sSL http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz > GeoLite2-City.mmdb.gz && \\\n gzip -d GeoLite2-City.mmdb.gz && \\\n mkdir /usr/share/GeoIP/ && \\\n mv GeoLite2-City.mmdb /usr/share/GeoIP/\n\n# Install and Build libpff\nRUN cd ~/tmp_build && \\\n git clone https://github.com/libyal/libpff.git &&\\\n cd libpff/ && \\\n ./synclibs.sh && \\\n ./autogen.sh && \\\n ./configure --enable-python && \\\n make && \\\n make install && \\\n ldconfig\n\n# Install Volatility\nRUN cd ~/tmp_build &&\\\n git clone https://github.com/volatilityfoundation/volatility.git && \\\n cd volatility && \\\n python setup.py install\n\n# Create Volutility User\nRUN groupadd -r volutility && \\\n useradd -r -g volutility -d /home/volutility -s /sbin/nologin -c \"Volutility User\" volutility && \\\n usermod -a -G sudo volutility  && \\\n mkdir /home/volutility && \\\n chown -R volutility:volutility /home/volutility\n\n# Get VolUtility\nRUN cd /opt && \\\n git clone https://github.com/kevthehermit/VolUtility.git && \\\n chown -R volutility:volutility /opt/VolUtility\n\n# Install PIP Requirements.\nRUN cd /opt/VolUtility && \\\n pip install -r requirements.txt\n\n # Clean Up\nRUN rm -rf ~/tmp_build\nRUN apt-get remove -yq \\\n automake \\\n autopoint \\\n gettext \\\n autoconf \\\n gettext \\\n pkg-config \\\n libtool\nRUN sudo apt-get clean\n\n# Setup and Run\nUSER volutility\nWORKDIR /opt/VolUtility\nADD start.sh start.sh\nRUN mkdir ~/dbpath\nRUN chmod 755 ~/dbpath\nCMD /bin/bash /opt/VolUtility/start.sh\n"
    },
    {
        "filename": "28c7548c2316c1baa06b6b04eab40ac7f2541853.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM lablup/kernel-base:jail as jail-builder\nFROM lablup/kernel-base:hook as hook-builder\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM nvidia/cuda:8.0-cudnn7-runtime-ubuntu16.04\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED 1\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt update -y && \\\n    apt install -y \\\n        ca-certificates \\\n        wget \\\n        libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \\\n\tlibmpdec2 \\\n        libssl1.0.0 \\\n\tlibssl-dev \\\n        libncursesw5 libtinfo5 libreadline6 \\\n\tproj-bin \\\n        libgeos-dev \\\n        mime-support \\\n\tgcc g++ \\\n        libproj-dev libgeos-dev \\\t\n        libzmq3-dev libuv1\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n# Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n\n# Install CUDA-8.0 + cuDNN 7.3.1\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\n# Prepare for building PyTorch wheel\nRUN pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" && \\\n    pip install --no-cache-dir h5py && \\\n    pip install --no-cache-dir Cython && \\\n    pip install --no-cache-dir matplotlib bokeh && \\\n    pip install --no-cache-dir pyproj && \\\n    pip install --no-cache-dir Cartopy && \\\n    pip install --no-cache-dir torchvision && \\\n    pip install --no-cache-dir keras && \\\n    pip install --no-cache-dir ipython && \\\n    pip install --no-cache-dir pandas && \\\n    pip install --no-cache-dir seaborn && \\\n    pip install --no-cache-dir pillow && \\\n    pip install --no-cache-dir networkx cvxpy && \\\n    pip install --no-cache-dir scikit-learn scikit-image && \\\n    pip install --no-cache-dir scikit-image && \\\n    pip install --no-cache-dir pygments && \\\n    pip install --no-cache-dir jupyter && \\\n    rm -f /tmp/*.whl\n\n# Install PyTorch\nRUN pip install --no-cache-dir \\\n        https://download.pytorch.org/whl/cu80/torch-0.1.12.post1-cp36-cp36m-linux_x86_64.whl && \\\n    rm -rf /root/.cache\n\nRUN apt-get install -y libseccomp2 gosu && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists /var/cache/apt/archives && \\\n    ln -s /usr/sbin/gosu /usr/sbin/su-exec && \\\n    mkdir /home/work && chmod 755 /home/work; \\\n    mkdir /home/backend.ai && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nCOPY policy.yml /home/backend.ai/policy.yml\n\n# Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD /home/backend.ai/libbaihook.so\n\n# Install kernel-runner scripts package\nRUN pip install --no-cache-dir \"backend.ai-kernel-runner[python]~=1.4.0\"\n\n# Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR /home/backend.ai/.matplotlib\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n    && python /tmp/matplotlib-fontcache.py \\\n    && rm /tmp/matplotlib-fontcache.py\n\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000 2001 2002 2003\n\nLABEL ai.backend.nvidia.enabled=\"yes\" \\\n      com.nvidia.cuda.version=\"8.0.61\" \\\n      com.nvidia.volumes.needed=\"nvidia_driver\" \\\n      ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080\"      \n\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \\\n     \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0\n"
    },
    {
        "filename": "29127a514d945db794f4445e4352a1e956272806.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM linuxserver/baseimage\n\nMAINTAINER Sparklyballs <sparklyballs@linuxserver.io>\n\nENV APTLIST=\"build-essential git nodejs python sshpass wget\"\n\n#\u00a0install packages\nRUN curl -sL https://deb.nodesource.com/setup_0.12 | bash - && \\\napt-get install $APTLIST -qy && \\\nnpm install -g bower && \\\nnpm install -g gulp && \\\ngit clone https://github.com/furier/websync.git /app/websync && \\\n\n#\u00a0give user abc a home folder\nusermod -d /app abc && \\\n\n#\u00a0complete install of websync (use setuser, cannot be run as root)\nchown -R abc:abc /app  && \\\ncd /app/websync && \\\n/sbin/setuser abc npm install && \\\n/sbin/setuser abc bower install && \\\n/sbin/setuser abc gulp dist || true && \\\nrm -rf /app/websync/dist && \\\n/sbin/setuser abc gulp dist && \\\n\n# clean up \nrm -rf rm -rf /app/.*[a-z] && \\\napt-get clean && rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\n\n# adding custom files\nADD services/ /etc/service/\nADD init/ /etc/my_init.d/\nRUN chmod -v +x /etc/service/*/run && chmod -v +x /etc/my_init.d/*.sh && \\\n\n# configure websync\nmv /app/websync/dist/wsdata.json /defaults/wsdata.json\n\n# volumes and ports\nVOLUME /config\nEXPOSE 3000\n"
    },
    {
        "filename": "29c6553f21ea3cbd26dbdd4fb81d463830a2f87d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM ubuntu:xenial\nMAINTAINER dorukozturk <dorukozturk@kitware.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV LANG C.UTF-8\n\nRUN apt-get -y update -qq && \\\n    apt-get -y install locales && \\\n    locale-gen en_US.UTF-8 && \\\n    update-locale LANG=en_US.UTF-8 && \\\n    apt-get install -y build-essential cmake g++ libboost-dev libboost-system-dev \\\n    libboost-filesystem-dev libexpat1-dev zlib1g-dev libxml2-dev\\\n    libbz2-dev libpq-dev libgeos-dev libgeos++-dev libproj-dev \\\n    postgresql-server-dev-9.5 postgresql-9.5-postgis-2.2 postgresql-contrib-9.5 \\\n    apache2 php php-pgsql libapache2-mod-php php-pear php-db \\\n    php-intl git curl sudo \\\n    python-pip libboost-python-dev \\\n    osmosis && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /app\n\n# Configure postgres\nRUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.5/main/pg_hba.conf && \\\n    echo \"listen_addresses='*'\" >> /etc/postgresql/9.5/main/postgresql.conf\n\n# Nominatim install\nENV NOMINATIM_VERSION v3.0.1\nRUN git clone --recursive https://github.com/openstreetmap/Nominatim ./src\nRUN cd ./src && git checkout tags/$NOMINATIM_VERSION && git submodule update --recursive --init && \\\n    mkdir build && cd build && cmake .. && make\n\n# Osmium install to run continuous updates\nRUN pip install osmium\n\n# Apache configure\nCOPY local.php /app/src/build/settings/local.php\nCOPY nominatim.conf /etc/apache2/sites-enabled/000-default.conf\n\n# Load initial data\nARG PBF_DATA=http://download.geofabrik.de/europe/monaco-latest.osm.pbf\nRUN curl -L -f $PBF_DATA --create-dirs -o /app/src/data.osm.pbf\nRUN curl http://www.nominatim.org/data/country_grid.sql.gz > /app/src/data/country_osm_grid.sql.gz\nRUN service postgresql start && \\\n    sudo -u postgres psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='nominatim'\" | grep -q 1 || sudo -u postgres createuser -s nominatim && \\\n    sudo -u postgres psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='www-data'\" | grep -q 1 || sudo -u postgres createuser -SDR www-data && \\\n    sudo -u postgres psql postgres -c \"DROP DATABASE IF EXISTS nominatim\" && \\\n    useradd -m -p password1234 nominatim && \\\n    chown -R nominatim:nominatim ./src && \\\n    sudo -u nominatim ./src/build/utils/setup.php --osm-file /app/src/data.osm.pbf --all --threads 2 && \\\n    service postgresql stop\n\nEXPOSE 5432\nEXPOSE 8080\n\nCOPY start.sh /app/start.sh\nCMD /app/start.sh\n"
    },
    {
        "filename": "2a1448c4c6f080e034378605d2dbea3a7819e352.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM tensorflow/tensorflow  \n  \n#Maintainer  \nMAINTAINER Caocao <martin.mengdj@gmail.com>  \n  \nRUN \\  \nDEBIAN_FRONTEND=noninteractive apt-get update && \\  \nDEBIAN_FRONTEND=noninteractive apt-get -y install lrzsz unzip && \\  \nDEBIAN_FRONTEND=noninteractive apt-get clean && rm -rf /var/lib/apt/lists/*  \n  \nADD ./ /app  \nWORKDIR /app  \n  \nRUN chmod 755 run_app.sh  \nRUN pip install --upgrade pip  \nRUN pip install -r requirements.txt  \n  \nEXPOSE 80  \nCMD [\"run_app.sh\"]  \n\n"
    },
    {
        "filename": "0074c1f9330cee4600acd3b33efe858c155c7b42.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# -*- mode: dockerfile -*-\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n# Dockerfile to build MXNet for Android ARMv7\n\nFROM dockcross/base:latest\nMAINTAINER Pedro Larroy \"pllarroy@amazon.com\"\n\n# The cross-compiling emulator\nRUN apt-get update && apt-get install -y \\\n  qemu-user \\\n  qemu-user-static \\\n  unzip\n\nENV CROSS_TRIPLE=arm-linux-androideabi\nENV CROSS_ROOT=/usr/${CROSS_TRIPLE}\nENV AS=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-as \\\n    AR=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ar \\\n    CC=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-gcc \\\n    CPP=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-cpp \\\n    CXX=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-g++ \\\n    LD=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ld\n\nENV ANDROID_NDK_REVISION 15c\nRUN mkdir -p /build && \\\n    cd /build && \\\n    curl -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    unzip ./android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    cd android-ndk-r${ANDROID_NDK_REVISION} && \\\n    ./build/tools/make_standalone_toolchain.py \\\n      --stl=libc++ \\\n      --arch arm \\\n      --api 16 \\\n      --install-dir=${CROSS_ROOT} && \\\n    cd / && \\\n    rm -rf /build && \\\n    find ${CROSS_ROOT} -exec chmod a+r '{}' \\; && \\\n    find ${CROSS_ROOT} -executable -exec chmod a+x '{}' \\;\n\n\nENV DEFAULT_DOCKCROSS_IMAGE dockcross/android-arm\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG IMAGE\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\"\n\nENV CC /usr/arm-linux-androideabi/bin/arm-linux-androideabi-gcc\nENV CXX /usr/arm-linux-androideabi/bin/arm-linux-androideabi-g++\n\n# Build OpenBLAS\n# https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android\nRUN git clone https://github.com/xianyi/OpenBLAS.git && \\\n    cd OpenBLAS && \\\n    make -j$(nproc) TARGET=ARMV7 ARM_SOFTFP_ABI=1 HOSTCC=gcc NOFORTRAN=1 libs\n\nENV OPENBLAS_ROOT /work/OpenBLAS\nENV LIBRARY_PATH /work/OpenBLAS/lib/:/work/OpenBLAS/:$LIBRARY_PATH\nENV CPLUS_INCLUDE_PATH /work/OpenBLAS/include/:/work/OpenBLAS/:$CPLUS_INCLUDE_PATH\nWORKDIR /work\n\nENV CC /usr/arm-linux-androideabi/bin/arm-linux-androideabi-clang\nENV CXX /usr/arm-linux-androideabi/bin/arm-linux-androideabi-clang++\nENV BUILD_OPTS \"USE_BLAS=openblas USE_SSE=0 DMLC_LOG_STACK_TRACE=0 USE_OPENCV=0 USE_LAPACK=0\"\n\n# Build MXNet\nADD mxnet mxnet\nADD arm.crosscompile.android.mk /work/mxnet/make/config.mk\nRUN cd mxnet && \\\n    make -j$(nproc) $BUILD_OPTS\n\nWORKDIR /work/build/\nRUN cp /work/mxnet/lib/* .\n\n# TODO: Bring this into the new format"
    },
    {
        "filename": "020bafaefa2b734e28bdf0893c187bacabf40121.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM bravissimolabs/baseimage\nMAINTAINER Adam K Dean <adamkdean@googlemail.com>\n\n# Add Git and Node package sources\nRUN add-apt-repository -y ppa:git-core/ppa; \\\n    curl -sL https://deb.nodesource.com/setup | sudo bash -\n\n# Install packages\nRUN apt-get install -yq \\\n    git \\\n    expect-dev \\\n    nodejs\n\n# Update npm, then select specific version of Node.js via n\nRUN npm install -g npm && \\\n    npm install -g n; \\\n    n 0.12;\n\nADD bin/ /usr/local/bin\n\nCMD [\"bash\", \"/usr/local/bin/npm.sh\"]\n"
    },
    {
        "filename": "027330e2852f058ed64eefecc6ab8bba85e37225.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 7,
        "text": "FROM ubuntu:15.10\nRUN apt-get update\nRUN apt-get install -y software-properties-common \n\nRUN add-apt-repository ppa:neovim-ppa/unstable && \\\n    apt-get update && \\\n    locale-gen en_US.UTF-8 && \\\n    apt-get install -y neovim zsh httpie ssh git ruby htop curl gnupg2 \\\n            git-crypt apt-transport-https sudo python-pip  mercurial \\\n            make binutils bison gcc build-essential\n\n\nRUN useradd -m ryan && \\\n    echo \"ryan ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers && \\\n    chsh -s /bin/zsh ryan\n\n# Replace shell with bash so we can source files\nRUN rm /bin/sh && ln -s /bin/zsh /bin/sh\n\n# Install Docker so we can link it in\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D && \\\n    echo \"deb https://apt.dockerproject.org/repo ubuntu-wily main\" > /etc/apt/sources.list.d/docker.list && \\\n    apt-get update && apt-get install -y docker-engine\n\n\nADD files/ssh/main-id_rsa.pub /home/ryan/.ssh/authorized_keys\n\nRUN chown -R ryan:ryan /home/ryan/.ssh\n\n\n\n# Install Dotfiles\nADD . /home/ryan/.dotfiles\nUSER ryan\nRUN cd ~/.dotfiles && ./install.rb && \\\n    /bin/zsh ~/.dotfiles/zsh/load-antigen.zsh\n\nUSER root\nRUN chown -R ryan:ryan /home/ryan\nUSER ryan\n\n# Install nvm with node and npm\nENV NVM_DIR /home/ryan/.nvm\nENV NODE_VERSION 5.5\nENV IS_DOCKER true\n\nRUN curl https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash \\\n    && source $NVM_DIR/nvm.sh \\\n    && nvm install $NODE_VERSION \\\n    && nvm alias default $NODE_VERSION \\\n    && nvm use default \\\n    && npm -g install typescript tslint eslint nip \\\n    && cd ~/.dotfiles \\\n    && git reset --hard # Undo NVM install modifying zshrc\n\n# Install powerline for tmux\nRUN pip install --user powerline-status\n\nRUN cd /tmp && git clone https://github.com/tmux/tmux.git && cd tmux && \\\n    sudo apt-get install -y libevent-dev automake pkg-config libncurses5-dev && \\\n    git reset --hard 2.0 && \\\n    curl https://gist.githubusercontent.com/JohnMorales/0579990993f6dec19e83/raw/75b073e85f3d539ed24907f1615d9e0fa3e303f4/tmux-24.diff | git apply && \\\n    ./autogen.sh && ./configure && make && sudo make install && \\\n    rm -rf /tmp/tmux\n\n# Install nvim plugins\n\nRUN sudo apt-get install -y python-dev && \\\n    pip2 install --user neovim\n\n\nRUN mkdir /home/ryan/.config && \\\n    ln -s /home/ryan/.dotfiles/nvim /home/ryan/.config/nvim && \\\n    ln -s /home/ryan/.dotfiles/nvimrc /home/ryan/.config/nvim/init.vim && \\\n    curl -fLo ~/.nvim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \\\n    nvim +PlugInstall +qall --headless\n\n\nEXPOSE 22\nVOLUME /src\n\nADD start.sh /\n\nUSER root\nCMD [\"/start.sh\"]\n"
    },
    {
        "filename": "095a45c8d791b25f58bb3e7e2757e3330ee3cf47.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Dockerfile for ProxyHub\n#\n\nFROM ubuntu:14.04\nMAINTAINER kev <noreply@easypi.pro>\n\nRUN apt-get update\nRUN apt-get install -y build-essential pdnsd haproxy polipo nginx python\nRUN apt-get clean\n\nADD ./haproxy.cfg /etc/haproxy/\nADD ./pdnsd.conf /etc/\nADD ./polipo.conf /etc/polipo/config\nADD ./shadowsocks.json /etc/\nADD ./supervisord.conf /etc/supervisor/\nADD ./services.ini /etc/supervisor/conf.d/\n\nADD http://stedolan.github.io/jq/download/linux64/jq /usr/local/bin/\nADD https://bootstrap.pypa.io/get-pip.py /tmp/pkgs/\nADD https://download.libsodium.org/libsodium/releases/libsodium-1.0.2.tar.gz /tmp/pkgs/\nADD http://download.dnscrypt.org/dnscrypt-proxy/dnscrypt-proxy-1.4.3.tar.gz /tmp/pkgs/\n\nWORKDIR /tmp/pkgs/\nRUN chmod +x /usr/local/bin/jq\nRUN python get-pip.py\nRUN pip install supervisor shadowsocks\nRUN tar xzf libsodium-1.0.2.tar.gz && \\\n    cd libsodium-1.0.2 && \\\n    ./configure && \\\n    make && \\\n    make install\nRUN echo /usr/local/lib > /etc/ld.so.conf.d/local.conf && ldconfig\nRUN tar xzf dnscrypt-proxy-1.4.3.tar.gz && \\\n    cd dnscrypt-proxy-1.4.3 && \\\n    ./configure && \\\n    make && \\\n    make install\n\nWORKDIR /\nRUN rm -r /tmp/pkgs/\nEXPOSE 53/udp 53/tcp 80 1080 8123 9001\n\nCMD supervisord -n -c /etc/supervisor/supervisord.conf\n"
    },
    {
        "filename": "0a0b057dff151cc5af183d60e02aedd2f28e849f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM openlabs/docker-wkhtmltopdf:latest\nMAINTAINER Sharoon Thomas <sharoon.thomas@openlabs.co.in>\n\n# Install dependencies for running web service\nRUN apt-get install -y python-pip\nRUN pip install werkzeug executor gunicorn\n\nADD app.py /app.py\nEXPOSE 80\n\nENTRYPOINT [\"usr/local/bin/gunicorn\"]\n\n# Show the extended help\nCMD [\"-b\", \"0.0.0.0:80\", \"--log-file\", \"-\", \"app:application\"]\n"
    },
    {
        "filename": "3e68c28aa49c310e4b7d40f6041857856b85a75f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#\n# Interactive Brokers TWS & ib-controller\n# \n# docker container with VNC Xserver\n#\n# Adapted from a subset of:\n#       https://github.com/QuantConnect/Lean/blob/master/DockerfileLeanFoundation\n#\tLEAN Foundation Docker Container March-2017\n#\tCross platform deployment for multiple brokerages\t\n#\tIntended to be used in conjunction with DockerfileLeanAlgorithm. This is just the foundation common OS+Dependencies required.\n\n# Use base system for cleaning up wayward processes\nFROM phusion/baseimage:0.9.19\n\nMAINTAINER mkrueger@rstms.net\n\nEXPOSE 22\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n# Install OS Packages:\n# Misc tools for running Python.NET and IB inside a headless container.\nRUN \\\n  apt-get update\n\nRUN \\\n  apt-get install -y wget net-tools netcat unzip curl openssh-server git daemontools ucspi-tcp sudo\n\nRUN \\\n  apt-get install -y python-pip\n\nRUN \\\n  pip install --upgrade pip\n\nRUN \\\n  pip install virtualenv twisted redis\n\nRUN \\\necho 'America/New_York' >/etc/timezone && \\\nrm /etc/localtime && \\\ndpkg-reconfigure -f noninteractive tzdata\n\n# add user account and configure\nRUN useradd -m txtrader -Gsudo\nRUN sed -e \"s|^%sudo.*$|%sudo ALL=(ALL:ALL) NOPASSWD:ALL|\" -i /etc/sudoers\nRUN rm /etc/service/sshd/down\nCOPY keys/public_key /tmp/public_key\nRUN cat /tmp/public_key >> /root/.ssh/authorized_keys\nRUN mkdir /home/txtrader/.ssh\nRUN cat /tmp/public_key >> /home/txtrader/.ssh/authorized_keys \nRUN chown -R txtrader.txtrader /home/txtrader/.ssh\nRUN rm -f /tmp/public_key\n\nRUN \\\n  su -l txtrader -c ' \\\n  curl --location https://github.com/rstms/IbPy/tarball/master | tar zxfv - && \\\n  mv rstms-IbPy-* IbPy && \\\n  cd IbPy && \\\n  python setup.py sdist'\n\nRUN mkdir /var/svc.d\n\nRUN \\\n  su -l txtrader -c ' \\\n  curl --location https://github.com/rstms/txTrader/tarball/master | tar zxfv - && \\\n  mv rstms-txTrader-* txTrader && \\\n  cd txTrader && \\\n  sudo make config && \\\n  make build && \\\n  sudo make -e install'\n\nCOPY /keys/server_key /root/.ssh/txtrader\nCOPY /keys/server_host /root/txtrader_host\nCOPY /keys/server_user /root/txtrader_user\n\nRUN \\\n   mkdir /var/svc.d/sshrelay &&\\\n   mkdir /var/svc.d/sshrelay/log &&\\\n   mkdir /var/log/sshrelay\n    \nCOPY sshrelay.run /var/svc.d/sshrelay/run\nCOPY log.run /var/svc.d/sshrelay/log/run\n\nRUN \\\n  chmod +x /var/svc.d/sshrelay/run && \\\n  chmod +x /var/svc.d/sshrelay/log/run\n\nRUN \\\n  ssh-keyscan $(cat /root/txtrader_host) >/root/.ssh/known_hosts\n\nRUN update-service --add /var/svc.d/sshrelay\n"
    },
    {
        "filename": "404683d6e43b7f856c13bc5dc2b12b5ec589674b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM continuumio/miniconda\n\nMAINTAINER vsochat@stanford.edu\n\n## The container is provided on Docker Hub\n# https://hub.docker.com/r/opendrift/opendrift\n\n## Documentation for opendrift is here\n# https://github.com/opendrift/opendrift/wiki\n\nENV DEBIAN_FRONTEND noninteractive\nENV PATH /code/opendrift/opendrift/scripts:$PATH\n\n# Dependencies for opendrift\nRUN apt-get update && apt-get install -y build-essential \\\n                                         apt-utils \\ \n                                         unzip \\\n                                         vim \\\n                                         git \\\n                                         gfortran \\\n                                         libgeos-dev \\\n                                         gdal-bin && \\\n                                         ldconfig\n\nRUN pip install --upgrade pip\nRUN mkdir /code\nADD . /code\nWORKDIR /code\n\nRUN /opt/conda/bin/conda env create -f conda_python2.yml\nRUN /bin/bash -c '''. activate opendrift_p2 && \\\n    python setup.py develop && \\\n    echo \"source activate opendrift_p2\" > ~/.bashrc'''\n\nWORKDIR /code\n\n# Test\n# RUN /bin/bash -c \". activate opendrift_p2 && cd /code && ./testall\"\n"
    },
    {
        "filename": "4261fbf74e402166286ef0b63fe10cac66e749e6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Basic install of couchdb\n#\n#\n# Currently installs couchdb 1.3.1\n\nFROM ubuntu\nMAINTAINER Kimbro Staken\n\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get -y update\nRUN apt-get install -y g++\nRUN apt-get install -y erlang-dev erlang-manpages erlang-base-hipe erlang-eunit erlang-nox erlang-xmerl erlang-inets\n\nRUN apt-get install -y libmozjs185-dev libicu-dev libcurl4-gnutls-dev libtool wget\n\nRUN cd /tmp ; wget http://www.bizdirusa.com/mirrors/apache/couchdb/source/1.3.1/apache-couchdb-1.3.1.tar.gz\n\nRUN cd /tmp && tar xvzf apache-couchdb-1.3.1.tar.gz\nRUN apt-get install -y make\nRUN cd /tmp/apache-couchdb-* ; ./configure && make install\n\nRUN printf \"[httpd]\\nport = 5984\\nbind_address = 0.0.0.0\" > /usr/local/etc/couchdb/local.d/docker.ini\n\nADD ./usr-local-etc-couchdb-local.ini /usr/local/etc/couchdb/local.ini\n\nEXPOSE 5984\nCMD [\"/usr/local/bin/couchdb\"]\n\n"
    },
    {
        "filename": "4292c3b392ea86afcdc6e186aeedfe6f43c37245.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "#Docker Image for Open Comment Box\n\nFROM ubuntu\nMAINTAINER Arunoda Susiripala, arunoda.susiripala@gmail.com\n\nRUN echo deb http://archive.ubuntu.com/ubuntu precise universe >> /etc/apt/sources.list\nRUN apt-get update -y\n\n#install dependencies\nRUN apt-get -y install build-essential libssl-dev wget\n\n#configuration for node\nENV NODE_VERSION 0.10.21\nENV NODE_ARCH x64\n\n#installation node\nWORKDIR /tmp\nRUN wget http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$NODE_ARCH.tar.gz\nRUN tar xvzf node-v$NODE_VERSION-linux-$NODE_ARCH.tar.gz\nRUN rm -rf /opt/nodejs\nRUN mv node-v$NODE_VERSION-linux-$NODE_ARCH /opt/nodejs\n\nRUN ln -sf /opt/nodejs/bin/node /usr/bin/node\nRUN ln -sf /opt/nodejs/bin/npm /usr/bin/npm\n\n#install mongodb\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list\nRUN apt-get update -y\nRUN apt-get install mongodb-10gen=2.4.5\n\n#initialize system\nRUN mkdir -p /opt/ocb\nWORKDIR /opt/ocb\n\nRUN npm install -g node-gyp\n\n#downloading app\nRUN wget --no-check-certificate https://github.com/arunoda/open-comment-box/archive/v0.2.0.tar.gz\nRUN tar xvzf v0.2.0.tar.gz\nRUN mv open-comment-box-0.2.0 app\nRUN cd app && npm install\n\n#db setup\nRUN mkdir -p /data/db\n\n#copy running scripts\nADD start.sh /opt/ocb/start.sh\nENTRYPOINT [\"bash\", \"start.sh\"]\n"
    },
    {
        "filename": "447aada18cea97768904d71d7e8e3ba9b6d4c6e3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "# Build with:\n#   docker build --pull -t svxlink-debian-build .\n#\n# Run with:\n#   docker run -it --rm --hostname debian-build svxlink-debian-build\n#\n# For using sound inside the docker container add:\n#              --privileged -v /dev/snd:/dev/snd\n#              -e HOSTAUDIO_GID=$(stat -c \"%g\" /dev/snd/timer)\n#\n# To import your git config add (mileage may vary):\n#              -v ${HOME}/.gitconfig:/home/svxlink/.gitconfig:ro\n#\n# To use a specific git repositoty instead of the default one:\n#              -e GIT_URL=username@your.repo:/path/to/svxlink.git\n#\n# To build another branch than master:\n#              -e GIT_BRANCH=the_branch\n#\n# To use more than one CPU core when compiling:\n#              -e NUM_CORES=8\n#\n\nFROM debian\nMAINTAINER Tobias Blomberg <sm0svx@ssa.se>\n\n# Install required packages and set up the svxlink user\nRUN apt-get update && \\\n    apt-get -y install git cmake g++ make libsigc++-2.0-dev libgsm1-dev \\\n                       libpopt-dev tcl8.5-dev libgcrypt11-dev libspeex-dev \\\n                       libasound2-dev alsa-utils vorbis-tools libqt4-dev \\\n                       libopus-dev librtlsdr-dev curl sudo\n#RUN apt-get -y install groff doxygen\n\n# Install svxlink audio files\nRUN mkdir -p /usr/share/svxlink/sounds && \\\n    cd /usr/share/svxlink/sounds && \\\n    curl -LO https://github.com/sm0svx/svxlink-sounds-en_US-heather/releases/download/14.08/svxlink-sounds-en_US-heather-16k-13.12.tar.bz2 && \\\n    tar xvaf svxlink-sounds-* && \\\n    ln -s en_US-heather-16k en_US && \\\n    rm svxlink-sounds-*\n\n# Set up password less sudo for user svxlink\nADD sudoers-svxlink /etc/sudoers.d/svxlink\nRUN chmod 0440 /etc/sudoers.d/svxlink\n\nENV GIT_URL=https://github.com/sm0svx/svxlink.git \\\n    GIT_BRANCH=master \\\n    NUM_CORES=1\n\nRUN useradd -s /bin/bash svxlink\nADD build-svxlink.sh /home/svxlink/\nRUN chown -R svxlink.svxlink /home/svxlink\n\nADD entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "46befbe0676a541075fbc3afbf3e76fe6505760e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 7,
        "text": "FROM jupyter/jupyterhub:latest  \nMAINTAINER a504082002 <a504082002@gmail.com>  \n  \nRUN mkdir /build && cd /build  \nADD configs/openblas.conf /etc/ld.so.conf.d/openblas.conf  \nADD configs/* /build/  \n  \n# build openblas (clone from ogrisel/openblas)  \nRUN bash /build/build_openblas.sh  \n  \n# build numpy, scipy and sklearn (clone from ogrisel/sklearn-openblas)  \nRUN bash /build/build_sklearn.sh  \n  \n# build dependencies  \nRUN apt-get update -qq &&\\  \napt-get install -yq libfreetype6 libfreetype6-dev\\  \nlibpng12-0 libpng12-dev\\  \nlibpq-dev python3-dev\\  \ng++  \n  \nRUN pip3 install -r /build/requirements.txt  \n  \nENTRYPOINT [\"tini\", \"--\"]  \nCMD [\"jupyter\", \"notebook\"]  \n\n"
    },
    {
        "filename": "3da44597ecb09c178f94bacf2abc63b4647887bb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM pypy:2\nMAINTAINER Cory Benfield <lukasaoz@gmail.com>\n\nRUN echo deb http://httpredir.debian.org/debian jessie-backports main >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y -t jessie-backports libssl-dev\nRUN pip install -U setuptools\nRUN pip install -U pip\n\nRUN mkdir /certs\nADD src /python/src\nADD setup.py /python/setup.py\nADD requirements.txt requirements.txt\n\nRUN [\"pip\", \"install\", \"-r\", \"requirements.txt\"]\nRUN [\"pip\", \"install\", \"/python\"]\n\nCMD [\"twist\", \"certifiproxy\"]\n"
    },
    {
        "filename": "3dbc1016218f0dc4aead6ca1e77540aa46aea5de.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM balasys/zorpgpl  \n  \nMAINTAINER Szil\u00e1rd Pfeiffer \"coroner@pfeifferszilard.hu\"  \nRUN apt-get update  \nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y \\  \nopenssl \\  \n&& rm -rf /var/lib/apt/lists/*  \n  \nADD policy.py $ZORP_CONFIG_DIR/policy.py  \n  \nCOPY . /app/  \n  \nEXPOSE 443  \n\n"
    },
    {
        "filename": "3e24ac19c294516495bef0cc1a74469a7614ea17.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/xenial-amd64:2.30\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV UBUNTUIMAGE_VERSION=1.0+16.04ubuntu1\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git\n\nWORKDIR /tmp\nADD disable-sparse-check.patch /tmp\nRUN git clone --depth 1 --branch ${UBUNTUIMAGE_VERSION} https://github.com/CanonicalLtd/ubuntu-image \\\n && cd ubuntu-image \\\n && patch -p1 < /tmp/disable-sparse-check.patch \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && mkdir -p /snap/bin \\\n && ln -s /usr/bin/ubuntu-image /snap/bin/ubuntu-image\n\nRUN mknod /dev/loop0 b 7 0\nRUN echo \"ALL ALL=NOPASSWD: /snap/bin/ubuntu-image, /bin/mount, /bin/umount, /bin/cp\" >> /etc/sudoers.d/ubuntu-image \\\n && chmod 0440 /etc/sudoers.d/ubuntu-image\n\n# Install toolchins\nRUN apt-get install -y build-essential u-boot-tools lzop debootstrap \\\n    gcc-4.8 \\\n    gcc-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf \\\n    device-tree-compiler\n\n# change the default gcc to 4.8, since old kernel need old gcc.\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-5 50 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-5 50\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-4.8 100 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100\n\n# multiarch.\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y libc6:i386\n\nRUN apt-get remove --purge -y devscripts equivs\nRUN apt-get autoremove -y\nRUN apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /build\n"
    },
    {
        "filename": "3f21c8f9bc610d241acd49113203b9d73ad74c20.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\nMAINTAINER Benjamin Wild <b.w@fu-berlin.de>\n\n# makes sure deb-src in sources.list is not commented out \nRUN sed -i 's/^# deb-src/deb-src/' /etc/apt/sources.list\n\n\nRUN apt-get update && apt-get install -y --assume-yes --install-recommends \\\n        python \\\n        python-dev \\\n        python3 \\\n        python3-dev \\\n        python3-six \\\n        python3-tz \\\n        python3-babel \\\n        python3-roman \\\n        python3-docutils \\\n        python3-markupsafe \\\n        python3-jinja2 \\\n        python3-numpy \\\n        python3-pygments \\\n        checkinstall \\\n        git \\\n        build-essential \\\n        g++-4.9 \\\n        g++ \\\n        cmake \\\n        wget \\\n        libopenblas-dev \\\n        libavformat-dev \\\n        libavcodec-dev \\\n        libavdevice-dev \\\n        libavutil-dev \\\n        libswscale-dev \\\n        libavresample-dev \\\n        libavcodec-extra \\\n        libav-tools \\\n        qtbase5-dev \\\n        pkg-config \\\n        libbz2-dev \\\n        && rm -rf /var/lib/apt/lists\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 20 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 20 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 && \\\n    update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 && \\\n    update-alternatives --set cc /usr/bin/gcc && \\\n    update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30 && \\\n    update-alternatives --set c++ /usr/bin/g++\n\nRUN apt-get update && apt-get build-dep -y --assume-yes --no-install-recommends \\\n        libopencv-dev \\\n        libboost-all-dev && \\\n    rm -rf /var/lib/apt/lists\n\nRUN mkdir -p /tmp/source && \\\n    cd /tmp/source && \\\n    git clone --branch 3.1.0 --depth 1 https://github.com/Itseez/opencv.git && \\\n    mkdir -p /tmp/build/opencv && \\\n    cd /tmp/build/opencv && \\\n    cmake -DCMAKE_BUILD_TYPE=RELEASE \\\n          -DCMAKE_INSTALL_PREFIX=/usr/ \\\n          -DWITH_CUDA=OFF \\\n          -DWITH_CUFFT=OFF \\\n          -DWITH_CUBLAS=OFF \\\n          -DBUILD_opencv_java=OFF \\\n          -DBUILD_TESTS=OFF \\\n          -DBUILD_PERF_TESTS=OFF \\\n          -DBUILD_EXAMPLES=OFF \\\n          -DPYTHON_EXECUTABLE=/usr/bin/python3 \\\n          /tmp/source/opencv && \\\n    make -j `nproc`\n\nRUN cd /tmp/build/opencv && checkinstall\n\n\nRUN cd /tmp/source && \\\n    wget https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.bz2/download?use_mirror=netcologne -O boost.tar.bz2 && \\\n    tar -xf boost.tar.bz2 && \\\n    ls && \\\n    cd boost_1_61_0 && \\\n    ls && \\\n    ./bootstrap.sh --prefix=/usr --with-python=/usr/bin/python3\n\nRUN cd /tmp/source/boost_1_61_0 && \\\n    ./b2 -j `nproc` install\n\nRUN apt-get update && apt-get install -y --assume-yes --install-recommends \\\n        python3-scipy \\\n        python3-setuptools \\\n        python3-pip \\\n        python3-nose \\\n        python3-pytest \\\n        python3-sklearn \\\n        python3-skimage \\\n        python3-h5py \\\n        python3-matplotlib \\\n        python3-seaborn \\\n        python3-cairocffi \\\n        tmux \\\n        gdb \\\n        capnproto \\\n        vim \\\n        vim-nox \\\n        libgflags-dev \\\n        libzmqpp-dev \\\n        libhdf5-dev \\\n        libhdf5-cpp-11 \\\n        hdf5-tools \\\n        libgoogle-glog-dev \\\n        jq \\\n        sshfs \\\n        zsh && \\\n    rm -rf /var/lib/apt/lists\n\nRUN pip3 install \\\n    Theano \\\n    jupyter \\\n    xgboost \\\n    pytest-cov \\\n    pytest-benchmark \\\n    pytest-flake8 \\\n    shyaml \\\n    more_itertools \\\n    scikit-image \\\n    click \\\n    pandas\n\nRUN pip3 install git+https://github.com/berleon/keras.git@losses#egg=Keras\nRUN pip3 install git+https://github.com/BioroboticsLab/diktya.git@c21788bc0fd51f16f920d1ee0f3ae6c88b183ad1#egg=diktya\nRUN pip3 install git+https://github.com/BioroboticsLab/bb_binary.git@c724a61d440878d6a44a43e1523c1cc8fb7c7de9#egg=bb-binary\nRUN pip3 install git+https://github.com/BioroboticsLab/bb_pipeline.git@fd74cbd8660d30a28f2e8e23fe4c0863b5b531c6#egg=bb-pipeline\nRUN pip3 install git+https://github.com/berleon/cfg.git@9484201fe0f80cb39fd26d7193477e400776d785#egg=cfg\n\nRUN git clone https://github.com/berleon/pybeesgrid.git /opt/pybeesgrid && \\\n    cd /opt/pybeesgrid && export PIP=pip3 && ./build_and_install.sh\n\nRUN ldconfig    # otherwise the cuda libaries are not found\n\nRUN locale-gen en_US.UTF-8  # fix utf-8 encoding\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n"
    },
    {
        "filename": "405a9b7a25df12c1d65dab41be059cc54d7a9b2d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER  Vyacheslav Murashkin <mvjacheslav@gmail.com>\n\nRUN apt-get update && apt-get -y install curl git-core\n\n# PYTHON3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\nRUN apt-get -y install build-essential python3-dev python3-setuptools python3-distutils-extra \nRUN easy_install3 pip\n\nRUN pip3 install --upgrade pip\nRUN pip3 install --upgrade awscli \\\n                           jupyter \\\n                           matplotlib \\\n                           mrjob \\\n                           tweepy \\\n                           numpy \\\n                           sklearn \\\n                           scipy\n\n# JAVA\nENV JAVA_VER 8\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\n\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' >> /etc/apt/sources.list && \\\n    echo 'deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' >> /etc/apt/sources.list && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 && \\\n    apt-get update && \\\n    echo oracle-java${JAVA_VER}-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections && \\\n    apt-get install -y --force-yes --no-install-recommends oracle-java${JAVA_VER}-installer oracle-java${JAVA_VER}-set-default && \\\n    apt-get clean && \\\n    rm -rf /var/cache/oracle-jdk${JAVA_VER}-installer\n\n# SPARK\nARG SPARK_ARCHIVE=http://d3kbcqa49mib13.cloudfront.net/spark-2.1.0-bin-hadoop2.7.tgz\nRUN curl -s $SPARK_ARCHIVE | tar -xz -C /usr/local/\n\nENV SPARK_HOME /usr/local/spark-2.1.0-bin-hadoop2.7\nENV PATH $SPARK_HOME/bin:$PATH\nENV PYTHONPATH $SPARK_HOME/python:$SPARK_HOME/python/build:$PYTHONPATH\nENV PYTHONPATH $SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$PYTHONPATH\n\nRUN echo \"#!/bin/bash \\n\\\naws emr create-cluster --release-label emr-5.5.0\\\n  --name 'emr-5.5.0 sparklyr + jupyter cli example'\\\n  --applications Name=Hadoop Name=Hive Name=Spark Name=Pig Name=Tez Name=Ganglia Name=Presto\\\n  --ec2-attributes KeyName=\\${1},InstanceProfile=EMR_EC2_DefaultRole\\\n  --service-role EMR_DefaultRole\\\n  --instance-groups\\\n    InstanceGroupType=MASTER,InstanceCount=1,InstanceType=c3.4xlarge\\\n    InstanceGroupType=CORE,InstanceCount=4,InstanceType=c3.4xlarge\\\n  --region us-east-1\\\n  --log-uri s3://\\${2}/emr-logs/\\\n  --bootstrap-actions Name='Install Jupyter notebook',Path='s3://aws-bigdata-blog/artifacts/aws-blog-emr-jupyter/install-jupyter-emr5.sh',\\\nArgs=[--ds-packages,--ml-packages,--python-packages,'matplotlib tweepy sklearn scipy',--port,8880,--password,jupyter,--jupyterhub,--jupyterhub-port,8001,--cached-install,--notebook-dir,s3://\\${2}/notebooks/,--copy-samples]\" > /usr/local/bin/create-emr-cluster\n\nRUN chmod +x /usr/local/bin/create-emr-cluster\n\n# USER\nRUN useradd --create-home --shell /bin/bash student\nUSER student\n\n# GITHUB\nRUN cd /home/student && git clone https://github.com/a4tunado/lectures-hse-spark.git\n\nEXPOSE 4040 6066 7077 8080 8888\n\nWORKDIR /home/student/lectures-hse-spark\n\nCMD jupyter notebook --ip 0.0.0.0 --port 8888 --no-browser --NotebookApp.token=''\n\n"
    },
    {
        "filename": "40857a64e1c40c1c373b4d64e4b5b151dccd5a1f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM betacz/baseimage-zh  \nMAINTAINER Beta CZ <hlj8080@gmail.com>  \n  \nENV HOME /root  \n  \n# Use baseimage-docker's init system.  \nCMD [\"/sbin/my_init\"]  \n  \n# ruby 2.1.3  \n# From: https://github.com/docker-library/ruby/blob/master/2.1/Dockerfile  \nRUN apt-get update && apt-get install -y curl \\  \nprocps\\  \nbuild-essential \\  \nzlib1g-dev \\  \nlibssl-dev \\  \nlibreadline6-dev \\  \nlibyaml-dev  \n  \nENV RUBY_MAJOR 2.1  \nENV RUBY_VERSION 2.1.3  \nADD http://cache.ruby-lang.org/pub/ruby/2.1/ruby-$RUBY_VERSION.tar.gz /tmp/  \nRUN cd /tmp && \\  \ntar -xzf ruby-$RUBY_VERSION.tar.gz && \\  \ncd ruby-$RUBY_VERSION && \\  \n./configure && \\  \nmake && \\  \nmake install && \\  \ncd .. && \\  \nrm -rf ruby-$RUBY_VERSION && \\  \nrm -f ruby-$RUBY_VERSION.tar.gz  \n  \n# Set the gem sources to mirrors.aliyun.com/rubygems/  \nRUN gem sources --remove https://rubygems.org/  \nRUN gem sources -a http://mirrors.aliyun.com/rubygems/  \n  \n# skip installing gem documentation  \nRUN echo 'gem: --no-rdoc --no-ri' >> ~/.gemrc  \n  \nRUN gem install bundler  \n  \n# workaround for $HOME  \nRUN echo /root > /etc/container_environment/HOME  \n  \n# Clean up APT when done.  \nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n\n"
    },
    {
        "filename": "409092350badb17612f5450a7c9acd138946dec4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Jeremy Magland\n\n# Python3\nRUN apt-get update && \\\n    apt-get install -y \\\n    python3 python3-pip\n\n# Python3 packages\nRUN pip3 install --upgrade numpy\nRUN pip3 install --upgrade pybind11 cppimport\nRUN pip3 install --upgrade scipy\nRUN pip3 install --upgrade sklearn\nRUN pip3 install --upgrade numpydoc\n\nRUN apt-get update && apt-get install -y fftw3-dev\n\nADD . /package\n\n# Build\nWORKDIR /package\nRUN basic/basic.mp spec > basic.spec\nRUN drift/drift.mp spec > drift.spec\nRUN synthesis/synthesis.mp spec > synthesis.spec\n"
    },
    {
        "filename": "41d3e30c24c70c4ef63f92f564f41c7520098289.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Jonathan Cran <jcran@intrigue.io>\n\nRUN apt-get update -qq && apt-get -y upgrade && \\\n\tapt-get -y install libxml2-dev libxslt-dev zmap nmap sudo default-jre \\\n\tlibsqlite3-dev sqlite3 git gcc g++ make libpcap-dev zlib1g-dev curl \\\n\tlibcurl4-openssl-dev libpq-dev wget libgdbm-dev \\\n\tlibncurses5-dev automake libtool bison libffi-dev libgmp-dev \\\n\tsoftware-properties-common bzip2 gawk libreadline6-dev libyaml-dev pkg-config \\\n\tredis-server net-tools clang\n\n# set up postgres\nRUN sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list'\nRUN wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -\nRUN sudo apt-get update\nRUN sudo apt-get -y install postgresql postgresql-contrib\n\n# Set up nginx?\n# TODO\n\n# Masscan build and installation\nWORKDIR /usr/share\nRUN git clone https://github.com/robertdavidgraham/masscan\nWORKDIR /usr/share/masscan\nRUN make -j 3 && make install\n\n# create an app user (would require us setting up sudo)\n#RUN useradd -ms /bin/bash app\n#USER app\n\n# Install rbenv and ruby-build\nWORKDIR /root\nRUN git clone https://github.com/sstephenson/rbenv.git /root/.rbenv\nRUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build\nRUN git clone https://github.com/rbenv/rbenv-default-gems.git /root/.rbenv/plugins/rbenv-default-gems\nRUN /root/.rbenv/plugins/ruby-build/install.sh\nENV PATH /root/.rbenv/bin:$PATH\n#RUN echo 'eval \"$(rbenv init -)\"' >> /etc/profile.d/rbenv.sh\nRUN echo 'eval \"$(rbenv init -)\"' >> .bashrc\n\n# Install multiple versions of ruby\nENV CONFIGURE_OPTS --disable-install-doc\nRUN rbenv install 2.4.0\nRUN rbenv global 2.4.0\n\n# Fix an rbenv path issue\nRUN echo export PATH=/root/.rbenv/shims:$PATH >> /etc/profile.d/rbenv.sh\nRUN echo export PATH=/root/.rbenv/shims:$PATH >> .bashrc\n\n# Install the deps\n# https://medium.com/@fbzga/how-to-cache-bundle-install-with-docker-7bed453a5800#.f2hrjsvnz\nCOPY Gemfile* /tmp/\nWORKDIR /tmp\nENV BUNDLE_JOBS=12\nRUN /bin/bash -l -c \"gem install bundler\"\nRUN /bin/bash -l -c \"bundle config --global silence_root_warning 1\"\nRUN /bin/bash -l -c \"bundle install --system\"\n\n# get intrigue-core code\nRUN /bin/bash -l -c \"rm -rf /core && mkdir -p /core\"\nADD . /core/\n\n# check networks\n#RUN /bin/bash -l -c \"apt-get install net-tools && ifconfig && netstat -lnt\"\n\n# Migrate!\nWORKDIR /core\n\n# Ensure we listen on all ipv4 interfaces, and background the file\nRUN cp /core/config/puma.rb.default /core/config/puma.rb\nRUN sed -i \"s/tcp:\\/\\/127.0.0.1:7777/tcp:\\/\\/0.0.0.0:7777/g\" /core/config/puma.rb\nRUN sed -i \"s/daemonize true/daemonize false/g\" /core/config/puma.rb\n\n# Expose a port\nEXPOSE 7777\n\n# Set up the service file\nRUN cp /core/util/control.sh.default /core/util/control.sh\nRUN sed -i \"s/\\/path\\/to\\/install\\/directory/\\/core/g\" /core/util/control.sh\nRUN ln -s /core/util/control.sh /etc/init.d/intrigue\n\n# Configure postgres\nRUN /bin/bash -l -c \"sed -i 's/md5/trust/g' /etc/postgresql/9.6/main/pg_hba.conf\"\n\n# start the app (also migrates DB)\nCMD /bin/bash -l -c \"PATH=/root/.rbenv/shims:$PATH && service postgresql start && service redis-server start && su - postgres -c 'createuser -d -w intrigue && createdb intrigue_dev' && service intrigue start\"\n\n#ENTRYPOINT \"/bin/bash\""
    },
    {
        "filename": "4202ee00605fc451083f70d8ddbd9fef54d38ed1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Eric Windisch '2014\n# Forked from code by original author: Paul Czarkowski\n\nFROM ubuntu:trusty\nMAINTAINER Eric Windisch \"ewindisch@docker.com\"\n\nEXPOSE 80 5000 8773 8774 8776 9292\n# Set DEBIAN_FRONTEND to avoid warning like \"debconf: (TERM is not set, so the dialog frontend is not usable.)\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# Install Docker\nRUN apt-get update; apt-get install -qqy apt-transport-https; apt-key adv --keyserver \"hkp://keyserver.ubuntu.com:80\" --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9; \\\n    echo 'deb http://get.docker.io/ubuntu docker main' > /etc/apt/sources.list.d/docker.list; \\\n    apt-get update; \\\n    apt-get install -qqy lxc-docker\n\n# Install utilities\nRUN apt-get -qqy install git socat curl sudo vim wget net-tools\n\n# Install apparmor\nRUN apt-get -qqy install apparmor\n\n# Extra requirements for pip-requirements\nRUN apt-get install -qqy libffi-dev libkrb5-dev libev-dev libvirt-dev libsqlite3-dev libxml2-dev libxslt-dev \\ \n    libpq-dev libssl-dev libyaml-dev\n\n\n# Configure and install MySQL\nRUN echo 'mysql-server mysql-server/root_password password devstack' | debconf-set-selections; \\\n    echo 'mysql-server mysql-server/root_password_again password devstack' | debconf-set-selections; \\\n    apt-get -qqy install mysql-server\n\n# Install RabbitMQ\nRUN apt-get -qqy install rabbitmq-server\n\n# Copy in docker images\nRUN docker daemon -b none -s vfs & sleep 1; docker pull cirros\n\n# Setup devstack user\nRUN mkdir -p /opt; \\\n    useradd -m -s /bin/bash -d /opt/stack devstack && \\\n    usermod -a -G docker devstack\nADD devstack.sudo /etc/sudoers.d/devstack\nRUN chown root:root /etc/sudoers.d/devstack\n\n# Local scripts\nADD scripts /opt/dockenstack/bin\nRUN chmod 755 /opt/dockenstack/bin/*\n\n# Install devstack scripts\nRUN git clone https://github.com/openstack-dev/devstack /devstack\n\n# Install prereq packages.\nRUN /devstack/tools/install_prereqs.sh\n\n# Pre-download all \"NOPRIME\" packages\nRUN /bin/bash /opt/dockenstack/bin/apt-cache-devstack\n\n# Install/configure dbus for libvirt (only needed if using libvirt drivers, not docker)\n# creates symlink to /usr/bin due to bug in saucy's init script for dbus.\nRUN apt-get install -q -y dbus; \\\n    ln -s /bin/dbus-daemon /usr/bin/dbus-daemon\n\n# Mask python-six because the apt package can conflict with the pypi version.\nRUN apt-get remove -q -y python-six\n\n# python-pip just became collatoral damage.  reinstall it.\nRUN apt-get install -q -y python-pip\n\n# Install six from pip before getting from global-requirements (due to bugs...)\nRUN pip install six\n\n# Install all pip requirements\nRUN pip install -r https://raw.github.com/openstack/requirements/master/global-requirements.txt\nRUN pip install -r https://raw.github.com/openstack/tempest/master/requirements.txt\n\n# Pre-checkout git repos\nRUN su devstack -c '/bin/bash /opt/dockenstack/bin/openstack-git-checkout'\n\nRUN git clone https://github.com/stackforge/nova-docker /opt/stack/nova-docker\nWORKDIR /opt/stack/nova-docker\nRUN cp contrib/devstack/extras.d/70-docker.sh /devstack/extras.d/; \\\n    cp contrib/devstack/lib/nova_plugins/hypervisor-docker /devstack/lib/nova_plugins/;\n\nWORKDIR /devstack\nADD localrc /devstack/localrc\nADD localrc.d /devstack/localrc.d\n\nWORKDIR /\n# Fix ownership of all files\nRUN chown -R devstack /devstack\n\nCMD [\"/opt/dockenstack/bin/start\"]\n"
    },
    {
        "filename": "420e2ff1290395565388861540d534e73f9669fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM badele/debian-mybase  \nMAINTAINER Bruno Adel\u00e9 \"bruno@adele.im\"  \n# Upgrade the distribution  \nRUN apt-get update  \nRUN apt-get -yf upgrade  \nRUN apt-get -yf dist-upgrade  \n  \n# Requirement package  \nRUN apt-get -y install curl  \n  \n# Install nodejs  \nRUN curl --silent --location https://deb.nodesource.com/setup_0.12 | bash -  \nRUN apt-get install -y nodejs build-essential  \n  \n# Clean the cache and unused packages  \nRUN apt-get clean  \nRUN apt-get autoremove  \n  \n# Configure app nodejs server  \nWORKDIR /srv/nodejs/  \nADD files/srv/hello/hello.js hello/  \n  \nEXPOSE 8080  \nCMD node hello/hello.js  \n\n"
    },
    {
        "filename": "423feafc37bf73332cd303481255d8b5e4b0bb54.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nginx\nMAINTAINER JianyingLi <lijy91@foxmail.com>\n\nRUN apt-get update && apt-get install -y sudo curl bzip2 git vim gnupg\nRUN curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -\nRUN apt-get install -y nodejs && apt-get clean\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\n\nRUN npm install -g vue-cli bower\n\nCOPY ./nginx /etc/nginx\n\nWORKDIR /app\n\nCOPY . /app/\nRUN npm install\nRUN bower install --allow-root --force\n\nRUN npm run build\n\nRUN cp -R /app/dist/*  /usr/share/nginx/html\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
    },
    {
        "filename": "428844e31fe78cfde2de8d1590b6fcc35e1a605a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# vistalab/dcm-convert\n# \n# Use Scitran Data to convert raw DICOM data (tgz) from Siemens or GE to NIfTI.\n# See http://github.com/scitran/data for source code.\n#\n# Example usage:\n#   docker run --rm -ti \\\n#        -v /path/to/dicom/data:/data \\\n#        vistalab/dcm-convert \\\n#        /data/input.tgz \\\n#        /data/outprefix\n#\n\nFROM ubuntu-debootstrap:trusty\n\nMAINTAINER Michael Perry <lmperry@stanford.edu>\n\n# Install dependencies\nRUN apt-get update && apt-get -y install python-dev \\\n   python-virtualenv \\\n   git \\\n   libjpeg-dev \\\n   zlib1g-dev\n\n# Link libs: pillow jpegi and zlib support hack\nRUN ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib\nRUN ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib\n\n# Install scitran.data dependencies\nRUN pip install \\\n    numpy==1.9.0 \\\n    pytz \\\n    pillow \\\n    git+https://github.com/scitran/pydicom.git@0.9.9_value_vr_mismatch \\\n    git+https://github.com/nipy/nibabel.git@3bc31e9a6191fc54667b3387ed5dfaced46bf755 \\\n    git+https://github.com/moloney/dcmstack.git@6d49fe01235c08ae63c76fa2f3943b49c9b9832d \\\n    git+https://github.com/scitran/data.git@2c420ab5d84f311c1480731c67c6a6fb7012c511\n\n# Clone scripts\nRUN git clone https://github.com/scitran/scripts.git /root/scripts \\\n    && cd /root/scripts \\\n    && git reset --hard fd6afcc90b02eab8372541475d2caa8b40d3bee6\n\nCOPY ./run ./scripts/run\n\nENTRYPOINT [\"/scripts/run\"]\n"
    },
    {
        "filename": "4295d3a31f1fa9981ac43d4f817dfd026fbfb782.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to use to Ubuntu\nFROM ubuntu:12.04\n\nMAINTAINER Igor Katson <igor.katson@gmail.com>\n\nRUN apt-get update -y\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y wget supervisor unzip ca-certificates\n\nRUN echo 'deb http://repo.acestream.org/ubuntu/ precise main' > /etc/apt/sources.list.d/acestream.list\nRUN wget -q -O - http://repo.acestream.org/keys/acestream.public.key | apt-key add -\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -y\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y acestream-engine vlc-nox python-gevent\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /var/log/supervisor\n\nRUN adduser --disabled-password --gecos \"\" tv\n\nRUN cd /tmp/ && wget https://github.com/ValdikSS/aceproxy/archive/6dff4771c3.zip -O master.zip\nRUN cd /tmp/ && unzip master.zip -d /home/tv/\nRUN mv /home/tv/aceproxy-* /home/tv/aceproxy-master\n\nRUN echo 'root:password' |chpasswd\n\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nADD start.sh /start.sh\nRUN chmod +x /start.sh\n\nEXPOSE 22 8000 62062\n\nENTRYPOINT [\"/start.sh\"]\n"
    },
    {
        "filename": "42a1a301be3d8e2fa80d126e2b79a503f7c6bc7d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER  Michael Richardson <michael.richardson@digital.gov.au>\n\nRUN apt-get update && apt-get upgrade -y && apt-get install -y wget build-essential\n\nRUN wget -q -O /usr/bin/confd https://github.com/kelseyhightower/confd/releases/download/v0.11.0/confd-0.11.0-linux-amd64 && \\\nchmod +x /usr/bin/confd\n\nRUN wget -q http://repositories.sensuapp.org/apt/pubkey.gpg -O- | apt-key add - && \\\necho \"deb     http://repositories.sensuapp.org/apt sensu main\"  | tee /etc/apt/sources.list.d/sensu.list && \\\napt-get update && \\\napt-get -y install sensu\n\n# Some basic defaults for local development\nENV RABBITMQ_HOST=sensu-server RABBITMQ_PORT=5672 RABBITMQ_USER=sensu RABBITMQ_PASSWORD=sensu RABBITMQ_VHOST=sensu\n\nRUN /opt/sensu/embedded/bin/gem install sensu-plugins-http\n\nADD files/sensu-conf.d /etc/sensu/conf.d\nADD files/confd /etc/confd\nADD files/go.sh /go.sh\n\nCMD [\"/go.sh\"]\n"
    },
    {
        "filename": "42ddd62fad732daaa5b2ff26678551ae71b4a37c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#latest=8.1   wheezy=7.8\nFROM    debian:7.9\n#FROM    supermy/docker-debian:7\n\nMAINTAINER supermy <springclick@gmail.com>\n\nRUN sed -i '1,3d'   /etc/apt/sources.list \\\n    && echo '#hello'>> /etc/apt/sources.list \\\n    && sed -i '1a \\\n    deb http://mirrors.163.com/debian/ wheezy main non-free contrib \\n \\\n    deb http://mirrors.163.com/debian/ wheezy-proposed-updates main contrib non-free \\n \\\n    deb http://mirrors.163.com/debian-security/ wheezy/updates main contrib non-free \\n \\\n    deb-src http://mirrors.163.com/debian/ wheezy main non-free contrib \\n \\\n    deb-src http://mirrors.163.com/debian/ wheezy-proposed-updates main contrib non-free \\n \\\n    deb-src http://mirrors.163.com/debian-security/ wheezy/updates main contrib non-free \\n \\\n    ' /etc/apt/sources.list\n\n# sohu \u66f4\u65b0\u670d\u52a1\u5668\uff1a\n#RUN sed -i '1a \\\n#    deb http://mirrors.sohu.com/debian/ wheezy main non-free contrib  \\\n#    deb http://mirrors.sohu.com/debian/ wheezy-proposed-updates main non-free contrib \\\n#    deb http://mirrors.sohu.com/debian-security/ wheezy/updates main contrib non-free \\n \\\n#    deb-src http://mirrors.sohu.com/debian/ wheezy main non-free contrib \\\n#    deb-src http://mirrors.sohu.com/debian/ wheezy-proposed-updates main non-free contrib \\\n#    deb-src http://mirrors.sohu.com/debian-security/ wheezy/updates main contrib non-free \\n \\\n#    ' /etc/apt/sources.list\n\n\n\nRUN apt-get -qqy update && \\\n    apt-get -qqy install gcc libpcre3 libpcre3-dev openssl libssl-dev make wget libreadline-dev libncurses-dev graphicsmagick\n\n\n#RUN export http_proxy=http://172.16.71.25:8087\n#-e http_proxy=172.16.71.25:8087\n\nWORKDIR /tmp\nRUN wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz \\\n    && wget --no-check-certificate https://openresty.org/download/openresty-1.9.7.4.tar.gz \\\n    && wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz \\\n    && tar xvf tengine-2.1.2.tar.gz \\\n    && tar zxf openresty-1.9.7.4.tar.gz \\\n    && tar zxf ngx_cache_purge-2.3.tar.gz\n\n\n\nWORKDIR /tmp/openresty-1.9.7.4\nRUN ./configure --prefix=/usr/local/openresty --with-luajit && make && make install\n\nWORKDIR /tmp/openresty-1.9.7.4/bundle/lua-5.1.5\nRUN make linux && make install\n#\n#WORKDIR /tmp\n#RUN wget http://bitop.luajit.org/download/LuaBitOp-1.0.2.tar.gz\n#RUN tar zxf LuaBitOp-1.0.2.tar.gz\n#WORKDIR /tmp/LuaBitOp-1.0.2\n#RUN make && make install\n#\n#WORKDIR /tmp\n#COPY lua-lib/lua-resty-kafka /tmp/lua-resty-kafka\n#WORKDIR /tmp/lua-resty-kafka\n#RUN make && make install\n\n\n###waf begin naxsi \u5e94\u7528\u9632\u706b\u5899 \u62b5\u5fa1SQL\u6ce8\u5165\u3001\u8de8\u7ad9\u811a\u672c\u3001\u8de8\u57df\u4f2a\u9020\u8bf7\u6c42\u3001\u672c\u5730\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u6f0f\u6d1e\nENV NAXSI_VERSION master\nWORKDIR /tmp\n\nRUN gpg --keyserver keyserver.ubuntu.com --recv-keys 2685AED4 7BD9BF62 A1C052F8 \\\n    && apt-get install ca-certificates -y \\\n    && wget \"https://github.com/nbs-system/naxsi/archive/${NAXSI_VERSION}.tar.gz\" -O nginx-${NAXSI_VERSION}.tar.gz && \\\n    tar zxvf nginx-${NAXSI_VERSION}.tar.gz\n###waf end\n\n\nWORKDIR /tmp/tengine-2.1.2\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr_local_lib.conf\n\n#\u66f4\u65b0\uff0c\u6df7\u6dc6\u7248\u672c\u6807\u8bc6\nRUN sed -in 's/nginx\\//myserver\\//g' /tmp/tengine-2.1.2/src/core/nginx.h\nRUN sed -in 's/1.6.2/8.8/g' /tmp/tengine-2.1.2/src/core/nginx.h\nRUN sed -in 's/Tengine\\\"/myserver\\\"/g' /tmp/tengine-2.1.2/src/core/nginx.h\nRUN sed -in 's/2.1.0/8.8/g' /tmp/tengine-2.1.2/src/core/nginx.h\nRUN sed -in 's/NGINX\\\"/myserver\\\"/g' /tmp/tengine-2.1.2/src/core/nginx.h\nRUN sed -in 's/2001000/800800/g' /tmp/tengine-2.1.2/src/core/nginx.h\n\n\nRUN \\\n    cd /tmp/tengine-2.1.2 &&\\\n    ./configure  \\\n       --with-ld-opt='-Wl,-rpath,/usr/local/lib/' \\\n        --add-module=/tmp/openresty-1.9.7.4/bundle/redis2-nginx-module-0.12/ \\\n        --add-module=/tmp/openresty-1.9.7.4/bundle/ngx_devel_kit-0.2.19/ \\\n        --add-module=/tmp/openresty-1.9.7.4/bundle/set-misc-nginx-module-0.30/ \\\n        --add-module=/tmp/openresty-1.9.7.4/bundle/echo-nginx-module-0.58/ \\\n        --add-module=/tmp/openresty-1.9.7.4/bundle/ngx_lua-0.10.2/ \\\n        --add-module=/tmp/ngx_cache_purge-2.3/ \\\n        --add-module=/tmp/naxsi-${NAXSI_VERSION}/naxsi_src/ \\\n        --with-ld-opt=\"-L /usr/local/lib\" \\\n    && make && make install\n\nADD nginx.conf /usr/local/nginx/conf/nginx.conf\n\n\n\n\nWORKDIR /root\n#RUN rm -rf /tmp/tengine-*\n#RUN rm -rf /tmp/lua-*\n\nENV HOME /root\nRUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh\n\nRUN mkdir -p /etc/my_init.d\n\n#nginx \u914d\u7f6e\u6587\u4ef6\nCOPY http.d /usr/local/nginx/conf/http.d\nCOPY server.d /usr/local/nginx/conf/server.d\nCOPY naxsi.d /usr/local/nginx/conf/naxsi.d\nRUN cp /tmp/naxsi-master/naxsi_config/naxsi_core.rules /usr/local/nginx/conf/naxsi.d/\n\nCOPY waf.d /usr/local/nginx/conf/waf.d\nRUN  mkdir -p /data/logs/hack && chmod -R 775 /data/logs/hack\n\n\n#lua \u5e93\u4e0e\u914d\u7f6e\u6587\u4ef6\nCOPY lua-lib /usr/local/nginx/conf/lua-lib\nCOPY lua.d /usr/local/nginx/conf/lua.d\n\n\nADD nginx.sh /etc/my_init.d/nginx.sh\nRUN chmod 755 /etc/my_init.d/nginx.sh\n\n#RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN mkdir -p /var/lib/nginx/cache\n\n#\u914d\u7f6e\u65f6\u533a\nRUN echo \"Asia/Shanghai\" > /etc/timezone\nRUN dpkg-reconfigure -f noninteractive tzdata\n\nEXPOSE 80 443\n\nCMD [\"/etc/my_init.d/nginx.sh\"]\n\n# build\n# docker build -t supermy/docker-mynginx:2.1 .\n# userage\n# docker run -d -p 8080:80 --name test -v /home/utgard/www/:/data/www/ mynginx_web\n"
    },
    {
        "filename": "437eeb6acec4f81c7f2f244062a3ff6746eae11e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:9.2-devel-ubuntu16.04\nMAINTAINER Cristian Baldi \"bld.cris.96@gmail.com\"\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# Required packages\nRUN apt-get update\nRUN apt-get -y install \\\n    python \\\n    build-essential \\\n    python2.7-dev \\\n    python-pip \\\n    git \\\n    libhdf5-dev \\\n    software-properties-common\n\n# Fix 'sudo: command not found'\n# https://github.com/torch/distro/blob/master/install-deps contains 'sudo', but nvidia:cuda removed sudo: https://github.com/crisbal/docker-torch-rnn/issues/9#issuecomment-365362656\nRUN apt-get -y install sudo\nRUN usermod -aG sudo $(whoami)\n\n# Fix torch installation ( https://github.com/torch/cutorch/issues/797 )\nENV TORCH_NVCC_FLAGS='-D__CUDA_NO_HALF_OPERATORS__'\n\n# Torch and luarocks\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive && cd /root/torch && \\\n    bash install-deps && \\\n    ./install.sh -b\n\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'\nENV LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'\nENV PATH=/root/torch/install/bin:$PATH\nENV LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH\nENV DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n#torch-rnn and python requirements\nWORKDIR /root\n#RUN git clone https://github.com/jcjohnson/torch-rnn && \\\n#    pip install -r torch-rnn/requirements.txt\n\n# Fix install torch-rnn requirements in Ubuntu 16.04\n# https://github.com/crisbal/docker-torch-rnn/issues/1#issuecomment-324262348\nRUN apt-get install -y cython\nRUN pip install --upgrade pip\nRUN pip install Cython==0.23.4\nRUN pip install numpy==1.10.4\nRUN pip install argparse==1.2.1\nRUN HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial/ pip install h5py==2.5.0\nRUN pip install six==1.10.0\nRUN git clone https://github.com/jcjohnson/torch-rnn\n\n#Lua requirements\nWORKDIR /root\nRUN luarocks install torch\nRUN luarocks install nn\nRUN luarocks install optim\nRUN luarocks install lua-cjson\n\nRUN git clone https://github.com/deepmind/torch-hdf5 /root/torch-hdf5\nWORKDIR /root/torch-hdf5\nRUN luarocks make hdf5-0-0.rockspec\n\n\n#CUDA\nWORKDIR /root\nRUN luarocks install cutorch\nRUN luarocks install cunn\n\n#Done!\nWORKDIR /root/torch-rnn\n"
    },
    {
        "filename": "44367354887ae5177e1c2a0343279f1d092f3345.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This docker shall be run using --privileged option\n\nARG BASE_IMAGE=rocker/rstudio:3.5.1\nFROM ${BASE_IMAGE}\n\nENV ROOT TRUE\n\n# Install prerequisites\nRUN apt-get update\n\n# Certain rocker - based image have a missing /var/lib/dpkg/available\n# This causes apt install to fail. E.g. bioconductor: https://github.com/Bioconductor/bioc_docker/blob/5357c40c7273b5eb120e2af012fbb4c7fdc8b61b/out/release_base/Dockerfile#L14\n# Running dselect update will restore the missing files\nRUN if [ ! -f /var/lib/dpkg/available ]; then \\\n        apt-get install -y dselect && \\\n        dselect update; \\\n    fi\n\nRUN  apt-get install -y automake \\\n                        autotools-dev \\\n                        fuse \\\n                        g++ \\\n                        git \\\n                        libcurl4-gnutls-dev \\\n                        libfuse-dev \\\n                        libssl-dev \\\n                        libxml2-dev \\\n                        make \\\n                        default-jdk \\\n                        apt-utils \\\n                        cmake \\\n                        pkg-config \\\n                        fuse \\\n                        nginx \\\n                        curl \\\n                        zlib1g-dev \\\n                        libncurses5-dev \\\n                        gettext-base \\\n                        libjsoncpp-dev && \\\n    curl https://bootstrap.pypa.io/get-pip.py | python -\n    # Install gitfs\nRUN apt-get install -y libssl1.0-dev \\\n                        libffi-dev \\\n                        python-dev\n\nRUN  wget -q https://github.com/libgit2/libgit2/archive/v0.24.1.tar.gz && \\\n        tar xzf v0.24.1.tar.gz && \\\n        cd libgit2-0.24.1/ && \\\n        cmake . && \\\n        make && make install && cd ..\n\nRUN ldconfig\nRUN pip install 'pygit2==0.24.1'\n\nRUN wget -q https://codeload.github.com/PressLabs/gitfs/zip/0.4.5.1 && \\\n        unzip 0.4.5.1 && \\\n        cd gitfs-0.4.5.1 && \\\n        python setup.py install && cd ..\nRUN mkdir -p /var/lib/gitfs\n\n# Configure nginx\nRUN     mkdir -p /etc/nginx/sites-enabled/\nADD     auto-fill-form-template.conf /auto-fill-form-template.conf\nADD     nginx.conf /etc/nginx/nginx.conf\nADD     start.sh /start.sh\nRUN     chmod 777 /start.sh\n\n# Remove mran that is hardcoded in a base image\nRUN sed -i '/mran.microsoft/d' /usr/local/lib/R/etc/Rprofile.site\n\nRUN export ADD=shiny && \\\n    bash /etc/cont-init.d/add && \\\n    rm -rf /srv/shiny-server/* && \\\n    chmod g+rwx /srv -R\n\nRUN rm -f /etc/cont-init.d/userconf\n\nADD    post_commit.sh /root/post_commit.sh\nRUN    chmod +x /root/post_commit.sh\n"
    },
    {
        "filename": "4453e7f89acaa35cbe46876560cf50fdece0de88.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-cudnn5-devel  \nMAINTAINER Daniel Petti  \n  \n# Install caffe dependencies.  \nRUN apt-get update && \\  \napt-get install -y python-numpy libboost-system-dev \\  \nlibboost-thread-dev libboost-filesystem-dev cmake libhdf5-dev liblmdb-dev \\  \nlibleveldb-dev libsnappy-dev libopencv-dev libatlas-base-dev python-dev \\  \nlibboost-python-dev libgoogle-glog-dev protobuf-compiler libprotobuf-dev git  \n  \n# Download and install caffe.  \nRUN git clone https://github.com/BVLC/caffe.git  \nRUN cd caffe && mkdir build  \nRUN cd caffe/build && cmake ..  \n  \n# Use bash.  \nRUN rm /bin/sh && ln -s /bin/bash /bin/sh  \n  \nRUN cd caffe/build && make -j$( grep -c ^processor /proc/cpuinfo )  \nRUN cd caffe/build && make install  \n  \n# Install some conveniences for actually using caffe.  \nRUN sudo apt-get install -y vim wget  \n\n"
    },
    {
        "filename": "44a601de375c29516052e5cf6fae14d9e6bb6290.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#############################################################\n# Dockerfile to build Interactive Broker TWS container images\n#############################################################\nFROM quay.io/orgsync/java:1.8.0_66-b17\n\n# File Author / Maintainer\nMAINTAINER Andrew Pierce\n\n# Install libs\nRUN apt-get update && apt-get install -y \\\n    wget \\\n    unzip \\\n    gsettings-desktop-schemas \\\n    xvfb \\\n    libxrender1 \\\n    libxtst6 \\\n    x11vnc\n\n# Download IB Connect and TWS\nRUN cd /tmp && \\\n    wget https://github.com/ib-controller/ib-controller/releases/download/2.14.0/IBController-2.14.0.zip && \\\n    unzip IBController-2.14.0.zip -d /opt/IBController && \\\n    wget https://download2.interactivebrokers.com/installers/tws/latest-standalone/tws-latest-standalone-linux-x64.sh && \\\n    chmod +x tws-latest-standalone-linux-x64.sh && \\\n    echo \"n\" | ./tws-latest-standalone-linux-x64.sh && \\\n    rm -rf /tmp/* && \\\n    mv /root/Jts/954 /opt/IBJts\n\n# Set up Virtual Framebuffer and VNC\nADD vnc_init /etc/init.d/vnc\nADD xvfb_init /etc/init.d/xvfb\nRUN chmod a+x /etc/init.d/xvfb\nENV DISPLAY :0.0\n\n# Set up IBConnect\nRUN mkdir -p /opt/IBJts/jars/dhmyhmeut/\nADD jts.ini /opt/IBJts/jars/\nADD tws.xml /opt/IBJts/jars/dhmyhmeut/\nADD IBController.ini /opt/IBController/\nADD IBControllerStart.sh /opt/IBController/\nRUN chmod +x /opt/IBController/IBControllerStart.sh\n\n# Set your personal credentials for TWS and VNC (remote desktop)\nENV TWSUSERID fdemo\nENV TWSPASSWORD demouser\nENV VNC_PASSWORD sandwiches\n\n# Start TWS\nEXPOSE 4001 5900\nCMD [\"/bin/bash\", \"/opt/IBController/IBControllerStart.sh\"]\n"
    },
    {
        "filename": "44d17261c47a9f7f7770e7cd87597bb4dccd7d61.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Vibhuti Sawant <Vibhuti.Sawant@ibm.com>\"\n\nRUN apt-get update \\\n      && apt-get install git -y \\\n      && git clone https://github.com/hadley/gtable.git \\\n      && cd gtable && git checkout v0.2.0 \\\n      && R -e 'install.packages(\"knitr\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n      && R CMD check gtable --no-manual \\\n      && cd .. && rm -rf gtable \\\n      && apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "44da1aa51abdfb63f8ece50753c7d82fa0c3eec4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM python:3\nMAINTAINER \"Jay Joshi <joshija@us.ibm.com>\"\n\nRUN apt-get update -y \\\n  && apt-get install git -y \\\n  && pip install param nose \\\n  && git clone https://github.com/ioam/lancet.git \\\n  && cd lancet \\\n  && git submodule update --init \\\n  && python setup.py install \\\n  && nosetests --with-doctest \n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "46222d4367a36fe14d082f8b8c25fd4fb478c87f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie  \nMAINTAINER Jordi Arcas \"arkkanoid@gmail.com\"  \nRUN apt-get update && \\  \napt-get install -y \\  \npython-pip \\  \npython-dev build-essential \\  \n&& \\  \npip install boto3 pymongo\\  \n&& \\  \nrm -rf /var/lib/apt/lists/*  \n  \n  \nADD bin/route53-presence /bin/route53-presence  \n  \nENTRYPOINT [\"/bin/route53-presence\"]  \nCMD [\"-h\"]  \n\n"
    },
    {
        "filename": "4651e715c3f6bea7a3082a1260d3bf455603035c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# @todo: change user and group\nFROM publicisworldwide/php:latest\nMAINTAINER Publicis Worldwide\n\nADD etc/php.d/typo3.ini /etc/php.d/\n\nENV PHP_VERSION 56\nRUN yum install -y tar && \\\n    yum install -y GraphicsMagick && \\\n    yum install -y \\\n        php${PHP_VERSION}w-gd \\\n        php${PHP_VERSION}w-mysqlnd \\\n        php${PHP_VERSION}w-pdo \\\n        php${PHP_VERSION}w-soap \\\n        php${PHP_VERSION}w-opcache \\\n        php${PHP_VERSION}w-mbstring \\\n        php${PHP_VERSION}w-xml && \\\n    yum clean all\n\nENV TYPO3_VERSION 7.6.2\nRUN cd /opt && \\\n    curl -L -o typo3_src.tgz get.typo3.org/${TYPO3_VERSION} && \\\n    tar zxf /opt/typo3_src.tgz -C /opt && \\\n    rm /opt/typo3_src.tgz && \\\n    rm -f /var/www/html/* && \\\n    cd /var/www/html && \\\n    ln -s /opt/typo3_src-${TYPO3_VERSION} typo3_src && \\\n    ln -s typo3_src/index.php index.php && \\\n    ln -s typo3_src/typo3 typo3 && \\\n    chown -R apache:apache /var/www\n\n"
    },
    {
        "filename": "470e32a254f382fc4168ffbe9bf11009a7fa9f95.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Build with\n# sudo docker -t=\"simplecv\" .\n# Run with\n# sudo docker run -p 54717:8888 -t -i simplecv\n\nFROM ubuntu:12.04\n\nMAINTAINER Anthony Oliver <anthony@sightmachine.com>\n\n# Install system dependencies\nRUN apt-get update\nRUN apt-get install -y apt-utils\nRUN apt-get install -y unzip\nRUN apt-get install -y wget\nRUN apt-get install -y clang\nRUN apt-get install -y cmake\nRUN apt-get install -y python2.7\nRUN apt-get install -y python2.7-dev\nRUN apt-get install -y python-setuptools\nRUN wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py -O - | python\n\n# SimpleCV Specific\nRUN apt-get install -y libopencv-*\nRUN apt-get install -y python-opencv\nRUN apt-get install -y python-numpy \nRUN apt-get install -y python-scipy\nRUN apt-get install -y python-pygame\n# RUN pip install PIL\nRUN pip install ipython\nRUN pip install pyzmq\nRUN pip install jinja2\nRUN pip install tornado\n\n# SimpleCV Install\nRUN wget https://github.com/sightmachine/SimpleCV/archive/master.zip\nRUN unzip master\nRUN cd SimpleCV-master; pip install -r requirements.txt; python setup.py install\n\n# Use clang\nENV CC clang\nENV CXX clang++\n\n# Environment setup\nEXPOSE 8888\nENV USER docker\nWORKDIR /home/docker\n\n# Setup the notebook\nRUN echo 'ipython notebook --ip=0.0.0.0 --port=8888 --no-browser'  >> start.sh\nRUN chmod +x start.sh\nCMD bash -C '/home/docker/start.sh';'bash'"
    },
    {
        "filename": "1e8be10370d51566c5e18eb341205e6f83046e3f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM php:7.2.10-apache\nCOPY config/php.ini /usr/local/etc/php/\n\nRUN docker-php-ext-install mysqli && docker-php-ext-install pdo_mysql\n\nRUN apt-get clean && apt-get update && apt-get install --fix-missing wget apt-transport-https lsb-release ca-certificates gnupg2 -y\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp && wget https://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\nRUN echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/php.list\n\nRUN apt-get clean && apt-get update && apt-cache search php-mysql && apt-get install --fix-missing -y \\\n  ruby-dev \\\n  rubygems \\\n  imagemagick \\\n  graphviz \\\n  sudo \\\n  git \\\n  vim \\\n  memcached \\\n  libmemcached-tools \\\n  libmemcached-dev \\\n  libpng-dev \\\n  libjpeg62-turbo-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  libxslt1-dev \\\n  mysql-client \\\n  zip \\\n  wget \\\n  linux-libc-dev \\\n  libyaml-dev \\\n  zlib1g-dev \\\n  libicu-dev \\\n  libpq-dev \\\n  bash-completion \\\n  htop \\\n  libldap2-dev \\\n  libssl-dev\n\n# postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list && apt-get update && apt-get install -y postgresql-client-9.5\n\n# Install memcached for PHP 7\nRUN cd /tmp && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached && sudo git checkout php7 && phpize && ./configure --disable-memcached-sasl && make && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini &&\\\n echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20170718/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\n\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\nRUN docker-php-ext-install \\\n  gd \\\n  mbstring \\\n  zip \\\n  soap \\\n  pdo_mysql \\\n  mysqli \\\n  xsl \\\n  opcache \\\n  calendar \\\n  intl \\\n  exif \\\n  pgsql \\\n  pdo_pgsql \\\n  ftp \\\n  bcmath \\\n  ldap\n\nRUN pecl install mcrypt-1.0.1 && \\\n    docker-php-ext-enable mcrypt\n\n# Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Add sudo to www-data\nRUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Install YAML extension\nRUN pecl install yaml-2.0.2 && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n\n# Install APCu extension\nRUN pecl install apcu-5.1.8\n\nCOPY core/memcached.conf /etc/memcached.conf\n\n# Install sass and gem dependency\nRUN apt-get install --fix-missing automake ruby2.3-dev libtool -y\n\n# SASS and Compass installation\nRUN gem install sass -v 3.5.6 ;\\\n    gem install compass;\n\n# Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n\tapt-get update && apt-get install -y nodejs && \\\n\tnpm install npm@latest -g\n\n# Installation of LESS\nRUN npm install -g less && npm install -g less-plugin-clean-css\n\n# Installation of Grunt\nRUN npm install -g grunt-cli\n\n# Installation of Gulp\nRUN npm install -g gulp\n\n# Installation of Bower\nRUN npm install -g bower\n\n# Installation of Composer\nRUN cd /usr/src && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src && mv composer.phar /usr/bin/composer\n\n# Installation of drush 8 & 9\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cp -r /usr/local/src/drush/ /usr/local/src/drush8/\nRUN cp -r /usr/local/src/drush/ /usr/local/src/drush9/\nRUN cd /usr/local/src/drush8 && git checkout -f 8.1.0\nRUN cd /usr/local/src/drush8 && composer update && composer install\nRUN ln -s /usr/local/src/drush8/drush /usr/bin/drush8\nRUN cd /usr/local/src/drush9 && git checkout 9.1.0\nRUN cd /usr/local/src/drush9 && composer update && composer install\nRUN ln -s /usr/local/src/drush9/drush /usr/bin/drush9\n\n# Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ && wget http://xdebug.org/files/xdebug-2.6.1.tgz && tar -xvzf xdebug-2.6.1.tgz && cd xdebug-2.6.1/ && phpize && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config && make && make install\nRUN cd /tmp/xdebug-2.6.1 && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20170718/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_autostart=0' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_log=/tmp/php7-xdebug.log' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_host=docker_host' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.idekey=PHPSTORM' >> /usr/local/etc/php/conf.d/xdebug.ini\n\nRUN rm -rf /var/www/html && \\\n  mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && \\\n  chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n\n# Installation of PHP_CodeSniffer with Drupal coding standards.\n# See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n# # Installation of Symfony console autocomplete\n# RUN composer global require bamarni/symfony-console-autocomplete\n\n# installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\n\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n\n# Installation of APCu cache\nRUN ( \\\n  echo \"extension=apcu.so\"; \\\n  echo \"apc.enabled=1\"; \\\n  ) > /usr/local/etc/php/conf.d/ext-apcu.ini\n\n# Installation of Opcode cache\nRUN ( \\\n  echo \"opcache.memory_consumption=128\"; \\\n  echo \"opcache.interned_strings_buffer=8\"; \\\n  echo \"opcache.max_accelerated_files=20000\"; \\\n  echo \"opcache.revalidate_freq=5\"; \\\n  echo \"opcache.fast_shutdown=1\"; \\\n  echo \"opcache.enable_cli=1\"; \\\n  ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nRUN a2enmod rewrite expires && service apache2 restart\n\n# Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar && mv drupal.phar /usr/local/bin/drupal && chmod +x /usr/local/bin/drupal\n\n# Install WKHTMLTOPDF\nRUN apt-get update && apt-get remove -y libqt4-dev qt4-dev-tools wkhtmltopdf && apt-get autoremove -y\nRUN apt-get install openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y\nRUN mkdir /var/wkhtmltopdf\nRUN cd /var/wkhtmltopdf && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\nRUN cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltopdf /bin/wkhtmltopdf && cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltoimage /bin/wkhtmltoimage\nRUN chown -R web:www-data /var/wkhtmltopdf\nRUN chmod +x /bin/wkhtmltopdf && chmod +x /bin/wkhtmltoimage\n\n# Our apache volume\nVOLUME /var/www/html\n\n# create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n\n# Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n# Expose 80 for apache, 9000 for xdebug\nEXPOSE 80 9000\n\n# Add web .bashrc config\nCOPY config/bashrc /var/www/\nRUN mv /var/www/bashrc /var/www/.bashrc\nRUN chown www-data:www-data /var/www/.bashrc\nRUN echo \"source .bashrc\" >> /var/www/.profile ;\\\n    chown www-data:www-data /var/www/.profile\n\n# Add root .bashrc config\n# When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc\n\n# Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n\n# Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "1e914e8f4b3f988d50ce9ae0fa062bbbc08db314.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.17\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "1ebfeab2987bf2b363e0b319d336e15459224463.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:latest\nMAINTAINER Vilibald Wan\u010da (wvi@apiary.io)\n\nENV EMCC_SDK_VERSION 1.37.15\nENV EMCC_SDK_ARCH 32\nENV EMCC_BINARYEN_VERSION 1.37.14\n\nWORKDIR /\n\nRUN apt-get update && apt-get install -y --no-install-recommends gnupg ca-certificates build-essential cmake curl git-core openjdk-8-jre-headless python \\\n    && apt-mark hold openjdk-8-jre-headless \\\n    && apt-mark hold make \\\n    && curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n    && apt-get install -y nodejs \\\n    && curl https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz > emsdk-portable.tar.gz \\\n    && tar xzf emsdk-portable.tar.gz \\\n    && rm emsdk-portable.tar.gz \\\n    && cd emsdk-portable \\\n    && ./emsdk update \\\n    && ./emsdk install --build=MinSizeRel sdk-tag-$EMCC_SDK_VERSION-${EMCC_SDK_ARCH}bit \\\n    && ./emsdk install --build=MinSizeRel binaryen-tag-${EMCC_BINARYEN_VERSION}-${EMCC_SDK_ARCH}bit \\\n\\\n    && mkdir -p /clang \\\n    && cp -r /emsdk-portable/clang/tag-e$EMCC_SDK_VERSION/build_tag-e${EMCC_SDK_VERSION}_${EMCC_SDK_ARCH}/bin /clang \\\n    && mkdir -p /clang/src \\\n    && cp /emsdk-portable/clang/tag-e$EMCC_SDK_VERSION/src/emscripten-version.txt /clang/src/ \\\n    && mkdir -p /emscripten \\\n    && cp -r /emsdk-portable/emscripten/tag-$EMCC_SDK_VERSION/* /emscripten \\\n    && cp -r /emsdk-portable/emscripten/tag-${EMCC_SDK_VERSION}_${EMCC_SDK_ARCH}bit_optimizer/optimizer /emscripten/ \\\n    && mkdir -p /binaryen \\\n    && cp -r /emsdk-portable/binaryen/tag-${EMCC_BINARYEN_VERSION}_${EMCC_SDK_ARCH}bit_binaryen/* /binaryen \\\n    && echo \"import os\\nLLVM_ROOT='/clang/bin/'\\nNODE_JS='nodejs'\\nEMSCRIPTEN_ROOT='/emscripten'\\nEMSCRIPTEN_NATIVE_OPTIMIZER='/emscripten/optimizer'\\nSPIDERMONKEY_ENGINE = ''\\nV8_ENGINE = ''\\nTEMP_DIR = '/tmp'\\nCOMPILER_ENGINE = NODE_JS\\nJS_ENGINES = [NODE_JS]\\nBINARYEN_ROOT = '/binaryen/'\\n\" > ~/.emscripten \\\n    && rm -rf /emsdk-portable \\\n    && rm -rf /emscripten/tests \\\n    && rm -rf /emscripten/site \\\n    && rm -rf /binaryen/src /binaryen/lib /binaryen/CMakeFiles \\\n    && for prog in em++ em-config emar emcc emconfigure emmake emranlib emrun emscons emcmake; do \\\n           ln -sf /emscripten/$prog /usr/local/bin; done \\\n    && apt-get -y --purge remove gnupg curl git-core build-essential gcc \\\n    && apt-get -y clean \\\n    && apt-get -y autoclean \\\n    && apt-get -y autoremove \\\n    && echo \"Installed ... testing\"\nRUN emcc --version \\\n    && mkdir -p /tmp/emscripten_test && cd /tmp/emscripten_test \\\n    && printf '#include <iostream>\\nint main(){std::cout<<\"HELLO\"<<std::endl;return 0;}' > test.cpp \\\n    && em++ -O2 test.cpp -o test.js && nodejs test.js \\\n    && em++ test.cpp -o test.js && nodejs test.js \\\n    && em++ -s WASM=1 test.cpp -o test.js && nodejs test.js \\\n    && cd / \\\n    && rm -rf /tmp/emscripten_test \\\n    && echo \"All done.\"\n\nVOLUME [\"/src\"]\nWORKDIR /src\n\n"
    },
    {
        "filename": "1f3af907bdfc2633c7bb63547e12d691027ccfdd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Java Dockerfile\n#\n# Based off of https://github.com/dockerfile/java\n#\n\n# Pull base image.\nFROM dockerfile/ubuntu\nMAINTAINER Nikhil Vaze\n\n# Install Java.\nRUN \\\n  echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \\\n  echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections && \\\n  add-apt-repository -y ppa:webupd8team/java && \\\n  apt-get update && \\\n  apt-get install -y oracle-java7-installer\n\n#Jetty\nRUN adduser --system jetty\nRUN mkdir /opt/jetty\n\n# Assumes jetty.tar.gz and jpetstore.war are next to this Dockerfile\nADD jetty.tar.gz /opt/jetty\nADD jpetstore.war /opt/jetty/jetty-distribution-8.1.15.v20140411/webapps/jpetstore.war\n\nRUN chown -R jetty /opt/jetty\n\n# Define default command.\nCMD [\"/opt/jetty/jetty-distribution-8.1.15.v20140411/bin/jetty.sh\", \"-d\", \"run\"]"
    },
    {
        "filename": "2026cf66197e9f4c7e1a8d8fd25df7f663c1b218.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty\nMAINTAINER Club Vaudois de Robotique Autonome <info@cvra.ch>\n\n# General dependencies\nRUN apt-get update && apt-get install -y \\\n    git-core \\\n    make \\\n    python3-pip \\\n    python-software-properties \\\n    software-properties-common \\\n    unzip \\\n    wget \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install \\\n    cvra-packager \\\n    msgpack-python==0.4.8 \\\n    PyYAML==3.11\n\n# arm-none-eabi toolchain\nRUN add-apt-repository ppa:team-gcc-arm-embedded/ppa && \\\n  apt-get update && apt-get install -y \\\n    gcc-arm-embedded \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN (cd /usr/local \\\n  && wget https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip \\\n  && unzip protoc*.zip \\\n  && chmod +x bin/protoc \\\n  && rm protoc*.zip \\\n)\n\nRUN apt-get update && apt-get install -y \\\n    python-pip \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*\nRUN pip install --upgrade protobuf\n"
    },
    {
        "filename": "20ad6917f45954d2ae6e2ff9dbbdf7823510dad3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/xenial-amd64:2.32\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV UBUNTUIMAGE_VERSION=1.0+16.04ubuntu1\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git\n\nWORKDIR /tmp\nADD disable-sparse-check.patch /tmp\nRUN git clone --depth 1 --branch ${UBUNTUIMAGE_VERSION} https://github.com/CanonicalLtd/ubuntu-image \\\n && cd ubuntu-image \\\n && patch -p1 < /tmp/disable-sparse-check.patch \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && mkdir -p /snap/bin \\\n && ln -s /usr/bin/ubuntu-image /snap/bin/ubuntu-image\n\nRUN mknod /dev/loop0 b 7 0\nRUN echo \"ALL ALL=NOPASSWD: /snap/bin/ubuntu-image, /bin/mount, /bin/umount, /bin/cp\" >> /etc/sudoers.d/ubuntu-image \\\n && chmod 0440 /etc/sudoers.d/ubuntu-image\n\n# Install toolchins\nRUN apt-get install -y build-essential u-boot-tools lzop debootstrap \\\n    gcc-4.8 \\\n    gcc-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf \\\n    device-tree-compiler\n\n# change the default gcc to 4.8, since old kernel need old gcc.\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-5 50 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-5 50\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-4.8 100 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100\n\n# multiarch.\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y libc6:i386\n\nRUN apt-get remove --purge -y devscripts equivs\nRUN apt-get autoremove -y\nRUN apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /build\n"
    },
    {
        "filename": "212ab97649ae36d2f18199f1c9a67492447fa24f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM        apiaryio/base-dev-nodejs\nMAINTAINER  Apiary <sre@apiary.io>\n\nENV REFRESHED_AT 2015-09-21\n\nRUN npm install -g aglio\nRUN sudo mkdir -p /doc\n\nRUN sudo apt-get update -qqy && \\\n    sudo apt-get install -y software-properties-common python-software-properties && \\\n    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n    sudo apt-get update -y && \\\n    sudo apt-get install -y   \\\n      gcc-4.7 \\\n      g++-4.7 \\\n      gdb \\\n      build-essential \\\n      git-core \\\n      ruby \\\n      ruby-dev \\\n      bundler && \\\n    sudo apt-get clean\n\nRUN echo \"gem: --no-ri --no-rdoc\" > ~/.gemrc\n\nRUN git clone --recursive https://github.com/apiaryio/drafter.git /tmp/drafter\nRUN cd /tmp/drafter && ./configure && sudo make install\n\nCMD bash\n"
    },
    {
        "filename": "21a69f659b8ccb02d35b3d54c38f42378ac973ca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com, yihao.peng@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.11\nMAINTAINER YihaoPeng <yihao.peng@bitmain.com>\n\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\n# ADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update && apt-get install -y \\\n    autoconf \\\n    automake \\\n    bsdmainutils \\\n    build-essential \\\n    curl \\\n    git \\\n    libboost-all-dev \\\n    libevent-dev \\\n    libssl-dev \\\n    libtool \\\n    libzmq3-dev \\\n    pkg-config \\\n    unzip \\\n    wget \\\n    yasm \\\n    && apt-get autoremove && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# build bitcoind\nRUN cd /tmp && git clone -b v0.19.0_lightgbt --depth 1 https://github.com/btccom/bitcoin-abc-1.git && \\\n    cd bitcoin-abc-1 && ./autogen.sh && ./configure --disable-bench --disable-wallet --disable-tests && \\\n    make -j$(nproc) && make install && rm -r /tmp/bitcoin-abc-1\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n\n#service for testnet\n#RUN mkdir        /etc/service/bitcoind_testnet\n#ADD run_testnet /etc/service/bitcoind_testnet/run\n#RUN chmod +x     /etc/service/bitcoind_testnet/run\n"
    },
    {
        "filename": "21b228647383365d8e381f58b9aafb60601be883.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM tudorg/xgo-deb6-1.7.4\n\nMAINTAINER Tudor Golubenco <tudor@elastic.co>\n\n# Get libpcap binaries for linux\nRUN \\\n\tmkdir -p /libpcap && \\\n    wget http://archive.debian.org/debian/pool/main/libp/libpcap/libpcap0.8-dev_1.1.1-2+squeeze1_i386.deb && \\\n\tdpkg -x libpcap0.8-dev_*_i386.deb /libpcap/i386 && \\\n\twget http://archive.debian.org/debian/pool/main/libp/libpcap/libpcap0.8-dev_1.1.1-2+squeeze1_amd64.deb && \\\n\tdpkg -x libpcap0.8-dev_*_amd64.deb /libpcap/amd64 && \\\n\trm libpcap0.8-dev*.deb\nRUN \\\n\tapt-get -o Acquire::Check-Valid-Until=false update && \\\n\tapt-get install -y libpcap0.8-dev\n\n\n# Old git version which does not support proxy with go get requires to fetch go-yaml directly\nRUN git clone https://github.com/go-yaml/yaml.git /go/src/gopkg.in/yaml.v2\n\n# Load gotpl which is needed for creating the templates.\nRUN go get github.com/tsg/gotpl\n\n# add patch for gopacket\nADD gopacket_pcap.patch /gopacket_pcap.patch\n"
    },
    {
        "filename": "21b77e82d40b56eebaa3b77d506eec794f74c2d2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty\n\nMAINTAINER DRUD DOCKER <docker@drud.io>\n\nENV VAULT_VERSION 0.6.0\nENV VAULT_SHA256 283b4f591da8a4bf92067bf9ff5b70249f20705cc963bea96ecaf032911f27c2\nENV DEBIAN_FRONTEND noninteractive\nENV ANSIBLE_HOST_KEY_CHECKING False\nENV ANSIBLE_FORCE_COLOR True\n\nCOPY apt-requirements.txt /\nCOPY pip-requirements.txt /\nADD https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip /tmp/vault.zip\n\nRUN  apt-get update -y \\\n  && apt-get install -y -q $(cat /apt-requirements.txt) \\\n  && pip install --upgrade pip \\\n  && pip install -r /pip-requirements.txt \\\n  && echo \"${VAULT_SHA256} */tmp/vault.zip\" | sha256sum -c - \\\n  && cd /bin && unzip /tmp/vault.zip && chmod +x /bin/vault && rm /tmp/vault.zip\n\nCOPY files /\n\nWORKDIR /app\nENTRYPOINT [\"/usr/bin/python\", \"sanctuary.py\"]\nCMD [\"create\"]\n"
    },
    {
        "filename": "21dcbe761b36187ffce55556bd0ddbaeb6a3d730.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Gianluca Arbezzano <gianarb92@gmail.com>\n\nENV INFLUXDB_CONF=/etc/influxdb_conf.toml\n\nRUN apt-get update\nRUN apt-get install -y wget\n\nRUN wget https://dl.influxdata.com/influxdb/releases/influxdb_0.13.0_amd64.deb\nRUN dpkg -i influxdb_0.13.0_amd64.deb\nRUN rm influxdb_0.13.0_amd64.deb\n\nEXPOSE 8083\nEXPOSE 8086\n\nADD ./run.sh ./run.sh\nRUN chmod 755 ./run.sh\nADD ./influxdb_conf.toml $INFLUXDB_CONF\n\nENTRYPOINT [\"./run.sh\"]\n"
    },
    {
        "filename": "21e34b3a58392ba5f0c510e8f4cc6c512e12f6b8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# In production this should probably be busybox, but let's use ubuntu for a\n# fair comparison \nFROM tutum/ubuntu-saucy\n\nMAINTAINER Wes Felter, wmf@us.ibm.com\n\n# make sure the package repository is up to date\n#RUN echo \"deb http://archive.ubuntu.com/ubuntu saucy main universe\" > /etc/apt/sources.list\nRUN apt-get update\n\nRUN apt-get install -y openssh-server nodejs nodejs-legacy mongodb git screen npm supervisor\n\n#create directory to get acme air\nRUN useradd -m acme-air -s /bin/bash\nRUN echo 'root:screencast' |chpasswd\nRUN echo 'acme-air:screencast' |chpasswd\nRUN su acme-air -c \"mkdir /home/acme-air/code;cd /home/acme-air/code;git clone https://github.com/acmeair/acmeair.git;cd acmeair;git checkout 76a9f35d9976c6aef84f1bfb05b59bafed8e410e;echo 'export ACMEAIR_SRCDIR=/home/acme-air/code/acmeair' >> /home/acme-air/.bash_profile\"\nRUN su -l acme-air -c \"cd \\$ACMEAIR_SRCDIR/acmeair-webapp-nodejs;sed -e 's/3.0.0beta7/3.3.7/' package.json  > package.json.new; mv package.json.new package.json;npm update\" \nRUN bash -c \"su mongodb -s /bin/bash -c '/usr/bin/mongod --fork --unixSocketPrefix=/var/run/mongodb --smallfiles --config /etc/mongodb.conf';su acme-air -c 'cd /home/acme-air/code/acmeair/acmeair-webapp-nodejs/loader;node loader'\" \n\nEXPOSE 3000\nEXPOSE 22\n\nADD supervisor.conf /etc/supervisor.conf\nCMD [ \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor.conf\" ]\n"
    },
    {
        "filename": "222849b178c096065c059072dae2ec2e5ec5389d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Copyright (C) 2013-2014 Pivotal Software, Inc. \n# \n# All rights reserved. This program and the accompanying materials\n# are made available under the terms of the under the Apache License, \n# Version 2.0 (the \"License\u201d); you may not use this file except in compliance \n# with the License. You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# \n# Fork from https://github.com/jpetazzo/dind merged with dcloud\n#\n\nFROM ubuntu:14.04\n\nRUN apt-get update -y\nRUN apt-get install -y software-properties-common python-software-properties\n\nRUN add-apt-repository -y ppa:fkrull/deadsnakes\nRUN apt-get update -y\n# Already has python 2.7\n# RUN apt-get install -y python2.6 python2.6-dev\n# RUN cd /usr/bin && ln -s python2.6 python\n\nRUN apt-get install -y gcc python-dev\n\nRUN apt-get install -y wget\nRUN wget --no-check-certificate https://raw.github.com/pypa/pip/master/contrib/get-pip.py\nRUN python get-pip.py\nRUN pip install pycrypto\nRUN pip install paramiko\nRUN easy_install --upgrade ecdsa\n\nADD . /src/dcloud\n\nRUN cd /src/dcloud && python setup.py install --record installedFiles.txt\n\nRUN apt-get install -qqy iptables ca-certificates lxc\n\n# Install Docker from Docker Inc. repositories.\nRUN apt-get install -qqy apt-transport-https\nRUN echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nRUN apt-get update -qq\nRUN apt-get install -qqy lxc-docker\n\n# Install the magic wrapper.\nADD ./wrapdocker /usr/local/bin/wrapdocker\nRUN chmod +x /usr/local/bin/wrapdocker\n\n# Define additional metadata for our image.\nCMD [\"wrapdocker\"]\n\n"
    },
    {
        "filename": "22d969f17318bff7b598688c3079777c39ad90d7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM lablup/common-tensorflow:1.13-py36-cuda9 as tf-binary\n# import python-binary\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update -y && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" && \\\n    apt-get update -y && \\\n    apt-get install -y \\\n        ca-certificates \\\n        gcc g++ make \\\n\tgfortran \\\n\tvim \\\n\tcmake \\\n\tyasm \\\n\tpkg-config \\\n        xz-utils \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        libpq-dev \\\n\tlibjasper-dev \\\n        libtiff-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n\tlibavcodec-dev \\\n        libavformat-dev \\\n\tlibswscale-dev \\\n\tlibxine2-dev \\\n\tlibv4l-dev\n\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get update -y && \\\n    apt-get install -y nodejs \n\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h && \\\n   apt-get install -y \\\n\tlibgstreamer1.0-dev \\\n\tlibgstreamer-plugins-base1.0-dev \\\n\tlibgtk-3-dev \\\n        libtbb-dev \\\n\tlibatlas-base-dev \\\n\tlibdc1394-22-dev \\\n\tlibxvidcore-dev \\\n\tlibfaac-dev \\\n\tlibmp3lame-dev \\\n\tlibtheora-dev \\\n\tlibvorbis-dev \\\n\tlibxvidcore-dev \\\n\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n\tlibavresample-dev \\\n\tx264 \\\n\tlibx264-dev \\\n\tv4l-utils \\\t\n\tlibprotobuf-dev protobuf-compiler \\\n\tlibgoogle-glog-dev libgflags-dev \\\n\tlibgphoto2-dev \\\n\tlibeigen3-dev \\\n\tlibhdf5-dev \\\t\n    && \\\t\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.6\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir requests && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir future && \\\n    python3 -m pip install --no-cache-dir tensorwatch\n\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\n\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    unzip opencv-contrib.zip && \\\n    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cd opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RELEASE \\\n      -D BUILD_TIFF=ON \\\n      -D BUILD_opencv_java=OFF \\\n      -D WITH_CUDA=ON \\\n      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \\\n      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2 \\\n      -D ENABLE_FAST_MATH=1 \\\n      -D CUDA_FAST_MATH=1 \\\n      -D WITH_CUBLAS=1 \\\n      -D WITH_OPENGL=ON \\\n      -D WITH_OPENCL=ON \\\n      -D WITH_IPP=ON \\\n      -D WITH_TBB=ON \\\n      -D WITH_EIGEN=ON \\\n      -D WITH_V4L=ON \\\n      -D BUILD_TESTS=OFF \\\n      -D BUILD_PERF_TESTS=OFF \\\n      -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" \\\n      -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\") \\\n      -D PYTHON_EXECUTABLE=$(which python3) \\\n      -D PYTHON_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n      -D PYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\\n      .. 2>&1 | tee cmake_messages.txt && \\\n    make -j${nproc} && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr opencv* \n\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\n\n# Jupyter notebook extension \nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\n\nRUN python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir ipywidgets && \\\n    python3 -m pip install --no-cache-dir ipyparallel && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    python3 -m pip install --no-cache-dir jupyterthemes && \\    \n    python3 -m pip install --no-cache-dir jupyter-js-widgets-nbextension && \\\n    python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions && \\\n    python3 -m pip install --no-cache-dir jupyter_nbextensions_configurator && \\\n    python3 -m pip install --no-cache-dir tf2onnx && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\n\nRUN jupyter nbextensions_configurator enable && \\\n    jupyter contrib nbextension install && \\\n    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n    jupyter contrib nbextension install && \\\n    jupyter serverextension enable --py jupyterlab --sys-prefix && \\\n    jupyter labextension install @jupyter-widgets/jupyterlab-manager && \\\n    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding && \\\n    jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n\n# Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"TensorFlow 1.13 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# for apt-get installation using /tmp\nRUN mkdir -p /tmp && \\\n    chown root:root /tmp && \\\n    chmod 1777 /tmp\n    \n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/local/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile"
    },
    {
        "filename": "233fd58bdc5b3771605539d498d470ce4899087b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:6  \nMAINTAINER Benjamin Bouvier <public@benj.me>  \n  \n# Install Weboob OS-level dependencies.  \nRUN apt-get update \\  \n&& apt-get install -y git python python-dev libffi-dev \\  \nlibxml2-dev libxslt-dev libyaml-dev libtiff-dev libjpeg-dev zlib1g-dev \\  \nlibfreetype6-dev libwebp-dev build-essential gcc g++ wget unzip mupdf-tools \\  \n&& rm -rf /var/lib/apt/lists/;  \n  \n# Install Weboob python dependencies  \nRUN mkdir /tmp/install && \\  \ncd /tmp/install && \\  \nwget https://bootstrap.pypa.io/get-pip.py && \\  \npython ./get-pip.py && \\  \npip install -U setuptools && \\  \npip install html2text simplejson BeautifulSoup PyExecJS && \\  \nrm -rf /tmp/install;  \n  \n# Setup kresus layout.  \nRUN useradd -d /home/user -m -s /bin/bash -U user && \\  \nmkdir -p /home/user/data && \\  \nmkdir -p /weboob;  \n  \nCOPY ./config.example.ini /opt/config.ini  \nRUN chmod -x /opt/config.ini  \nCOPY ./entrypoint.sh /entrypoint.sh  \nRUN chmod +x /entrypoint.sh  \n  \n# -> Install and compile the app.  \nRUN cd /home/user && \\  \nwget https://github.com/bnjbvr/kresus/archive/master.zip && \\  \nunzip master.zip && \\  \nrm master.zip && \\  \nmv kresus-master app && \\  \ncd /home/user/app && \\  \nnpm install && \\  \nnpm run build:prod && \\  \nrm -rf node_modules && \\  \nnpm install --production && \\  \nchown -R user:user /home/user;  \n  \nWORKDIR /home/user/app  \n  \nENV HOST 0.0.0.0  \nENV KRESUS_DIR /home/user/data  \nENV KRESUS_WEBOOB_DIR /weboob  \nENV NODE_ENV production  \n  \nVOLUME /home/user/data  \nVOLUME /weboob  \nEXPOSE 9876  \nENTRYPOINT [\"/entrypoint.sh\"]  \nCMD [\"/home/user/app/bin/kresus.js --config /opt/config.ini\"]  \n\n"
    },
    {
        "filename": "2391cdddc9d93ca7cabd9ff0313f23f424310b86.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Sah Lee <contact@leesah.name>\n\nENV DEPENDENCIES git-core build-essential autoconf libtool libssl-dev\nENV BASEDIR /tmp/shadowsocks-libev\nENV SERVER_PORT 8338\n\n# Set up building environment\nRUN apt-get update \\\n && apt-get install -y $DEPENDENCIES\n\n# Get the latest code, build and install\nRUN git clone https://github.com/shadowsocks/shadowsocks-libev.git $BASEDIR\nWORKDIR $BASEDIR\nRUN ./configure \\\n && make \\\n && make install\n\n# Tear down building environment and delete git repository\nWORKDIR /\nRUN rm -rf $BASEDIR/shadowsocks-libev\\\n && apt-get --purge autoremove -y $DEPENDENCIES\n\n# Port in the config file won't take affect. Instead we'll use 8388.\nEXPOSE $SERVER_PORT\nEXPOSE $SERVER_PORT/udp\n\n# Override the host and port in the config file.\nADD entrypoint /\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"-h\"]\n"
    },
    {
        "filename": "23cc9c2eea2377cad67fc2042f646be70b3d4058.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Cachelot Team <cachelot@cachelot.io>\n\nRUN cat /dev/null > /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-backports main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-security main restricted universe multiverse\" >> /etc/apt/sources.list\n\nRUN apt-get update -qq && apt-get install -qq\nRUN apt-get install -qq --no-install-recommends  \\\n    git \\\n    ssh \\\n    wget \\\n    python \\\n    subversion \\\n    cmake \\\n    make \\\n    libboost-system1.55-dev libboost-test1.55-dev libboost-program-options1.55-dev \\\n    libstdc++-4.8-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# LLVM/Clang\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main\" >> /etc/apt/sources.list\nRUN apt-get update -qq\nRUN apt-get install -qq clang-3.8\n\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.8 0\nRUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 0\nRUN update-alternatives --set clang /usr/bin/clang-3.8\nRUN update-alternatives --set clang++ /usr/bin/clang++-3.8\nENV CC=\"clang\"\nENV CXX=\"clang++\"\nENV CXXFLAGS=\"-std=c++11 -stdlib=libstdc++\"\nENV LDFLAGS=\"-stdlib=libstdc++\"\n\n# Build compiler-rt with the AddressSanizier library\nRUN D=$(pwd) \\\n    && NUM_CPUS=$(grep -c '^processor' /proc/cpuinfo) \\\n    && cd ~ \\\n    && svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm > /dev/null \\\n    && cd llvm \\\n    && R=$(svn info | grep Revision: | awk '{print $2}') \\\n    && (cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang > /dev/null) \\\n    && (cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt > /dev/null) \\\n    && mkdir llvm_cmake_build && cd llvm_cmake_build \\\n    && CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_WERROR=ON -DLLVM_TARGETS_TO_BUILD=X86 ~/llvm > /dev/null \\\n    && make -j${NUM_CPUS} \\\n    && make install \\\n    && cd $D \\\n    && rm -rf ~/llvm\n\nRUN apt-get clean\n\n\nENV ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-*/bin/llvm-symbolizer\"\nENV ASAN_OPTIONS=symbolize=1\n\nWORKDIR \"/cachelot\"\nCOPY run_cachelot_tests.sh /bin/run_cachelot_tests.sh\nRUN chmod a+x /bin/run_cachelot_tests.sh\nENTRYPOINT run_cachelot_tests.sh\n"
    },
    {
        "filename": "23ccb7ca98207407c1038aee680540e5b05eccbf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM hurricane/dockergui:x11rdp1.2\n\n# set variables\n# User/Group Id gui app will be executed as default are 99 and 100\nENV USER_ID=99 GROUP_ID=100 APP_NAME=\"ComicTagger\" WIDTH=1280 HEIGHT=720 TERM=xterm UNRAR_LIB_PATH=\"/usr/lib/libunrar.so\"\n\n# Use baseimage-docker's init system\nCMD [\"/sbin/my_init\"]\n\n# Add local files\nADD src/ /\n\n# update apt and install dependencies\nRUN add-apt-repository \"deb http://us.archive.ubuntu.com/ubuntu/ trusty universe multiverse\" && \\\nadd-apt-repository \"deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe multiverse\" && \\\napt-get update -qq && \\\napt-get install \\\npython-dev \\\nliblcms1-dev \\\nlibtiff5-dev \\\nlibjpeg8-dev \\\nlibjpeg-turbo8-dev \\\nlibjpeg-dev \\\ncmake \\\npython-pip \\\nrar \\\nunrar -y && \\\n\n# build openjpeg2 support\ncd /tmp && \\\nwget http://downloads.sourceforge.net/project/openjpeg.mirror/2.0.1/openjpeg-2.0.1.tar.gz && \\\ntar xzvf openjpeg-2.0.1.tar.gz && \\\ncd openjpeg-2.0.1/ && \\\ncmake . && \\\nmake && \\\nmake install && \\\n\n# install unrar libraries\ncd /tmp && \\\nwget http://www.rarlab.com/rar/unrarsrc-5.2.7.tar.gz && \\\ntar -xvf unrarsrc-5.2.7.tar.gz && \\\ncd unrar && \\\nmake lib && \\\nmake install-lib && \\\n\n# install PIL\nln -s /usr/include/freetype2 /usr/local/include/freetype && \\\nln -s /usr/lib/`uname -i`-linux-gnu/libjpeg.so /usr/lib && \\\nln -s /usr/lib/`uname -i`-linux-gnu/libz.so /usr/lib && \\\nln -s /usr/lib/`uname -i`-linux-gnu/liblcms.so /usr/lib && \\\nln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib && \\\npip install PIL --allow-external PIL --allow-unverified PIL && \\\n\n\n# install comictagger dependencies and git-core\napt-get update -qq && \\\napt-get install \\\npython-qt4 \\\npython-bs4 \\\ngit-core -y && \\\n\n#\u00a0uninstall pil and install pillow dependencies\npip uninstall pil -y && \\\napt-get update -qq && \\\napt-get install \\\nliblcms2-dev \\\ntcl8.6-dev \\\ntk8.6-dev \\\npython-tk \\\nlibwebp-dev -y && \\\n\n# install pip packages\npip install natsort PyPDF2 unrar configparser && \\\npip install pillow && \\\n\n# fetch comictagger from source\ncd /opt && \\\ngit clone https://github.com/davide-romanini/comictagger.git && \\\n\n# set additional config files\nmv /000-add-in-config.sh /etc/my_init.d/000-add-in-config.sh && \\\nchmod +x /etc/my_init.d/000-add-in-config.sh && \\\n\n# clean up\napt-get clean && \\\nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \n\n"
    },
    {
        "filename": "240e05fe8beb09e24c54edd7e97b7bf188c11403.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM r-base:latest  \nMAINTAINER eterna2 <eterna2@hotmail.com>  \n  \nRUN apt-get update && apt-get install -y \\  \nautomake \\  \nautotools-dev \\  \ng++ \\  \ngit \\  \nlibcurl4-gnutls-dev \\  \nlibfuse-dev \\  \nlibssl-dev \\  \nlibxml2-dev \\  \nmake \\  \npkg-config \\  \nsupervisor \\  \n&& git clone https://github.com/s3fs-fuse/s3fs-fuse.git \\  \n&& cd s3fs-fuse/ && ./autogen.sh && ./configure && make && make install \\  \n&& apt-get clean  \n  \nWORKDIR /home  \nENV R_LIBS=\"/home/rlib\"  \nCOPY config/fuse.conf /etc/fuse.conf  \nCOPY config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf  \n  \nCOPY scripts/runS3fs.sh scripts/runS3fs.sh  \nCOPY scripts/setup.R scripts/setup.R  \nCOPY scripts/setupBio.R scripts/setupBio.R  \nCOPY scripts/setupPackages.R scripts/setupPackages.R  \nRUN chmod +x scripts/runS3fs.sh  \n  \nCOPY scripts/cmd.sh /usr/local/bin/cmd  \nRUN chmod +x /usr/local/bin/cmd  \n  \nCOPY packages /home/packages  \nCOPY rscripts /home/rscripts  \n  \nRUN mkdir /home/temp  \nRUN mkdir /home/rlib  \nRUN Rscript -e '.libPaths( c(\"/home/rlib\",.libPaths()) )'  \n  \nWORKDIR /home/rscripts  \nCMD [\"/usr/local/bin/cmd\"]  \n\n"
    },
    {
        "filename": "2513f97ce10b599d82f5ae8aec781350738ecd85.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM gcr.io/google_appengine/python-compat\nADD . /app\n\n# Debian 7 doesn't have the right version of glibc, so we need to install.\n# Ideally at some point, instead of using the appengine supplied python\n# image, we could image our own ubuntu version.\n# https://github.com/GoogleCloudPlatform/appengine-python-vm-runtime\nRUN apt-get update && apt-get install -y git libglib2.0-dev procps\nRUN sed -i '1ideb http://ftp.debian.org/debian experimental main' /etc/apt/sources.list\nRUN apt-get update && apt-get -y -t experimental install libc6\n\nRUN (cd /; git clone https://github.com/catapult-project/catapult.git)\n"
    },
    {
        "filename": "263617b487cc08d26425c3a3b2411f44e15edcc1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Nginx docker image.\n#\n# VERSION 0.0.1\n\nFROM debian:jessie\n\nMAINTAINER Nicolas Carlier <https://github.com/ncarlier>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install Nginx.\nRUN apt-get update && apt-get install -y nginx wget supervisor openjdk-7-jre-headless && apt-get clean\n\n# Prevent to start nginx as a deamon\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\n# Fix for long server names\nRUN sed -i 's/# server_names_hash_bucket/server_names_hash_bucket/g' /etc/nginx/nginx.conf\nADD nginx.tmpl /etc/nginx/nginx.tmpl\n\n# Install Logstash\nADD https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz /tmp/logstash.tgz\nRUN tar -xvzf /tmp/logstash.tgz -C /opt && \\\n    ln -s /opt/logstash* /opt/logstash && \\\n    rm /tmp/logstash.tgz && \\\n    mkdir -p /etc/logstash/conf.d\nADD logstash.conf /etc/logstash/conf.d/logstash.conf\nADD nginx.pattern /opt/logstash/patterns/nginx\n\n# Setup supervisord\nADD supervisord.conf /etc/supervisor/conf.d/docker.conf\n\n# Install docke-gen\nENV DOCKER_HOST unix:///tmp/docker.sock\nENV DOCKERGEN_URL https://github.com/jwilder/docker-gen/releases/download/0.3.3/docker-gen-linux-amd64-0.3.3.tar.gz\nRUN (cd /tmp && wget $DOCKERGEN_URL -O pkg.tgz && tar xvzf pkg.tgz && mv docker-gen /usr/local/bin && rm -rf /tmp/*)\n\nEXPOSE 80\nEXPOSE 443\n\nENTRYPOINT  [\"/usr/bin/supervisord\"]\n\nCMD [\"-n\"]\n"
    },
    {
        "filename": "27076c82428bccfe2cc7bee3b9b62f7e61c7ee24.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:8\n\nMAINTAINER Raquel Lopes Costa \"quelopes@gmail.com\"\nEXPOSE 3838 7474 8787\n\n# ===================\n# --- Linux AND R ---\n# ===================\n\nRUN echo \"deb http://cran.rstudio.com/bin/linux/debian jessie-cran3/\" >> /etc/apt/sources.list && \\\n    echo \"deb http://ftp.debian.org/debian jessie-backports main\" >> /etc/apt/sources.list && \\\n    apt-key adv --keyserver keys.gnupg.net --recv-key 6212B7B7931C4BB16280BA1306F90DE5381BA480 && \\\n    apt-get -y update && \\\n    apt-get -y install r-base r-base-dev && \\\n    apt-get -y install libcurl4-openssl-dev libxml2-dev libssl-dev libpng-dev && \\\n    apt-get -y install -t jessie-backports ca-certificates-java openjdk-8-jre-headless && \\\n    apt-get -y install wget gdebi-core openjdk-8-jdk curl && \\\n    apt-get -y clean\nRUN /usr/sbin/update-java-alternatives -s java-1.8.0-openjdk-amd64\n\n# ======================================\n# --- INSTALL BIOCONDUCTOR AND RNEO4J---\n# ======================================\nRUN R -e \"source(\\\"http://bioconductor.org/biocLite.R\\\"); biocLite()\" && \\\n    R -e \"source(\\\"http://bioconductor.org/biocLite.R\\\"); biocLite(c(\\\"GOstats\\\",\\\"hgu133plus2cdf\\\",\\\"hgu133plus2frmavecs\\\",\\\"hgu133acdf\\\",\\\"hgu133a2cdf\\\",\\\"hugene10stv1cdf\\\",\\\"affy\\\",\\\"impute\\\",\\\"Biobase\\\",\\\"limma\\\",\\\"org.Mmu.eg.db\\\",\\\"org.Mm.eg.db\\\",\\\"org.Rn.eg.db\\\",\\\"genefilter\\\",\\\"org.Hs.eg.db\\\",\\\"ggplot2\\\",\\\"igraph\\\",\\\"VennDiagram\\\",\\\"gplots\\\", \\\"fpc\\\",\\\"stringr\\\",\\\"WGCNA\\\",\\\"dynamicTreeCut\\\",\\\"frma\\\",\\\"inSilicoDb\\\",\\\"inSilicoMerging\\\"))\" && \\\n    R -e \"install.packages('RNeo4j',repos='https://cran.rstudio.com/', clean=TRUE)\"\n\n# =======================\n# --- INSTALL RSTUDIO ---\n# =======================\nRUN VER=$(wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver) && \\\n    wget https://download2.rstudio.org/rstudio-server-${VER}-amd64.deb && \\\n    gdebi --non-interactive rstudio-server-${VER}-amd64.deb && \\\n    rm rstudio-server-${VER}-amd64.deb && \\\n    useradd -m rstudio && \\\n    echo \"rstudio:rstudio\" | chpasswd && \\\n    apt-get -y clean\n\n# =====================\n# --- INSTALL NEO4J ---\n# =====================\nRUN wget -O neo4j.tar.gz https://neo4j.com/artifact.php?name=neo4j-community-3.0.6-unix.tar.gz && \\\n    cd /usr/local; tar xvfz /neo4j.tar.gz; ln -s neo4j-community-3.0.6 neo4j && \\\n    rm /neo4j.tar.gz && \\\n    sed -i -e \"s/#dbms.connector.http.address/dbms.connector.http.address/\" /usr/local/neo4j/conf/neo4j.conf\n\n\n# =================================\n# --- BUILD BACKGROUND DATABASE ---\n# =================================\nADD import.cql /var/tmp/\nADD DataGraph/data.csv //usr/local/neo4j/data/databases/graph.db/import/\nADD DataGraph/PPI.csv.gz //usr/local/neo4j/data/databases/graph.db/import/\nADD DataGraph/taxon.csv //usr/local/neo4j/data/databases/graph.db/import/\nRUN gunzip -f /usr/local/neo4j/data/databases/graph.db/import/PPI.csv.gz\n\nRUN /usr/local/neo4j/bin/neo4j start && \\\n    sleep 40 && \\\n    echo \"neo4j:SHA-256,614976D15DE5DDAEB1A60CE58654586D8F1589AD71FE442B243767E8AB4A065C,A924AB72EA3DC4A302D9E369E2363116:\" > /usr/local/neo4j/data/dbms/auth && \\\n    /usr/local/neo4j/bin/neo4j stop && \\\n    /usr/local/neo4j/bin/neo4j-shell -v -path /usr/local/neo4j/data/databases/graph.db -config /usr/local/neo4j/conf/neo4j.conf -file /var/tmp/import.cql && \\\n    rm -rf /usr/local/neo4j/data/databases/graph.db/neostore.transaction.db.*\n\n# =============\n# --- Shiny ---\n# =============\nRUN wget --no-verbose https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION -O \"version.txt\" && \\\n    VERSION=$(cat version.txt)  && \\\n    wget --no-verbose \"https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/shiny-server-$VERSION-amd64.deb\" -O ss-latest.deb && \\\n    gdebi --non-interactive ss-latest.deb && \\\n    rm -f version.txt ss-latest.deb && \\\n    R -e \"install.packages(c('shiny', 'rmarkdown'), repos='https://cran.rstudio.com/', clean=TRUE)\" && \\\n    apt-get -y clean\nRUN R -e \"install.packages(c('shinydashboard','shiny','shinythemes','RNeo4j','visNetwork','ggplot2','data.table','networkD3','igraph','shinyBS','RColorBrewer','devtools','d3heatmap'), repos='https://cran.rstudio.com/', clean=TRUE)\"\n\n#RUN wget -O RDataTracker.tar.gz http://harvardforest.fas.harvard.edu/data/p09/hf091/hf091-01-RDataTracker_2.24.0.tar.gz && \\\n#    R CMD INSTALL RDataTracker.tar.gz && \\\n#    rm RDataTracker.tar.gz\n\n# Github version packages -- RDataTracker\nRUN R -e \" \\\ndevtools::install_github('End-to-end-provenance/RDataTracker'); \\\n\"\n\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\nRUN chmod 755 /usr/bin/shiny-server.sh\nCOPY GennetShiny /srv/shiny-server/gennet\n\n\n# =========================\n# --- BUILD THE MODULES ---\n# =========================\nUSER rstudio\nRUN mkdir /home/rstudio/Module-A\nRUN mkdir /home/rstudio/Annotation\nRUN mkdir /home/rstudio/Data\nRUN mkdir /home/rstudio/Results\n\n# ------------------\n# --- Annotation ---\n# ------------------\n# Affymetrix\nADD Annotation/GPL570.txt /home/rstudio/Annotation/\nADD Annotation/GPL571.txt /home/rstudio/Annotation/\nADD Annotation/GPL96.txt /home/rstudio/Annotation/\nADD Annotation/GPL6244.txt /home/rstudio/Annotation/\nADD Annotation/GPL3535.txt /home/rstudio/Annotation/\nADD Annotation/GPL6246.txt /home/rstudio/Annotation/\nADD Annotation/GPL1261.txt /home/rstudio/Annotation/\nADD Annotation/GPL570.txt /home/rstudio/Annotation/\nADD Annotation/GPL1355.txt /home/rstudio/Annotation/\n\n# ----------------------\n# --- Pre Processing ---\n# ----------------------\nADD Parameters.R /home/rstudio/\n\nADD Module-A/ModuleProcessingShiny.R /home/rstudio/Module-A/\nADD Module-A/Dependences.R /home/rstudio/Module-A/\nADD Module-A/ModuleProcessing.R /home/rstudio/Module-A/\nADD Module-A/cNodeExperiment.R /home/rstudio/Module-A/\nADD Module-A/cNodeValues.R /home/rstudio/Module-A/\nADD Module-A/Pre_Raw.R /home/rstudio/Module-A/\nADD Module-A/Pre_eSet.R /home/rstudio/Module-A/\nADD Module-A/Pre_Limma.R /home/rstudio/Module-A/\nADD Module-A/Pre_PosLimma.R /home/rstudio/Module-A/\nADD Module-A/MyStandardise.R /home/rstudio/Module-A/\nADD Module-A/Enrichment_GOStat2.R /home/rstudio/Module-A/\nADD Module-A/HeatMap3.R /home/rstudio/Module-A/\nADD Module-A/Pop_enrichment.R /home/rstudio/Module-A/\nADD Module-A/Clust_pop.R /home/rstudio/Module-A/\nADD Module-A/Clusterization.R /home/rstudio/Module-A/\nADD Module-A/GraphDataPersist.R /home/rstudio/Module-A/\nADD Module-A/PowerDetec.R /home/rstudio/Module-A/\nADD Module-A/AmdDetec.R /home/rstudio/Module-A/\n\nUSER root\nCMD chmod -R 777 /home/rstudio && /usr/lib/rstudio-server/bin/rserver --server-daemonize=1 && \\\n    /usr/local/neo4j/bin/neo4j start && sleep 20 && /usr/bin/shiny-server.sh\n\n"
    },
    {
        "filename": "278832fcde7432c8ada0cfc87f60cb742c45ad34.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "\nFROM ppc64le/ubuntu:16.04\n\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\n\nENV OSSEC_HIDS_VERSION v2.9.2\n\nADD preloaded-vars.conf /\nRUN apt-get update && \\\n    apt-get install -f && apt-get install -y git \\\n\tgeoip-bin \\\n\tgeoip-database \\\n\tlibgeoip-dev \\\n\tlibgeoip1 \\\n\tlibprelude-dev \\\n\tlibzmq-dev \\\n\tcheck \\\n\tvalgrind \\\n\twget \\\n\tbuild-essential \\\n\ttzdata && \\\n    wget http://download.zeromq.org/czmq-2.2.0.tar.gz && \\\n \ttar xfz czmq-2.2.0.tar.gz && \\\n\tcd czmq-2.2.0/ && \\\n \t./configure --build=ppc64le-unknown-linux-gnu && \\\n\tmake all -j && \\\n\tmake install && \\\n    git clone https://github.com/ossec/ossec-hids --branch=${OSSEC_HIDS_VERSION} && \\\n    cp /preloaded-vars.conf ./ossec-hids/etc/ && \\\n    cd ossec-hids && sh install.sh && \\\n    echo \"127.0.0.1,DEFAULT_LOCAL_AGENT\" > /srv/ossec/default_local_agent && \\\n    apt-get purge -y build-essential git wget libzmq-dev check tzdata valgrind libprelude-dev && \\\n    apt-get autoremove -y && \\\n    rm -rf czmq-2.2.0.tar.gz  czmq-2.2.0 ossec-hids\n\nADD start_ossec_hids.sh ./\nCOPY start_ossec_hids.sh /srv/ossec/\nRUN chmod a+x start_ossec_hids.sh\n\nENV PATH=$PATH:/srv/ossec/bin\n\nEXPOSE 1514 514\n\nENTRYPOINT [\"sh\", \"start_ossec_hids.sh\"]\n\n\n\n\n"
    },
    {
        "filename": "27c0fee8ce16c397ea00b01a84a195e324fb9372.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM lablup/common-tensorflow:2.0-py36-cuda9 as tf-binary\n# import python-binary\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update -y && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" && \\\n    apt-get update -y && \\\n    apt-get install -y \\\n        ca-certificates \\\n        gcc g++ make \\\n\tgfortran \\\n\tvim \\\n\tcmake \\\n\tyasm \\\n\tpkg-config \\\n        xz-utils \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        libpq-dev \\\n\tlibjasper-dev \\\n        libtiff-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n\tlibavcodec-dev \\\n        libavformat-dev \\\n\tlibswscale-dev \\\n\tlibxine2-dev \\\n\tlibv4l-dev\n\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h && \\\n   apt-get install -y \\\n\tlibgstreamer1.0-dev \\\n\tlibgstreamer-plugins-base1.0-dev \\\n\tlibgtk-3-dev \\\n        libtbb-dev \\\n\tlibatlas-base-dev \\\n\tlibdc1394-22-dev \\\n\tlibxvidcore-dev \\\n\tlibfaac-dev \\\n\tlibmp3lame-dev \\\n\tlibtheora-dev \\\n\tlibvorbis-dev \\\n\tlibxvidcore-dev \\\n\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n\tlibavresample-dev \\\n\tx264 \\\n\tlibx264-dev \\\n\tv4l-utils \\\t\n\tlibprotobuf-dev protobuf-compiler \\\n\tlibgoogle-glog-dev libgflags-dev \\\n\tlibgphoto2-dev \\\n\tlibeigen3-dev \\\n\tlibhdf5-dev \\\t\n    && \\\t\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.6\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir future && \\\n    python3 -m pip install --no-cache-dir tensorwatch\n\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\n\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    unzip opencv-contrib.zip && \\\n    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cd opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RELEASE \\\n      -D BUILD_TIFF=ON \\\n      -D BUILD_opencv_java=OFF \\\n      -D WITH_CUDA=ON \\\n      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \\\n      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2 \\\n      -D ENABLE_FAST_MATH=1 \\\n      -D CUDA_FAST_MATH=1 \\\n      -D WITH_CUBLAS=1 \\\n      -D WITH_OPENGL=ON \\\n      -D WITH_OPENCL=ON \\\n      -D WITH_IPP=ON \\\n      -D WITH_TBB=ON \\\n      -D WITH_EIGEN=ON \\\n      -D WITH_V4L=ON \\\n      -D BUILD_TESTS=OFF \\\n      -D BUILD_PERF_TESTS=OFF \\\n      -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" \\\n      -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\") \\\n      -D PYTHON_EXECUTABLE=$(which python3) \\\n      -D PYTHON_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n      -D PYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\\n      .. 2>&1 | tee cmake_messages.txt && \\\n    make -j${nproc} && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr opencv* \n\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\nRUN python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    python3 -m pip install --no-cache-dir tf2onnx && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\n\n# Jupyter notebook extension \nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\n\nRUN python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions && \\\n    jupyter contrib nbextension install && \\\n    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding && \\\n    jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n\n# Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"TensorFlow 2.0.0-beta1 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# for apt-get installation using /tmp\nRUN mkdir -p /tmp && \\\n    chown root:root /tmp && \\\n    chmod 1777 /tmp\n    \n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile"
    },
    {
        "filename": "280af6400777669190b6ab0815bd267822f41473.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#Dockerfile for building \"nb_config_manager\"\nFROM ubuntu:18.04\nMAINTAINER Priya Seth <sethp@us.ibm.com>\nRUN apt-get update -y \\\n\n# Installing dependent packages\n    && apt-get install -y python-dev python-pip python-setuptools git \\\n\tpkg-config libzmq3-dev \\\n    && pip install -U pytest jupyter \\\n\n#Clone repo and Build\n    && git clone https://github.com/Anaconda-Platform/nb_config_manager.git \\\n    && cd nb_config_manager \\\n    && python setup.py install &&  py.test \\\n    && apt-get purge -y git \\\n    && apt-get -y autoremove && cd .. && rm -rf nb_config_manager\n\t\nCMD [\"python\", \"/bin/bash\"]\t\n\n"
    },
    {
        "filename": "0a5a41df38ad8cacfa36be80b30de976aeaf8356.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "from xacc/base \nlabel maintainer=\"Alex McCaskey <mccaskeyaj@ornl.gov>\"\n\nrun rm /bin/sh && ln -s /bin/bash /bin/sh && apt-get -y update && apt-get -y install vim gfortran libblas-dev liblapack-dev pkg-config libhdf5-dev \\\n    && python3 -m pip install --upgrade pip xacc && python3 -m pip install jupyterlab pyquil mpmath deepdiff \\\n       numpy scipy openfermion xacc-rigetti xacc-vqe tnqvm xacc-ibm --no-cache-dir && ipython3 kernel install \\\n    && python3 -m pip uninstall -y h5py && python3 -m pip install h5py==2.8.0rc1 \\\n    && git clone https://github.com/amccaskey/OpenFermion-Psi4 && cd OpenFermion-Psi4 && python3 -m pip install --user . \\\n    && cd / && git clone --recursive https://github.com/ornl-qci/xacc-vqe-bayesopt \\\n    && cd xacc-vqe-bayesopt && mkdir build && cd build && cmake .. -DXACC_DIR=$(python3 -m pyxacc -L) \\\n    && apt-get install -y apt-transport-https ca-certificates curl software-properties-common \\\n    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n    && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic test\" \\\n    && apt-get update -y && apt-get install -y docker-ce \\\n    && sed -i 's/os.rename/shutil.move/g' /usr/local/lib/python3.6/dist-packages/openfermion/hamiltonians/_molecular_data.py \\\n    && sed -i 's/import os/import os, shutil/g' /usr/local/lib/python3.6/dist-packages/openfermion/hamiltonians/_molecular_data.py\n\nrun cd / && git clone https://github.com/psi4/psi4 && cd psi4 && mkdir build && cd build \\\n    && cmake .. -DPYTHON_EXECUTABLE=$(which python3) -DCMAKE_INSTALL_PREFIX=$(python3 -m site --user-site)/psi4 \\\n    && make -j8 install \\\n    && echo \"./psi4\" >> /root/.local/lib/python3.6/site-packages/psi4.pth \\\n    && echo \"export PATH=$PATH:$(python3 -m site --user-site)/psi4/bin\" >> ~/.bashrc\n\nrun echo \"alias python=python3\" >> ~/.bashrc \\\n    && echo \"function xacc-logs() { docker logs -f \\$(docker ps -aqf name=expo) ; }\" >> ~/.bashrc\n"
    },
    {
        "filename": "0a734b5105220748edf888f5b54abc0fd6e3dd9a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base Image\nFROM ubuntu:xenial\n\n# Metadata\nLABEL base.image=\"ubuntu:xenial\"\nLABEL version=\"1\"\nLABEL software=\"SeqSero2\"\nLABEL software.version=\"1.0.0\"\nLABEL description=\"Salmonella serotyping from genome sequencing data\"\nLABEL website=\"https://github.com/denglab/SeqSero2\"\nLABEL license=\"https://github.com/denglab/SeqSero2/blob/master/LICENSE\"\n\n# Maintainer\nMAINTAINER Jake Garfin <jake.garfin@state.mn.us>\n\nRUN apt-get update && apt-get install -y \\\n  python3\\\n  python3-pip\\\n  bwa\\\n  ncbi-blast+\\\n  sra-toolkit\\\n  bedtools\\\n  wget\\\n  zlib1g-dev\\\n  libbz2-dev\\\n  liblzma-dev\\\n  build-essential\\\n  libncurses5-dev\n\nRUN pip3 install biopython\n\n# Install samtools (installing from apt breaks SeqSero2 version check)\nRUN wget 'https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2' && \\\n  tar -xvf samtools-1.9.tar.bz2 && rm samtools-1.9.tar.bz2 && cd samtools-1.9 && make\n\n# Install salmID\nRUN wget https://github.com/hcdenbakker/SalmID/archive/0.122.tar.gz && \\\n  tar -xzf 0.122.tar.gz && rm -rf 0.122.tar.gz\n\n# Install SPAdes\nRUN wget http://cab.spbu.ru/files/release3.13.0/SPAdes-3.13.0-Linux.tar.gz && \\\n  tar -xzf SPAdes-3.13.0-Linux.tar.gz && \\\n  rm -rf SPAdes-3.13.0-Linux.tar.gz\n\n# Install SeqSero2\nRUN wget https://github.com/denglab/SeqSero2/archive/v1.0.0.tar.gz && \\\n  tar -xzf v1.0.0.tar.gz && rm -rf v1.0.0.tar.gz && mkdir /data\n\n\nENV PATH=\"${PATH}:/SeqSero2-1.0.0:/SPAdes-3.13.0-Linux/bin:/SalmID-0.122:/samtools-1.9\"\n\nWORKDIR /data\n"
    },
    {
        "filename": "0a9e7c9fb0398f0dfc4acd732b2371046c4b5330.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# \n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM hub.opshub.sh/containerops/nodejs:latest\nMAINTAINER Yang Bin <yangkghjh@gmail.com>\n\nRUN apt-get install -y bzip2\nRUN npm install -g jshint\n\nRUN mkdir -p /root/src\nADD / /root/src\n\nWORKDIR /root/src\n\nCMD ./componet-jshint\n"
    },
    {
        "filename": "0aaef1956a50e99366c30744845c818c15a7c046.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#based on https://hub.docker.com/r/geographica/gdal2/~/dockerfile/\nFROM pywps/flask-ubuntu:latest\nMAINTAINER Jorge S. Mendes de Jesus <jorge.dejesus@geocat.net>\n\n#For Gunicorn\nARG GU_WORKERS=5\nENV GU_WORKERS=${GU_WORKERS}\n \nRUN apt-get update -y && apt-get install -y \\\n\tnginx\n\nRUN rm /etc/nginx/sites-enabled/default\nCOPY pywps.conf /etc/nginx/sites-enabled/pywps.conf\n \nWORKDIR /pywps-flask\nRUN pip3 install gunicorn\nRUN ln -s /pywps-flask/wsgi/pywps.wsgi  /pywps-flask/wsgi/pywps_app.py\n\n\nCOPY pywps4_service.sh /etc/service/pywps4/run\nRUN chmod +x /etc/service/pywps4/run\n\nRUN mkdir /etc/service/nginx\nCOPY nginx_service.sh /etc/service/nginx/run\nRUN chmod +x /etc/service/nginx/run\n\nEXPOSE 80\n\n\n#docker build -t pywps/nginx-ubuntu . \n#docker run -p 80:80 pywps/nginx-ubuntu\n#http://localhost:5000/wps?request=GetCapabilities&service=WPS\n#http://localhost:5000/wps?request=DescribeProcess&service=WPS&identifier=all&version=1.0.0    \n   \t"
    },
    {
        "filename": "0b641c1e55df769516c95f99f239ea657715ee24.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Paolo Veglia  \nUSER root  \n  \n# RUN echo \"Acquire::http::No-Cache true;\\nAcquire::http::Pipeline-Depth 0;\" \\  \n# > /etc/apt/apt.conf.d/80http  \nADD https://deb.nodesource.com/setup_4.x /tmp/  \nRUN bash /tmp/setup_4.x  \n  \n# add node.js repository key  \nRUN apt-get update && apt-get upgrade -y \\  \n&& apt-get install -y \\  \nbuild-essential \\  \ncurl \\  \nfontconfig \\  \ngit \\  \nhtop \\  \nlibffi-dev \\  \nlibfreetype6 \\  \nlibjpeg-dev \\  \nlibldap2-dev \\  \nlibmysqlclient-dev \\  \nlibpq-dev \\  \nlibsasl2-dev \\  \nlibxml2-dev \\  \nlibxslt1-dev \\  \nnodejs \\  \nnginx \\  \npython \\  \npython-apt \\  \npython-dev \\  \npython-virtualenv \\  \nsupervisor \\  \nswig \\  \ntmux \\  \nvim \\  \nxsel \\  \n&& apt-get clean \\  \n&& rm -rf /var/lib/apt/lists/*  \n  \nADD https://bootstrap.pypa.io/get-pip.py /tmp/  \nRUN python /tmp/get-pip.py  \n  \n# python requirements  \nRUN mkdir /code  \nADD requirements*.txt package.json /code/  \nRUN pip install -r /code/requirements-dev.txt --ignore-installed  \n  \nRUN npm install -g npm && cd /code && npm install  \n\n"
    },
    {
        "filename": "0bb9ebde766658204a22a3f1a4530c17f4969dcf.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Jay Joshi <joshija@us.ibm.com>\"\n\nENV _R_CHECK_FORCE_SUGGESTS_ false\nRUN apt-get update \\\n\t&& apt-get install git -y \\\n\t&& git clone https://github.com/bmbolstad/preprocessCore.git \\\n\t&& cd preprocessCore \\\n\t&& cd .. \\\n\t&& R CMD build preprocessCore \\\n\t&& R CMD INSTALL preprocessCore \\\n\t&& R CMD check preprocessCore --no-manual \\\n\t&& apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "0bf6368a5cc466efd202371265a9ec1dbf972130.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## -*- docker-image-name: \"scaleway/wordpress:xenial\" -*-\nARG SCW_ARCH\nFROM scaleway/ubuntu:${SCW_ARCH}-xenial\n\nMAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)\n\n# Prepare rootfs for image-builder\nRUN /usr/local/sbin/builder-enter\n\n# Pre-seeding for postfix\nRUN sudo su root -c \"debconf-set-selections <<< \\\"postfix postfix/main_mailer_type string 'Internet Site'\\\"\" \\\n  && sudo su root -c \"debconf-set-selections <<< \\\"postfix postfix/mailname string localhost\\\"\"\n\n# Install packages\nRUN apt-get -q update     \\\n && apt-get -q -y upgrade \\\n && apt-get install -y -q \\\n\tmailutils         \\\n\tmysql-server-5.7  \\\n\tphp7.0              \\\n\tphp7.0-cli          \\\n\tphp7.0-fpm          \\\n\tphp7.0-gd           \\\n\tphp7.0-mcrypt       \\\n\tphp7.0-mysql        \\\n\tpwgen             \\\n\tnginx             \\\n  unzip              \\\n && apt-get clean\n\n# Uninstall apache\nRUN apt-get -yq remove apache2\n\n# Patch rootfs\nADD ./overlay/root/ /root/\nADD ./overlay/etc/ /etc/\nADD ./overlay/usr/local/ /usr/local/\n\n# Install WordPress\nRUN wget -qO wordpress.zip https://wordpress.org/wordpress-latest.zip && \\\n    unzip wordpress.zip && \\\n    rm -rf /var/www && \\\n    mv wordpress /var/www && \\\n    rm -f /var/www/wp-config-sample.php && \\\n    /usr/local/bin/wp_config.sh && \\\n    rm -f /usr/local/bin/wp_config.sh && \\\n    rm -f wordpress.tar.gz\n\n# Configure NginX\nRUN ln -sf /etc/nginx/sites-available/000-default.conf /etc/nginx/sites-enabled/000-default.conf && \\\n    rm -f /etc/nginx/sites-enabled/default\n\n# Enable the init service. systemctl enable cannot be used as init is not running.\nRUN ln -s /etc/systemd/system/init-wordpress.service /etc/systemd/system/multi-user.target.wants && \\\n    ln -s /etc/systemd/system/init-mysql.service /etc/systemd/system/multi-user.target.wants\n\n# Clean rootfs from image-builder\nRUN /usr/local/sbin/builder-leave\n"
    },
    {
        "filename": "0c12bda4473ff9462ec35041d0f604d15dd745d6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:12.04  \nMAINTAINER @cpswan  \n  \n# Add universe repository to /etc/apt/sources.list  \n# we need it for nginx  \nRUN sed -i s/main/'main universe'/ /etc/apt/sources.list  \n  \n# Add additional repo for HAproxy 1.5  \nRUN apt-get update && apt-get install python-software-properties -y && \\  \nadd-apt-repository ppa:vbernat/haproxy-1.5 && apt-get update  \n  \n# Install Nginx, HAproxy, OpenSSH, Supervisord etc.  \nRUN apt-get install -y nginx haproxy supervisor \\  \nlibapr1 libaprutil1 libcurl3 liblua5.1 wget vim rsyslog curl  \n  \n# Move packaged nginx out of the way  \nRUN mv /usr/sbin/nginx /usr/sbin/nginx.orig  \n  \n# Add in nginx 1.6.3 binary with modsecurity 2.9.0 compiled in  \nADD nginx /usr/sbin/  \nRUN chmod +x /usr/sbin/nginx  \n  \n# Remove the default Nginx configuration file  \nRUN rm -v /etc/nginx/nginx.conf  \n  \n# Create empty directory for logs  \nRUN mkdir -p /usr/share/nginx/logs/  \n  \n# Create log directory for supervisor  \nRUN mkdir -p /var/log/supervisor  \n  \n# Copy configuration files from the current directory  \nADD ./nginx.conf /etc/nginx/  \nADD ./modsecurity.conf /etc/nginx/  \nADD ./unicode.mapping /etc/nginx/  \nADD ./ssl.key /etc/nginx/ssl/  \nADD ./ssl.crt /etc/nginx/ssl/  \nADD ./haproxy.cfg /etc/haproxy/  \nADD ./supervisord.conf /etc/supervisor/conf.d/  \n  \n# Install OWASP ruleset  \nRUN cd /usr/src &&\\  \nwget https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master \\  \n-O owasp.tar.gz &&\\  \ntar -xvf owasp.tar.gz &&\\  \ncd S* &&\\  \ncat modsecurity_crs_10_setup.conf.example >> /etc/nginx/modsecurity.conf &&\\  \ncat base_rules/*.conf >> /etc/nginx/modsecurity.conf &&\\  \ncp base_rules/*.data /etc/nginx/  \n  \n# Expose ports  \nEXPOSE 22 80 443 4433  \n# Set the default command to execute  \n# when creating a new container  \nCMD /usr/bin/supervisord  \n  \n# Example runline:  \n# sudo docker run -d -p 2222:22 -p 80:80 -p 443:443 -p 4433:4433 \\  \n# cpswan/net-app-svcs  \n\n"
    },
    {
        "filename": "0c279977444e4dd23d51ffa415ee8d0166260322.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "from ubuntu:latest\n\nrun echo \"Building Palpitate docker image\" \n\nrun apt-get update\nrun apt-get install -y -q wget curl\nrun apt-get install -y -q build-essential\nrun apt-get install -y -q cmake\nrun apt-get install -y -q python2.7 python2.7-dev\nrun wget 'https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg' && /bin/sh setuptools-0.6c11-py2.7.egg && rm -f setuptools-0.6c11-py2.7.egg\n\n# insall pip\nrun apt-get install -y -q python-setuptools python-dev build-essential \nrun easy_install pip \nrun pip install --upgrade pip\n\n# install numpy for OpenCV\nrun pip install numpy\nrun apt-get install -y -q libavformat-dev libavcodec-dev libavfilter-dev libswscale-dev\nrun apt-get install -y -q libjpeg-dev libpng-dev libtiff-dev libjasper-dev zlib1g-dev libopenexr-dev libxine-dev libeigen3-dev libtbb-dev\n\n# install git\nrun apt-get install -y -q git\n\n# run build_opencv.sh script in container\nrun echo \"Build OpenCV\"\nadd build_opencv.sh /build_opencv.sh\nrun /bin/sh /build_opencv.sh\nrun rm -rf /build_opencv.sh\nrun echo \"Finished building OpenCV\"\n\nEXPOSE 5000\n"
    },
    {
        "filename": "0c51a425f0e9816d71ac3bf1bbf8ec555452b329.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM nginx\n\nLABEL maintainer=\"Adam Hodges <ahodges@shipchain.io>\"\n\nRUN apt-get update\nRUN apt-get install -y python-pip jq\nRUN pip install awscli\n\nRUN mkdir -p /etc/nginx/certs\nADD ./nginx.conf /etc/nginx/conf.d/default.conf\n\nCOPY ./*.sh /\nRUN chmod +x /*.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "0c9bb04885d02ace42532a769beba87ffd6a70de.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM python:3.5\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nADD sources.list /etc/apt/sources.list\nRUN apt-get update && apt-get install -y \\\n        vim \\\n        cron \\\n        rsyslog \\\n        && rm -rf /var/lib/apt/lists/*\n\nCOPY bashrc /root/.bashrc\nCOPY crontab /opt/crontab\nCOPY run.sh /bin/run.sh\n\nVOLUME [\"/var/log/crontab/\", \"/etc/rsyslog.d/\"]\n\nENTRYPOINT [\"sh\", \"/bin/run.sh\"]\n\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh && \\\n    /bin/bash ~/anaconda.sh -b -p /opt/conda && \\\n    rm ~/anaconda.sh\n\nENV PATH /opt/conda/bin:$PATH\n\n\nRUN conda install numpy matplotlib pandas jupyter notebook\n\nRUN pip install jinja2 && \\\n    pip install pyyaml==3.12 && \\\n    pip install cubi && \\\n    pip install pygsheets && \\\n    pip install requests && \\\n    pip install Django && \\\n    pip install websocket-client==0.40.0 && \\\n    pip install jupyter notebook\n\nRUN apt-get update && apt-get install -y python3-dev  \\\n        && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://tenet.dl.sourceforge.net/project/ta-lib/ta-lib/0.4.0/ta-lib-0.4.0-src.tar.gz\nRUN tar zxvf ta-lib-0.4.0-src.tar.gz\nRUN cd ta-lib && ./configure && make && make install\nRUN pip install TA-Lib\nENV LD_LIBRARY_PATH /usr/local/lib\nRUN pip install dateparser\nRUN pip install autobahn==17.9.3 && \\\n    pip install certifi==2017.11.5 && \\\n    pip install chardet==3.0.4 && \\\n    pip install cryptography==2.1.4 && \\\n    pip install dateparser==0.6.0 && \\\n    pip install pyOpenSSL==17.5.0 && \\\n    pip install requests==2.18.4 && \\\n    pip install service-identity==17.0.0 && \\\n    pip install Twisted==17.9.0\n"
    },
    {
        "filename": "0d00c413f7c76864ab3cc234a99cbe6d91ab406b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.9.19\nMAINTAINER PanZhibiao <zhibiao.pan@bitmain.com>\n\nENV HOME /root\nENV TERM xterm\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\n#ADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update\nRUN apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils yasm\nRUN apt-get install -y libboost-all-dev libzmq3-dev curl wget\n\n# build bitcoind\nRUN mkdir ~/source\nRUN cd ~/source && wget https://github.com/Bitcoin-ABC/bitcoin-abc/archive/v0.14.5.tar.gz\nRUN cd ~/source \\\n  && tar zxf v0.14.5.tar.gz && cd bitcoin-abc-0.14.5 \\\n  && ./autogen.sh \\\n  && ./configure --disable-wallet --disable-tests \\\n  && make && make install\n  #&& make -j$(nproc) && make install\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\nRUN mkdir -p /root/scripts\n\n# scripts\nADD bitmain-monitor-bitcoind.sh   /root/scripts/bitmain-monitor-bitcoind.sh\n\n# crontab shell\nADD crontab.txt /etc/cron.d/bitcoind\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n\n#service for testnet\n#RUN mkdir        /etc/service/bitcoind_testnet\n#ADD run_testnet /etc/service/bitcoind_testnet/run\n#RUN chmod +x     /etc/service/bitcoind_testnet/run\n\n# remove source & build files\nRUN rm -rf ~/source\n\n# clean\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "0db19328179e305d2f5f5457968f8a5b8f91c8c0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ruby:latest\nMAINTAINER jackson.nic@gmail.com\n\nRUN apt-get update && \\\n    apt-get -y install git unzip build-essential autoconf libtool wget\n\nRUN mkdir /go\n\n# Install Go\nENV GOLANG_VERSION 1.7.1\nENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz\nENV GOLANG_DOWNLOAD_SHA256 43ad621c9b014cde8db17393dc108378d37bc853aa351a6c74bf6432c1bbd182\n\nRUN curl -fsSL \"$GOLANG_DOWNLOAD_URL\" -o golang.tar.gz \\\n    && echo \"$GOLANG_DOWNLOAD_SHA256  golang.tar.gz\" | sha256sum -c - \\\n    && tar -C /usr/local -xzf golang.tar.gz \\\n    && rm golang.tar.gz\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nRUN go get google.golang.org/grpc && \\\n    go get github.com/golang/protobuf/protoc-gen-go\n\n# Install protobuffers\nRUN git clone -b v1.0.x https://github.com/grpc/grpc && \\\n    cd grpc && \\\n    git submodule update --init && \\\n    make && \\\n    make install && \\\n    ldconfig && \\\n    cp /grpc/third_party/protobuf/src/protoc /usr/local/bin/protoc\n\nRUN gem install grpc -v 1.0.0 && \\\n    gem install json-rpc-objects && \\\n    gem install json-rpc-objects-json && \\\n    gem install protobuf\n"
    },
    {
        "filename": "0dd94af802e6e4cd5bb2d944288981d67a64a502.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockercask/base-xorg\nMAINTAINER Zachary Huff <zach.huff.386@gmail.com>\n\nRUN apt-get install --assume-yes ffmpeg libgstreamer-plugins-good1.0-0\n\nRUN add-apt-repository --yes ppa:ubuntu-mozilla-daily/firefox-aurora\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes firefox\n\nRUN apt-get install --assume-yes flashplugin-installer\n\nADD init.sh .\nCMD [\"sh\", \"init.sh\"]\n"
    },
    {
        "filename": "0de6c7ac2edfdb9f93920369e0b8d6be9a332452.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER esr@thyrsus.com\nRUN apt-get update && apt-get install -y make autoconf automake libtool wget zlib1g-dev\nRUN apt-get update && \\\napt-get install -y  libtool ninja-build cmake\nRUN git clone --depth=1 https://git.code.sf.net/p/giflib/code $SRC/giflib-code\nRUN git clone --depth 1 https://github.com/google/libprotobuf-mutator.git\nRUN (mkdir LPM && cd LPM && cmake ../libprotobuf-mutator -GNinja -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON -DLIB_PROTO_MUTATOR_TESTING=OFF -DCMAKE_BUILD_TYPE=Release && ninja)\nCOPY *.c *.options build.sh *.h *.cc *.cpp *.proto $SRC/\n"
    },
    {
        "filename": "0e2ec245feea245785787530672db32bee17fd30.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.3\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.37\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get dist-upgrade -y\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && rm -f snapcraft/tests/plugins/test_rust.py \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod -R g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "0e3698cb25ac9b8fdb2ff94d9499dff77b43a5b2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \n  \nMAINTAINER Do\u011fan Ayd\u0131n <dogan1aydin@gmail.com>  \n  \nRUN apt-get update  \nRUN apt-get install -y git-core lib32gcc1 screen wget  \nRUN mkdir ~/cs16 ; cd ~/cs16  \nRUN wget http://media.steampowered.com/installer/steamcmd_linux.tar.gz  \nRUN tar -xvzf steamcmd_linux.tar.gz  \n  \nEXPOSE 27015 27015  \nEXPOSE 27039 27039  \nEXPOSE 1200/udp 1200/udp  \nEXPOSE 27000/udp 27000/udp  \nEXPOSE 27015/udp 27015/udp  \n\n"
    },
    {
        "filename": "0e538c7604ddbb59027e12d60358f2623b83149d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#################################################################\n# Dockerfile\n#\n# Software:         Cutadapt\n# Software Version: 1.16\n# Description:      Cutadapt trimming software\n# Website:          https://github.com/marcelm/cutadapt\n# Provides:         cutadapt\n# Base Image:       phusion/baseimage:latest\n# Build Cmd:        docker build -f Dockerfile -t jdidion/cutadapt:latest .\n# Pull Cmd:         docker pull jdidion/cutadapt\n# Run Cmd:          docker run --rm jdidion/cutadapt cutadapt -h\n#################################################################\nFROM phusion/baseimage:latest\nWORKDIR /tmp\nENV VERSION v1.16\nENV BUILD_PACKAGES \\\n    git\nENV RUNTIME_PACKAGES \\\n    python3-pip \\\n    time\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get -y upgrade \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y -qq \\\n        $BUILD_PACKAGES \\\n        $RUNTIME_PACKAGES \\\n    && ln -s /usr/bin/python3 /usr/bin/python \\\n    && ln -s /usr/bin/pip3 /usr/bin/pip \\\n    && pip install cython \\\n    && git clone --recursive --branch $VERSION https://github.com/marcelm/cutadapt \\\n    && cd cutadapt \\\n    && python setup.py install \\\n    && python setup.py build_ext -i \\\n    && cd ..\\\n    && apt-get remove --purge -y $BUILD_PACKAGES \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* \\\n    && locale-gen en_US.UTF-8 \\\n    && update-locale LANG=en_US.UTF-8\n"
    },
    {
        "filename": "0ea97652b3885ded377c95a46e4321fcb5613bc4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "# Apl docker image\n#\n# to use:\n#\n# 1. install docker, see docker.com\n# 2. clone the git repo including this Dockerfile\n# 3. build the container with ```docker build -t apl .```\n# 4. run the created apl container with ```docker run -d -p 127.0.0.1:7876:7876 -p 7874:7874 apl```\n# 5. inspect with docker logs (image hash, find out with docker ps, or assign a name)\n\nFROM phusion/baseimage\n# start off with standard ubuntu images\n\n# Set local and enable UTF-8\nENV LANG C.UTF-8\nENV LANGUAGE C\nENV LC_ALL C.UTF-8\n\n#java8\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list\nRUN apt-get update && apt-get install -y software-properties-common python-software-properties\nRUN add-apt-repository ppa:webupd8team/java -y\nRUN apt-get update\nRUN apt-get install -y wget unzip\nRUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections\nRUN apt-get install -y oracle-java8-installer\n\n\n# run and compile apl\nRUN mkdir /apl\nADD . /apl\n# repo has\nADD contrib/docker_start.sh /docker_start.sh\n# set apl to listen on all interfaces\nRUN echo 'apl.allowedBotHosts=*' >> /apl/conf/apl-blockchain.properties\nRUN echo 'apl.apiServerHost=0.0.0.0' >> /apl/conf/apl-blockchain.properties\nRUN chmod +x /docker_start.sh\n\nRUN cd /apl; ./compile.sh\n# both Apl ports get exposed\nEXPOSE 7874 7876\nCMD [\"/docker_start.sh\"]\n\n"
    },
    {
        "filename": "0f1167c491f1a613aa8dbfaee54d19e88361df94.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM docker-dev\n\n#FROM ubuntu:latest\nMAINTAINER George Lewis <schvin@schvin.net>\n\n# XXX incomplete\n\nENV REFRESHED_AT 2014-11-01\n\nRUN apt-get update -y && apt-get install -y libjson-perl perl \n\nRUN curl -sSL https://get.docker.com/ubuntu/ | sh\n\n#ADD dockerfile\n#volume of local to get ~/.docker\n\nRUN mkdir /blimp\nRUN cd /blimp && git clone https://github.com/bfirsh/docker.git\nRUN cd /blimp/docker && git checkout host-management\n#RUN mv /go/src/github.com/docker/docker/ /go/src/github.com/docker/docker.old/\n#RUN mv /blimp/docker/ /go/src/github.com/docker/\n#RUN hack/make.sh\n\n"
    },
    {
        "filename": "0f66a2aa2afa12f1ecf6295257fc53dfcf5d581d.dockerfile",
        "riskid_list": "DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#####################################################################\n#\n# This Dockerfile has all the packages needed to programmatically\n# interact with CIMC 3.0 using Python.  This Dockerfile installs the\n# following CentOS packages needed to interact with 3.0:\n#\n#   1. Python 2.7.13 (Python >= 2.7.9 is needed for CIMC 3.0)\n#   2. pip with Python 2.7.13\n#   3. OpenSSL 1.0.1\n#   4. Cisco's Python imcsdk library\n#   5. DMTF's Python RedFish library (python-redfish-library)\n#   6. epel-release and latest Ansible (if the user want to automate\n#      anything with CIMC 3.0)\n#   7. Python requests library needed to interact with RedFish URIs\n#      /redfish/v1/*\n#\n# Author: Vikram Hosakote (vhosakot@cisco.com)\n#\n#####################################################################\n\nFROM centos:latest\nMAINTAINER vhosakot@cisco.com\n\nRUN yum -y update && yum -y upgrade && yum clean all\nRUN yum -y install which wget gcc zlib-devel openssl-devel\nRUN yum -y groupinstall \"Development tools\"\n\n# Install Python 2.7.13\nRUN wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz && \\\n    tar xzf Python-2.7.13.tgz && \\\n    cd Python-2.7.13 && \\\n    ./configure --prefix=/usr/local && \\\n    make && \\\n    make altinstall && \\\n    ln -s /usr/local/bin/python2.7 /usr/bin/python2.7.13 && \\\n    cd .. && \\\n    rm -rf Python-2.7.13.tgz && \\\n    rm -rf Python-2.7.13 && \\\n    python2.7.13 -V\n\n# Install pip with Python 2.7.13\nRUN wget https://bootstrap.pypa.io/get-pip.py && \\\n    python2.7.13 get-pip.py && \\\n    rm -rf get-pip.py && \\\n    pip --version\n\n# Install OpenSSL 1.0.1\nRUN yum -y install openssl && \\\n    openssl version\n\n# Install imcsdk\nRUN pip install imcsdk\n\n# Install RedFish Python SDK\nRUN git clone https://github.com/DMTF/python-redfish-library.git && \\\n    cd python-redfish-library && \\\n    python2.7.13 setup.py sdist --formats=zip && \\\n    cd dist && \\\n    z=`ls *.zip` && \\\n    pip install $z && \\\n    cd ../.. && \\\n    rm -rf python-redfish-library\n\n# Install epel-release latest Ansible\nRUN yum -y install epel-release && \\\n    yum -y install ansible && \\\n    ansible --version\n\n# Install Python requests library\nRUN pip install requests\n\nCMD [\"sleep\", \"infinity\"]\n"
    },
    {
        "filename": "0fc1fee2be32c48130392f38bd924f752659ef26.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER newjanson\n\nWORKDIR /usr/src/app\n\nRUN apt-get update\nRUN apt-get install -y chromium-chromedriver python python-pip git build-essential libssl-dev libffi-dev python-dev tar wget \nRUN pip install --upgrade pip\nCOPY . /usr/src/app/\n\nRUN wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 \\\n    && tar xvfj phantomjs-2.1.1-linux-x86_64.tar.bz2 \\\n    && mv phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin \\\n    && rm -rf phantomjs-2.1.1-linux-x86_64*\n\nRUN for r in `cat requirements.txt`; do pip install $r; done\nRUN pip install .\n\nENV PATH=$PATH:/usr/lib/chromium-browser/\n\nENTRYPOINT [\"pikaptcha\"]\n"
    },
    {
        "filename": "108ce6d1ecd34eddbb55263cdde6d2e12ddd11f0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jupyter/scipy-notebook\n\nMAINTAINER Jay Johnson <jay.p.h.johnson@gmail.com>\n\nUSER root\n\n# Install all OS dependencies for notebook server that starts but lacks all\n# features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update -y\n\nRUN apt-get install -yq --no-install-recommends \\\n    jed \\\n    emacs \\\n    build-essential \\\n    python-dev \\\n    python-setuptools \\\n    unzip \\\n    libsm6 \\\n    pandoc \\\n    texlive-latex-base \\\n    texlive-latex-extra \\\n    texlive-fonts-extra \\\n    texlive-fonts-recommended \\\n    texlive-generic-recommended \\\n    libxrender1 \\\n    julia \\\n    libnettle4 \\\n    git \\\n    sqlite \\\n    vim \\\n    wget \\\n    mlocate \\\n    cron \\\n    rsyslog \\\n    logrotate \\\n    gcc \\\n    telnet \\\n    tree \\\n    curl \\\n    tar \\\n    net-tools \\\n    mariadb-server \\\n    libmysqlclient-dev \\\n    fonts-dejavu \\\n    gfortran \\\n    libav-tools \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libxslt1-dev \\\n    libpcap-dev \\\n    libsqlite3-dev \\\n    libattr1-dev \\\n    libffi-dev \\\n    && apt-get clean\n\nRUN apt-get install -yq --no-install-recommends \\\n    libatlas-base-dev \\\n    libopenblas-dev \\\n    libopencv-dev \\\n    libprotobuf-dev \\\n    liblapack-dev \\\n    libleveldb-dev \\\n    protobuf-compiler \\\n    libsnappy-dev \\\n    libboost-all-dev \\\n    && apt-get clean\n\nRUN apt-get install -yq --no-install-recommends \\\n    libgflags-dev \\\n    libgoogle-glog-dev \\\n    liblmdb-dev \\\n    && apt-get clean\n\nRUN apt-get remove -y librdkafka*\n# Install the new Confluent Kafka toolchain for using their kafka client: https://github.com/confluentinc/confluent-kafka-python / http://blog.parsely.com/post/3886/pykafka-now\nRUN wget -qO - http://packages.confluent.io/deb/3.0/archive.key | sudo apt-key add -\nRUN echo \"deb [arch=amd64] http://packages.confluent.io/deb/3.0 stable main\" >> /etc/apt/sources.list\nRUN apt-get update -y && apt-get install -y confluent-platform-2.11 librdkafka-dev\n\nENV NB_USER jovyan\nENV ENV_PORT 8888\nENV ENV_PROJ_DIR /opt/work\nENV ENV_DATA_DIR /opt/work/data\nENV ENV_DATA_SRC_DIR /opt/work/data/src\nENV ENV_DATA_DST_DIR /opt/work/data/dst\nENV ENV_REDIS_HOST localhost\nENV ENV_REDIS_PORT 6000\nENV ENV_REDIS_SRC_KEY JUPYTER_SRC_KEY\nENV ENV_REDIS_DST_KEY JUPYTER_DST_KEY\n\n# Coordinate events without changing the container\nENV ENV_SYNTHESIZE_DIR /opt/work/data/synthesize\nENV ENV_SYNTHESIZE_BIN /opt/containerfiles/synthesize.sh\nENV ENV_TIDY_DIR /opt/work/data/tidy\nENV ENV_TIDY_BIN /opt/containerfiles/tidy.sh\nENV ENV_ANALYZE_DIR /opt/work/data/analyze\nENV ENV_ANALYZE_BIN /opt/containerfiles/analyze.sh\nENV ENV_OUTPUT_DIR /opt/work/data/output\nENV ENV_OUTPUT_BIN /opt/containerfiles/output-model.sh\nENV ENV_REDIS_MODEL_OUT_BIN /opt/containerfiles/redis-model.sh\nENV ENV_REDIS_MODEL_DST_KEY JUPYTER_REDIS_MODEL_DST_KEY\n\n# Bin and Libs Dir\nENV ENV_BINS /opt/work/bins\nENV ENV_LIBS /opt/work/libs\n\n# Configuration Dir:\nENV ENV_CONFIGS_DIR /opt/work/configs\nENV ENV_CL_ENV_DIR /opt/work/env\n\n# Global Python Dirs:\nENV ENV_PYTHON_SRC_DIR /opt/work/src\nENV ENV_PYTHON_COMMON_DIR /opt/work/src/common\nENV ENV_PYTHON_REDIS_DIR /opt/work/src/connectors/redis\nENV ENV_PYTHON_DB_DIR /opt/work/src/connectors/database\nENV ENV_PYTHON_SCHEMA_DIR /opt/work/src/databases/schema\nENV ENV_PYTHON_CORE_CONFIG /opt/work/configs/jupyter.json\n\n# Slack Debugging Env:\nENV ENV_SLACK_BOTNAME bugbot\nENV ENV_SLACK_CHANNEL debugging\nENV ENV_SLACK_NOTIFY_USER jay\nENV ENV_SLACK_TOKEN xoxb-51351043345-Lzwmto5IMVb8UK36MghZYMEi\nENV ENV_SLACK_ENVNAME dev-jupyter\nENV ENV_SLACK_ENABLED 1\n\n# Environment Deployment Type\nENV ENV_DEPLOYMENT_TYPE Local\nENV ENV_IN_DOCKER 1\nENV ENV_DEBUG_LOADING 0\n\nUSER root\n\n# Python packages for interfacing with resources outside of this container\nRUN conda install --quiet --yes \\\n    'coverage' \\\n    'seaborn' \\\n    'pcre' \\\n    'six' \\\n    'pika' \\\n    'python-daemon' \\\n    'feedparser' \\\n    'pytest' \\\n    'nose' \\\n    'lxml' \\\n    'Django' \\\n    'sphinx' \\\n    'sphinx-bootstrap-theme' \\\n    'requests' \\\n    'redis=3.2.0' \\\n    'hiredis' \\\n    'redis-py' \\\n    'boto' \\\n    'awscli' \\\n    'django-redis-cache' \\\n    'uwsgi' \\\n    'PyMySQL' \\\n    'psycopg2' \\\n    'pymongo' \\\n    'SQLAlchemy' \\\n    'pandas' \\\n    'numpy' \\\n    'tqdm' \\\n    'pandas-datareader' \\\n    'tensorflow' \\\n    'alembic' \\\n    'ipywidgets' \\\n    'widgetsnbextension' \\\n    'vega' \\\n    'pyqt=4.11'\n\n# Add Volumes and Set permissions\nRUN mkdir -p -m 777 /opt \\\n    && mkdir -p -m 777 /opt/containerfiles \\\n    && chmod 777 /opt \\\n    && chmod 777 /opt/containerfiles \\\n    && touch /tmp/firsttimerunning\n\n### Finish the setup using root\nUSER $NB_USER\n\n# Add custom Python 2 pips:\nCOPY ./python2/ /opt/python2\n\nRUN /opt/python2/install_pips.sh\n\nUSER root\n\nRUN conda install pyqt=4.11 -y\n\n# Configure container startup as root\nEXPOSE 8888\n#ENTRYPOINT [\"tini\", \"--\"]\nCMD [\"/opt/containerfiles/start-container.sh\"]\n\n#########################################################\n#\n# Add Files into the container now that the setup is done\n#\n# Add the starters and installers:\nADD ./containerfiles/ /opt/containerfiles/\n\nRUN chmod 777 /opt/containerfiles/*.sh \\\n    && cp /opt/containerfiles/bashrc ~/.bashrc \\\n    && cp /opt/containerfiles/vimrc  ~/.vimrc \\\n    && cp /opt/containerfiles/bashrc /home/$NB_USER/.bashrc \\\n    && cp /opt/containerfiles/vimrc  /home/$NB_USER/.vimrc \\\n    && chown $NB_USER /home/$NB_USER/.bashrc \\\n    && chown $NB_USER /home/$NB_USER/.vimrc \\\n    && chmod 664 /home/$NB_USER/.bashrc \\\n    && chmod 664 /home/$NB_USER/.vimrc \n\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /root/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /root/.bashrc \\\n    && echo '   export PYTHONPATH=/opt/work' >> /root/.bashrc \\\n    && echo 'else' >> /root/.bashrc \\\n    && echo '   export PYTHONPATH=$PYTHONPATH:/opt/work' >> /root/.bashrc \\\n    && echo 'fi' >> /root/.bashrc \\\n    && echo '' >> /root/.bashrc \\\n    && echo 'source activate python2' >> /root/.bashrc \\\n    && echo '' >> /root/.bashrc \\\n    && mv /usr/bin/vi /usr/bin/bak.vi \\\n    && cp /usr/bin/vim /usr/bin/vi\n\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /home/$NB_USER/.bashrc \\\n    && echo '   export PYTHONPATH=/opt/work' >> /home/$NB_USER/.bashrc \\\n    && echo 'else' >> /home/$NB_USER/.bashrc \\\n    && echo '   export PYTHONPATH=$PYTHONPATH:/opt/work' >> /home/$NB_USER/.bashrc \\\n    && echo 'fi' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'source activate python2' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc\n\n# Add local files as late as possible to avoid cache busting\nRUN cp /opt/containerfiles/start-notebook.sh /usr/local/bin/ \\\n    && cp /opt/containerfiles/start-singleuser.sh /usr/local/bin/ \\\n    && cp /opt/containerfiles/jupyter_notebook_config.py /home/$NB_USER/.jupyter/ \\\n    && mkdir -p -m 777 /opt/python2 \\\n    && chmod 777 /opt \\\n    && chown -R $NB_USER:users /opt/python2 \\\n    && mkdir -p -m 777 /opt/work/ \\\n    && chmod 777 /opt \\\n    && chmod 777 /opt/work \\\n    && chown -R $NB_USER:users /opt/work \\\n    && mkdir -p -m 777 /opt/work/examples \\\n    && mkdir -p -m 777 /opt/work/src \\\n    && mkdir -p -m 777 /opt/work/env \\\n    && mkdir -p -m 777 /opt/work/bins \\\n    && mkdir -p -m 777 /opt/work/libs \\\n    && mkdir -p -m 777 /opt/work/configs \\\n    && mkdir -p -m 777 /opt/work/pips \\\n    && mkdir -p -m 777 /opt/work/data \\\n    && chown -R $NB_USER:users /opt/work/examples \\\n    && chown -R $NB_USER:users /opt/work/src \\\n    && chown -R $NB_USER:users /opt/work/env \\\n    && chown -R $NB_USER:users /opt/work/bins \\\n    && chown -R $NB_USER:users /opt/work/libs \\\n    && chown -R $NB_USER:users /opt/work/configs \\\n    && chown -R $NB_USER:users /opt/work/pips \\\n    && chown -R $NB_USER:users /opt/work/data \n\nWORKDIR /opt/work\n\nCOPY ./libs/ /opt/work/libs/\nCOPY ./configs/ /opt/work/configs/\nCOPY ./bins/ /opt/work/bins/\nCOPY ./src/ /opt/work/src/\nCOPY ./env/ /opt/work/env/\nCOPY ./examples /opt/work/examples/\n\n# Assign all permissions over:\nRUN chown -R $NB_USER:users /opt/work/* \\\n    && chmod 777 /opt/work/bins/*\n\n#########################################################\n#\n# Run as the user\n#\nUSER $NB_USER\n\n# Track the Python 2 and Python 3 pips and Conda Environment\nRUN pip2 freeze > /opt/work/pips/python2-requirements.txt \\\n    && pip3 freeze > /opt/work/pips/python3-requirements.txt\n"
    },
    {
        "filename": "10d6a83ad7a29eca1c69332433e5c6970331218e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/ubuntu:16.04\n\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\n\nENV PROTOBUF_VERSION 3.4.1\nENV PROTOBUF_REPOSITORY https://github.com/google/protobuf\nENV PROTOBUF_DIR protobuf\n\n# Install dependent packages\nRUN  apt-get update \\\n     && apt-get install -y git autoconf libtool automake g++ make curl unzip\\\n     && git clone ${PROTOBUF_REPOSITORY} -b v${PROTOBUF_VERSION} --depth 1 ./${PROTOBUF_DIR}\\\n     && cd ./${PROTOBUF_DIR} \\\n     && ./autogen.sh \\\n     && ./configure --prefix=/usr \\\n     &&  make && make check && make install\\\n     && cd .. && rm -rf protobuf\\\n     && rm -rf ./${PROTOBUF_DIR}\\\n     && apt-get autoremove -y make curl unzip automake git libtool g++ autoconf\\\n     && apt-get clean\n\nENV LD_LIBRARY_PATH /usr/local/lib\n\nADD . /proto\nWORKDIR /proto\n# Entry point\nENTRYPOINT [\"protoc\"]\n\n"
    },
    {
        "filename": "110320f08f84e33e43ecb48fa9ae12053f1a3f87.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## Initial Image Details\nFROM ubuntu:16.04\n\n## Author of the new image\nMAINTAINER Archa Bhandare\n\nENV DEBIAN_FRONTEND noninteractive\n\n## Update source, Install dependencies, Clone repo\nRUN echo 'deb http://ports.ubuntu.com/ubuntu-ports xenial restricted multiverse universe' >> /etc/apt/sources.list && apt-get -y update && \\\n   apt-get install -y build-essential software-properties-common libssl-dev libffi-dev git python-setuptools python-dev locales locales-all && \\\n\teasy_install pip && pip install --upgrade setuptools virtualenv && \\\n\tgit clone https://github.com/stripe/stripe-python && cd stripe-python && \\\n        git checkout v1.77.0 \n\n## Build and Install\nWORKDIR stripe-python/\nRUN export TOXENV=py27 && virtualenv -p python2 --system-site-packages env2 && /bin/bash -c \"source env2/bin/activate\" && pip install -U setuptools pip && pip install unittest2 mock flake8 tox tox-travis && python setup.py install && flake8 stripe && python -W always setup.py test\nRUN  pip uninstall -y unittest2 mock flake8 tox tox-travis && apt-get remove -y git && apt-get -y purge && apt-get -y autoremove\n"
    },
    {
        "filename": "110cbebc6eb45257f2d4065314d72aa9e321b0ea.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM REPLACE_NULLWORKLOAD_UBUNTU\n\n# ibm-java-install-man\nRUN REPLACE_RSYNC/ibm-java-REPLACE_ARCH1-sdk-8.0-5.27.bin /tmp/ibm-java-REPLACE_ARCH1-sdk-8.0-5.27.bin\nRUN sudo mv /tmp/ibm-java-REPLACE_ARCH1-sdk-8.0-5.27.bin /home/REPLACE_USERNAME/; sudo chmod 0755 /home/REPLACE_USERNAME/ibm-java-REPLACE_ARCH1-sdk-8.0-5.27.bin\nRUN echo \"INSTALLER_UI=silent\" > /home/REPLACE_USERNAME/installer.properties; echo \"LICENSE_ACCEPTED=TRUE\" >> /home/REPLACE_USERNAME/installer.properties\nRUN /home/REPLACE_USERNAME/ibm-java-REPLACE_ARCH1-sdk-8.0-5.27.bin -i silent -f /home/REPLACE_USERNAME/installer.properties\n# ibm-java-install-man\n\n# maven-install-pm\nRUN apt-get update; apt-get install -y maven ant\n# maven-install-pm\n\n# gradle-install-pm\nRUN apt-get install -y gradle unzip\n# gradle-install-pm\n\n# acmeair-install-man\nRUN cd /home/REPLACE_USERNAME; git clone https://github.com/blueperf/acmeair-monolithic-java.git;\nRUN echo \"loader.timeout=180\" > /home/REPLACE_USERNAME/acmeair-monolithic-java/src/main/resources/loader.properties; echo \"loader.numCustomers=200\" >> /home/REPLACE_USERNAME/acmeair-monolithic-java/src/main/resources/loader.properties \nRUN export JAVA_HOME=/opt/ibm/java-REPLACE_ARCH1-80/jre; cd /home/REPLACE_USERNAME/acmeair-monolithic-java; mvn clean package\nRUN sudo mkdir -p /root/.m2/; sudo rsync -az /root/.m2/ /home/REPLACE_USERNAME/\n#RUN mv /root/.gradle/ /home/REPLACE_USERNAME/\n# acmeair-install-man\n\n# websphere-liberty-install-man\nRUN REPLACE_RSYNC/wlp-webProfile7-17.0.0.3.zip /tmp/wlp-webProfile7-17.0.0.3.zip\nRUN mkdir -p /opt/ibm; sudo mv /tmp/wlp-webProfile7-17.0.0.3.zip /opt/ibm/wlp-webProfile7-17.0.0.3.zip\nRUN cd /opt/ibm/; sudo unzip -q wlp-webProfile7-17.0.0.3.zip\nRUN rm /opt/ibm/wlp-webProfile7-17.0.0.3.zip\n# websphere-liberty-install-man\n\n# jmeter-install-pm\nRUN apt-get install -y jmeter\n# jmeter-install-pm\n\n# acmeairdriver-install-man\nRUN cd /home/REPLACE_USERNAME; git clone https://github.com/acmeair/acmeair-driver.git; export JAVA_HOME=/opt/ibm/java-REPLACE_ARCH1-80/jre; cd acmeair-driver; sed -i 's/gradle-.*/gradle-4.10.2-bin.zip/g' gradle/wrapper/gradle-wrapper.properties; ./gradlew build\nRUN cp /home/REPLACE_USERNAME/acmeair-driver/acmeair-jmeter/build/libs/acmeair-jmeter-1.1.0-SNAPSHOT.jar /usr/share/jmeter/lib/ext/\nRUN cd /usr/share/jmeter/lib/ext/; sudo wget -N -q https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/json-simple/json-simple-1.1.1.jar\n# acmeairdriver-install-man\n\n# mongo-install-pm\nRUN apt-get install -y mongodb\nRUN sed -i \"s/.*bind_ip.*/bind_ip=0.0.0.0/\" /etc/mongodb.conf\n# service_stop_disable mongodb\n# mongo-install-pm\n\n# mongo-driver-java-install-man\n#RUN mkdir -p /opt/ibm/wlp/usr/shared/resources/mongodb; cd /opt/ibm/wlp/usr/shared/resources/mongodb; wget -N -q http://central.maven.org/maven2/org/mongodb/mongo-java-driver/2.12.2/mongo-java-driver-2.12.2.jar\nRUN mkdir -p /opt/ibm/wlp/usr/shared/resources/mongodb; sudo cp -f $(find /home/REPLACE_USERNAME/acmeair-monolithic-java | grep mongo-java-driver-.*.jar) /opt/ibm/wlp/usr/shared/resources/mongodb/\n# mongo-driver-java-install-man\n\nRUN chown -R REPLACE_USERNAME:REPLACE_USERNAME /home/REPLACE_USERNAME\n"
    },
    {
        "filename": "1135aaf3f7f826416791adc2bb61debc59b0f860.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Ubuntu PostgreSQL.\n\nFROM ubuntu:14.04\nMAINTAINER Thomas Quintana <thomas@bettervoice.com>\n\n# Install.\nRUN apt-get update && apt-get install -y daemontools libffi-dev libssl-dev lzop postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-9.3-pgpool2 postgresql-9.3-postgis-2.1 pv python python-dev python-pip\nADD bin/get-pip.py /usr/local/bin/get-pip.py\nRUN python /usr/local/bin/get-pip.py\nRUN pip install --upgrade six\nRUN pip install Jinja2 wal-e\n\n# Post Install Configuration.\nADD bin/start-postgres /usr/bin/start-postgres\nRUN chmod +x /usr/bin/start-postgres\nADD bin/heartbeat.template /usr/share/postgresql/9.3/heartbeat.template\nADD conf/postgresql.conf.template /usr/share/postgresql/9.3/postgresql.conf.template\nADD conf/pg_hba.conf.template /usr/share/postgresql/9.3/pg_hba.conf.template\nADD conf/recovery.conf.template /usr/share/postgresql/9.3/recovery.conf.template\n\n# Open the container up to the world.\nEXPOSE 5432/tcp\n\n# Start PostgreSQL.\nCMD start-postgres"
    },
    {
        "filename": "114f81915a7d3864a83d50be4d3d40378eb75d24.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# A simple Flask app container.\nFROM geerlingguy/docker-ubuntu1604-ansible\nMAINTAINER Jeff Geerling <geerlingguy@mac.com>\n\n# Install Flask app dependencies.\nRUN apt-get update\nRUN apt-get install -y libmysqlclient-dev python-dev python-pip\nRUN pip install flask flask-sqlalchemy mysql-python\n\n# Install playbook and run it.\nCOPY playbook.yml /etc/ansible/playbook.yml\nCOPY index.py.j2 /etc/ansible/index.py.j2\nCOPY templates /etc/ansible/templates\nRUN mkdir -m 755 /opt/www\nRUN ansible-playbook /etc/ansible/playbook.yml --connection=local\n\nEXPOSE 80\n"
    },
    {
        "filename": "11a9b02a9727693132c8ffde8901bdd8580a483f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM coinvault/client-base:latest\n\nMAINTAINER Dan Gershony - CoinVault <dan@coinvault.io>\n\n# dependencies required to run the daemon\nRUN apt-get update \\\n\t&& apt-get install -y git \\\n\t&& apt-get install -y libssl-dev libdb-dev libdb++-dev libboost-all-dev libqrencode-dev \\\n\t&& apt-get install -y qt-sdk qt4-default \\\n\t&& apt-get install -y libcurl3-dev \\\n\t&& apt-get install -y libzip-dev\n\n# get\nRUN apt-get update \\\n    && cd ~ \\\n\t&& git clone https://github.com/goldblockscoin/goldblocks  \n\n# build\nRUN\tcd ~/goldblocks/src \\\n\t&& mkdir -p obj \\\n\t&& chmod 755 leveldb/build_detect_platform \\\n\t&& make -f makefile.unix USE_UPNP=- \n\n# install\nRUN cd ~/goldblocks/src \\\n    && strip goldblocksd \\\n\t&& install -m 755 goldblocksd /usr/local/bin  \n\n# clean\nRUN apt-get purge -y --auto-remove git \\\n  && rm -r ~/goldblocks"
    },
    {
        "filename": "1278889f91ca78ec073eb56ca56d359d81087fcb.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# This Dockerfile specifies the recipe for creating an image for the tests\n# to run in.\n#\n# We install as many test dependencies here as we can, because these setup\n# steps can be cached.  They do *not* run every time we run the build.\n# The Docker image is only rebuilt when the Dockerfile (ie. this file)\n# changes.\n\n# Base Dockerfile for gRPC dev images\nFROM 32bit/debian:latest\n\n# Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n\n# Install dependencies.  We start with the basic ones require to build protoc\n# and the C++ build\nRUN apt-get clean && apt-get update && apt-get install -y --force-yes \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  bzip2 \\\n  ccache \\\n  curl \\\n  gcc \\\n  git \\\n  libc6 \\\n  libc6-dbg \\\n  libc6-dev \\\n  libgtest-dev \\\n  libtool \\\n  make \\\n  parallel \\\n  time \\\n  wget \\\n  unzip \\\n  # -- For python --\n  python-setuptools \\\n  python-pip \\\n  python-dev \\\n  # -- For C++ benchmarks --\n  cmake  \\\n  # -- For PHP --\n  php5.5     \\\n  php5.5-dev \\\n  php5.5-xml \\\n  php5.6     \\\n  php5.6-dev \\\n  php5.6-xml \\\n  php7.0     \\\n  php7.0-dev \\\n  php7.0-xml \\\n  phpunit    \\\n  valgrind   \\\n  libxml2-dev \\\n  && apt-get clean\n\n##################\n# PHP dependencies.\nRUN wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2\nRUN cd php-5.5.38 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts && \\\n    make && make install && make clean && cd ..\nRUN cd php-5.5.38 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-5.5 && \\\n    make && make install && make clean && cd ..\n\nRUN wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror\nRUN mv mirror php-5.6.30.tar.bz2\nRUN tar -xvf php-5.6.30.tar.bz2\nRUN cd php-5.6.30 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts && \\\n    make && make install && cd ..\nRUN cd php-5.6.30 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-5.6 && \\\n    make && make install && cd ..\n\nRUN wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror\nRUN mv mirror php-7.0.18.tar.bz2\nRUN tar -xvf php-7.0.18.tar.bz2\nRUN cd php-7.0.18 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts && \\\n    make && make install && cd ..\nRUN cd php-7.0.18 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-7.0 && \\\n    make && make install && cd ..\n\nRUN wget http://am1.php.net/get/php-7.1.4.tar.bz2/from/this/mirror\nRUN mv mirror php-7.1.4.tar.bz2\nRUN tar -xvf php-7.1.4.tar.bz2\nRUN cd php-7.1.4 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.1-zts && \\\n    make && make install && cd ..\nRUN cd php-7.1.4 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-7.1 && \\\n    make && make install && cd ..\n\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN composer config -g -- disable-tls true\nRUN composer config -g -- secure-http false\nRUN cd /tmp && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf/php && \\\n  git reset --hard 49b44bff2b6257a119f9c6a342d6151c736586b8 && \\\n  ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.5 && \\\n  ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.6 && \\\n  ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-7.0 && \\\n  ln -sfn /usr/local/php-7.1/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-7.1/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-7.1/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-7.1\n\n##################\n# Python dependencies\n\n# These packages exist in apt-get, but their versions are too old, so we have\n# to get updates from pip.\n\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n\n##################\n# Prepare ccache\n\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n\n# Define the default command.\nCMD [\"bash\"]\n"
    },
    {
        "filename": "127ea98696238865b6d0e9845a9d43c167796d0f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/dl-opencv:3.4.0-gpu-py2\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\n# Add Tensorboard\nRUN apt-get update && apt-get install -y supervisor \\\n  && apt-get clean \\\n  && apt-get autoremove \\\n  && rm -rf /var/cache/apt/archives/* \\\n  && rm -rf /var/lib/apt/lists/*\nCOPY tensorboard/tensorboard.conf /etc/supervisor/conf.d/\n\n# graphviz for visualization\nRUN apt-get update && apt-get install -y \\\n        graphviz \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\n\nRUN pip --no-cache-dir install \\\n        pydot \\\n        dlib \\\n        incremental \\\n        nltk \\\n        gym[atari,box2d,classic_control] \\\n        pattern \\\n        textacy \\\n        scikit-image \\\n        spacy \\\n        tqdm \\\n        wheel \\\n        kaggle-cli \\\n        annoy \\\n    && rm -rf /tmp/* /var/tmp/*\n\n\n# Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n    && cd xgboost \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DUSE_CUDA=ON \\\n    && make -j$(nproc) \\\n    && cd .. \\\n    && cd python-package \\\n    && python setup.py install \\\n    && cd ../.. \\\n    && rm -rf xgboost\n\n# Install Anaconda\n# RUN wget https://repo.continuum.io/archive/Anaconda3-5.0.0-Linux-x86_64.sh \\\n#     && bash Anaconda3-5.0.0-Linux-x86_64.sh -b \\\n#     && rm Anaconda3-5.0.0-Linux-x86_64.sh"
    },
    {
        "filename": "12aa2840436771399da81766997def1ce399222b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Sah Lee <contact@leesah.name>\n\nENV DEPENDENCIES git-core build-essential autoconf libtool libssl-dev asciidoc xmlto\nENV BASEDIR /tmp/shadowsocks-libev\nENV SERVER_PORT 8338\n\n# Set up building environment\nRUN apt-get update \\\n && apt-get install -y $DEPENDENCIES\n\n# Get the latest code, build and install\nRUN git clone https://github.com/shadowsocks/shadowsocks-libev.git $BASEDIR\nWORKDIR $BASEDIR\nRUN ./configure \\\n && make \\\n && make install\n\n# Tear down building environment and delete git repository\nWORKDIR /\nRUN rm -rf $BASEDIR/shadowsocks-libev\\\n && apt-get --purge autoremove -y $DEPENDENCIES\n\n# Port in the config file won't take affect. Instead we'll use 8388.\nEXPOSE $SERVER_PORT\nEXPOSE $SERVER_PORT/udp\n\n# Override the host and port in the config file.\nADD entrypoint /\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"-h\"]\n"
    },
    {
        "filename": "12dd258a4ac2284553e1987c6a79010001549957.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.10.0\nMAINTAINER Steven Arcangeli <stevearc@stevearc.com>\n\nENV PYPICLOUD_VERSION 1.0.11\n\nEXPOSE 8080\n\n# Install packages required\nRUN apt-get update -qq \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -qy python3-pip \\\n     python3-dev libldap2-dev libsasl2-dev libmysqlclient-dev libffi-dev libssl-dev \\\n  && pip3 install pypicloud[all_plugins]==$PYPICLOUD_VERSION requests uwsgi \\\n     pastescript mysqlclient psycopg2-binary \\\n  # Create the pypicloud user\n  && groupadd -r pypicloud \\\n  && useradd -r -g pypicloud -d /var/lib/pypicloud -m pypicloud \\\n  # Make sure this directory exists for the baseimage init\n  && mkdir -p /etc/my_init.d\n\n# Add the startup service\nADD pypicloud-uwsgi.sh /etc/my_init.d/pypicloud-uwsgi.sh\n\n# Add the pypicloud config file\nRUN mkdir -p /etc/pypicloud\nADD config.ini /etc/pypicloud/config.ini\n\n# Create a working directory for pypicloud\nVOLUME /var/lib/pypicloud\n\n# Add the command for easily creating config files\nADD make-config.sh /usr/local/bin/make-config\n\n# Add an environment variable that pypicloud-uwsgi.sh uses to determine which\n# user to run as\nENV UWSGI_USER pypicloud\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "1329c5ba5c3954bb61fed5aeadeceff9282a3830.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "###############################################################################  \n# Name: Dockerfile  \n# Author: Daniel Middleton <daniel-middleton.com>  \n# Description: Dockerfile used to build dannydirect/tinyproxy  \n# Usage: docker build -t dannydirect/tinyproxy:latest .  \n###############################################################################  \n  \nFROM phusion/baseimage:latest  \n  \nMAINTAINER Daniel Middleton <daniel-middleton.com>  \n  \nADD run.sh /opt/docker-tinyproxy/run.sh  \n  \nRUN apt-get update && apt-get -y upgrade && apt-get -y install tinyproxy  \n  \nENTRYPOINT [\"/opt/docker-tinyproxy/run.sh\"]  \n\n"
    },
    {
        "filename": "13db590e30466cb1ec2ae568397cb94487f1a7b2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM coinvault/client-base:latest\n\nMAINTAINER Dan Gershony - CoinVault <dan@coinvault.io>\n\n# dependencies required to run the daemon\nRUN apt-get update \\\n\t&& apt-get install -y git \\\n\t&& apt-get install -y libssl-dev libdb-dev libdb++-dev libboost-all-dev libqrencode-dev \\\n\t&& apt-get install -y qt-sdk qt4-default \\\n\t&& apt-get install -y libcurl3-dev \\\n\t&& apt-get install -y libzip-dev\n\n# get\nRUN apt-get update \\\n    && cd ~ \\\n\t&& git clone https://github.com/dollarcoins/source.git \n\n# build\nRUN\tcd ~/source/src \\\n\t&& mkdir -p obj \\\n\t&& chmod 755 leveldb/build_detect_platform \\\n\t&& make -f makefile.unix USE_UPNP=- \n\n# install\nRUN cd ~/source/src \\\n    && strip dollarcoind \\\n\t&& install -m 755 dollarcoind /usr/local/bin  \n\n# clean\nRUN apt-get purge -y --auto-remove git \\\n  && rm -r ~/source"
    },
    {
        "filename": "144d931f6147f79ec711ddf65f01d57d21954ad0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Furkan SAYIM <furkan.sayim@yandex.com>\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install git -y \\\n    && apt-get install python3 -y  \\\n    && apt-get install wget -y \\\n    && apt-get install python3-pip -y \\\n    && apt-get install software-properties-common -y\nRUN wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add \\\n    && apt-add-repository 'deb http://http.kali.org/kali kali-rolling main non-free contrib'\n\nRUN apt-get update \\\n    && apt-get install exploitdb netcat nmap perl -y \\\n    && apt-get autoremove -y \\\n    && ln -s -f /usr/share/zoneinfo/Etc/GMT+3 /etc/localtime \\\n    && apt-get -y install php7.0\n    \nRUN pip3 install babysploit\n\nCMD [\"babysploit\"]\n"
    },
    {
        "filename": "146886104b7a5eb6856251102cc42e1be0b9774c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Start with cuDNN base image\nFROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nMAINTAINER DavidSolomon <solomond78@gmail.com>\n\n# Install git, wget and other dependencies\nRUN apt-get update && apt-get install -y \\\n  nano \\\n  git \\\n  libopenblas-dev \\\n  libopencv-dev \\\n  python-dev \\\n  python-numpy \\\n  python-setuptools \\\n  python-opencv \\\n  python-matplotlib \\\n  python-tk \\\n  wget \\\n  graphviz\n\n# Clone MXNet repo and move into it\nRUN cd /root && git clone --recursive https://github.com/zhreshold/mxnet-ssd.git && cd mxnet-ssd/mxnet && \\\n# Copy config.mk\n  cp make/config.mk config.mk && \\\n# Set OpenBLAS\n  sed -i 's/USE_BLAS = atlas/USE_BLAS = openblas/g' config.mk && \\\n# Set CUDA flag\n  sed -i 's/USE_CUDA = 0/USE_CUDA = 1/g' config.mk && \\\n  sed -i 's/USE_CUDA_PATH = NONE/USE_CUDA_PATH = \\/usr\\/local\\/cuda/g' config.mk && \\\n# Set cuDNN flag\n  sed -i 's/USE_CUDNN = 0/USE_CUDNN = 1/g' config.mk && \\\n# Make\n  make -j $(nproc)\n\n# Install Python package\nRUN cd /root/mxnet-ssd/mxnet/python && python setup.py install\n\n# Add to Python path\nRUN echo \"export PYTHONPATH=$/root/mxnet-ssd/mxnet/python:$PYTHONPATH\" >> /root/.bashrc\n\n# Install pip\nRUN easy_install -U pip\n\n# Install graphviz and jupyter\nRUN pip install graphviz jupyter ipython matplotlib tensorboard future scipy\n\n# Set ~/mxnet as working directory\nWORKDIR /root/mxnet-ssd\n\n# TODO add tensorboard code change to the docker...\n# the installation was /usr/local/lib/python2.7/dist-packages/tensorboard/summary:186\n\n"
    },
    {
        "filename": "14b613c106c89fbc5dc32ad45cb1c1b7c3b32047.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM golang:latest\nMAINTAINER \"Atul Sowani <sowania@us.ibm.com>\"\n\nENV GOROOT=/usr/local/go\nENV PATH=$GOROOT/bin:$PATH\nENV GOPATH=/tmp/workspace\nENV PATH=$PATH:$GOPATH/bin\n\nRUN apt-get -y update && \\\n    apt-get install -y git wget ssh curl gcc && \\\n\n    mkdir -p /tmp/workspace/bin /tmp/workspace/src/golang.org/x \\\n             /tmp/workspace/pkg && \\\n    cd /tmp/workspace/src/golang.org/x && \\\n    git clone https://github.com/golang/text.git && \\\n    git clone https://github.com/golang/crypto.git && \\\n    git clone https://github.com/golang/net.git && \\\n\n    go get golang.org/x/sys/unix && \\\n    go get golang.org/x/tools/go/buildutil && \\\n    go get golang.org/x/tools/go/loader && \\\n\n    mv /tmp/workspace/src/golang.org/x/net/icmp/diag_test.go /tmp/workspace/src/golang.org/x/net/icmp/diag_test.go.org && \\\n    cd /tmp/workspace/src/golang.org/x/net && \\\n    go test -v ./... && \\\n    apt-get remove --purge -y git wget ssh curl gcc && \\\n    apt-get auto-remove -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "14caae27e7e6bc8421bb7dd1ba0d5fbabaae4f93.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Just use the code-server docker binary\nFROM codercom/code-server as coder-binary\n\nFROM ubuntu:18.10 as vscode-env\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install the actual VSCode to download configs and extensions\nRUN apt-get update && \\\n\tapt-get install -y curl && \\\n\tcurl -o vscode-amd64.deb -L https://vscode-update.azurewebsites.net/latest/linux-deb-x64/stable && \\\n\tdpkg -i vscode-amd64.deb || true && \\\n\tapt-get install -y -f && \\\n\t# VSCode missing deps\n\tapt-get install -y libx11-xcb1 libasound2 && \\\n\trm -f vscode-amd64.deb && \\\n\t# CLI json parser\n\tapt-get install -y jq\n\nCOPY scripts /root/scripts\nCOPY sync.gist /root/sync.gist\n\n# This gets user config from gist, parse it and install exts with VSCode\nRUN code -v --user-data-dir /root/.config/Code && \\\n\tcd /root/scripts && \\\n\tsh get-config-from-gist.sh && \\\n\tsh parse-extension-list.sh && \\\n\tsh install-vscode-extensions.sh ../extensions.list\n\n# The production image for code-server\nFROM ubuntu:18.10\nMAINTAINER Everette Rong (https://rongyi.blog)\nWORKDIR /project\nCOPY --from=coder-binary /usr/local/bin/code-server /usr/local/bin/code-server\nRUN mkdir -p /root/.code-server/User\nCOPY --from=vscode-env /root/settings.json /root/.code-server/User/settings.json\nCOPY --from=vscode-env /root/.vscode/extensions /root/.code-server/extensions\nCOPY scripts /root/scripts\n\nRUN apt-get update && \\\n\tapt-get install -y curl gnupg2 ca-certificates && \\\n\tapt-get install -y locales && \\\n\tlocale-gen en_US.UTF-8\n# Locale Generation\n# We unfortunately cannot use update-locale because docker will not use the env variables\n# configured in /etc/default/locale so we need to set it manually.\nENV LANG=en_US.UTF-8\n\n# Install langauge toolchains\nRUN sh /root/scripts/install-tools-nodejs.sh\nRUN sh /root/scripts/install-tools-dev.sh\nRUN sh /root/scripts/install-tools-golang.sh\nRUN sh /root/scripts/install-tools-cpp.sh\nRUN sh /root/scripts/install-tools-python.sh\n\nEXPOSE 8443\nCMD code-server $PWD\n"
    },
    {
        "filename": "153609ece88eca4282d5f21c1d1ed7cf5f3a05fc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu\n\n# File Author / Maintainer\nMAINTAINER Quinton Marchi\n\n# Install Hiawatha\nRUN apt-get install libxslt1.1 wget -y\nRUN wget https://files.tuxhelp.org/hiawatha/hiawatha_9.13_amd64.deb && dpkg -i hiawatha_9.13_amd64.deb\n\n# Remove the default Hiawatha configuration file\nRUN rm -v /etc/hiawatha/hiawatha.conf\n\n# Copy a configuration file from the current directory\nADD hiawatha.conf /etc/hiawatha/\n\n# Expose ports\nEXPOSE 80\n# Saved for later use\n# EXPOSE 443\n\n# Set the default command to execute when creating a new container\nCMD service hiawatha start\n"
    },
    {
        "filename": "15ef05343322d264e7874587d7437463f5dc060f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#  Copyright (c) 2017-2018 Uber Technologies, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n####\n# Docker image built from pytorch for developing petastorm usage via pytorch.\n####\nFROM pytorch:latest\n\nRUN apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:vbernat/haproxy-1.5 && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        curl \\\n        nano \\\n        python \\\n        ca-certificates \\\n        libsm6 libxext6 libxrender-dev &&\\\n     rm -rf /var/lib/apt/lists/*\n\n# Get Oracle JDK 8 installed, in one layer, and no touch ever again. :-)\nRUN add-apt-repository ppa:webupd8team/java -y \\\n      && \\\n    echo debconf shared/accepted-oracle-license-v1-1 select true \\\n      | debconf-set-selections \\\n      && \\\n    echo debconf shared/accepted-oracle-license-v1-1 seen true \\\n      | debconf-set-selections \\\n      && \\\n    DEBIAN_FRONTEND=noninteractive apt-get update \\\n      && \\\n    apt-get -o Dpkg::Options::=\"--force-confmiss\" -o Dpkg::Options::=\"--force-confold\" \\\n    install -y \\\n      oracle-java8-installer \\\n      oracle-java8-set-default\n\nRUN curl -o - https://bootstrap.pypa.io/get-pip.py | python - pip\nRUN pip install --upgrade setuptools pip==18.0\n\nWORKDIR /workspace\nRUN chmod -R a+w /workspace\n\n# Pull petastorm repo master\nRUN git clone https://github.com/uber/petastorm.git\n\n# OR, use this recipe to pull and build a particular pull request.\n# Change to your fork repo path as appropriate.\n#RUN git clone --depth=50 https://github.com/uber/petastorm.git && \\\n#    cd petastorm && \\\n#    git fetch origin +refs/pull/50/merge: && \\\n#    git checkout -qf FETCH_HEAD\n\nRUN cd petastorm && \\\n    pip install -e .[opencv,tf,test] && \\\n    pip install --upgrade numpy\n"
    },
    {
        "filename": "168cf1f30b34c82c362f91a1a6ec4e6732c4e688.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:i386-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.26\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "16ebf4e1b811d7df9115643edb838f2637d92366.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM wordpress:latest\nMAINTAINER Kristian \u00d8stergaard Martensen <km@shipbeat.com>\n\nENV WOOCOMMERCE_VERSION 3.5.1\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends unzip wget \\\n    && wget https://downloads.wordpress.org/plugin/woocommerce.$WOOCOMMERCE_VERSION.zip -O /tmp/temp.zip \\\n    && cd /usr/src/wordpress/wp-content/plugins \\\n    && unzip /tmp/temp.zip \\\n    && rm /tmp/temp.zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install the gmp and mcrypt extensions\nRUN apt-get update -y\nRUN apt-get install -y libgmp-dev\nRUN ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/local/include/\nRUN docker-php-ext-configure gmp \nRUN docker-php-ext-install gmp\n\nRUN echo extension=gmp.so > $PHP_INI_DIR/conf.d/gmp.ini\n\n# Download WordPress CLI\nRUN curl -L \"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\" > /usr/bin/wp && \\\n    chmod +x /usr/bin/wp\n\nVOLUME [\"/var/www/html\"]"
    },
    {
        "filename": "16f5d2acad0ca9fb29c4bf1ae2dbe123b665dcd4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\nMAINTAINER Viktor Farcic \"viktor@farcic.com\"\n\nENV VERSION 1.0\n\nRUN apt-get update\n\n# CUrl\nRUN apt-get -y install curl\n\n# Dependencies\nRUN curl -sL https://deb.nodesource.com/setup_0.12 | bash -\nRUN echo \"deb http://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list\nRUN curl -sL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list\nRUN echo \"deb http://packages.linuxmint.com debian import\" >> /etc/apt/sources.list\n\n# Mongo, NodeJS, Git, SBT, xvfb, FireFox, Chrome\nRUN apt-get update && \\\n    apt-get -y install wget bzip2 make g++ && \\\n    apt-get -y --force-yes install --no-install-recommends mongodb nodejs git sbt xvfb firefox google-chrome-stable && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Scala\nRUN curl -O -q http://downloads.typesafe.com/scala/2.11.5/scala-2.11.5.deb && \\\n    dpkg -i scala-2.11.5.deb && \\\n    rm scala-2.11.5.deb\n\n# Gulp, bower\nRUN npm install -g gulp bower\n\n# Dirs\nRUN mkdir /source\nRUN mkdir -p /data/db\n\nADD project /source/project\nADD build.sbt /source/build.sbt\nADD client/bower.json /source/client/bower.json\nADD client/gulpfile.js /source/client/gulpfile.js\nADD client/package.json /source/client/package.json\nADD client/wct.conf.js /source/client/wct.conf.js\nADD client/test.html /source/client/test.html\nADD run_tests.sh /source/run_tests.sh\n\n# Dependencies\nRUN cd /source && sbt update\nRUN cd /source/client && npm install && bower install --allow-root --config.interactive=false -s\n\n# Envs\nENV TEST_TYPE \"spec\"\nENV DOMAIN \"http://172.17.42.1\"\nENV DISPLAY \":1.0\"\nENV DB_HOST localhost\n\nWORKDIR /source\nVOLUME [\"/source\", \"/source/target/scala-2.10\", \"/root/.ivy2/cache\", \"/data/db\"]\n\nCMD [\"/source/run_tests.sh\"]\n\nEXPOSE 8080\n"
    },
    {
        "filename": "1790e4f72b409175db62b86d7157e1c89c0f0788.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER github/gklingler\n\nRUN apt-get update\nRUN apt-get install -y mesa-utils\n\n# install nvidia driver\nRUN apt-get install -y binutils\nADD NVIDIA-DRIVER.run /tmp/NVIDIA-DRIVER.run\nRUN sh /tmp/NVIDIA-DRIVER.run -a -N --ui=none --no-kernel-module\nRUN rm /tmp/NVIDIA-DRIVER.run\n"
    },
    {
        "filename": "17bbed8df69af387086a8dc59dba69e86c6e5f7b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# NodeJS GulpJS Ruby (gewo/ngr)\nFROM gewo/ruby\nMAINTAINER Gebhard W\u00f6stemeyer <g.woestemeyer@gmail.com>\n\nRUN apt-get update && \\\n  apt-get -y install software-properties-common curl git\n\n# Install NodeJS\nRUN add-apt-repository ppa:chris-lea/node.js && \\\n  apt-get update && \\\n  sudo apt-get -y install nodejs && \\\n  apt-get clean\n\nRUN npm install -g gulp\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "17bc003c4b01dfd84397c4ab27cbdb14e0daa04d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# cis-ubuntu-ansible\n#\n# VERSION               1.0\nFROM ubuntu:14.04\nMAINTAINER Paul Chaignon <paul.chaignon@gmail.com>\n\nADD . /cis-ubuntu-ansible\nWORKDIR /cis-ubuntu-ansible\n\nRUN apt-get update\nRUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev slapd nis libffi-dev libssl-dev\nRUN pip install --upgrade setuptools ansible\nRUN touch /etc/inetd.conf\nRUN echo 'shell.bla' > /tmp/inetd\nRUN cp /tmp/inetd /etc/inetd.conf\nRUN echo 'start on runlevel [2345]' > /tmp/runxinit\nRUN cp /tmp/runxinit /etc/init/xinetd.conf\n\nRUN echo hello >> \"hard'to\\\"quote$file\"\nRUN chown 1234:4321 \"hard'to\\\"quote$file\"\nRUN cp tests/docker_defaults.yml vars/main.yml\nRUN echo '[defaults]' > ansible.cfg\nRUN echo 'roles_path = ../' >> ansible.cfg\n\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1 > results_indempotence.txt\nRUN cat results_indempotence.txt\nRUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)\n\n\n\n\nFROM ubuntu:12.04\nMAINTAINER Paul Chaignon <paul.chaignon@gmail.com>\n\nADD . /cis-ubuntu-ansible\nWORKDIR /cis-ubuntu-ansible\n\nRUN apt-get update\nRUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev slapd nis sudo libffi-dev\nRUN pip install ansible\nRUN touch /etc/inetd.conf\nRUN echo 'shell.bla' > /tmp/inetd\nRUN cp /tmp/inetd /etc/inetd.conf\nRUN echo 'start on runlevel [2345]' > /tmp/runxinit\nRUN cp /tmp/runxinit /etc/init/xinetd.conf\n\nRUN echo hello >> \"hard'to\\\"quote$file\"\nRUN chown 1234:4321 \"hard'to\\\"quote$file\"\nRUN cp tests/docker_defaults.yml vars/main.yml\nRUN echo '[defaults]' > ansible.cfg\nRUN echo 'roles_path = ../' >> ansible.cfg\n\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1 > results_indempotence.txt\nRUN cat results_indempotence.txt\nRUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)\n\n\n\n\n\nFROM ubuntu:15.04\nMAINTAINER Paul Chaignon <paul.chaignon@gmail.com>\n\nADD . /cis-ubuntu-ansible\nWORKDIR /cis-ubuntu-ansible\n\nRUN apt-get update\nRUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev sudo libffi-dev libssl-dev\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install slapd nis\nRUN pip install --upgrade setuptools ansible\nRUN touch /etc/inetd.conf\nRUN echo 'shell.bla' > /tmp/inetd\nRUN cp /tmp/inetd /etc/inetd.conf\nRUN echo 'start on runlevel [2345]' > /tmp/runxinit\nRUN cp /tmp/runxinit /etc/init/xinetd.conf\n\nRUN echo hello >> \"hard'to\\\"quote$file\"\nRUN chown 1234:4321 \"hard'to\\\"quote$file\"\nRUN cp tests/docker_nofirewall_defaults.yml vars/main.yml\nRUN echo '[defaults]' > ansible.cfg\nRUN echo 'roles_path = ../' >> ansible.cfg\n\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1 > results_indempotence.txt\nRUN cat results_indempotence.txt\nRUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)\n\n\n\n\n\nFROM ubuntu:16.04\nMAINTAINER Paul Chaignon <paul.chaignon@gmail.com>\n\nADD . /cis-ubuntu-ansible\nWORKDIR /cis-ubuntu-ansible\n\nRUN apt-get update\nRUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev libffi-dev libssl-dev\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install slapd nis\nRUN pip install ansible\nRUN touch /etc/inetd.conf\nRUN echo 'shell.bla' > /tmp/inetd\nRUN cp /tmp/inetd /etc/inetd.conf\nRUN echo 'start on runlevel [2345]' > /tmp/runxinit\nRUN cp /tmp/runxinit /etc/init/xinetd.conf\n\nRUN echo hello >> \"hard'to\\\"quote$file\"\nRUN chown 1234:4321 \"hard'to\\\"quote$file\"\nRUN cp tests/docker_nofirewall_defaults.yml vars/main.yml\nRUN echo '[defaults]' > ansible.cfg\nRUN echo 'roles_path = ../' >> ansible.cfg\n\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1\nRUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e \"pipelining=True\" -t level1 > results_indempotence.txt\nRUN cat results_indempotence.txt\nRUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)\n"
    },
    {
        "filename": "17cddb1823b4c3ee2825c181fa777ed28c88c947.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.19\n\nARG CONTENTOS_STATIC_BUILD=ON\nENV CONTENTOS_STATIC_BUILD ${CONTENTOS_STATIC_BUILD}\n\nENV LANG=en_US.UTF-8\n\nRUN \\\n    apt-get update && \\\n    apt-get install -y \\\n        autoconf \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        git \\\n        libboost-all-dev \\\n        libreadline-dev \\\n        libssl-dev \\\n        libtool \\\n        ncurses-dev \\\n        pbzip2 \\\n        pkg-config \\\n        python3 \\\n        python3-dev \\\n        python3-jinja2 \\\n        python3-pip \\\n        nginx \\\n        fcgiwrap \\\n        awscli \\\n        jq \\\n        wget \\\n        gdb \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    pip3 install gcovr\n\nADD . /usr/local/src/contentos\n\nRUN \\\n    cd /usr/local/src/contentos && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_CONTENTOS_TESTNET=ON \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=ON \\\n        .. && \\\n    make -j$(nproc) test_fixed_string && \\\n    ./programs/util/test_fixed_string && \\\n    cd /usr/local/src/contentos && \\\n    doxygen && \\\n#    programs/build_helpers/check_reflect.py && \\\n#    programs/build_helpers/get_config_check.sh && \\\n    rm -rf /usr/local/src/contentos/build\n\nRUN \\\n    cd /usr/local/src/contentos && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Debug \\\n        -DENABLE_COVERAGE_TESTING=ON \\\n        -DBUILD_CONTENTOS_TESTNET=ON \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=ON \\\n        -DCHAINBASE_CHECK_LOCKING=OFF \\\n        .. && \\\n    mkdir -p /var/cobertura && \\\n    gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --output=\"/var/cobertura/coverage.xml\" && \\\n    cd /usr/local/src/contentos && \\\n    rm -rf /usr/local/src/contentos/build\n\nRUN \\\n    cd /usr/local/src/contentos && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-default \\\n        -DCMAKE_BUILD_TYPE=Release \\\n#        -DLOW_MEMORY_NODE=ON \\\n#        -DCLEAR_VOTES=ON \\\n#        -DSKIP_BY_TX_ID=OFF \\\n        -DBUILD_CONTENTOS_TESTNET=OFF \\\n        -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} \\\n        .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    ( /usr/local/contentosd-default/bin/contentosd --version \\\n      | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n      && echo '_' \\\n      && git rev-parse --short HEAD ) \\\n      | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' \\\n      > /etc/contentosdversion && \\\n    cat /etc/contentosdversion && \\\n    rm -rfv build && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-full \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=OFF \\\n        -DSKIP_BY_TX_ID=ON \\\n        -DBUILD_CONTENTOS_TESTNET=OFF \\\n        -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} \\\n        .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n    rm -rf /usr/local/src/contentos\n\nRUN \\\n    apt-get remove -y \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        dpkg-dev \\\n        git \\\n        libboost-all-dev \\\n        libc6-dev \\\n        libexpat1-dev \\\n        libgcc-5-dev \\\n        libhwloc-dev \\\n        libibverbs-dev \\\n        libicu-dev \\\n        libltdl-dev \\\n        libncurses5-dev \\\n        libnuma-dev \\\n        libopenmpi-dev \\\n        libpython-dev \\\n        libpython2.7-dev \\\n        libreadline-dev \\\n        libreadline6-dev \\\n        libssl-dev \\\n        libstdc++-5-dev \\\n        libtinfo-dev \\\n        libtool \\\n        linux-libc-dev \\\n        m4 \\\n        make \\\n        manpages \\\n        manpages-dev \\\n        mpi-default-dev \\\n        python-dev \\\n        python2.7-dev \\\n        python3-dev \\\n    && \\\n    apt-get autoremove -y && \\\n    rm -rf \\\n        /var/lib/apt/lists/* \\\n        /tmp/* \\\n        /var/tmp/* \\\n        /var/cache/* \\\n        /usr/include \\\n        /usr/local/include\n\nRUN useradd -s /bin/bash -m -d /var/lib/contentosd contentosd\n\nRUN mkdir /var/cache/contentosd && \\\n    chown contentosd:contentosd -R /var/cache/contentosd\n\nENV HOME /var/lib/contentosd\nRUN chown contentosd:contentosd -R /var/lib/contentosd\n\nVOLUME [\"/var/lib/contentosd\"]\n\n# rpc service:\nEXPOSE 8090\n# p2p service:\nEXPOSE 2001\n\n# add seednodes from documentation to image\nADD doc/seednodes.txt /etc/contentosd/seednodes.txt\n\n# the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/contentosd/config.ini\nADD contrib/fullnode.config.ini /etc/contentosd/fullnode.config.ini\nADD contrib/config-for-broadcaster.ini /etc/contentosd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/contentosd/config-for-ahnode.ini\n\n# add normal startup script that starts via sv\nADD contrib/contentosd.run /usr/local/bin/contentos-sv-run.sh\nRUN chmod +x /usr/local/bin/contentos-sv-run.sh\n\n# add nginx templates\nADD contrib/contentosd.nginx.conf /etc/nginx/contentosd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n\n# add PaaS startup script and service script\nADD contrib/startpaascontentosd.sh /usr/local/bin/startpaascontentosd.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaascontentosd.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n\n# new entrypoint for all instances\n# this enables exitting of the container when the writer node dies\n# for PaaS mode (elasticbeanstalk, etc)\n# AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/contentosdentrypoint.sh /usr/local/bin/contentosdentrypoint.sh\nRUN chmod +x /usr/local/bin/contentosdentrypoint.sh\nCMD /usr/local/bin/contentosdentrypoint.sh\n"
    },
    {
        "filename": "1825e7bb6b7cef0927ccb09658c3efbe9dcf6549.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Tim O'Shea <tim.oshea753@gmail.com>\n\n# set up environment\nENV DEBIAN_FRONTEND noninteractive\n\n# update repos/ppas...\nRUN apt-get update \nRUN apt-get install -y python-software-properties software-properties-common\nRUN apt-add-repository -y ppa:x2go/stable\nRUN apt-get update \n\n# install core packages\nRUN apt-get install -y python-pip git openssh-server vim emacs screen tmux locate\nRUN apt-get install -y python-matplotlib python-scipy python-numpy\nRUN apt-get install -y python-sklearn python-sklearn-doc python-skimage python-skimage-doc python-scikits-learn python-scikits.statsmodels\n\n# Set up remove login info\nRUN mkdir /var/run/sshd\nRUN echo 'root:radioml' | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# somewhat more graphical packages..\nRUN apt-get install -y python-opencv gimp \nRUN apt-get install -y firefox evince audacity meld\n\n# set up remove visual login packages ...\nRUN apt-get install -y xfwm4 xfce4 x2goserver x2goserver-xsession\n\n# install python packages\nRUN pip install --upgrade pip\nRUN pip install --upgrade ipython[all]\nRUN pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git\nRUN pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl\nRUN pip install --upgrade git+https://github.com/fchollet/keras.git\nRUN pip install --upgrade seaborn tqdm\nRUN pip install --upgrade pandas\n\n# set up gnuradio and related tools\nRUN apt-get install -y sudo\n\n# check out sources for reference\nRUN mkdir /root/src/\nRUN cd /root/src/ && git clone https://github.com/Theano/Theano.git\nRUN cd /root/src/ && git clone https://github.com/tensorflow/tensorflow.git\nRUN cd /root/src/ && git clone https://github.com/fchollet/keras.git\n\n# Build PyOpenPNL and Gym deps\nRUN pip install networkx\nRUN apt-get install -y python-numpy python-dev cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev python-opengl libboost-all-dev libsdl2-dev swig pypy-dev automake autoconf libtool\nRUN cd /root/src/ && git clone https://github.com/PyOpenPNL/OpenPNL.git && cd OpenPNL && ./autogen.sh &&  ./configure CFLAGS='-g -O2 -fpermissive -w' CXXFLAGS='-g -O2 -fpermissive -w' && make -j4 && make install\nRUN cd /root/src/ && git clone https://github.com/PyOpenPNL/PyOpenPNL.git && cd PyOpenPNL && python setup.py build && python setup.py install\nRUN cd /root/src/ && git clone https://github.com/osh/kerlym.git && cd kerlym && python setup.py build && python setup.py install\n\n# set up OpenAI Gym\nRUN cd /root/src/ && git clone https://github.com/openai/gym.git && cd gym && pip install -e .\nRUN pip install gym[atari] pachi_py\nRUN mkdir /root/src/notebooks/\n\n# copy in some helpful files / set up env on login\nCOPY .vimrc /root/\n\n# generate jupyter config\nRUN jupyter notebook --generate-config\nRUN echo \"c.NotebookApp.token = u''\" >> ~/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.ip = '*'\" >> ~/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.open_browser = False\" >> ~/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.port = 8888\" >> ~/.jupyter/jupyter_notebook_config.py\n"
    },
    {
        "filename": "18662df955cd750d5431ac8156af6c3fb11d3461.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:8-slim\n\nMAINTAINER Snyk Ltd\n\n# Install python\nRUN apt-get update && \\\n    apt-get install -y python python-dev python-pip libssl-dev\nRUN pip install pip virtualenv -U\n\n# Install snyk cli\nRUN npm install --global snyk snyk-to-html && \\\n    apt-get update && \\\n    apt-get install -y jq\n\nRUN chmod -R a+wrx /home/node\nWORKDIR /home/node\nENV HOME /home/node\n\n# The path at which the project is mounted (-v runtime arg)\nENV PROJECT_PATH /project\n\nADD docker-python-entrypoint.sh .\nADD docker-entrypoint.sh .\nADD snyk_report.css .\n\nENTRYPOINT [\"./docker-python-entrypoint.sh\"]\n\n# Default command is `snyk test`\n# Override with `docker run ... snyk/snyk-cli <command> <args>`\nCMD [\"test\"]\n\n"
    },
    {
        "filename": "18770e7fd7d8679672fc0051d443a41165334958.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda\n\nRUN echo 'building GPU sia-cog image'\n\nMAINTAINER Deepak Battini \"deepak.battini@siadroid.com\"\nLABEL description=\"sia-cog cognitive and machine learning API / GPU version\"\n\nRUN useradd -ms /bin/bash sia\n\nRUN echo 'building GPU sia-cog image'\nRUN apt-get update && apt-get install -y python-pip python-dev git cmake build-essential wget unzip\nRUN apt-get install -y libopencv-dev libssl-dev libffi-dev libfann-dev swig tesseract-ocr python-tk\n\nCMD python -m pip install --upgrade pip\nRUN pip install setuptools Flask Cython Keras tensorflow mxnet sklearn pandas matplotlib h5py pillow requests simplejson opencv-python jsonpickle pytesseract nltk chatterbot urllib3 easydict padatious seaborn mpld3 psutil nvidia-ml-py flask_cors passlib flask-sqlalchemy\n\nRUN pip install -e git+https://github.com/mycroftai/adapt#egg=adapt-parser\nRUN apt-get -y install openmpi-bin\nRUN wget https://cntk.ai/PythonWheel/GPU/cntk-2.1-cp27-cp27mu-linux_x86_64.whl\nRUN pip install cntk-2.1-cp27-cp27mu-linux_x86_64.whl\nCMD rm cntk-2.1-cp27-cp27m-win_amd64.whl\nENV KERAS_BACKEND=cntk\n\nRUN apt-get clean\nRUN apt-get autoremove -y"
    },
    {
        "filename": "191ce69aa2ec9ce765192cc9d811d1771a42fa21.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Tony Holdstock-Brown <tony@codelitt.com>\n\n# Note: If you're running a brand new ata container, run this to initialise your DB\n#       AFTER it has been set up already.\n# /usr/lib/postgresql/9.3/bin/initdb -D /var/lib/pgsql/data\n\nRUN echo \"$(cat /etc/apt/sources.list) universe multiverse\" > /etc/apt/sources.list\n\nENV LANGUAGE en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nRUN locale-gen en_US.UTF-8 && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n\nRUN apt-get update\nRUN apt-get install -y wget\nRUN wget -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | apt-key add -\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n\nRUN apt-get update\nRUN apt-get -y install postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3\n\nADD pg_hba.conf /etc/postgresql/9.3/main/pg_hba.conf\nADD postgresql.conf /etc/postgresql/9.3/main/postgresql.conf\n\n# This uses a data container to manage storage\nVOLUME [\"/var/lib/pgsql/data\"]\nRUN chown postgres:postgres /var/lib/pgsql/data\n\nADD entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nADD databases.txt /databases.txt\n\nEXPOSE 5432\n\nCMD [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "195332e4393a2d8f69827d9b4d03fccd48b3a4c2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM s80x86-build-quartus:latest\nMAINTAINER Jamie Iles <jamie@jamieiles.com>\nENV DEBIAN_FRONTEND=noninteractive\nARG MIRROR=https://sourcery.mentor.com/GNUToolchain/package14960/public/ia16-elf/\nARG TOOLCHAIN=sourceryg++-2016.11-64-ia16-elf-x86_64-linux-gnu.tar.bz2\nARG VERILATOR_VERSION=3.908\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        clang \\\n        clang-c++ \\\n        cmake \\\n        cpp \\\n        git \\\n        nasm \\\n        libsdl2-2.0-0 \\\n        libsdl2-dev \\\n        libboost-serialization-dev \\\n        libboost-program-options-dev \\\n        libboost-python1.62.0 \\\n        libboost-python-dev \\\n        libusb-1.0-0-dev \\\n        python-dev \\\n        llvm \\\n        ninja-build \\\n        ccache \\\n        ruby \\\n        ruby-dev \\\n        python3 \\\n        python-distorm3 \\\n        python3-pip \\\n        python-pystache \\\n        python3-pystache \\\n        python-lxml \\\n        python-yaml \\\n        python3-yaml \\\n        wget \\\n        flex \\\n        bison \\\n        libfl-dev\nRUN cd /tmp && \\\n        wget https://www.veripool.org/ftp/verilator-$VERILATOR_VERSION.tgz && \\\n        tar xf verilator-$VERILATOR_VERSION.tgz && \\\n        cd verilator-$VERILATOR_VERSION && \\\n        ./configure --prefix=/usr && \\\n        make -j4 && \\\n        make install && \\\n        cd /tmp && \\\n        rm verilator* -rf\nRUN gem install --no-ri --pre prawn --version 2.1.0\nRUN gem install --no-ri --pre \\\n        asciidoctor-pdf \\\n        coderay \\\n        pygments.rb \\\n        concurrent-ruby\nRUN mkdir -p /build\nWORKDIR /build\nRUN apt-get install -y python3-setuptools\nRUN pip3 install textX==1.6.1\nRUN rm /usr/bin/gcov; ln -s /usr/bin/llvm-cov /usr/bin/gcov\nRUN cd /tmp && \\\n        wget $MIRROR$TOOLCHAIN && \\\n        tar -C /usr --strip-components 1 -xf $TOOLCHAIN && \\\n        rm -rf $TOOLCHAIN\n"
    },
    {
        "filename": "1a368e85673f8493a4342bd1c29ee323420be3b0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER titushuang \"ituzhi@163.com\"\nENV REFRESHED_AT 2015-10-12\n\nRUN apt-get update \\\n    && apt-get install -y mysql-server-5.6 python python-pip libmysqlclient-dev\n\nRUN apt-get install -y python-dev\nRUN apt-get -y -q install nginx\nRUN pip install MySQL-python \nRUN pip install flask \nRUN pip install -U flask-cors\nRUN apt-get -y -q install curl\n\nRUN mkdir -p /home/toptopic /home/toptopic/web\n\nCOPY init.sh /home/toptopic/init.sh\nCOPY web /home/toptopic/web\nCOPY question.txt /home/toptopic/question.txt\n\nCOPY nginx/global.conf /etc/nginx/conf.d/\nCOPY nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY mysql/my.cnf /etc/mysql/my.cnf\n\nRUN ln -s /home/toptopic/web/www /usr/share/nginx/html\n\nRUN chmod +x /home/toptopic/init.sh \nRUN chmod -R 755 /home/toptopic/web\n\nRUN ./etc/init.d/mysql start &&\\  \n    mysql -e \"grant all privileges on *.* to 'root'@'%' identified by 'dbpasswd';\"&&\\  \n    mysql -e \"grant all privileges on *.* to 'root'@'127.0.0.1' identified by 'dbpasswd';\"&&\\  \n    mysql -e \"CREATE DATABASE top_topic_zhihu; use top_topic_zhihu;\"&&\\ \n    mysql -e \"CREATE TABLE top_topic_zhihu.question(question_id varchar(30) NOT NULL, title varchar(200), ask_time datetime,followers int)\"&&\\ \n    mysql -e \"load data infile '/home/toptopic/question.txt' into table top_topic_zhihu.question fields terminated by ';;'\"&&\\ \n    mysql -e \"grant all privileges on *.* to 'root'@'localhost' identified by 'dbpasswd';\"\n\nEXPOSE 2223 5000\n\nCMD [\"/home/toptopic/init.sh\"]"
    },
    {
        "filename": "1aa4e6fe0ce107c4976c6721aa9faa715bc3800b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-clang\nMAINTAINER mike.aizatsky@gmail.com\nRUN apt-get install -y git \\\n    subversion \\\n    jq \\\n    python3 \\\n    zip \\\n    make \\\n    libunwind8-dev \\\n    binutils-dev \\\n    libblocksruntime-dev \\\n    libc6-dev-i386\n\n# Default build flags for various sanitizers.\nENV SANITIZER_FLAGS_address \"-fsanitize=address -fsanitize-address-use-after-scope\"\n\n# Set of '-fsanitize' flags matches '-fno-sanitize-recover' + 'unsigned-integer-overflow'.\nENV SANITIZER_FLAGS_undefined \"-fsanitize=bool,array-bounds,float-divide-by-zero,function,integer-divide-by-zero,return,shift,signed-integer-overflow,unsigned-integer-overflow,vla-bound,vptr -fno-sanitize-recover=bool,array-bounds,float-divide-by-zero,function,integer-divide-by-zero,return,shift,signed-integer-overflow,vla-bound,vptr\"\n\nENV SANITIZER_FLAGS_memory \"-fsanitize=memory -fsanitize-memory-track-origins\"\n\nENV SANITIZER_FLAGS_dataflow \"-fsanitize=dataflow\"\n\n# Do not use any sanitizers in the coverage build.\nENV SANITIZER_FLAGS_coverage \"\"\n\n# We use unsigned-integer-overflow as an additional coverage signal and have to\n# suppress error messages. See https://github.com/google/oss-fuzz/issues/910.\nENV UBSAN_OPTIONS=\"silence_unsigned_overflow=1\"\n\n# Default build flags for coverage feedback.\nENV COVERAGE_FLAGS=\"-fsanitize=fuzzer-no-link\"\n\n# Use '-Wno-unused-command-line-argument' to suppress \"warning: -ldl: 'linker' input unused\"\n# messages which are treated as errors by some projects.\nENV COVERAGE_FLAGS_coverage \"-fprofile-instr-generate -fcoverage-mapping -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument\"\n\n# Coverage isntrumentation flags for dataflow builds.\nENV COVERAGE_FLAGS_dataflow=\"-fsanitize-coverage=trace-pc-guard,pc-table,func,trace-cmp\"\n\n# Default sanitizer, fuzzing engine and architecture to use.\nENV SANITIZER=\"address\"\nENV FUZZING_ENGINE=\"libfuzzer\"\nENV ARCHITECTURE=\"x86_64\"\n\n# DEPRECATED - NEW CODE SHOULD NOT USE THIS. OLD CODE SHOULD STOP. Please use\n# LIB_FUZZING_ENGINE instead.\n# Path to fuzzing engine library to support some old users of\n# LIB_FUZZING_ENGINE.\nENV LIB_FUZZING_ENGINE_DEPRECATED=\"/usr/lib/libFuzzingEngine.a\"\n\n# Argument passed to compiler to link against fuzzing engine.\n# Defaults to the path, but is \"-fsanitize=fuzzer\" in libFuzzer builds.\nENV LIB_FUZZING_ENGINE=\"/usr/lib/libFuzzingEngine.a\"\n\n# TODO: remove after tpm2 catchup.\nENV FUZZER_LDFLAGS \"\"\n\nWORKDIR $SRC\n\nADD http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz $SRC/\nRUN mkdir afl && \\\n    cd afl && \\\n    tar -xzv --strip-components=1 -f $SRC/afl-latest.tgz && \\\n    rm -rf $SRC/afl-latest.tgz\n\nADD https://github.com/google/honggfuzz/archive/oss-fuzz.tar.gz $SRC/\nRUN mkdir honggfuzz && \\\n    cd honggfuzz && \\\n    tar -xzv --strip-components=1 -f $SRC/oss-fuzz.tar.gz && \\\n    rm -rf $SRC/oss-fuzz.tar.gz\n\nCOPY compile compile_afl compile_dataflow compile_libfuzzer compile_honggfuzz \\\n    srcmap write_labels.py /usr/local/bin/\n\nCMD [\"compile\"]\n"
    },
    {
        "filename": "1aa6f4b822699ddcd6fe882296e1ece2e9d1f351.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# docker build -t lhd:latest https://github.com/KIZI/LinkedHypernymsDataset.git#:docker\n# docker run --name lhd -d --env-file <path-to-env-vars-file> lhd <language(en|de|nl)> <dbpedia-version>\n# docker cp lhd:/root/LinkedHypernymsDataset/data/output ./\n\nFROM debian:jessie\n\nMAINTAINER kizi \"prozeman@gmail.com\"\n\nWORKDIR /root\n\nRUN echo 'deb http://http.debian.net/debian jessie-backports main' >> /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install -y -t jessie-backports openjdk-8-jdk && \\\n    apt-get install -y git curl maven wget unzip memcached && \\\n    update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n    \nRUN git clone https://github.com/KIZI/LinkedHypernymsDataset.git && \\\n    mkdir LinkedHypernymsDataset/data/output && \\\n    mkdir LinkedHypernymsDataset/utils\n    \nWORKDIR LinkedHypernymsDataset\n\nRUN cd utils && \\\n    wget http://netassist.dl.sourceforge.net/project/gate/gate/8.0/gate-8.0-build4825-BIN.zip && \\\n    unzip gate-8.0-build4825-BIN.zip && \\\n    rm gate-8.0-build4825-BIN.zip && \\\n    mkdir treetagger && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/tree-tagger-linux-3.2.1.tar.gz -P treetagger/ && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/tagger-scripts.tar.gz -P treetagger/ && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/install-tagger.sh -P treetagger/ && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/dutch-par-linux-3.2-utf8.bin.gz -P treetagger/ && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/german-par-linux-3.2-utf8.bin.gz -P treetagger/ && \\\n    wget http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/german-chunker-par-linux-3.2-utf8.bin.gz -P treetagger/ && \\\n    chmod 755 treetagger/install-tagger.sh && \\\n    cd treetagger && \\\n    ./install-tagger.sh\n    \nADD tree-tagger-* utils/gate-8.0-build4825-BIN/plugins/Tagger_Framework/resources/TreeTagger/\nADD application.* ./\nADD start.sh ./\n\nRUN chmod 755 utils/gate-8.0-build4825-BIN/plugins/Tagger_Framework/resources/TreeTagger/* && \\\n    chmod 755 start.sh && \\\n    mvn install\n    \nVOLUME [\"/root/LinkedHypernymsDataset/data/output\"]\n\nENTRYPOINT [\"./start.sh\"]"
    },
    {
        "filename": "1b0b0bda8ea732010df12c58e98f4108171bf5d4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# g2p-seq2seq\n# G2P with Tensorflow\n# The tool does Grapheme-to-Phoneme (G2P) conversion using recurrent neural network (RNN) \n# with long short-term memory units (LSTM).\n#\n# @see https://github.com/cmusphinx/g2p-seq2seq\n#\n# Copyright (c) 2018 Loreto Parisi - https://github.com/loretoparisi/docker\n#\n\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\n\n# working directory\nENV HOME /root\nWORKDIR $HOME\n\nRUN apt-get update && apt-get install -y \\\n    git \\\n    curl \\\n    wget \\\n    vim \\\n    python-pip python-dev \\\n    ipython\n\n# pip\nRUN pip install --upgrade pip\n\n# tensorflow >= 1.3.0 and tensor2tensor >= 1.4.0\nRUN export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda/extras/CUPTI/lib64\nRUN \\\n    pip install tensorflow-gpu==1.4.0 && \\\n    pip install tensor2tensor==1.5.7\n\n# download CMU Dict\nRUN \\\n    git clone https://github.com/cmusphinx/cmudict\n\n# install g2p-seq2seq.git\nRUN git clone https://github.com/cmusphinx/g2p-seq2seq\nCOPY src/setup.py g2p-seq2seq/setup.py\nRUN \\\n    cd g2p-seq2seq/ && \\\n    python setup.py install && \\\n    cd -\n\nCMD [\"bash\"]\n"
    },
    {
        "filename": "1b68060f9d1ee022fb84503d61fddee20f1c5901.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:14.04\n \nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\n\n#Runit\nRUN apt-get install -y runit \nCMD /usr/sbin/runsvdir-start\n\n#SSHD\nRUN apt-get install -y openssh-server && \\\n    mkdir -p /var/run/sshd && \\\n    echo 'root:root' |chpasswd\nRUN sed -i \"s/session.*required.*pam_loginuid.so/#session    required     pam_loginuid.so/\" /etc/pam.d/sshd\nRUN sed -i \"s/PermitRootLogin without-password/#PermitRootLogin without-password/\" /etc/ssh/sshd_config\n\n#Utilities\nRUN apt-get install -y vim less net-tools inetutils-ping curl git telnet nmap socat dnsutils netcat tree htop unzip sudo software-properties-common\n\n#Required by Python packages\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential python-dev python-pip liblapack-dev libatlas-dev gfortran libfreetype6 libfreetype6-dev libpng12-dev python-lxml libyaml-dev g++ libffi-dev\n\n#0MQ\nRUN cd /tmp && \\\n    wget http://download.zeromq.org/zeromq-4.0.3.tar.gz && \\\n    tar xvfz zeromq-4.0.3.tar.gz && \\\n    cd zeromq-4.0.3 && \\\n    ./configure && \\\n    make install && \\\n    ldconfig\n\n#Upgrade pip\nRUN pip install -U setuptools\nRUN pip install -U pip\n\n#matplotlib needs latest distribute\nRUN pip install -U distribute\n\n#IPython\nRUN pip install ipython\nENV IPYTHONDIR /ipython\nRUN mkdir /ipython && \\\n    ipython profile create nbserver\n\n#NumPy v1.7.1 is required for Numba\nRUN pip install numpy==1.7.1\n\n#Pandas\nRUN pip install pandas\n\n#Optional\nRUN pip install cython\nRUN pip install jinja2 pyzmq tornado\nRUN pip install numexpr bottleneck scipy pygments \nRUN apt-get install pkg-config\nRUN pip install matplotlib\nRUN pip install sympy pymc\nRUN pip install patsy\nRUN pip install statsmodels\nRUN pip install beautifulsoup4 html5lib\n\n#Pattern\nRUN pip install --allow-external pattern\n\n#NLTK\nRUN pip install pyyaml nltk\n\n#Networkx\nRUN pip install networkx\n\n#LLVM and Numba\nRUN cd /tmp && \\\n    wget http://llvm.org/releases/3.2/llvm-3.2.src.tar.gz && \\\n    tar zxvf llvm-3.2.src.tar.gz && \\\n    cd llvm-3.2.src && \\\n    ./configure --enable-optimized && \\\n    REQUIRES_RTTI=1 make install && \\\n    pip install llvmpy && \\\n    pip install llvmmath && \\\n    pip install numba\n\n#Biopython\nRUN pip install biopython\n\n#Bokeh\n#RUN pip install requests bokeh\n\n#Install R 3+\nRUN echo 'deb http://cran.rstudio.com/bin/linux/ubuntu trusty/' > /etc/apt/sources.list.d/r.list\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nRUN apt-get update\nRUN apt-get install -y r-base\n#Rmagic\nRUN pip install rpy2\n\n#Vincent\nRUN pip install vincent\n\n#Add runit services\nADD sv /etc/service \n"
    },
    {
        "filename": "1b98be09df9aa6603d69d902add1f53d853e13e1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nENV release /opensplice/install/HDE/x86_64.linux-dev/release.com\nENV envs /opensplice/envs-x86_64.linux-dev.sh\n\nRUN cd /etc && rm localtime && ln -s /usr/share/zoneinfo/Poland localtime\nRUN apt-get update && apt-get install -y perl git wget build-essential cppcheck cmake vim gawk doxygen flex bison qt5-default qtcreator\n\nRUN git clone https://github.com/PrismTech/opensplice.git\nADD docker/opensplice_base/*.patch /opensplice/\nRUN cd /opensplice && patch -p0 < DCPS_ISO_Cpp.mpc.patch\nRUN cd /opensplice/src/api/dcps/isocpp/include/ && patch -p0 < /opensplice/macros.hpp.patch\nRUN cd /opensplice/src/api/dcps/isocpp/include/spec && patch -p0 < /opensplice/macros.hpp.patch\nRUN cd /opensplice && /bin/bash -c \"source ./configure x86_64.linux-dev && make && make install\"\nRUN sed -i 's/@@INSTALLDIR@@/\\/opensplice\\/install/' $release\n\n"
    },
    {
        "filename": "1bb121b563d987ba3aa3de06d3c63ae33f629bf6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        wget \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libopencv-dev \\\n        libprotobuf-dev \\\n        libsnappy-dev \\\n        protobuf-compiler \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        python-setuptools \\\n        python-scipy && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV CAFFE_ROOT=$HOME/caffe\n\nWORKDIR $CAFFE_ROOT\n\nENV CLONE_TAG=1.0\n\nRUN pip install --upgrade pip\nRUN pip install pathlib\n\nRUN git clone -b ${CLONE_TAG} --depth 1 https://github.com/BVLC/caffe.git . && \\\n    cd python && for req in $(cat requirements.txt) pydot; do pip install $req; done && cd .. && \\\n    mkdir build && cd build && \\\n    cmake -DCPU_ONLY=1 .. && \\\n    make -j\"$(nproc)\"\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\nWORKDIR /code\n\nADD . /code\n\nRUN pip install -r requirements/dev.txt\n\nRUN apt-get update && apt-get install -y supervisor\n\nCOPY docker/prod/django/supervisor.conf /etc/supervisor/conf.d/default.conf\n\nEXPOSE 8000\nEXPOSE 8001\n"
    },
    {
        "filename": "1bc461329ca11ef4feff815effcbbe9a675a75a2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER John Fink <john.fink@gmail.com>\nRUN apt-get update # Thu Nov  7 22:40:44 EST 2013\nRUN apt-get -y upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-client mysql-server apache2 libapache2-mod-php5 pwgen python-setuptools vim-tiny php5-mysql\nRUN easy_install supervisor\nADD ./start.sh /start.sh\nADD ./foreground.sh /etc/apache2/foreground.sh\nADD ./supervisord.conf /etc/supervisord.conf\nRUN chmod 755 /start.sh\nRUN chmod 755 /etc/apache2/foreground.sh\nEXPOSE 80\nCMD [\"/bin/bash\", \"/start.sh\"]\n"
    },
    {
        "filename": "1bd768dd513181cc93ef9f66add0dbb75fd53ec1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# docker run -v ~/.aws:/tmp/dotaws:ro -it --rm --name route53 \\  \n# -e ROUTE53_HOSTED_ZONE_ID=\"ABC123XYZ\"  \n# -e ROUTE53_IP_ADDR=\"127.0.0.1\"  \n# -e ROUTE53_HOSTNAME=\"myhost.example.com\"  \n# alanmquach/route53-dyndns  \nFROM ubuntu:xenial  \n  \nMAINTAINER Alan Quach <integsrtite@gmail.com>  \n  \nRUN apt-get update && apt-get install -y \\  \nrsync \\  \npython-pip \\  \n&& pip install --upgrade awscli  \nADD update.sh /tmp/update.sh  \n  \nCMD [\"/tmp/update.sh\"]  \n  \n\n"
    },
    {
        "filename": "1cc11a302ffde02f7098533c829082405f4ec72c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# StudyCentric\n\nFROM ubuntu:vivid\n\nMAINTAINER Jeff Miller \"millerjm1@email.chop.edu\"\n\nRUN apt-get update -qq --fix-missing\nRUN apt-get install software-properties-common -y\nRUN apt-get install -y\\\n    build-essential\\\n    git-core\\\n    libldap2-dev\\\n    libpq-dev\\\n    libsasl2-dev\\\n    libssl-dev\\\n    libxml2-dev\\\n    libxslt1-dev\\\n    libffi-dev\\\n    openssl\\\n    wget\\\n    zlib1g-dev\n\nRUN apt-get install -y python2.7\nRUN apt-get install -y python2.7-dev\nRUN apt-get install -y libgdcm2.4\nRUN apt-get install -y python-gdcm\nRUN apt-get install -y python-pip\n\n# Python dependencies\nRUN pip install \"Django==1.5\"\nRUN pip install \"requests\"\nRUN pip install \"pydicom\"\nRUN pip install \"uWSGI\"\n\nADD . /opt/app\n\n# Ensure all python requirements are met\nENV APP_NAME STUDYCENTRIC\n\nCMD [\"/opt/app/scripts/http.sh\"]\n\nEXPOSE 8000\n"
    },
    {
        "filename": "1cef462cff5f2b4bdc7fe020a7d733a7b25f493c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to the BioPerl prebuilt prerequisites image\n# for building from source\nFROM bioperl/bioperl-deps\n\n# # File Author / Maintainer\n# LABEL maintainer=\"Hilmar Lapp <hlapp@drycafe.net>\"\n\nMAINTAINER dekkerlab\n\nUSER root\n\n# # Set the working directory to where we will install bioperl\n# # in the builder stage\n# WORKDIR /bioperl\n\n# Set the locale\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN apt-get update --yes && \\\n    apt-get install --yes git\n\n# install imagemagick\nRUN apt-get install --yes imagemagick\n\n# Install conda\nRUN curl -LO http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    bash Miniconda3-latest-Linux-x86_64.sh -p /miniconda3 -b && \\\n    rm Miniconda3-latest-Linux-x86_64.sh\nENV PATH=/miniconda3/bin:${PATH}\n\n# Install conda dependencies\nADD cworld_environment.yml /\nADD VERSION /\nRUN pwd\nRUN conda config --set always_yes yes --set changeps1 no && \\\n    conda config --add channels conda-forge && \\\n    conda config --add channels defaults && \\\n    conda config --add channels bioconda && \\\n    conda config --get && \\\n    conda update -q conda && \\\n    conda info -a && \\\n    conda env update -q -n root --file cworld_environment.yml && \\\n    conda clean --tarballs --index-cache --lock\n\n# RUN conda install pysam\n\n\n#export MKL OMP etc ...\n\n\n# # get the version of the GDlib:\n# RUN perl -MGD -e 'print $GD::VERSION .\"\\n\";'\n# # local isntall\n# perl Build.PL\n# ./Build\n# ./Build install --install_base /your/custom/dir\n# (ensure /your/custom/dir is added to your PERL5LIB path)\n# e.g.\n# ./Build install --install_base ~/perl5\n# # then in .bashrc\n# export PERL5LIB=${PERL5LIB}:/home/<yourusername>/perl5/lib/perl5\n\nWORKDIR /cworld-dekker\nADD Build.PL .\nADD lib ./lib\nADD scripts ./scripts\nADD MANIFEST .\n\n# global install ...\nRUN perl ./Build.PL\nRUN ./Build\nRUN ./Build install\nRUN ./Build install --install_base /perl5\nENV PERL5LIB=${PERL5LIB}:/perl5/lib/perl5\n\nRUN ./Build distclean\n# After installing the module, you should be free to run anything in scripts/ e.g.\n# $ perl scripts/heatmap.pl\n\n# WORKDIR /root\n# it should be more civilized, but for now, let's hope it just works\n"
    },
    {
        "filename": "1cf582ece03335c8db92a242c5870f11249a4f26.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:xenial\nMAINTAINER The Apache Mesos Developers <dev@mesos.apache.org>\n\nWORKDIR /tmp/build\n\n# Build Mesos-flavored `clang-tidy`.\nRUN apt-get update\nRUN apt-get install -qy --no-install-recommends \\\n  build-essential \\\n  ca-certificates \\\n  cmake \\\n  git \\\n  python-dev && \\\n  apt-get clean\n\nRUN \\\n  git clone --depth 1 -b release_39 http://llvm.org/git/llvm /tmp/llvm && \\\n  git clone --depth 1 -b mesos_39 http://github.com/mesos/clang.git /tmp/llvm/tools/clang && \\\n  git clone --depth 1 -b mesos_39 http://github.com/mesos/clang-tools-extra.git /tmp/llvm/tools/clang/tools/extra && \\\n  \\\n  cmake /tmp/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt && \\\n  cmake --build tools/clang/lib/Headers --target install -- -j $(nproc) && \\\n  cmake --build tools/clang/tools/extra/clang-tidy --target install -- -j $(nproc) && \\\n  \\\n  cd / && \\\n  rm -rf /tmp/llvm && \\\n  rm -rf /tmp/build\n\nENV PATH /opt/bin:$PATH\n\n# Install Mesos dependencies\n# TODO(mpark): Remove `libssl-dev` from this list once `MESOS-6942` is resolved.\nRUN apt-get install -qy \\\n  autoconf \\\n  libapr1-dev \\\n  libcurl4-nss-dev \\\n  libsasl2-dev \\\n  libsasl2-modules \\\n  libssl-dev \\\n  libsvn-dev \\\n  libtool \\\n  zlib1g-dev && \\\n  apt-get clean\n\n# Install `jq` and `parallel` for `clang-tidy` invocation.\nRUN apt-get install -qy \\\n  jq \\\n  parallel && \\\n  apt-get clean\n\n# Wire up the script which performs the actual work.\nWORKDIR /BUILD\nADD [\"entrypoint.sh\", \"entrypoint.sh\"]\nCMD exec ./entrypoint.sh\n"
    },
    {
        "filename": "1d09b9b14fc35e6bb3d7141ff62f0baa7cf1b3c5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\nMAINTAINER Maksym Bilenko <sath891@gmail.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV LD_LIBRARY_PATH /instantclient_12_1\nENV USER sys\nENV PASS oracle\nENV HOST oracle-database\nENV PORT 1521\nENV SID XE\nENV HTTP_PORT 8080\nENV APEX_VERSION 5.1.2\n\nRUN apt-get update && apt-get -y install libaio1 unzip && apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\n\nADD instantclient-* /tmp/\nADD apex* /apex_5.1.2/\nADD entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "1d3654e4aa8ee7801872b67c1fdc8c8a20d01c20.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# DOCKER-VERSION 0.3.4\nFROM node:4-slim\n#FROM google/nodejs\n#FROM node:4.4-wheezy\nMAINTAINER  Emmanuel PIERRE epierre@e-nef.com\nUSER root\nLABEL Description=\"This image is used to start the MyDomoAtHome executable\" Vendor=\"Domoticz\" Version=\"1.0\"\n\n##################################################\n# Install tools                                  #\n##################################################\n\nRUN apt-get update --fix-missing\nRUN apt-get -y install sudo\nRUN useradd -m docker && echo \"docker:docker\" | chpasswd && adduser docker sudo\nRUN apt-get install -yq curl\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\nRUN apt-get install tzdata\nRUN apt-get -y install git git-core\nRUN apt-get -y install wget curl\n\n##################################################\n# Set environment variables                      #\n##################################################\n\nRUN apt-get install -yq apt-utils\nRUN apt-get install debconf\nRUN apt-get update -qq && apt-get install -y locales -qq && locale-gen en_US.UTF-8 en_us && dpkg-reconfigure locales && dpkg-reconfigure locales && locale-gen C.UTF-8 && /usr/sbin/update-locale LANG=C.UTF-8\n# Ensure UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV DEBIAN_FRONTEND noninteractive\nENV TERM xterm\nENV CONTAINER yes\n\n##################################################\n# Install MDAH                                   #\n##################################################\n# Set the time zone\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n#VOLUME /etc/timezone /etc/localtime\n\n##################################################\n# Install MDAH                                   #\n##################################################\n\n#RUN cachebuster=b953b35 git clone -b nodejs https://github.com/empierre/MyDomoAtHome.git dist\n#RUN cd MyDomoAtHome && bash run-once.sh\nRUN curl -sL https://deb.nodesource.com/setup_4.x | bash -\nRUN apt-get install -y nodejs\n#RUN apt-get install npm\nRUN npm install -g npm@2.x\nRUN wget http://www.e-nef.com/domoticz/mdah/node-mydomoathome-0.2.39.deb\nRUN dpkg -i node-mydomoathome-0.2.39.deb\nRUN mv /etc/mydomoathome/config.json /etc/mydomoathome/config.json.old\nVOLUME /etc/mydomoathome/\n\n##################################################\n# Start                                          #\n##################################################\n\nEXPOSE 3002\n\nWORKDIR dist \nADD . dist\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh && \\\n  npm install -g forever nodemon mocha supervisor\n#CMD [\"forever\", \"start\",\"--minUptime 1000 --spinSleepTime 1000 --max-old-space-size=128\", \"/usr/share/mydomoathome/app/mdah.js\"]\nRUN cd /usr/share/mydomoathome/app/\nCMD [\"forever\", \"/usr/share/mydomoathome/app/mdah.js\"]\n"
    },
    {
        "filename": "0008ca345cc83aa67f82aed5e3a70c1e0b407098.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:17.04\n\nMAINTAINER Edgar Riba <edgar.riba@gmail.com>\n\n# install basic stuff\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential       \\\n    cmake                 \\\n    python-pip            \\\n    python-setuptools     \\\n    git                   \\\n    vim\n\nRUN pip install --upgrade pip\n\n# install optional dependencies\n\nRUN apt-get install -y    \\\n    libpthread-stubs0-dev \\\n    libtbb-dev\n\n# install linters\n\nRUN apt-get install -y    \\\n    clang-format-4.0\n\nRUN pip install cpplint\n\n# configure and build NNPACK\n\nRUN apt-get install ninja-build\n\nRUN pip install --upgrade setuptools && \\\n    pip install wheel && \\\n    pip install ninja-syntax\n\nRUN pip install --upgrade git+https://github.com/tiny-dnn/PeachPy\nRUN pip install --upgrade git+https://github.com/tiny-dnn/confu\n\nWORKDIR /opt\nRUN git clone https://github.com/tiny-dnn/NNPACK.git && \\\n    cd NNPACK && \\\n    confu setup && \\\n    python ./configure.py && \\\n    ninja\n\n# install opencl and viennacl\n\nRUN apt-get install -y \\\n    ocl-icd-opencl-dev \\ \n    libviennacl-dev\n\n# build and configure libdnn\n\nWORKDIR /opt\nRUN git clone https://github.com/naibaf7/libdnn.git && \\\n    cd libdnn && mkdir build && cd build && \\\n    cmake .. && make -j2\n"
    },
    {
        "filename": "00a1ad8e18e545851bb28ef23e49f69e6e9f75b9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER John Fink <john.fink@gmail.com>\nRUN apt-get update # Fri Oct 24 13:09:23 EDT 2014\nRUN apt-get -y upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-client mysql-server apache2 libapache2-mod-php5 pwgen python-setuptools vim-tiny php5-mysql  php5-ldap\nRUN easy_install supervisor\nADD ./scripts/start.sh /start.sh\nADD ./scripts/foreground.sh /etc/apache2/foreground.sh\nADD ./configs/supervisord.conf /etc/supervisord.conf\nADD ./configs/000-default.conf /etc/apache2/sites-available/000-default.conf\nRUN rm -rf /var/www/\nADD https://wordpress.org/latest.tar.gz /wordpress.tar.gz\nRUN tar xvzf /wordpress.tar.gz \nRUN mv /wordpress /var/www/\nRUN chown -R www-data:www-data /var/www/\nRUN chmod 755 /start.sh\nRUN chmod 755 /etc/apache2/foreground.sh\nRUN mkdir /var/log/supervisor/\nEXPOSE 80\nCMD [\"/bin/bash\", \"/start.sh\"]\n"
    },
    {
        "filename": "00a26849d84656da982bc20b853cc139eecf90bf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Hongzhi Li  <Hongzhi.Li@microsoft.com>\n\n\nADD krb5.conf /etc/krb5.conf\nADD nsswitch.conf /etc/nsswitch.conf\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        samba \\\n        cifs-utils  \\\n        libnss-winbind \\\n        libpam-winbind \\\n        winbind \\\n        krb5-user \\\n        krb5-config \n\n RUN apt-get install -y apache2 libapache2-mod-wsgi\n\n RUN apt-get install -y \\\n        python-dev \\\n        python-pip \n\nRUN pip install --upgrade pip; \n\nRUN pip install setuptools; \nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n\nRUN pip install flask\nRUN pip install flask.restful\n\nADD smb.conf /etc/samba/smb.conf\n\nADD run.sh /run.sh\nRUN chmod +x /run.sh\n\nADD 000-default.conf /etc/apache2/sites-enabled/000-default.conf\nADD domaininfo /domaininfo\n\nRUN ln -s /etc/apache2/mods-available/mpm_prefork.conf /etc/apache2/mods-enabled/mpm_prefork.conf\nRUN ln -s /etc/apache2/mods-available/mpm_prefork.load /etc/apache2/mods-enabled/mpm_prefork.load\nRUN rm /etc/apache2/mods-enabled/mpm_event.*\n\n\nCMD /run.sh"
    },
    {
        "filename": "013c19a8400bc98d040a7bc91174a1b5b33df3a3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM hubbitus/latex  \nMAINTAINER D\u00eanis Volpato Martins <denisvm@gmail.com>  \n  \nRUN apt-get update && apt-get install -y \\  \nmake git python3 python3-pip \\  \n&& pip3 --no-cache-dir install sphinx \\  \n&& rm -rf /var/lib/apt/lists/*  \n\n"
    },
    {
        "filename": "014db1690684357609ebe0a89136740aa67aca1d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu\n\n# File Author / Maintainer\nMAINTAINER Anand Mani Sankar\n\n# Install Nginx\n\n# Add application repository URL to the default sources\n# RUN echo \"deb http://archive.ubuntu.com/ubuntu/ raring main universe\" >> /etc/apt/sources.list\n\n# Update the repository\nRUN apt-get update\n\n# Install necessary tools\nRUN apt-get install -y nano wget dialog net-tools\n\n# Download and Install Nginx\nRUN apt-get install -y nginx\n\n# Remove the default Nginx configuration file\nRUN rm -v /etc/nginx/nginx.conf\n\n# Copy a configuration file from the current directory\nADD nginx.conf /etc/nginx/\n\n# Copy the actual API and index files\nCOPY ./organismes /var/www/annuaire/organismes\nCOPY index.html /var/www/annuaire\n\n# Append \"daemon off;\" to the configuration file\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\n# Expose ports\nEXPOSE 80\n\n# Set the default command to execute when creating a new container\nCMD service nginx start\n"
    },
    {
        "filename": "017b6df5ec95a247735d2d36573f5a594ed63721.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.22\nMAINTAINER Damien Garros <dgarros@gmail.com>\n\nRUN     apt-get -y update && \\\n        apt-get -y upgrade && \\\n        apt-get clean   &&\\\n        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# dependencies\nRUN     apt-get -y update && \\\n        apt-get -y install \\\n        git adduser libfontconfig wget make curl && \\\n        apt-get clean   &&\\\n        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN     rm -f /etc/service/sshd/down\nRUN     /usr/sbin/enable_insecure_key\n\n# Latest version\nENV GRAFANA_VERSION 5.1.3\nENV INFLUXDB_VERSION 1.5.1\nENV TELEGRAF_VERSION 1.5.3-1\n\nRUN     apt-get -y update && \\\n        apt-get -y install \\\n            build-essential \\\n            python-simplejson \\\n            python-dev \\\n            python-yaml \\\n            python-pip \\\n            python-dev \\\n            libxml2-dev \\\n            libxslt-dev \\\n            tcpdump \\\n            tree \\\n            nginx-light \\\n            snmp \\\n            zlib1g-dev \\\n            libffi-dev \\\n            libssl-dev && \\\n        apt-get clean   &&\\\n        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nRUN     pip install --upgrade setuptools\n\n# # Install some python modules\nRUN     pip install influxdb && \\\n        pip install xmltodict && \\\n        pip install pexpect && \\\n        easy_install pysnmp && \\\n        pip install lxml && \\\n        pip install python-crontab && \\\n        pip install pytest && \\\n        pip install mock && \\\n        pip install cryptography==2.1.2 && \\\n        pip install junos-eznc==2.1.7 && \\\n        pip install enum\n\nRUN     mkdir /src\n\n########################\n### Install Grafana\n########################\nRUN     mkdir /src/grafana                                                                                    &&\\\n        mkdir /opt/grafana                                                                                    &&\\\n        wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-${GRAFANA_VERSION}.linux-x64.tar.gz -O /src/grafana.tar.gz &&\\\n        tar -xzf /src/grafana.tar.gz -C /opt/grafana --strip-components=1                                     &&\\\n        rm /src/grafana.tar.gz\n\nRUN     /opt/grafana/bin/grafana-cli plugins install grafana-piechart-panel\n\n########################\n### Install InfluxDB ###\n########################\n\nRUN     curl -s -o /tmp/influxdb_latest_amd64.deb https://dl.influxdata.com/influxdb/releases/influxdb_${INFLUXDB_VERSION}_amd64.deb && \\\n        dpkg -i /tmp/influxdb_latest_amd64.deb && \\\n        rm /tmp/influxdb_latest_amd64.deb\n\nADD     docker/influxdb/types.db /usr/share/collectd/types.db\nADD     docker/influxdb/influxdb-config.toml /config/config.toml\nADD     docker/influxdb/influxdbrun.sh /influxdbrun.sh\n\nRUN     mkdir /etc/service/influxdb\nADD     docker/influxdb/influxdb.launcher.sh /etc/service/influxdb/run\n\n########################\n### Install telegraf ###\n########################\n\nRUN     curl -s -o /tmp/telegraf_latest_amd64.deb https://dl.influxdata.com/telegraf/releases/telegraf_${TELEGRAF_VERSION}_amd64.deb && \\\n        dpkg -i /tmp/telegraf_latest_amd64.deb && \\\n        rm /tmp/telegraf_latest_amd64.deb\n\nADD     docker/telegraf/telegraf.conf /etc/telegraf/telegraf.conf\n\nRUN     mkdir /etc/service/telegraf\nADD     docker/telegraf/telegraf.launcher.sh /etc/service/telegraf/run\n\n########################\n### Configuration    ###\n########################\n\n### Configure Grafana ###\nADD     docker/grafana/custom.ini /opt/grafana/conf/custom.ini\nADD     docker/grafana/run.sh /etc/service/grafana/run\n#ADD     docker/grafana/grafana.init.sh /etc/my_init.d/grafana.init.sh\n\n## Add the default dashboards\n#RUN     mkdir /src/dashboards && \\\nRUN      mkdir /opt/grafana/data && \\\n         chown -R www-data /opt/grafana/data\n\n### Configure nginx ###\nADD     docker/nginx/nginx.conf /etc/nginx/nginx.conf\nADD     docker/nginx/run.sh /etc/service/nginx/run\n\n### open-nti python scripts (for gathering informatino from server to router)  ###\nADD     open-nti/open-nti.py /opt/open-nti/open-nti.py\nADD     open-nti/startcron.py /opt/open-nti/startcron.py\nADD     tests/main/pyez_mock.py /opt/open-nti/pyez_mock.py\n\n### Add test files\nRUN     mkdir /opt/open-nti/tests\n\n# ################\n\nRUN     chmod +x /etc/service/nginx/run         &&\\\n        chmod +x /etc/service/grafana/run       &&\\\n        #chmod +x /etc/my_init.d/grafana.init.sh &&\\\n        chmod +x /etc/service/influxdb/run      &&\\\n        chmod +x /etc/service/telegraf/run      &&\\\n        chmod +x /influxdbrun.sh\n\nWORKDIR /\nENV HOME /root\nENV SSL_SUPPORT **False**\nENV SSL_CERT **None**\nRUN chmod -R 777 /var/log/\n\n# ## Graphana\nEXPOSE 80\nEXPOSE 3000\n\n# # Influxdb Admin server WebUI\nEXPOSE 8083\nEXPOSE 8086\n\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "01839eb5a953295a2b6ecac4045312c2b80c598f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM gcc:latest\nMAINTAINER Vinod Jayaraman <jv@portworx.com>\n\nWORKDIR /home/\n\nRUN apt-get update\nRUN apt-get install -y  \\\n\tmodule-init-tools \t\\\n\tdh-autoreconf\t\t\\\n\talien\t\t\t\t\\\n\trpm\n\nRUN apt-get install -y dh-autoreconf\nRUN apt-get install -y rpm alien\nRUN apt-get install -y rpm\nADD . /home/px-fuse\nWORKDIR /home/px-fuse\nRUN autoreconf && ./configure\n\nENTRYPOINT [\"/home/px-fuse/fuse-entry-point.sh\"]\n\nCMD [\"make\", \"rpm\"]\n"
    },
    {
        "filename": "01b42a83cb519da6e3c2f2c33e1edcd1be31aa67.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Yugandha Deshpande <yugandha@us.ibm.com>\"\nRUN apt-get update \\\n\t&& apt-get install git -y \\\n\t&& R -e 'install.packages(\"foreach\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& R -e 'install.packages(\"akima\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& git clone https://github.com/cran/gam.git \\\n\t&& cd gam && git checkout 1.15 && cd .. \\\n\t&& R CMD build gam && R CMD INSTALL gam \\\n\t&& R CMD check gam --no-manual \\\n\t&& apt-get purge --auto-remove git -y \\\n\t&& rm -rf gam \nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "0204792dbf0c0ef777a4fd6dcf2d9ad4377d1a7c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\n\nMAINTAINER Hossam Hammady <github@hammady.net>\n\nRUN apt-get update -qq && \\\n    apt-get install -y \\\n      libgd-gd2-perl libgd-text-perl \\\n      libdbd-mysql-perl libdbi-perl \\\n      libconfig-yaml-perl \\\n      make gcc g++ \\\n      unzip \\\n      curl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nADD config /app/config\nADD lib /app/lib\nADD res /app/res\nADD script /app/script\nADD Makefile.PL /app/Makefile.PL\n\nRUN cd /app && \\\n    perl Makefile.PL && \\\n    make && \\\n    make install && \\\n    curl -L https://cpanmin.us | perl - -M https://cpan.metacpan.org -n Mojolicious\n\nRUN cd / && \\\n    curl -L -o zopfli.zip https://github.com/google/zopfli/archive/master.zip && \\\n    unzip zopfli.zip && \\\n    cd zopfli-master && \\\n    make zopflipng && \\\n    cp zopflipng /usr/local/bin/\n\nRUN sed -i 's/localhost/mysql/' /app/config/database.yaml\n\nCMD /app/script/generate.pl help\n"
    },
    {
        "filename": "027393faccdc1d00827ef219de5bbc7482c25996.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Matt Konda <mkonda@jemurai.com>\n\n################################################################################################\n#       Environment\n#\nRUN apt-get update && apt-get install -y git-core sudo curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libffi-dev libgdbm-dev libncurses5-dev automake libtool bison libffi-dev gnupg patch gawk g++ gcc make libc6-dev libcurl3-dev autoconf libtool ncurses-dev zlib1g libreadline6-dev libreadline6 openssl libcurl4-openssl-dev libgmp-dev clamav md5deep nodejs npm default-jre unzip python python-pip && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n#################################################################################################\n#       Node Security\n#            Early because it needs to run as root.\n#            Requires nodejs npm\n#\n## retirejs locked to most recent pre-2.x.x version (2.x.x breaks the retirejs task)\nRUN npm install -g nsp retire@1.6.2 eslint eslint-plugin-scanjs-rules eslint-plugin-no-unsafe-innerhtml\nRUN ln -s /usr/bin/nodejs /usr/bin/node\n\n#################################################################################################\n#       User\n#\nRUN useradd -ms /bin/bash --groups sudo glue\nUSER glue\n\n#################################################################################################\n#       RVM / Ruby\n#\n#\nRUN gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\nRUN /bin/bash -l -c \"curl -L https://get.rvm.io | bash -s stable\"\nRUN /bin/bash -l -c \"source ~/.rvm/scripts/rvm\"\nRUN /bin/bash -l -c \"rvm requirements\"\nRUN /bin/bash -l -c \"rvm install 2.3.1\"\nRUN /bin/bash -l -c \"rvm use 2.3.1 --default\"\nRUN /bin/bash -l -c \"gem install curb --no-document\"\nENV PATH $PATH:/home/glue/.rvm/rubies/ruby-2.3.1/bin\n\n#################################################################################################\n#       Python\n#\nRUN /bin/bash -l -c \"sudo pip install --upgrade pip\"\nRUN /bin/bash -l -c \"sudo pip install bandit\"\nRUN /bin/bash -l -c \"sudo pip install awsscout2\"\n\n#################################################################################################\n#       Java\n#\n## JDK needed for Dependency Check Maven plugin\nRUN sudo apt-get install -y software-properties-common\nRUN sudo add-apt-repository -y ppa:webupd8team/java\nRUN sudo apt-get update\n## Auto-accept the Oracle JDK license\nRUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\nRUN sudo apt-get install -y oracle-java8-installer\n\nRUN /bin/bash -l -c \"mkdir -p /home/glue/tools\"\nWORKDIR /home/glue/tools/\n\n#################################################################################################\n#       Truffle Hog\n#\n# RUN /bin/bash -l -c \"sudo pip install truffleHog\"\nRUN git clone https://github.com/runako/truffleHog.git\nWORKDIR /home/glue/tools/truffleHog\nRUN git checkout rg-local-scan\n\nWORKDIR /home/glue/tools/\n\n# OWASP DEPENDENCY CHECK (needs unzip and default-jre)\nRUN curl -L http://dl.bintray.com/jeremy-long/owasp/dependency-check-1.4.3-release.zip --output owasp-dep-check.zip\nRUN unzip owasp-dep-check.zip\n\n# Maven\nRUN sudo apt-get install -y maven\n\n# FINDBUGS (Experimental)\n#RUN curl -L http://downloads.sourceforge.net/project/findbugs/findbugs/3.0.1/findbugs-3.0.1.zip --output findbugs.zip\n#RUN unzip findbugs.zip\n#RUN curl -L http://search.maven.org/remotecontent?filepath=com/h3xstream/findsecbugs/findsecbugs-plugin/1.4.4/findsecbugs-plugin-1.4.4.jar > findbugs-3.0.1/plugin/findsecbugs.jar\n#RUN git clone https://github.com/find-sec-bugs/find-sec-bugs.git\n\n# SBT plugin (for Scala)\nRUN sudo apt-get update\nRUN echo \"deb https://dl.bintray.com/sbt/debian /\" | sudo tee -a /etc/apt/sources.list.d/sbt.list\nRUN sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823\nRUN sudo apt-get install apt-transport-https\nRUN sudo apt-get update\nRUN sudo apt-get install sbt\n\nRUN mkdir -p /home/glue/.sbt/0.13/plugins\nRUN echo \"addSbtPlugin(\\\"net.vonbuchholtz\\\" % \\\"sbt-dependency-check\\\" % \\\"0.1.4\\\")\" >  /home/glue/.sbt/0.13/plugins/build.sbt\n\n#################################################################################################\n#       Glue App\n#\n\n## Working Dir\nRUN /bin/bash -l -c \"mkdir -p /home/glue/tmp\"\nWORKDIR /home/glue/\n\n## Core Pipeline (and ruby tools)\nRUN /bin/bash -l -c \"git clone https://github.com/OWASP/glue.git\"\n#RUN /bin/bash -l -c \"mkdir -p /home/glue/glue\"\nADD . /home/glue/glue\n\nWORKDIR /home/glue/glue\nRUN /bin/bash -l -c \"gem install bundler; bundle install -j20; rm owasp-glue*.gem; gem build glue.gemspec; gem install owasp-glue*.gem;\"\n\nENTRYPOINT [\"glue\"]\nCMD [\"-h\"]\n"
    },
    {
        "filename": "02ea743cf348bfb55cde34fd92aaf962923d19a3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM continuumio/miniconda\n\nMAINTAINER Chris Mattmann <mattmann@usc.edu>\n\nRUN apt-get update -y && \\\n    apt-get dist-upgrade -y && \\\n    apt-get -y upgrade && \\\n    apt-get -y install apt-utils && \\\n    apt-get -y install git && \\\n    apt-get -y install tcsh && \\\n    apt-get -y install gpg && \\\n    apt-get -y install inotify-tools && \\\n    apt-get -y install software-properties-common && \\\n    apt-get -y install openjdk-8-jdk && \\\n    apt-get -y install imagemagick && \\\n    apt-get -y install tesseract-ocr-all\n\nRUN pip install solrpy pysolr\nRUN conda install -c conda-cluster apache-maven \n\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nENV JRE_HOME=/usr/lib/jvm/java-8-openjdk-amd64\n\nRUN mkdir /deploy\nRUN git clone https://github.com/chrismattmann/imagecat.git\nWORKDIR imagecat/auto\nRUN ./install.sh\nENV OODT_HOME /deploy\nRUN echo '. /deploy/bin/imagecatenv.sh' >> /root/.bashrc\nRUN echo 'export PATH=$OODT_HOME/bin:$PATH' >> /root/.bashrc\n\nEXPOSE 8080\nEXPOSE 8081\nEXPOSE 8888\nEXPOSE 8000\nEXPOSE 9241\n\nCOPY entrypoint_imagecatdev.sh /deploy/entrypoint_imagecatdev.sh\n\nENTRYPOINT [\"/deploy/entrypoint_imagecatdev.sh\"]\n"
    },
    {
        "filename": "03868273d6e51aa5c26576ff62fd7411888ac497.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM lablup/common-tensorflow:1.5-py36-cuda9 as tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        ca-certificates \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        gcc g++ make \\\n        xz-utils \\\n\tlibsqlite3-dev \\\n\t&& \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/\n\n#install Python 3\nRUN curl https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz -o /opt/python.tar.xz && \\\n      cd /opt && tar xvf python.tar.xz && \\\n      cd /opt/*/ && ./configure && \\\n      make && make install && \\\n      ln -s -f /usr/local/bin/python3.6 /usr/bin/python\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.4\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.4.1 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\n# we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir pillow && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/local/bin/python3 2\n\n# Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.5 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile\n"
    },
    {
        "filename": "0391f76f7ac59acb3bae19daa40221f46ebcd1b0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright (C) 2015 Bitergia  \n# GPLv3 License  \nFROM debian:8  \nMAINTAINER Alvaro del Castillo <acs@bitergia.com>  \n  \nENV DEBIAN_FRONTEND noninteractive  \nENV DEPLOY_USER bitergia  \nENV DEPLOY_USER_DIR /home/${DEPLOY_USER}  \nENV SCRIPTS_DIR ${DEPLOY_USER_DIR}/scripts  \n  \n# Initial user  \nRUN useradd bitergia --create-home --shell /bin/bash  \n  \n# Helper scripts  \nRUN mkdir ${DEPLOY_USER_DIR}/scripts  \n  \n# install minimal dependencies for a python3 box and misc utils  \nRUN apt-get update && \\  \napt-get -y install --no-install-recommends \\  \nbash locales \\  \ngit git-core \\  \ntree ccze \\  \npsmisc \\  \npython python3 pep8 \\  \npython3-pip \\  \nunzip curl wget sudo vim ssh \\  \n&& \\  \napt-get clean && \\  \nfind /var/lib/apt/lists -type f -delete  \n  \n# perceval needs a newer version than Debian 8 - this breaks pip3  \nRUN pip3 install --upgrade pip  \nRUN pip3 install --upgrade requests  \nRUN apt-get -y remove python3-requests  \n  \nRUN echo \"${DEPLOY_USER} ALL=NOPASSWD: ALL\" >> /etc/sudoers  \n  \n# Configuring and UTF-8 locale  \nRUN sed -i \"s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g\" /etc/locale.gen && \\  \nlocale-gen \"en_US.UTF-8\" && update-locale && \\  \necho \"export LANG='en_US.utf8'\" >> ${DEPLOY_USER_DIR}/.bashrc  \n  \nUSER ${DEPLOY_USER}  \nWORKDIR ${DEPLOY_USER_DIR}  \n  \n# get GrimoireELK repository  \nRUN git clone https://github.com/grimoirelab/GrimoireELK  \n  \n# get Perceval repository  \nRUN git clone https://github.com/grimoirelab/perceval.git && \\  \ncd perceval && sudo python3 setup.py install  \n  \nADD init-gelk ${DEPLOY_USER_DIR}/  \n  \nCMD ${DEPLOY_USER_DIR}/init-gelk  \n\n"
    },
    {
        "filename": "0405ddf1e3889a9cbaf5322bbad5e6e9959f5ad8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:latest  \nMAINTAINER Marcel Sinn <loopyargon@gmail.com>  \n  \nRUN \\  \napt-get update && \\  \napt-get install -y \\  \ncurl \\  \ngit \\  \nruby &&\\  \nrm -rf /var/lib/apt/lists/* && \\  \ngit clone git://github.com/artemave/StarLogs.git && \\  \ncd /StarLogs/ && \\  \ngem install sass && \\  \nnpm install -g \\  \nnode-static \\  \npogo  \n  \nEXPOSE 8080  \nCOPY start.sh /StarLogs/start.sh  \nRUN chmod 774 /StarLogs/start.sh  \nWORKDIR /StarLogs/  \nCMD [\"/StarLogs/start.sh\"]  \n\n"
    },
    {
        "filename": "046fd84d4227f55aba10ae232a1189f976cd5787.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:8\nMAINTAINER Eduardo Silva <zedudu@gmail.com>\n\nRUN apt-get update && apt-get install -y  \\\n    autoconf \\\n    automake \\\n    bzip2 \\\n    g++ \\\n    git \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-tools \\\n    gstreamer1.0-pulseaudio \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-ugly  \\\n    libatlas3-base \\\n    libgstreamer1.0-dev \\\n    libtool-bin \\\n    make \\\n    python2.7 \\\n    python3 \\\n    python-pip \\\n    python-yaml \\\n    python-simplejson \\\n    python-gi \\\n    subversion \\\n    unzip \\\n    wget \\\n    build-essential \\\n    python-dev \\\n    sox \\\n    zlib1g-dev && \\\n    apt-get clean autoclean && \\\n    apt-get autoremove -y && \\\n    pip install ws4py==0.3.2 && \\\n    pip install tornado && \\    \n    ln -s /usr/bin/python2.7 /usr/bin/python ; ln -s -f bash /bin/sh\n\nWORKDIR /opt\n\nRUN wget http://www.digip.org/jansson/releases/jansson-2.7.tar.bz2 && \\\n    bunzip2 -c jansson-2.7.tar.bz2 | tar xf -  && \\\n    cd jansson-2.7 && \\\n    ./configure && make && make check &&  make install && \\\n    echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/jansson.conf && ldconfig && \\\n    rm /opt/jansson-2.7.tar.bz2 && rm -rf /opt/jansson-2.7\n\nRUN git clone https://github.com/kaldi-asr/kaldi && \\\n    cd /opt/kaldi/tools && \\\n    make && \\\n    ./install_portaudio.sh && \\\n    cd /opt/kaldi/src && ./configure --shared && \\\n    sed -i '/-g # -O0 -DKALDI_PARANOID/c\\-O3 -DNDEBUG' kaldi.mk && \\\n    make depend && make && \\\n    cd /opt/kaldi/src/online && make depend && make && \\\n    cd /opt/kaldi/src/gst-plugin && make depend && make && \\\n    cd /opt && \\\n    git clone https://github.com/alumae/gst-kaldi-nnet2-online.git && \\\n    cd /opt/gst-kaldi-nnet2-online/src && \\\n    sed -i '/KALDI_ROOT?=\\/home\\/tanel\\/tools\\/kaldi-trunk/c\\KALDI_ROOT?=\\/opt\\/kaldi' Makefile && \\\n    make depend && make && \\\n    rm -rf /opt/gst-kaldi-nnet2-online/.git/ && \\\n    find /opt/gst-kaldi-nnet2-online/src/ -type f -not -name '*.so' -delete && \\\n    rm -rf /opt/kaldi/.git && \\\n    rm -rf /opt/kaldi/egs/ /opt/kaldi/windows/ /opt/kaldi/misc/ && \\\n    find /opt/kaldi/src/ -type f -not -name '*.so' -delete && \\\n    find /opt/kaldi/tools/ -type f \\( -not -name '*.so' -and -not -name '*.so*' \\) -delete && \\\n    cd /opt && git clone https://github.com/alumae/kaldi-gstreamer-server.git && \\\n    rm -rf /opt/kaldi-gstreamer-server/.git/ && \\\n    rm -rf /opt/kaldi-gstreamer-server/test/\n\nCOPY start.sh stop.sh /opt/\n\nRUN chmod +x /opt/start.sh && \\\n    chmod +x /opt/stop.sh \n"
    },
    {
        "filename": "0492a7c416a9e8be77434e579cf1be09292c29ff.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM girder/girder_worker:latest\nMAINTAINER Christopher Kotfila <chris.kotfila@kitware.com>\n\nUSER root\n\n# Remove the sdist install from the base image\nRUN pip uninstall -y girder-worker\n\nRUN apt-get update && apt-get install -y sudo\n\nRUN apt-get install -y git\n\nRUN pip install docker\n\nVOLUME /girder_worker\n\n# Make sure remote debugging is available\nRUN pip install rpdb\n# Make sure we have the newest girder_client (on 2.x-maintenance)\nRUN pip install -U \"git+https://github.com/girder/girder.git@2.x-maintenance#egg=girder_client&subdirectory=clients/python\"\n\nCOPY ./scripts /scripts\n\nENTRYPOINT [\"/scripts/wait-for-it.sh\", \"rabbit:5672\", \"--\", \"/scripts/gw_entrypoint.sh\"]\n"
    },
    {
        "filename": "04da4579354509d15723ff6f09b112604577f6d6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:xenial\n\nRUN cd /etc && rm localtime && ln -s /usr/share/zoneinfo/Poland localtime\nRUN apt-get update \nRUN apt-get install -y locales\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV top /ros2_benchmarking\nENV comm $top/comm\n\nENV RMW_IMPLEMENTATION rmw_opensplice_cpp\nENV ROS2_SETUP /ros2_ws/install/local_setup.bash\nENV OSPL_URI file:///usr/etc/opensplice/config/ospl.xml\nENV AMENT_ARGS --build-space /ros2_ws/build --install-space /ros2_ws/install --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -- /ros2_ws/src\nRUN mkdir $top\n\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\nRUN echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys D2486D2DD83DB69272AFE98867170598AF249743\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu xenial main\" > /etc/apt/sources.list.d/gazebo-latest.list\n\nRUN apt-get update\n#build essentials\nRUN apt-get install -y cmake gcc wget git\nRUN apt-get install -y wget build-essential cppcheck libopencv-dev libpoco-dev libpocofoundation9v5 libpocofoundation9v5-dbg\n\nRUN apt-get install -y qt5-default qtcreator\nRUN apt-get install -y libtinyxml-dev libeigen3-dev uncrustify\nRUN apt-get install -y clang-format pydocstyle pyflakes  qtbase5-dev\n\n#dependencies for RViz\nRUN apt-get install -y libcurl4-openssl-dev libqt5core5a libqt5gui5 libqt5opengl5 libqt5widgets5 libxaw7-dev libgles2-mesa-dev libglu1-mesa-dev qtbase5-dev\n\n#pyhton requirements\nRUN apt-get install -y python-empy python3-empy python3-dev python3-nose python3-pip python3-setuptools python3-vcstool python3-yaml python3-coverage python3-mock python3-pep8 python3-pyparsing\nRUN pip3 install -U argcomplete\nRUN pip3 install -U flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes pytest pytest-cov pytest-runner\n\n#Fastrtps and opensplice requirements\nRUN apt-get install -y libasio-dev libtinyxml2-dev libopensplice67\n\n\nRUN apt-get install -y vim openjdk-9-jre\n\n\nRUN mkdir -p /ros2_ws/src/applied\nRUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -O /ros2_ws/ros2.repos\nRUN vcs import /ros2_ws/src < /ros2_ws/ros2.repos\n\nRUN for dir in demos examples rclpy realtime_support ros1_bridge rviz rmw_connext system_tests tlsf; do touch /ros2_ws/src/ros2/$dir/AMENT_IGNORE; done\nADD comm/ros2node/messages /ros2_ws/src/ros2/common_interfaces/messages\nRUN /ros2_ws/src/ament/ament_tools/scripts/ament.py build $AMENT_ARGS\n\n"
    },
    {
        "filename": "04de34cf2d7166fd7ebe4ad92895d62084cb863b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM python:3.6\n\nARG BONOBO_VERSION\n\nRUN apt-get -y update \\\n && apt-get -y install git make vim sudo \\\n && pip install -U pip wheel virtualenv \\\n && useradd -m bonobo\n\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /sbin/tini\n\nRUN chmod +x /sbin/tini \\\n && cd /home/bonobo \\\n && echo \"bonobo (== ${BONOBO_VERSION})\" > requirements.txt \\\n && sudo -u bonobo virtualenv . \\\n && sudo -u bonobo mkdir -p src \\\n && sudo -u bonobo bin/pip install -r requirements.txt \\\n && (echo 'export PS1=\"\ud83d\udc35  \\w \"'; echo '. /home/bonobo/bin/activate'; echo 'alias l=\"ls -lsah\"') >> /home/bonobo/.bashrc\n\nADD ./entrypoint.sh /usr/local/bin/\n\nUSER bonobo\nWORKDIR /home/bonobo\n\nENV PYTHONSTARTUP /home/bonobo/.pythonrc\nADD ./pythonrc.py ${PYTHONSTARTUP}\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/entrypoint.sh\"]\n"
    },
    {
        "filename": "051becd8b276cb99e267fe4739314186c8090b11.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM php56-fpm-centos68\n\nMAINTAINER yjc@52fhy.com\n\n# php\nENV PHP_VERSION 5.6.33\nENV PHP_URL=\"http://cn2.php.net/distributions/php-${PHP_VERSION}.tar.bz2\"\n\n# nginx\nENV NGINX_VERSION 1.12.2\nENV PHALCON_VERSION 3.3.1\nENV XHPROF_VERSION 4.1.5\n\nRUN yum -y install git\n\n# php-ext\t\nRUN pecl install memcache  protobuf  mongodb seaslog\n\n# install phalcon ext\n# wget https://github.com/phalcon/cphalcon/archive/v${PHALCON_VERSION}.tar.gz\n# git clone --depth=1 \"git://github.com/phalcon/cphalcon.git\" && cd cphalcon/build && ./install \nCOPY cphalcon-${PHALCON_VERSION}.tar.gz /cphalcon-${PHALCON_VERSION}.tar.gz\nRUN tar xzf /cphalcon-${PHALCON_VERSION}.tar.gz && cd cphalcon-${PHALCON_VERSION}/build && ./install \n\n# install xhprof_tideways ext\nRUN wget https://github.com/tideways/php-xhprof-extension/archive/v${XHPROF_VERSION}.tar.gz -O php-xhprof-extension-${XHPROF_VERSION}.tar.gz && tar xzf /php-xhprof-extension-${XHPROF_VERSION}.tar.gz && cd php-xhprof-extension-${XHPROF_VERSION} && phpize  && ./configure  && make && make install \n\n# install gearmand\nRUN yum install boost-devel gperf libevent libevent-devel mysql-devel libuuid-devel -y  && \\\n\twget https://github.com/gearman/gearmand/releases/download/1.1.18/gearmand-1.1.18.tar.gz && \\\n\ttar zxvf gearmand-1.1.18.tar.gz && cd gearmand-1.1.18 &&  \\\n\t./configure  && make && make install\n\n# install gearman ext\nRUN pecl install gearman\n\n# install yac ext\nRUN wget http://pecl.php.net/get/yac-0.9.2.tgz && tar xvf yac-0.9.2.tgz && cd yac-0.9.2 && phpize  && ./configure  && make && make install\n\n# install yaconf ext: not support php5\n# RUN wget http://pecl.php.net/get/yaconf-1.0.4.tgz && tar xvf yaconf-1.0.4.tgz && cd yaconf-1.0.4 && phpize  && ./configure  && make && make install\n\n# install msgpack ext\nRUN wget http://pecl.php.net/get/msgpack-0.5.7.tgz && tar xvf msgpack-0.5.7.tgz && cd msgpack-0.5.7 && phpize  && ./configure  && make && make install\n\n# install libevent ext\nRUN wget http://pecl.php.net/get/libevent-0.1.0.tgz && tar xvf libevent-0.1.0.tgz && cd libevent-0.1.0 && phpize  && ./configure  && make && make install\n\nRUN echo \"extension=msgpack.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=protobuf.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=yac.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=mongodb.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=seaslog.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=phalcon.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=tideways.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=libevent.so\" >> \"$PHP_INI_FILE\" && \\\n\techo \"extension=gearman.so\" >> \"$PHP_INI_FILE\"\n\t\nADD ./run.sh /run.sh\nRUN chmod 755 /run.sh\n\nCMD /run.sh && tail -f\n\nEXPOSE 80\nEXPOSE 9000\n\n#docker build -t php56-fpm-centos68-gccext .\n\n"
    },
    {
        "filename": "0547a03181e9227c5838ac5fe9a601747e175b23.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:wheezy\nMAINTAINER Charlie Lewis <charliel@lab41.org>\n\nRUN apt-get -y update\nRUN apt-get -y install git \\\n                       python-django \\\n                       python-django-tagging \\\n                       python-simplejson \\\n                       python-memcache \\\n                       python-ldap \\\n                       python-cairo \\\n                       python-twisted \\\n                       python-pysqlite2 \\\n                       python-support \\\n                       python-pip\n\n# graphite, carbon, and whisper\nWORKDIR /usr/local/src\nRUN git clone https://github.com/graphite-project/graphite-web.git\nRUN git clone https://github.com/graphite-project/carbon.git\nRUN git clone https://github.com/graphite-project/whisper.git\nRUN cd whisper && git checkout master && python setup.py install\nRUN cd carbon && git checkout 0.9.x && python setup.py install\nRUN cd graphite-web && git checkout 0.9.x && python check-dependencies.py; python setup.py install\n\n# config files\nADD initial_data.json /opt/graphite/webapp/graphite/initial_data.json \nADD local_settings.py /opt/graphite/webapp/graphite/local_settings.py \nADD carbon.conf /opt/graphite/conf/carbon.conf\nADD storage-schemas.conf /opt/graphite/conf/storage-schemas.conf\nADD storage-aggregation.conf /opt/graphite/conf/storage-aggregation.conf\n\nRUN mkdir -p /opt/graphite/storage/whisper\nRUN touch /opt/graphite/storage/graphite.db /opt/graphite/storage/index\nRUN chown -R www-data /opt/graphite/storage\nRUN chmod 0775 /opt/graphite/storage /opt/graphite/storage/whisper\nRUN chmod 0664 /opt/graphite/storage/graphite.db\nRUN cd /opt/graphite/webapp/graphite && python manage.py syncdb --noinput\n\nENV GRAPHITE_STORAGE_DIR /opt/graphite/storage\nENV GRAPHITE_CONF_DIR /opt/graphite/conf\nENV PYTHONPATH /opt/graphite/webapp\n\nEXPOSE 2003 2004 7002\n\nCMD [\"/opt/graphite/bin/carbon-cache.py\", \"--debug\", \"start\"]\n"
    },
    {
        "filename": "05b2d53b20d11923e709f8086534234810b1fb14.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM silarsis/base\nMAINTAINER Kevin Littlejohn <kevin@littlejohn.id.au>\n\nRUN apt-get -yq update && apt-get -yq install openjdk-7-jdk\nRUN wget -q -O /tmp/sbt.tgz http://scalasbt.artifactoryonline.com/scalasbt/sbt-native-packages/org/scala-sbt/sbt/0.12.4/sbt.tgz \\\n  && cd /usr/local \\\n  && tar zxf /tmp/sbt.tgz\nENV PATH $PATH:/usr/local/sbt/bin\n\nVOLUME /opt/progfun\nWORKDIR /opt/progfun\nRUN /usr/local/sbt/bin/sbt version\nCMD [\"sbt\"]\n"
    },
    {
        "filename": "05bb831cce9b02207b5a85dcc2aebc1d5929fe01.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/ubuntu:16.04\n\nMAINTAINER \"kiritim@us.ibm.com\"\n\nENV KEEPALIVED_VERSION 1.3.6\n\nRUN apt-get -y update && \\\n\tapt-get install -y git \\\n\t\t       wget \\\n                       build-essential \\\n                       openssl \\\n                       libssl-dev \\\n                       findutils \\\n                       autoconf \\\n                       libnfnetlink-dev \\\n                       autoconf-archive \\\n                       xserver-xorg-dev \\\n                       pkg-config \\\n                       libtool automake ipvsadm module-init-tools\\\n        && wget http://www.keepalived.org/software/keepalived-${KEEPALIVED_VERSION}.tar.gz \\\n        && tar -xvf keepalived-${KEEPALIVED_VERSION}.tar.gz \\\n        && cd keepalived-${KEEPALIVED_VERSION} \\\n        && ./configure && make all && make install \\\n        && apt-get remove --purge -y \\\n           git build-essential autoconf autoconf-archive automake wget libtool pkg-config \\\n        && apt-get autoremove -y \\\n        && rm -rf /var/lib/apt/lists/*\n\nWORKDIR keepalived-${KEEPALIVED_VERSION}\nRUN cp -R keepalived/etc/keepalived/ /etc/. && cp -R /usr/local/etc/sysconfig/ /etc/. && rm -rf /keepalived-1.3.6\nADD docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT sh /docker-entrypoint.sh && /bin/bash\n"
    },
    {
        "filename": "05d762eece0cf69ebdf35e818338d7f3b0ba1237.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jenkins/jenkins:latest\nMAINTAINER Young <dbyl@dbyl.cn>\nUSER root\nRUN apt-get update && apt-get install -y maven\nRUN apt-get install -y vim\nRUN mkdir -p /opt/pip\nRUN cd /opt/pip\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python get-pip.py\nRUN pip install qrcode[pil]\nUSER jenkins\n"
    },
    {
        "filename": "05d8c8e1dfc9b9f07dbcd159ef8bf8d93021675b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER John Chilton <jmchilton@gmail.com>\n\nARG CHROME_VERSION=\"google-chrome-stable\"\nARG CHROME_DRIVER_VERSION=\"latest\"\n\n# TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true \\\n    MYSQL_MAJOR=5.7 \\\n    POSTGRES_MAJOR=9.5 \\\n    GALAXY_ROOT=/galaxy \\\n    GALAXY_VIRTUAL_ENV=/galaxy_venv\n\n# Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y && apt-get install -y software-properties-common apt-transport-https curl && \\\n    apt-add-repository -y ppa:ansible/ansible && \\\n    curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n    curl -sL https://deb.nodesource.com/setup_8.x | bash -  && \\\n    apt-key adv --keyserver pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5 && \\\n    echo \"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list && \\\n    echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list && \\\n    { \\\n\t\techo mysql-community-server mysql-community-server/data-dir select ''; \\\n\t\techo mysql-community-server mysql-community-server/root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/remove-test-db select false; \\\n\t} | debconf-set-selections && \\\n    apt-get update -y && \\\n    apt-get install -y libpq-dev postgresql postgresql-client \\\n            ansible wget mysql-server=\"${MYSQL_MAJOR}\"* libmysqlclient-dev=\"${MYSQL_MAJOR}\"* \\\n            slurm-llnl libmunge-dev slurm-drmaa-dev ant atop axel bioperl cmake curl \\\n            g++ gcc gfortran git-core htop iftop iotop ipython libffi-dev liblapack-dev \\\n            libncurses5-dev libopenblas-dev libpam0g-dev libpq-dev libsparsehash-dev make \\\n            mercurial nginx-extras nmon patch postgresql postgresql \\\n            postgresql-client python-boto python-dev \\\n            python-prettytable python-psycopg2 python-virtualenv python-pip \\\n            rsync slurm-drmaa-dev swig sysstat unzip \\\n            autoconf automake build-essential libatlas-base-dev libblas-dev openssl \\\n            bzip2 \\\n            ca-certificates \\\n            openjdk-8-jre-headless \\\n            tzdata \\\n            sudo \\\n            locales \\\n            xvfb \\\n            ${CHROME_VERSION:-google-chrome-stable} \\\n            wget zlib1g-dev nodejs && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN npm install -g grunt grunt-cli\n\nRUN mkdir -p /tmp/ansible && \\\n    mkdir -p /opt/galaxy/db && \\\n    chown -R postgres:postgres /opt/galaxy/db && \\\n    sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf\n\nADD start_mysql.sh /opt/galaxy/start_mysql.sh\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\n\nRUN mkdir /etc/galaxy && cd /tmp/ansible && mkdir roles && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-os && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os && \\\n    mkdir roles/galaxyprojectdotorg.cloudman-database && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database && \\\n    mkdir roles/galaxyprojectdotorg.galaxy && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-extras && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN cd $GALAXY_ROOT && \\\n    ./scripts/common_startup.sh || { echo \"common_startup.sh failed\"; exit 1; } && \\\n    dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt && \\\n    [ -f $dev_requirements ] && $GALAXY_VIRTUAL_ENV/bin/pip install -r $dev_requirements\n\nRUN . $GALAXY_VIRTUAL_ENV/bin/activate && \\\n    pip install psycopg2 && \\\n    pip install mysql && \\\n    cd $GALAXY_ROOT && \\\n    echo \"Prepopulating postgres database\" && \\\n    su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres && \\\n    sleep 3 && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh && \\\n    echo \"Prepopulating sqlite database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh && \\\n    sh /opt/galaxy/start_mysql.sh && \\\n    echo \"Prepopulating mysql database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/galaxy?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh && \\\n    echo \"Prepopulating toolshed postgres database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed && \\\n    echo \"Prepopulating toolshed sqlite database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed && \\\n    echo \"Prepopulating toolshed mysql database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/toolshed?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh tool_shed\n\n# bcftools for Galaxy.\nRUN mkdir -p /tmp/install && \\\n    cd /tmp/install && \\\n    wget https://github.com/samtools/bcftools/releases/download/1.2/bcftools-1.2.tar.bz2 && \\\n    tar xvjf bcftools-1.2.tar.bz2 && \\\n    cd bcftools-1.2 && \\\n    make && \\\n    make install && \\\n    cd && rm -rf /tmp/install\n\n#========================================\n# Add Selenium user with passwordless sudo\n#========================================\nRUN useradd seluser \\\n         --shell /bin/bash  \\\n         --create-home \\\n  && usermod -a -G sudo seluser \\\n  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n  && echo 'seluser:secret' | chpasswd\n\nUSER seluser\n\n#==========\n# Selenium\n#==========\nRUN  sudo mkdir -p /opt/selenium \\\n  && sudo chown seluser:seluser /opt/selenium \\\n  && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar \\\n    -O /opt/selenium/selenium-server-standalone.jar\n\nUSER root\n\n#==============================\n# Scripts to run Selenium Node\n#==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\n\nRUN /opt/bin/wrap_chrome_binary\n\nUSER seluser\n\nRUN CD_VERSION=$(if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ]; then echo $(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE); else echo $CHROME_DRIVER_VERSION; fi) \\\n  && echo \"Using chromedriver version: \"$CD_VERSION \\\n  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n  && rm -rf /opt/selenium/chromedriver \\\n  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n  && rm /tmp/chromedriver_linux64.zip \\\n  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n  && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n  && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\n\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n\n#============================\n# Some configuration options\n#============================\nENV SCREEN_WIDTH=1360 \\\n    SCREEN_HEIGHT=1020 \\\n    SCREEN_DEPTH=24 \\\n    DISPLAY=:99.0 \\\n    NODE_MAX_INSTANCES=1 \\\n    NODE_MAX_SESSION=1 \\\n    NODE_PORT=5555 \\\n    NODE_REGISTER_CYCLE=5000 \\\n    NODE_POLLING=5000 \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=60000 \\\n    NODE_DOWN_POLLING_LIMIT=2 \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=/dev/null\n\nUSER root\n\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\n\nEXPOSE :9009\nEXPOSE :8080\nEXPOSE :80\n\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n"
    },
    {
        "filename": "062ef39972f90ecfd79108d0b9827181958451b0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER tanin@google.com\nRUN apt-get update && apt-get install -y make autoconf automake libtool curl tcl\n\n# We won't be able to poll fossil for changes, so this will build\n# only once a day.\n\nRUN cd $SRC &&\\\n    git clone http://repo.or.cz/sqlite.git && \\\n    cd $SRC/sqlite && \\\n    git rev-parse --git-dir >/dev/null && \\\n    git log -1 --format=format:%ci%n | sed -e 's/ [-+].*$//;s/ /T/;s/^/D /' > manifest && \\\n    echo $(git log -1 --format=format:%H) > manifest.uuid && \\\n    cd $SRC && \\\n    mv $SRC/sqlite $SRC/sqlite3\n\n#RUN mkdir $SRC/sqlite3 && \\\n#    cd $SRC/sqlite3 && \\\n#    curl 'https://www.sqlite.org/src/tarball?uuid=trunk' -o sqlite3.tar.gz && \\\n#    tar xzf sqlite3.tar.gz\n\nRUN find $SRC/sqlite3 -name \"*.test\" | xargs zip $SRC/ossfuzz_seed_corpus.zip\n\nWORKDIR sqlite3\nCOPY build.sh *.dict *.options $SRC/\n"
    },
    {
        "filename": "06f8a64aa8b96444345c5b090d789071740c4245.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER mrmrcoleman/pythonjs\n\nRUN apt-get update\n\nRUN apt-get install -y git\nRUN apt-get install -y vim\nRUN apt-get install -y python-pip\nRUN apt-get install -y python2.7-dev\nRUN apt-get install -y apache2\nRUN apt-get install libapache2-mod-wsgi\nRUN sed -i 's/80/5000/' /etc/apache2/ports.conf\n\nADD requirements.txt /tmp/requirements.txt\nRUN pip install -r /tmp/requirements.txt\n\nRUN mkdir /var/www/public_html\nADD flaskapp.wsgi /var/www/flaskapp/flaskapp.wsgi\nADD flaskapp.cfg /etc/apache2/sites-available/flaskapp.conf\nRUN a2ensite flaskapp.conf\n\nEXPOSE 5000\n"
    },
    {
        "filename": "074e084a61888428fc146f4179562648651d58e0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM maxexcloo/debian:latest\nMAINTAINER Max Schaefer <max@excloo.com>\nENV POSTGRESQL_USER docker \\\n\tPOSTGRESQL_PASS docker\nRUN curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \\\n\techo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" > /etc/apt/sources.list.d/postgresql.list && \\\n\tapt-get update && \\\n\tapt-get install -y postgresql-9.4 && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\nRUN echo \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/9.4/main/pg_hba.conf && \\\n\tsed -i -e \"s/^#listen_addresses.*=.*/listen_addresses = '*'/\" /etc/postgresql/9.4/main/postgresql.conf && \\\n\tsed -i -e \"s/^data_directory.*=.*$/data_directory = '\\/data'/\" /etc/postgresql/9.4/main/postgresql.conf\nADD config /config\nADD supervisord.conf /etc/supervisor/conf.d/postgresql.conf\nEXPOSE 5432\n"
    },
    {
        "filename": "08cacb46dbf5ab21f8dca9b04216e6cdf4528bc8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jolicode/base\nMAINTAINER Joel Wurtz <jwurtz@jolicode.com>\n\n#\u00a0Install HHVM\nRUN sudo add-apt-repository ppa:mapnik/boost && \\\n    wget -O - http://dl.hhvm.com/conf/hhvm.gpg.key | sudo apt-key add - && \\\n    echo deb http://dl.hhvm.com/ubuntu precise main | sudo tee /etc/apt/sources.list.d/hhvm.list && \\\n    sudo apt-get update && \\\n    sudo apt-get install -y libgmp10 hhvm && \\\n    sudo apt-get clean && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install php tools (composer / phpunit)\nRUN cd $HOME && \\\n    wget http://getcomposer.org/composer.phar && \\\n    chmod +x composer.phar && \\\n    mv composer.phar /usr/local/bin/composer && \\\n    wget https://phar.phpunit.de/phpunit.phar && \\\n    chmod +x phpunit.phar && \\\n    mv phpunit.phar /usr/local/bin/phpunit\n"
    },
    {
        "filename": "08df60844f365d11a4f7e8771a01fafabb818ad2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base \nMAINTAINER \"Vibhuti Sawant <Vibhuti.Sawant@ibm.com>\"\n\nENV _R_CHECK_FORCE_SUGGESTS_ false\nRUN apt-get update \\\n      && apt-get install git -y \\\n      && git clone https://github.com/r-lib/R6.git \\\n      && cd R6 && git checkout v2.3.0 \\\n      && R -e 'install.packages(\"knitr\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n      && R CMD check R6 --no-manual \\\n      && cd .. && rm -rf R6 \\\n      && apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "08dfaa71ae3c141d3a3fd4332da3bcf46c0229d8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM factual/docker-base  \n  \nMAINTAINER agate<agate.hao@gmail.com>  \n  \nRUN apt-get update  \nRUN apt-get upgrade -y  \nRUN apt-get install -y curl  \nRUN apt-get install -y build-essential  \n  \nRUN curl -sL https://deb.nodesource.com/setup_4.x | bash -  \nRUN apt-get install -y nodejs  \n  \nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \nEXPOSE 3000  \nADD bootstrap.sh /etc/my_init.d/099_bootstrap  \n\n"
    },
    {
        "filename": "096c497bcf7ed264d43286a42e6a82acc8fca4a5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#########################################\n# Python3 flask server for REST API backend\n\nFROM pdonorio/py3kbase\nMAINTAINER \"Paolo D'Onorio De Meo <p.donoriodemeo@gmail.com>\"\n\n# Install dependencies\nRUN apt-get update -qq && apt-get install -y \\\n    # nginx for uwsgi\n    nginx \\\n    # CLEAN\n    && apt-get clean autoclean && apt-get autoremove -y && \\\n    rm -rf /var/lib/cache /var/lib/log\n\n# Install the micro framework and important plugins\nRUN pip install --upgrade pip \\\n    # unittests\n    nose nose2 cov-core \\\n\t# coverage http://nose.readthedocs.org/en/latest/plugins/cover.html\n\tcoverage \\\n\t# Flask server for HTTP API\n\tFlask==0.12 \\\n    # latest restful because the stable release is pretty outdated\n    git+https://github.com/flask-restful/flask-restful@master \\\n\t# Flask main plugins\n\tflask-sqlalchemy flask-cors pyopenssl flask-oauthlib \\\n    # swagger validation\n    bravado_core \\\n\t##########################\n\t# SERVICEs APIs\n\t##########################\n    redis \\\n    celery \\\n    elasticsearch elasticsearch-dsl \\\n    # wsgi for production\n    uwsgi uwsgitop \\\n\t##########################\n\t# The real Token\n\tpyjwt\n\nRUN mkdir -p /code\nWORKDIR /code\n"
    },
    {
        "filename": "09f72f46634b619cc8820d5b4ea45b725dcda50a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Alexey Gurevich \"https://github.com/alexeigurevich\"\n\n# Setup a base system\nRUN apt-get update && \\\n    apt-get install -y curl wget g++ make libboost-all-dev git \\\n        tar gzip bzip2 build-essential \\\n        python2.7-dev python-setuptools python-pip python-virtualenv \\\n        zlib1g-dev default-jdk perl && \\\n    apt-get upgrade -y libstdc++6\n\n# Matplotlib dependencies\nRUN apt-get update && apt-get install -y pkg-config libfreetype6-dev \\\n    libpng-dev python-matplotlib\n\n# QUAST installation\nCOPY . quast\nRUN pip install --upgrade setuptools pip && \\\n    cd quast && \\\n    python setup.py develop && \\\n    cd ..\n"
    },
    {
        "filename": "0a05012f51ce533ad7457473a08f99f7690a036f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockcross/base:latest\nMAINTAINER Taro L. Saito \"leo@xerial.org\"\n\n# Add the cross compiler sources\nRUN echo \"deb http://emdebian.org/tools/debian/ jessie main\" >> /etc/apt/sources.list && \\\n  dpkg --add-architecture powerpc && \\\n  curl http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add -\n\nRUN apt-get update && apt-get install -y \\\n  crossbuild-essential-powerpc \\\n  gfortran-powerpc-linux-gnu \\\n  libbz2-dev:powerpc \\\n  libexpat1-dev:powerpc \\\n  ncurses-dev:powerpc \\\n  libssl-dev:powerpc\n\nWORKDIR /usr/src\n\nRUN apt-get update && \\\n  apt-get install -y libglib2.0-dev zlib1g-dev libpixman-1-dev && \\\n  curl -L http://wiki.qemu-project.org/download/qemu-2.6.0.tar.bz2 | tar xj && \\\n  cd qemu-2.6.0 && \\\n  ./configure --target-list=ppc64-linux-user --prefix=/usr && \\\n  make -j$(nproc) && \\\n  make install && \\\n  cd .. && rm -rf qemu-2.6.0\n\nENV CROSS_TRIPLE powerpc-linux-gnu\nENV CROSS_ROOT /usr/${CROSS_TRIPLE}\nENV AS=/usr/bin/${CROSS_TRIPLE}-as \\\n    AR=/usr/bin/${CROSS_TRIPLE}-ar \\\n    CC=/usr/bin/${CROSS_TRIPLE}-gcc \\\n    CPP=/usr/bin/${CROSS_TRIPLE}-cpp \\\n    CXX=/usr/bin/${CROSS_TRIPLE}-g++ \\\n    LD=/usr/bin/${CROSS_TRIPLE}-ld\n\nENV DEFAULT_DOCKCROSS_IMAGE dockcross/linux-ppc64\nWORKDIR /work\n\n# Note: Toolchain file support is currently in debian Experimental according to:\n# https://wiki.debian.org/CrossToolchains#In_jessie_.28Debian_8.29\n# We can switch to that when it becomes stable.\nCOPY Toolchain-ppc64.cmake /usr/lib/${CROSS_TRIPLE}/Toolchain.cmake\nENV CMAKE_TOOLCHAIN_FILE /usr/lib/${CROSS_TRIPLE}/Toolchain.cmake\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG IMAGE\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\""
    },
    {
        "filename": "32b17be29cbaaaf360e9593056c1a47de9804cda.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM alvinhenrick/hadoop-base\n\nMAINTAINER Alvin Henrick\n\nRUN apt-get install -y iputils-ping daemontools\n\nENV HADOOP_INSTALL /usr/local/hadoop\n\nRUN mkdir $HADOOP_INSTALL/logs\n\nRUN mkdir -p /etc/service/serf\nRUN mkdir -p /etc/service/sshd\n\nADD config/service /etc/service\n\nRUN chmod +x /etc/service/serf/run \nRUN chmod +x /etc/service/sshd/run \n\nADD config/hdfs-site.xml $HADOOP_INSTALL/etc/hadoop/hdfs-site.xml \nADD config/core-site.xml $HADOOP_INSTALL/etc/hadoop/core-site.xml \nADD config/mapred-site.xml $HADOOP_INSTALL/etc/hadoop/mapred-site.xml \nADD config/yarn-site.xml $HADOOP_INSTALL/etc/hadoop/yarn-site.xml \n\nRUN chown -R hduser:hadoop $HADOOP_INSTALL/logs\n\n# SSH and SERF ports\nEXPOSE 22 7373 7946 \n\n# HDFS ports\nEXPOSE 9000 50010 50020 50070 50075 50090 50475\n\n# YARN ports\nEXPOSE 8030 8031 8032 8033 8040 8042 8060 8088 50060\n\n#ENTRYPOINT [\"/bin/bash\", \"/usr/local/hadoop/bin/start-hadoop.sh\"]\nENTRYPOINT [\"/usr/bin/svscan\", \"/etc/service/\"]"
    },
    {
        "filename": "3315302d15b7dd97c527eaa95cb5e8e65e73ece3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.04\nMAINTAINER Algolia <documentationsearch@algolia.com>\n\nWORKDIR /root\n\n# Install selenium\nENV LC_ALL C\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\nRUN useradd -d /home/seleuser -m seleuser\nRUN chown -R seleuser /home/seleuser\nRUN chgrp -R seleuser /home/seleuser\n\nRUN apt-get update -y && apt-get install -yq \\\n    software-properties-common\\\n    python3.7\nRUN add-apt-repository -y ppa:openjdk-r/ppa\nRUN apt-get update -y && apt-get install -yq \\\n    curl \\\n    wget \\\n    sudo \\\n    gnupg \\\n    && curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -\nRUN apt-get update -y && apt-get install -yq \\\n    nodejs -yq\nRUN apt-get update -y && apt-get install -yq \\\n  unzip \\\n  xvfb \\\n  libxi6 \\\n  libgconf-2-4 \\\n  default-jdk\n\nRUN curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add\nRUN echo \"deb [arch=amd64]  http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list\nRUN apt-get update -y && apt-get install -yq \\\n  google-chrome-stable \\\n  unzip\nRUN wget -q https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip\nRUN unzip chromedriver_linux64.zip\n\nRUN mv chromedriver /usr/bin/chromedriver\nRUN chown root:root /usr/bin/chromedriver\nRUN chmod +x /usr/bin/chromedriver\n\nRUN wget -q https://selenium-release.storage.googleapis.com/3.13/selenium-server-standalone-3.13.0.jar\nRUN wget -q http://www.java2s.com/Code/JarDownload/testng/testng-6.8.7.jar.zip\nRUN unzip testng-6.8.7.jar.zip\n\n# Install DocSearch dependencies\nCOPY Pipfile .\nCOPY Pipfile.lock .\n\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\nENV PIPENV_HIDE_EMOJIS 1\nRUN apt-get update -y && apt-get install -yq \\\n    python3-pip\nRUN pip3 install pipenv\nRUN pipenv install --python 3.6"
    },
    {
        "filename": "3315611a29f435b028c6490060a3eabd1711fbf3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,use-sudo-run,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:alpine\n\nMAINTAINER Waldemar Hummer (waldemar.hummer@gmail.com)\nLABEL authors=\"Waldemar Hummer (waldemar.hummer@gmail.com)\"\n\n# install some common libs\nRUN apk add --no-cache autoconf automake build-base ca-certificates curl g++ gcc git groff \\\n        libffi-dev libtool linux-headers make openssl openssl-dev python3 python3-dev \\\n        py3-pip tar xz zip && \\\n    update-ca-certificates\n\n# install Docker (CLI only)\nRUN docker_version=17.05.0-ce; \\\n  curl -fsSLO https://get.docker.com/builds/Linux/x86_64/docker-$docker_version.tgz \\\n  && tar xzvf docker-$docker_version.tgz \\\n  && mv docker/docker /usr/local/bin \\\n  && rm -r docker docker-$docker_version.tgz\n\n# Install Java - taken from official repo:\n# https://github.com/docker-library/openjdk/blob/master/8-jdk/alpine/Dockerfile)\nENV LANG C.UTF-8\nRUN { \\\n        echo '#!/bin/sh'; echo 'set -e'; echo; \\\n        echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n    } > /usr/local/bin/docker-java-home \\\n    && chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin\nRUN set -x && apk add --no-cache openjdk8 && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\nRUN apk add --no-cache nss\n\n# Install Maven - taken from official repo:\n# https://github.com/carlossg/docker-maven/blob/master/jdk-8/Dockerfile)\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  && echo \"${SHA}  /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n  && rm -f /tmp/apache-maven.tar.gz \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"\nADD https://raw.githubusercontent.com/carlossg/docker-maven/master/jdk-8/settings-docker.xml /usr/share/maven/ref/\n\n# set workdir\nRUN mkdir -p /opt/code/localstack\nWORKDIR /opt/code/localstack/\n\n# https://github.com/pires/docker-elasticsearch/issues/56\nENV ES_TMPDIR  /tmp\n\n# install npm dependencies (Note: node-gyp currently requires python2 :/ , hence install it temporarily)\nRUN apk add python2\nADD localstack/package.json localstack/package.json\nRUN cd localstack && npm install\nRUN apk del python2\n\n# set python3 as default python version; install supervisor\nRUN ln -s /usr/bin/python3 /usr/bin/python; ln -s /usr/bin/pip3 /usr/bin/pip\nRUN pip install supervisor\n\n# init environment and cache some dependencies\nRUN mkdir -p /opt/code/localstack/localstack/infra && \\\n    wget -O /tmp/localstack.es.zip \\\n        https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.7.0.zip && \\\n    wget -O /tmp/elasticmq-server.jar \\\n        https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-0.14.5.jar && \\\n    (cd localstack/infra/ && unzip -q /tmp/localstack.es.zip && \\\n        mv elasticsearch* elasticsearch && rm /tmp/localstack.es.zip) && \\\n    (cd localstack/infra/elasticsearch/ && \\\n        bin/elasticsearch-plugin install analysis-icu && \\\n        bin/elasticsearch-plugin install ingest-attachment --batch && \\\n        bin/elasticsearch-plugin install analysis-kuromoji && \\\n        bin/elasticsearch-plugin install mapper-murmur3 && \\\n        bin/elasticsearch-plugin install mapper-size && \\\n        bin/elasticsearch-plugin install analysis-phonetic && \\\n        bin/elasticsearch-plugin install analysis-smartcn && \\\n        bin/elasticsearch-plugin install analysis-stempel && \\\n        bin/elasticsearch-plugin install analysis-ukrainian) && \\\n    mkdir -p /opt/code/localstack/localstack/infra/dynamodb && \\\n    wget -O /tmp/localstack.ddb.zip \\\n        https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip && \\\n    (cd localstack/infra/dynamodb && unzip -q /tmp/localstack.ddb.zip && rm /tmp/localstack.ddb.zip)\nADD requirements.txt .\nRUN (pip install --upgrade pip) && \\\n    (test `which virtualenv` || pip install virtualenv || sudo pip install virtualenv) && \\\n    (virtualenv .testvenv && source .testvenv/bin/activate && \\\n        pip install -q six==1.10.0 && pip install -q -r requirements.txt && rm -rf .testvenv)\n\n# add files required to run \"make install-web\"\nADD Makefile .\nADD localstack/dashboard/web/package.json localstack/dashboard/web/package.json\n\n# install web dashboard dependencies\nRUN make install-web\n\n# install libs that require dependencies cleaned up below (e.g., gcc)\nRUN (virtualenv .venv && source .venv/bin/activate && pip install cryptography)\n\n# clean up (layers are later squashed into a single one)\nRUN rm -rf /root/.npm; \\\n  apk del --purge autoconf automake build-base g++ gcc linux-headers openssl-dev python3-dev\n"
    },
    {
        "filename": "332147d30589c5df4865346341fbe65bb5974b37.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Tamas Nepusz <ntamas@gmail.com>\nLABEL Description=\"Simple Docker image that contains a pre-compiled version of igraph's Python interface\"\nRUN apt-get -y update && apt-get -y install build-essential libxml2-dev zlib1g-dev python-dev python-pip pkg-config libffi-dev libcairo-dev\nRUN pip install python-igraph\nRUN pip install cairocffi\nCMD /usr/local/bin/igraph\n"
    },
    {
        "filename": "33ad2dc83ff6e9f22372ae297b09b83dab64de1c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# FROM openhorizon/cuda-tx1-full\n# OR\nFROM openhorizon/cuda-tx1-fullcudnn\n\nMAINTAINER dyec@us.ibm.com\n#AUTHOR dima@us.ibm.com\n\nENV ARCH=arm64\n\nRUN apt-get update && apt-get install -y --no-install-recommends build-essential cmake git gfortran libatlas-base-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler python-all-dev python-dev python-h5py python-matplotlib python-numpy python-opencv python-pil python-pip python-protobuf python-scipy python-skimage python-sklearn\n\nWORKDIR /\n# RUN git clone https://github.com/NVIDIA/caffe.git\nRUN git clone https://github.com/BVLC/caffe\nWORKDIR /caffe\n\nRUN apt-get install -y python-setuptools\n# RUN cat python/requirements.txt | xargs -n1 sudo pip install\nWORKDIR /caffe/python\nRUN for req in $(cat requirements.txt); do pip install $req; done\nWORKDIR /caffe\nRUN cp Makefile.config.example Makefile.config\n# RUN mkdir build\n# WORKDIR /caffe/build\n# RUN cmake \nRUN sed -i \"s/INCLUDE_DIRS := \\$(PYTHON_INCLUDE) \\/usr\\/local\\/include/INCLUDE_DIRS := \\$(PYTHON_INCLUDE) \\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial/g\" Makefile.config\nRUN sed -i \"s/LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5/LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial/g\" Makefile\nRUN sed -i \"s/# USE_CUDNN := 1/USE_CUDNN := 1/g\" Makefile.config\n\n# ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/aarch64-linux-gnu/tegra\nRUN make all -j4\nRUN make pycaffe -j4\nRUN make test -j4\nRUN make distribute\n"
    },
    {
        "filename": "33b13727eae26be2f51d02fe5214103e77b8ffb9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/buildpack-deps:v1\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\nENV BAZEL_VERSION 0.16.1\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# install older version of bazel because it breaks TF build on every releasae :(\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        default-jdk-headless \\\n        bash-completion \\\n        g++ \\\n        zlib1g-dev \\\n    && curl -LO \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb\" \\\n    && dpkg -i bazel_*.deb \\\n    && rm bazel_*.deb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n        pkg-config \\\n        protobuf-compiler \\\n        rsync \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        vim \\\n        webp \\\n        xorg-dev \\\n        xvfb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/* \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install Git LFS\nRUN apt-get update \\\n    && add-apt-repository ppa:git-core/ppa \\\n    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get install -y git-lfs \\\n    && git lfs install \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/cache/apt/archives/* \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Install opencv\nARG OPENCV_VERSION=3.4.0\n\nRUN apt-get update && apt-get install -y \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libav-tools \\\n        libavresample-dev \\\n        libdc1394-22-dev \\\n        libgdal-dev \\\n        libgphoto2-dev \\\n        libgtk2.0-dev \\\n        libjasper-dev \\\n        liblapacke-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libopenexr-dev \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libtheora-dev \\\n        libv4l-dev \\\n        libvorbis-dev \\\n        libvtk6-dev \\\n        libx264-dev \\\n        libxine2-dev \\\n        libxvidcore-dev \\\n        qt5-default \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\nRUN cd ~/ && \\\n    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \\\n    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -DWITH_QT=ON \\\n        -DWITH_OPENGL=ON \\\n        -D ENABLE_FAST_MATH=1 \\\n        -DFORCE_VTK=ON \\\n        -DWITH_TBB=ON \\\n        -DWITH_GDAL=ON \\\n        -DWITH_XINE=ON \\\n        -DBUILD_EXAMPLES=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n        .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n # Remove the opencv folders to reduce image size\n    rm -rf ~/opencv*"
    },
    {
        "filename": "340b70bffbe498c8966bb6606a48e1269f5c79d4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/python-base:v1-gpu-py3\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\nENV BAZEL_VERSION 0.16.1\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# install older version of bazel because it breaks TF build on every releasae :(\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        default-jdk-headless \\\n        bash-completion \\\n        g++ \\\n        zlib1g-dev \\\n    && curl -LO \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb\" \\\n    && dpkg -i bazel_*.deb \\\n    && rm bazel_*.deb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n        pkg-config \\\n        protobuf-compiler \\\n        rsync \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        vim \\\n        webp \\\n        xorg-dev \\\n        xvfb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/* \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install Git LFS\nRUN apt-get update \\\n    && add-apt-repository ppa:git-core/ppa \\\n    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get install -y git-lfs \\\n    && git lfs install \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/cache/apt/archives/* \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Install opencv\nARG OPENCV_VERSION=\n\nRUN apt-get update && apt-get install -y \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libav-tools \\\n        libavresample-dev \\\n        libdc1394-22-dev \\\n        libgdal-dev \\\n        libgphoto2-dev \\\n        libgtk2.0-dev \\\n        libjasper-dev \\\n        liblapacke-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libopenexr-dev \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libtheora-dev \\\n        libv4l-dev \\\n        libvorbis-dev \\\n        libvtk6-dev \\\n        libx264-dev \\\n        libxine2-dev \\\n        libxvidcore-dev \\\n        qt5-default \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\nRUN cd ~/ && \\\n    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \\\n    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -DWITH_QT=ON \\\n        -DWITH_OPENGL=ON \\\n        -D WITH_CUDA=ON \\\n        -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so \\\n        -D ENABLE_FAST_MATH=1 \\\n        -D CUDA_FAST_MATH=1 \\\n        -D WITH_CUBLAS=1 \\\n        -DFORCE_VTK=ON \\\n        -DWITH_TBB=ON \\\n        -DWITH_GDAL=ON \\\n        -DWITH_XINE=ON \\\n        -DBUILD_EXAMPLES=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n        .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n # Remove the opencv folders to reduce image size\n    rm -rf ~/opencv*"
    },
    {
        "filename": "34167cef74452ad7f00ec1d057430bb489f5e378.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "################################################################################\n# Base image\n################################################################################\nFROM compbio/ngseasy-base:1.0-r001\n\n################################################################################\n# Maintainer\n################################################################################\nMAINTAINER Stephen Newhouse stephen.j.newhouse@gmail.com\n\n################################################################################\n# Set correct environment variables.\n################################################################################\n##ENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\n################################################################################\n# general purpose tools\n################################################################################\nRUN apt-get update -y && apt-get upgrade -y\n\n# python and stuff\nRUN apt-get install -y \\\n                        isomd5sum \\\n                        python-numpy python-scipy python-pysam python-pyisomd5sum\n\n# cython\nRUN cd /tmp && \\\n    wget http://cython.org/release/Cython-0.22.tar.gz && \\\n    chmod 777 Cython-0.22.tar.gz && \\\n    tar xvf Cython-0.22.tar.gz && \\\n    chmod -R 777 Cython-0.22 && \\\n    cd Cython-0.22 && \\\n    python setup.py install\n\n################################################################################\n# install dependencies\n################################################################################\nRUN apt-get install -y libX11-dev libXpm-dev libXft-dev libXext-dev\n\n################################################################################\n# get ROOT\n################################################################################\nRUN cd /tmp && \\\n    curl -OL ftp://root.cern.ch/root/root_v5.34.20.source.tar.gz && \\\n    tar -xvf root_v5.34.20.source.tar.gz && \\\n    cd root && \\\n    ./configure && \\\n    make -j `ncpu` && \\\n    cd .. && \\\n    mv root /usr/local\n\nRUN  echo \"source /usr/local/root/bin/thisroot.sh\" >>  /root/.bashrc  && \\\n    /bin/bash -c \". /root/.bashrc && source /root/.bashrc\"\n\n################################################################################\n# speedseq\n################################################################################\nENV ROOTSYS /usr/local/root\n\nRUN cd /usr/local/pipeline && \\\n    git clone --recursive https://github.com/cc2qe/speedseq && \\\n    chmod -R 777 /usr/local/pipeline/speedseq && \\\n    cd /usr/local/pipeline/speedseq && \\\n    make -j `ncpu` ROOTFLAGS=\" -pthread -m64\" && \\\n    chmod -R 777 /usr/local/pipeline/speedseq\n\nRUN echo \"export PATH=/usr/local/pipeline/speedseq/bin:\\$PATH\" >> ~/.bashrc && \\\n    /bin/bash -c \"source ~/.bashrc\"\n\nADD speedseq_b37.config  /usr/local/pipeline/speedseq/bin/\nADD speedseq_hg19.config /usr/local/pipeline/speedseq/bin/\n\n################################################################################\n# PERMISSIONS\n################################################################################\nRUN chmod -R 777 /usr/local/pipeline\nRUN chown -R pipeman:ngsgroup /usr/local/pipeline\n\n################################################################################\n#Cleanup the temp dir\n################################################################################\nRUN rm -rf /tmp/*\n\n################################################################################\n#open ports private only\n################################################################################\nEXPOSE 8080\n\n################################################################################\n# Use baseimage-docker's bash.\n################################################################################\nCMD [\"/bin/bash\"]\n\n################################################################################\n#Clean up APT when done.\n################################################################################\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN apt-get autoclean && apt-get autoremove -y && rm -rf /var/lib/{apt,dpkg,cache,log}/\n"
    },
    {
        "filename": "34865c1b72b8c5bae55678262d335692a24d5cd6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM debian:latest\nWORKDIR /inc\n\n# Setup base image deps\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    gcc-multilib \\\n    libncurses5-dev \\\n    libx11-dev \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install chez from source\nRUN cd /tmp \\\n    && wget -q https://github.com/cisco/ChezScheme/releases/download/v9.5/csv9.5.tar.gz \\\n    && tar -xf csv9.5.tar.gz \\\n    && cd csv9.5 \\\n    && ./configure \\\n    && make install \\\n    && cd - \\\n    && rm -rf csv9.5.tar.gz csv9.5\n\nADD . /inc\n"
    },
    {
        "filename": "34e9c1102251ef9fe619163b98d9647a0c564926.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:trusty\n\nENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\nRUN \\\n  apt-get update && \\\n  apt-get install -y python python-pip python-dev curl jq python-boto wget libboost-all-dev libxml2-dev libxslt-dev gfortran mysql-server libmysqlclient-dev build-essential automake autoconf libxmu-dev gcc libpthread-stubs0-dev libtool libboost-program-options-dev libboost-python-dev zlib1g-dev libc6 libgcc1 libstdc++6 libblas-dev liblapack-dev && \\\n  pip install nltk unidecode numpy pandas scipy patsy gensim docx pyth pymongo mysql-python zk_shell \n\nRUN wget -q -O rosetta-0.2.5.tar.gz https://github.com/columbia-applied-data-science/rosetta/archive/0.2.5.tar.gz\nRUN pip install rosetta-0.2.5.tar.gz\n\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/lib\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install git\n\n# Install and make vw (Vowpal Wabbit) and perf\nRUN cd /usr/local/src;git clone https://github.com/bradleypallen/vowpal_wabbit.git;cd vowpal_wabbit;./autogen.sh;./configure;make;make test;make install\nRUN cd /usr/local/src;wget http://osmot.cs.cornell.edu/kddcup/perf/perf.src.tar.gz;tar xvf perf.src.tar.gz;rm perf.src.tar.gz;mv perf.src perf;cd perf;make -B perf;make install\n\nADD ./topic_model /vw/topic_model\n\n# Define default command.\nCMD [\"bash\"]\n"
    },
    {
        "filename": "355d3f7763e8d3430d8aa37019c148812ce9a7ed.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM        ubuntu:14.04\n\nMAINTAINER  Adam Alexander <adamalex@gmail.com>\n\n# INSTALL OS DEPENDENCIES AND NODE.JS\nENV         DEBIAN_FRONTEND noninteractive\nRUN         apt-get update; apt-get install -y software-properties-common g++ make\nRUN         add-apt-repository -y ppa:chris-lea/node.js\nRUN         apt-get update; apt-get install -y nodejs=0.10.29-1chl1~trusty1\n\n# COMMIT PROJECT FILES\nADD         package.json /root/\nADD         test.js /root/\nADD         app.js /root/\n\n# INSTALL PROJECT DEPENDENCIES\nRUN         cd /root; npm install\n\n# TEST THE PROJECT -- FAILURE WILL HALT IMAGE CREATION\nRUN         cd /root; npm test\n\n# TESTS PASSED -- CONFIGURE IMAGE\nWORKDIR     /root\nENTRYPOINT  [\"/usr/bin/npm\"]\nCMD         [\"start\"]\nEXPOSE      8080\n"
    },
    {
        "filename": "35ac32a5c54c9a5e937a379e96e1920541562440.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG SLURM_VER=17.02\nFROM brianmay/slurm:${SLURM_VER}\nMAINTAINER brian@linuxpenguins.xyz\n\n# Install OS dependencies\nRUN apt-get update \\\n  && apt-get install -y \\\n    gcc sudo libcrack2-dev \\\n    apache2 \\\n    apache2-dev \\\n    libapache2-mod-shib2 \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN pip install mod_wsgi && \\\n  mod_wsgi-express module-config > /etc/apache2/mods-available/wsgi.load && \\\n  a2enmod wsgi\n\n#RUN wget -O /tmp/mod_wsgi.tar.gz https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/modwsgi/mod_wsgi-3.4.tar.gz && \\\n#    tar -C /tmp -xvf /tmp/mod_wsgi.tar.gz && \\\n#    rm /tmp/mod_wsgi.tar.gz &&\n#    cd /tmp/mod_wsgi-3.4 &&\n#    ln -s /usr/lib/libpython3.6m.so /usr/lib/libpython3.6.so && \\\n#    ./configure --with-python=/usr/local/bin/python3.6 --with-apxs=/usr/bin/apxs && \\\n#    make && make install clean && \\\n#    cd /srv && \\\n#    rm -rf /tmp/mod_wsgi-3.4\n\n# Make application directory\nRUN mkdir /opt/karaage /opt/karaage/requirements\nWORKDIR /opt/karaage\n\n# Install our requirements.\nRUN pip install pipenv\nADD Pipfile Pipfile.lock /opt/karaage/\nRUN pipenv install --system --deploy\n\n# Copy all our files into the image.\nCOPY . /opt/karaage/\nCOPY conf/karaage3-wsgi.conf /etc/apache2/conf-available/karaage3-wsgi.conf\nCOPY conf/ports.conf /etc/apache2/ports.conf\nCOPY conf/000-default.conf /etc/apache2/sites-available/000-default.conf\nRUN a2enconf karaage3-wsgi\n\n# Setup access to version information\nARG BUILD_DATE=\nARG VCS_REF=\nENV BUILD_DATE=${BUILD_DATE}\nENV VCS_REF=${VCS_REF}\nENV SLURM_VER=${SLURM_VER}\n\n# Specify the command to run when the image is run.\nEXPOSE 443\nVOLUME '/etc/shibboleth' '/var/log'\nCMD /opt/karaage/scripts/docker.sh apache\n"
    },
    {
        "filename": "35c54156fa735e23f9767486a46f92bab34fc1a6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Docker image for variant tools\n#\nFROM    continuumio/miniconda3\n\nMAINTAINER Bo Peng <bpeng@mdanderson.org>\n\nRUN     apt-get update\nRUN     apt-get -y install swig  gcc g++ build-essential bzip2 libbz2-dev libz-dev curl git vim libblas-dev liblapack-dev\n\nRUN\tconda update python\nRUN\tconda install cython\n\nRUN wget http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.10.5.tar.gz \\\n && tar -zxvf hdf5-1.10.5.tar.gz \\\n && cd hdf5-1.10.5 \\\n && ./configure --prefix=/usr/local --enable-build-mode=production --enable-threadsafe --disable-hl \\\n && make -j4 \\\n && make install \\\n && make clean\n\nRUN wget http://download.zeromq.org/zeromq-4.0.3.tar.gz \\\n  && tar -zxvf zeromq-4.0.3.tar.gz \n\nRUN wget -O boost_1_49_0.tar.gz \"http://downloads.sourceforge.net/project/boost/boost/1.49.0/boost_1_49_0.tar.gz?r=&ts=1435893980&use_mirror=iweb\" \\\n && tar -xf boost_1_49_0.tar.gz boost_1_49_0/boost boost_1_49_0/libs/iostreams boost_1_49_0/libs/regex boost_1_49_0/libs/filesystem boost_1_49_0/libs/detail boost_1_49_0/libs/system \n\nRUN conda install pytables scipy\nWORKDIR /home/bpeng\nRUN     git clone http://github.com/vatlab/VariantTools VariantTools\nWORKDIR /home/bpeng/VariantTools\nRUN     git pull\nRUN mv /zeromq-4.0.3 ./src\nRUN mv /boost_1_49_0 ./src\n\nRUN     python setup.py install\n# https://community.paperspace.com/t/storage-and-h5py-pytables-e-g-keras-save-weights-issues-heres-why-and-how-to-solve-it/430\n# HDF5 locking issues\nENV     HDF5_USE_FILE_LOCKING FALSE\n\n\nENV     HOME /home/bpeng\nRUN     mkdir /home/bpeng/temp\n\n# download hg19 reference genome and refGene database\nWORKDIR /home/bpeng/temp\nRUN     touch temp.vcf\nRUN     vtools init test --build hg19\nRUN     vtools import temp.vcf\nRUN     vtools use refGene\n\n\nWORKDIR /home/bpeng\nRUN     rm -rf temp\n\nRUN     mkdir /home/bpeng/temp\n\n# download hg18 reference genome and refGene database\nWORKDIR /home/bpeng/temp\nRUN     touch temp.vcf\nRUN     vtools init test --build hg18\nRUN     vtools import temp.vcf\nRUN     vtools use refGene\n\n\nWORKDIR /home/bpeng\nRUN     rm -rf temp\n\n\n\n\n"
    },
    {
        "filename": "35e1c743a1a8fafc72db4671c7bd20eeef51d434.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu:14.04\n\n# Install Node.js and other dependencies\nRUN apt-get update && \\\n    apt-get -y install curl && \\\n    curl -sL https://deb.nodesource.com/setup | sudo bash - && \\\n    apt-get -y install python build-essential nodejs\n\n# Install nodemon\nRUN npm install -g nodemon\n\n# Provides cached layer for node_modules\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /src && cp -a /tmp/node_modules /src/\n\n# Define working directory\nWORKDIR /src\nADD . /src\n\n# Expose port\nEXPOSE  8080\n\n# Run app using nodemon\nCMD [\"nodemon\", \"/src/index.js\"]\n"
    },
    {
        "filename": "3602c1b91f29c849af0fe39f99bd0d992c5cfdd7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "From ubuntu:16.04\nMAINTAINER Konrad F\u00f6rstner <konrad.foerstner@uni-wuerzburg.de>\n\nRUN apt-get update && apt-get dist-upgrade -y\nRUN apt-get install -y python3 python3-setuptools python3-pip python3-matplotlib cython3 zlib1g-dev make libncurses5-dev r-base libxml2-dev\n\nRUN curl http://www.bioinf.uni-leipzig.de/Software/segemehl/segemehl_0_2_0.tar.gz > segemehl_0_2_0.tar.gz && \\\n    tar xzf segemehl_0_2_0.tar.gz && \\\n    cd segemehl_*/segemehl/ && make && cd ../../ && \\\n    cp segemehl_*/segemehl/segemehl.x /usr/bin/ && \\\n    cp segemehl_*/segemehl/lack.x /usr/bin/  && \\\n    rm -rf segemehl*\n\nRUN echo 'source(\"http://bioconductor.org/biocLite.R\"); biocLite(\"DESeq2\")' | R --no-save\nRUN pip3 install READemption\n\nWORKDIR /root\n\n"
    },
    {
        "filename": "37150fbd7899d0f841851aa6ea857def52c3c1a9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM lballabio/boost\n\n# Add and configure required tools\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y python python-pip unzip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN pip install jupyter ipywidgets jupyter_dashboards pythreejs bqplot matplotlib scipy\n\nRUN jupyter dashboards quick-setup --sys-prefix\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\n\n# Download and uncompress ORE\n\nARG ore_short_version=1.8\nARG ore_version=1.8.0.7\nARG ore_archive=ORE-${ore_short_version}.zip\nARG ore_folder=ORE-${ore_short_version}\n\nENV ore_version ${ore_version}\n\nRUN wget https://github.com/OpenSourceRisk/Engine/releases/download/v${ore_version}/${ore_archive} \\\n    && unzip ${ore_archive} \\\n    && rm ${ore_archive}\n\n# Whatever we do next, we do in the ORE folder\n\nWORKDIR ${ore_folder}\n\n\n# Add QuantLib\n\nARG quantlib_version=1.8\nENV quantlib_version ${quantlib_version}\n\nRUN wget http://downloads.sourceforge.net/project/quantlib/QuantLib/${quantlib_version}/QuantLib-${quantlib_version}.tar.gz \\\n    && tar xfz QuantLib-${quantlib_version}.tar.gz \\\n    && rm QuantLib-${quantlib_version}.tar.gz \\\n    && mv QuantLib-${quantlib_version} QuantLib\n\n\n# Compile, as per instructions in the ORE user guide\n\nRUN cd QuantLib \\\n    && ./configure \\\n    && make -j4\n\nRUN cd QuantExt \\\n    && ./configure \\\n    && make -j4 \\\n    && ./test/quantext-test-suite\n\nRUN cd OREData \\\n    && ./configure \\\n    && make -j4 \\\n    && ./test/ored-test-suite\n\nRUN cd OREAnalytics \\\n    && ./configure \\\n    && make -j4 \\\n    && ./test/orea-test-suite\n\nRUN cd App \\\n    && ./configure \\\n    && make -j4\n\nENV LC_NUMERIC C\n\n"
    },
    {
        "filename": "37b2d8908c17c470ab33c642fcbfde7cc70356e2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM busybox\nMAINTAINER rcarmo\nRUN wget \n# Copy our DigitalOcean sources.list across\nADD etc/apt/sources.list /etc/apt/sources.list\n# Ugrade to a clean slate and install the basics we need to install and run Dropbox\nRUN apt-get update; apt-get upgrade -y; apt-get install -y wget python; apt-get autoremove; apt-get clean\nRUN mkdir /home/dropbox && useradd -s /bin/bash dropbox && cd /home/dropbox && wget -O db.tar.gz \"https://www.dropbox.com/download/?plat=lnx.x86_64\" && tar -zxvf db.tar.gz && rm db.tar.gz && chown -R dropbox:dropbox /home/dropbox && echo 'dropbox:changeme' | chpasswd \n# Expose the Dropbox directory as a Docker volume\nVOLUME [\"/home/dropbox/Dropbox\"]\nRUN wget -O /usr/local/bin/dropbox \"https://www.dropbox.com/download?dl=packages/dropbox.py\" && chmod +x /usr/local/bin/dropbox\nUSER dropbox\n# Disable LAN sync (saves you the time to docker exec inside and do it yourself)\nRUN dropbox start && dropbox lansync n\nCMD [\"/home/dropbox/.dropbox-dist/dropboxd\"]\n"
    },
    {
        "filename": "38cb4551a71563c4fea790c29040b47562bc3aad.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM tensorflow/tensorflow:1.0.0\nMAINTAINER Namju Kim namju.kim@kakaobrain.com\n\n# requirements\nRUN pip install --upgrade pip\nRUN pip install sugartensor==1.0.0.2\n\n# SSH support\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN echo 'root:ubuntu' | chpasswd\nRUN sed -ie 's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config\n\n# make example directory\nRUN mkdir -p /root/sugartensor/example\nADD sugartensor/example/* /root/sugartensor/example/\n\n# expose SSH port\nEXPOSE 22\n\n# set default directory to sugar tensor's example directory\nWORKDIR /root/sugartensor/example\n\n# default entry point\nENTRYPOINT service ssh restart && bash\n"
    },
    {
        "filename": "39762cfb83df5f605f0bf0910507a95b9ec0b719.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER \"Alexander Trauzzi\" <alexander@gmail.com>\n\nWORKDIR /tmp\n\nRUN apt-get update -y\nADD /laravel /var/www\n\nRUN apt-get install -y php5-mongo php5-mysql php5-pgsql php5-redis php5-json php5-mcrypt php5-curl\nRUN php5enmod mcrypt\n\nRUN apt-get install -y php5-cli git\n\nADD /images/php-cli/php.ini /etc/php5/cli/php.ini\nADD /images/php-cli/entrypoint.sh /entrypoint.sh\n\nWORKDIR /\nRUN php -r \"readfile('https://getcomposer.org/installer');\" | php\n\nWORKDIR /var/www\nENTRYPOINT [\"/entrypoint.sh\"]"
    },
    {
        "filename": "3979a7097670d0f54d21ea29d50dd8c09de9612a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM datmo/python-base:gpu-py27\n\nMAINTAINER Datmo devs <dev@datmo.com>\n\nRUN pip --no-cache-dir install \\\n        Cython \\\n        h5py \\\n        requests \\\n        tabulate \\\n        matplotlib \\\n        numpy==1.14.5 \\\n        pandas \\\n        path.py \\\n        pyyaml \\\n        scipy \\\n        six \\\n        sklearn \\\n        sympy \\\n        Pillow \\\n        zmq \\\n        seaborn \\\n        wheel \\\n        deap \\\n        update_checker \\\n        tqdm \\\n        stopit \\\n        imbalanced-learn \\\n        tpot \\\n        datmo\n\n# Install cmake\nRUN apt-get update && apt-get install -y cmake\n\n# Install lightgbm\nRUN pip install lightgbm\n\n# Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n    && cd xgboost \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DUSE_CUDA=ON \\\n    && make -j$(nproc) \\\n    && cd .. \\\n    && cd python-package \\\n    && python setup.py install \\\n    && cd ../.. \\\n    && rm -rf xgboost\n\n###########\n#\n#      NEW CONTRIBUTORS:\n# Please add new pip/apt installs in this block. Don't forget a \"&& \\\" at the end\n# of all non-final lines. Thanks!\n#\n###########\n\n\n\n##### ^^^^ Add new contributions above here ^^^^ #####\n"
    },
    {
        "filename": "398e2ffb48d5d98ff830f5361a58ac900803a827.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get upgrade -y\n\nRUN apt-get install -y language-pack-en\nENV LANGUAGE en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\nRUN locale-gen en_US.UTF-8\nRUN dpkg-reconfigure locales\n\nRUN apt-get install -y openssh-server git-core libxml2-dev curl python build-essential make gcc python-dev wget\nRUN apt-get install -y postgresql-client-9.1 postgresql-client-common libpq5\nRUN apt-get install -y libpq-dev\nRUN apt-get install -y mysql-client\nRUN apt-get install -y libmysqlclient-dev\n\nRUN wget http://python-distribute.org/distribute_setup.py \nRUN python distribute_setup.py\n\nRUN wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py \nRUN python get-pip.py\n\nRUN pip install psycopg2\nRUN pip install sentry\nRUN pip install MySQL-python\n\nEXPOSE 9000\n\nADD sentry.conf.py /sentry.conf.py\nADD admin_user.json /initial_data.json\n\nENTRYPOINT [\"/usr/local/bin/sentry\", \"--config=/sentry.conf.py\"]\n\nCMD [\"start\"]\n"
    },
    {
        "filename": "39d09375d8a8b9590253ca321c4043f636670586.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nRUN apt-get update && apt-get install -y \\\n    git \\\n    python3-pip \\\n    snmptrapd \\\n    snmp \\\n    snmp-mibs-downloader\n\nENV MIBS +ALL\n\nADD snmptrapd.conf.sh /snmptrapd.conf.sh\nRUN /snmptrapd.conf.sh\n\nRUN pip3 install git+https://github.com/alerta/alerta-contrib.git#subdirectory=integrations/snmptrap\n\nEXPOSE 162/udp\n\nCMD [\"snmptrapd\", \"-f\", \"-Lo\", \"-n\", \"-m+ALL\", \"-Dtrap\"]\n"
    },
    {
        "filename": "39e11f71bafd02f44fc748d2b4229c069a0ce596.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM cbaldwinson/apache2-php7  \nMAINTAINER Curtis Baldwinson <curtisbaldwinson@gmail.com>  \n  \nRUN apt-get update &&\\  \napt-get install php7.0-dev libpcre3-dev pkg-config re2c sudo git-core -y  \n  \nRUN cd /tmp &&\\  \ngit clone https://github.com/phalcon/zephir zephir-ubuntu &&\\  \ncd zephir-ubuntu &&\\  \n./install -c  \n  \nRUN cd /tmp &&\\  \ngit clone http://github.com/phalcon/cphalcon cphalcon &&\\  \ncd cphalcon &&\\  \ngit checkout 2.1.x &&\\  \nzephir build --backend=ZendEngine3 &&\\  \necho \"extension=phalcon.so\" >> /etc/php/7.0/apache2/conf.d/30-phalcon.ini &&\\  \necho \"extension=phalcon.so\" >> /etc/php/7.0/cli/conf.d/30-phalcon.ini  \n  \nEXPOSE 80  \nCMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]  \n\n"
    },
    {
        "filename": "3a279e6602492355165691815a994521b39f60db.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# This Dockerfile specifies the recipe for creating an image for the tests\n# to run in.\n#\n# We install as many test dependencies here as we can, because these setup\n# steps can be cached.  They do *not* run every time we run the build.\n# The Docker image is only rebuilt when the Dockerfile (ie. this file)\n# changes.\n\n# Base Dockerfile for gRPC dev images\nFROM debian:latest\n\n# Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n\n# Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && \\\n  echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n\n# Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list && \\\n  echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n\n# Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n\n# Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n# (Ubuntu instructions need apt to support https)\nRUN apt-get update && apt-get install -y --force-yes curl libunwind8 gettext && \\\n  curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=847105 &&  \\\n  mkdir -p /opt/dotnet && tar zxf dotnet.tar.gz -C /opt/dotnet && \\\n  ln -s /opt/dotnet/dotnet /usr/local/bin\n\n# Install dependencies.  We start with the basic ones require to build protoc\n# and the C++ build\nRUN apt-get clean && apt-get update && apt-get install -y --force-yes \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  bzip2 \\\n  ccache \\\n  curl \\\n  gcc \\\n  git \\\n  libc6 \\\n  libc6-dbg \\\n  libc6-dev \\\n  libgtest-dev \\\n  libtool \\\n  make \\\n  parallel \\\n  time \\\n  wget \\\n  # -- For csharp --\n  mono-devel \\\n  referenceassemblies-pcl \\\n  nunit \\\n  # -- For all Java builds -- \\\n  maven \\\n  # -- For java_jdk6 -- \\\n  #   oops! not in jessie. too old? openjdk-6-jdk \\\n  # -- For java_jdk7 -- \\\n  openjdk-7-jdk \\\n  # -- For java_oracle7 -- \\\n  oracle-java7-installer \\\n  # -- For python / python_cpp -- \\\n  python-setuptools \\\n  python-pip \\\n  python-dev \\\n  python2.6-dev \\\n  python3.3-dev \\\n  python3.4-dev \\\n  # -- For Ruby --\n  ruby \\\n  # -- For C++ benchmarks --\n  cmake \\\n  # -- For PHP --\n  php5.6     \\\n  php5.6-dev \\\n  php5.6-xml \\\n  php7.0     \\\n  php7.0-dev \\\n  php7.0-xml \\\n  phpunit    \\\n  valgrind   \\\n  libxml2-dev \\\n  && apt-get clean\n\n##################\n# C# dependencies\n\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n\n##################\n# Python dependencies\n\n# These packages exist in apt-get, but their versions are too old, so we have\n# to get updates from pip.\n\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n\n##################\n# Ruby dependencies\n\n# Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN \\curl -sSL https://get.rvm.io | bash -s stable\n\n# Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n\n##################\n# Java dependencies\n\n# This step requires compiling protoc. :(\n\nENV MAVEN_REPO /var/maven_local_repository\nENV MVN mvn --batch-mode\n\nRUN cd /tmp && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf && \\\n  git reset --hard 129a6e2aca95dcfb6c3e717d7b9cca1f104fde39 && \\\n  ./autogen.sh && \\\n  ./configure && \\\n  make -j4 && \\\n  cd java && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO && \\\n  cd ../javanano && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n\n##################\n# PHP dependencies.\nRUN wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2\nRUN cd php-5.5.38 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts && \\\n    make && make install && cd ..\nRUN cd php-5.5.38 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-5.5 && \\\n    make && make install && cd ..\n\nRUN wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror\nRUN mv mirror php-5.6.30.tar.bz2\nRUN tar -xvf php-5.6.30.tar.bz2\nRUN cd php-5.6.30 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts && \\\n    make && make install && cd ..\nRUN cd php-5.6.30 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-5.6 && \\\n    make && make install && cd ..\n\nRUN wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror\nRUN mv mirror php-7.0.18.tar.bz2\nRUN tar -xvf php-7.0.18.tar.bz2\nRUN cd php-7.0.18 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts && \\\n    make && make install && cd ..\nRUN cd php-7.0.18 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-7.0 && \\\n    make && make install && cd ..\n\nRUN wget http://am1.php.net/get/php-7.1.4.tar.bz2/from/this/mirror\nRUN mv mirror php-7.1.4.tar.bz2\nRUN tar -xvf php-7.1.4.tar.bz2\nRUN cd php-7.1.4 && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.1-zts && \\\n    make && make install && cd ..\nRUN cd php-7.1.4 && make clean && ./configure --enable-bcmath --prefix=/usr/local/php-7.1 && \\\n    make && make install && cd ..\n\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN composer config -g -- disable-tls true\nRUN composer config -g -- secure-http false\nRUN cd /tmp && \\\n  rm -rf protobuf && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf && \\\n  git reset --hard 49b44bff2b6257a119f9c6a342d6151c736586b8 && \\\n  cd php && \\\n  ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.5 && \\\n  ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.6 && \\\n  ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-7.0 && \\\n  ln -sfn /usr/local/php-7.1/bin/php /usr/bin/php && \\\n  ln -sfn /usr/local/php-7.1/bin/php-config /usr/bin/php-config && \\\n  ln -sfn /usr/local/php-7.1/bin/phpize /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-7.1\n\n##################\n# Go dependencies.\nRUN apt-get install -y  \\\n  # -- For go -- \\\n  golang\n\n##################\n# Javascript dependencies.\nRUN apt-get install -y \\\n  # -- For javascript -- \\\n  npm\n\n##################\n# Python 3.5 3.6 dependencies.\nRUN apt-get clean && apt-get update && apt-get install -y --force-yes \\\n  python3.5-dev \\\n  python3.6-dev \\\n  && apt-get clean\n\n# On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n# is taken by another legacy binary. We don't have that legacy binary and\n# npm expects the binary to be named 'node', so we just create a symbol\n# link here.\nRUN ln -s `which nodejs` /usr/bin/node\n\n##################\n# Prepare ccache\n\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n\n# Define the default command.\nCMD [\"bash\"]\n"
    },
    {
        "filename": "3a512dd517896881c810a51a3ac1c688be4b76b0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Tom Hosking \"code@tomho.sk\"\n\nRUN apt-get update -y\nRUN apt-get install -y python3 python3-pip python3-dev build-essential\n\nCOPY ./requirements.txt /app/requirements.txt\n\nWORKDIR /app\nRUN pip3 install -r requirements.txt\n\nRUN python3 -m nltk.downloader punkt\nRUN python3 -m spacy download en\n\nADD ./src /app/src\n\nENV PYTHONPATH \"${PYTHONPATH}:./src\"\nWORKDIR /app/src\n#ENTRYPOINT [\"celery\"]\nCMD [\"celery\", \"-A\", \"demo.qgenworker\", \"worker\", \"--loglevel=info\",\"--concurrency=1\",\"--queues=qgen\"]"
    },
    {
        "filename": "3aaa088a43451a407a54a7c35c4ecf7d565d279d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#Docker file for local building and serving only\nFROM ubuntu:14.04\nMAINTAINER Maxwell Bates <maxwell.bates@autodesk.com>\n\nRUN apt-get update\nRUN apt-get install curl -y\nRUN apt-get install git -y\n\n#Node.js https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories\nRUN curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\nRUN apt-get install -y nodejs\n\nRUN npm install -g grunt-cli\nRUN npm install -g bower\nRUN npm install -g forever\nRUN npm install -g nodemon@dev\n\nENV APP /app\n\nCOPY package.json /app/package.json\nCOPY app/scripts/omniprotocol /app/app/scripts/omniprotocol\nRUN cd /app ; npm install\n\nCOPY bower.json /app/bower.json\nRUN cd /app ; bower install --allow-root\n\nCOPY app /app/app\nCOPY files /app/files\nCOPY .travis.yml /app/.travis.yml\nCOPY Gruntfile.js /app/Gruntfile.js\n\nCOPY server /app/server\nCOPY CHECKS /app/CHECKS\n\nWORKDIR /app\n\nCMD npm run start\n"
    },
    {
        "filename": "3adfb53a5e4d7527365728754618a14e2eb05c23.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base image\nFROM compbio/ngseasy-base:1.0\n\n# Maintainer \nMAINTAINER Stephen Newhouse stephen.j.newhouse@gmail.com\n\n# Set correct environment variables.\n# ENV HOME /root\n# ENV DEBIAN_FRONTEND noninteractive\n\n# Update\nRUN apt-get update -y && apt-get upgrade -y\n\n#-------------------------------lumpy--------------------------   \n# + lumpy split read PE mapping\n\nRUN apt-get install -y python-numpy\n\nRUN cd /usr/local/pipeline \\\n    && git clone git://github.com/arq5x/lumpy-sv.git \\\n    && cd /usr/local/pipeline/lumpy-sv \\\n    && make \\\n    && sed -i '$aPATH=${PATH}:/usr/local/pipeline/lumpy-sv/bin' /home/pipeman/.bashrc \\\n    && sed -i '$aPATH=${PATH}:/usr/local/pipeline/lumpy-sv/bin' ~/.bashrc\n\nADD fix_ambiguous /usr/local/bin/\n#-------------------------------PERMISSIONS--------------------------\nRUN chmod -R 777 /usr/local/pipeline\nRUN chown -R pipeman:ngsgroup /usr/local/pipeline\n\n#---------------------------------------------------------------------\n#Cleanup the temp dir\nRUN rm -rf /tmp/*\n\n#open ports private only\nEXPOSE 8080\n\n# Use baseimage-docker's bash.\nCMD [\"/bin/bash\"]\n\n#Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN apt-get autoclean && apt-get autoremove -y && rm -rf /var/lib/{apt,dpkg,cache,log}/\n\n\n\n\n\n"
    },
    {
        "filename": "3ae0abc4d12e5289be91ee4b5571fae3baa319e6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \nMAINTAINER Fahmi Akbar Wildana <fahmi.akbar.w@mail.ugm.ac.id>  \n  \nRUN apt-get update \\  \n&& apt-get install -y curl openssh-server \\  \nbuild-essential git  \n  \nRUN curl -sL https://deb.nodesource.com/setup_7.x | bash -  \n  \nRUN apt-get install -y nodejs \\  \npylint virtualenv \\  \npython3-dev python3-pip \\  \npython-pip python-dev  \n  \n# RUN npm install npm -g  \nRUN pip install -U pip && pip3 install -U pip  \n  \n# Installing the packages needed to run Nightmare  \n# https://github.com/segmentio/nightmare/issues/224#issuecomment-261322814  \nRUN apt-get install -y \\  \nxvfb \\  \nx11-xkb-utils \\  \nxfonts-100dpi \\  \nxfonts-75dpi \\  \nxfonts-scalable \\  \nxfonts-cyrillic \\  \nx11-apps \\  \nclang \\  \nlibdbus-1-dev \\  \nlibgtk2.0-dev \\  \nlibnotify-dev \\  \nlibgnome-keyring-dev \\  \nlibgconf2-dev \\  \nlibasound2-dev \\  \nlibcap-dev \\  \nlibcups2-dev \\  \nlibxtst-dev \\  \nlibxss1 \\  \nlibnss3-dev \\  \ngcc-multilib \\  \ng++-multilib  \n  \n# RUN rm -rf /usr/local/lib/node_modules \\  \n# && rm -rf ~/.npm \\  \n# && apt-get purge -y nodejs \\  \n# && apt-get install -y nodejs  \nRUN npm install -g pm2 pm2-web \\  \nddos-stress images-scraper \\  \nnightmare phantomjs  \nRUN pip3 install ImageScraper GoogleScraper  \n  \nEXPOSE 9000  \n# pm2 start --interpreter xvfb-run npm -- start  \nCMD ['pm2-web']  \n\n"
    },
    {
        "filename": "3b0de11810efc36a538f7ceb77bb8e2e9b80c695.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Name: kalibase  \n# Version: 0.1.4  \n# Desc: Kali image plus basic infosec tools  \nFROM kalilinux/kali-linux-docker:latest  \nMAINTAINER Luca Cancelliere \"luca.canc@gmail.com\"  \nSHELL [\"/bin/bash\", \"-c\"]  \nRUN apt-get -y update && \\  \napt-get -y install metasploit-framework nmap dnsenum bettercap \\  \ndnsmap exploitdb masscan theharvester wireshark sqlmap mitmproxy \\  \ncommix shellnoob set wordlists webshells weevely dnsutils sslstrip \\  \npatator hydra joomscan vim git cryptcat && \\  \napt-get autoremove && rm -rf /var/lib/apt/lists/*  \n#Start Posgress for init msf and build caches  \nRUN /etc/init.d/postgresql start && msfdb init && \\  \nmsfconsole -q -x \"db_rebuild_cache; exit\"  \nADD [\"scripts/msfstart\", \"/usr/local/bin/msfstart\"]  \nWORKDIR /root  \nCMD [\"/bin/bash\"]  \n\n"
    },
    {
        "filename": "3b8804b40926c2b09cbcc64247079fd581dc14d6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM plexinc/pms-docker:latest\nMAINTAINER Simon Hartcher <github.com/deevus>\n\nRUN apt-get update -q && \\\n    apt-get install unzip python-setuptools python-psutil openssh-client -qy\n\nRUN curl -J -L -o /tmp/prt.zip https://github.com/wnielson/Plex-Remote-Transcoder/archive/master.zip && \\\n    unzip /tmp/prt.zip -d /tmp && \\\n    cd /tmp/Plex-Remote-Transcoder-master && \\\n    python setup.py install && \\\n    rm /tmp/prt.zip && \\\n    rm -rf /tmp/Plex-Remote-Transcoder-master && \\\n    cd /\n\nENV SLAVE_IP=slave_ip \\\n    SLAVE_PORT=22 \\\n    SLAVE_USER=plex \\\n    MASTER_IP=master_ip\n\nCOPY root/ /\n"
    },
    {
        "filename": "3c85d16a9da78e10d374e7f67b0dc652376f140c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:7.5-cudnn4-devel\n\nMAINTAINER Craig Citro <craigcitro@google.com>\n\nRUN apt-get update && apt-get install -y \\\n        build-essential \\\n        curl \\\n        git \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        zip \\\n        zlib1g-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        ipykernel \\\n        jupyter \\\n        matplotlib \\\n        && \\\n    python -m ipykernel.kernelspec\n\n# Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\n# Set up Bazel.\n\n# We need to add a custom PPA to pick up JDK8, since trusty doesn't\n# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n# Matthias Klose (https://launchpad.net/~doko).  It will do until\n# we either update the base image beyond 14.04 or openjdk-8 is\n# finally backported to trusty; see e.g.\n#   https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    apt-get update && \\\n    apt-get install -y openjdk-8-jdk openjdk-8-jre-headless && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/root/.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/root/.bazelrc\nENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.2.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\n\nRUN git clone --recursive https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout r0.7\nWORKDIR /tensorflow\n\n# Configure the build for our CUDA configuration.\nENV CUDA_TOOLKIT_PATH /usr/local/cuda\nENV CUDNN_INSTALL_PATH /usr/local/cuda\nENV TF_NEED_CUDA 1\n\nRUN ./configure && \\\n    bazel build -c opt --config=cuda tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip install --upgrade /tmp/pip/tensorflow-*.whl\n\nWORKDIR /root\n\n# Set up CUDA variables\nENV CUDA_PATH /usr/local/cuda\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n\nRUN [\"/bin/bash\"]\n"
    },
    {
        "filename": "3cb24a20949ce2935f865736a4a426b35e63e099.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2014 Netflix, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:14.04\nMAINTAINER Netflix Open Source Development <talent@netflix.com>\n\nRUN apt-get update && apt-get -y -q install python-software-properties software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 && apt-get install -y curl python-dev python-pip git sudo && apt-get -y -q install python-psycopg2 libpq-dev libffi-dev\n\nRUN cd /usr/local/src &&\\\n  git clone --depth 1 -b 0.2.2b --branch master https://github.com/Netflix/sleepy-puppy.git &&\\\n  cd sleepy-puppy &&\\\n  python setup.py install\n\nADD api-start.sh /usr/local/src/sleepy-puppy/scripts/api-start.sh\nRUN chmod +x /usr/local/src/sleepy-puppy/scripts/api-start.sh\n\nENTRYPOINT [\"/usr/local/src/sleepy-puppy/scripts/api-start.sh\"]\n"
    },
    {
        "filename": "2894564035ed608dde80ab1df1e590db79f437aa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:wily\n\n# Originally based on https://github.com/philipz/docker-nginx-hhvm-wordpress\nMAINTAINER Adam Yeats <ay@xadamy.xyz>\n\n# Get latest version of software-properties-common first\nRUN apt-get update && apt-get -y upgrade && apt-get -y install software-properties-common\n\n# Pre-add nginx repo\nRUN echo \"deb http://ppa.launchpad.net/nginx/stable/ubuntu wily main\" > /etc/apt/sources.list.d/nginx-$nginx-wily.list\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C\n\n# Pre-add nginx repo\nRUN apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0x5a16e7281be7a449\nRUN add-apt-repository \"deb http://dl.hhvm.com/ubuntu $(lsb_release -sc) main\"\n\n# If it's not going to change often do it first to allow Docker build to\n# use as much caching as possible to minimise build times\nRUN apt-get update && apt-get -y upgrade\n\n# Basic Requirements\nRUN apt-get -y install nginx git php5-mysql php-apc curl unzip wget python-pip\n\n# Wordpress Requirements\nRUN apt-get -y install libnuma-dev php5-fpm php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-sqlite php5-tidy php5-xmlrpc php5-xsl\n\n# HHVM install\nRUN apt-get -y install hhvm\n\nWORKDIR /\n\n# hhvm config\nRUN /usr/share/hhvm/install_fastcgi.sh\nRUN /etc/init.d/hhvm restart\nRUN update-rc.d hhvm defaults\nRUN /usr/bin/update-alternatives --install /usr/bin/php php /usr/bin/hhvm 60\n\n# install Composer\nRUN curl -sS https://getcomposer.org/installer | php\nRUN chmod +x composer.phar\nRUN mv composer.phar /usr/local/bin/composer\n\n# install WP-CLI\nRUN curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nRUN chmod +x wp-cli.phar\nRUN mv wp-cli.phar /usr/local/bin/wp\n\n# some misc cleanup\nWORKDIR /\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm /etc/nginx/sites-enabled/default\n\n# Map local files\nADD nginx/bedrock /etc/nginx/sites-enabled/bedrock\n\n# install ngxtop, useful for debugging\nRUN pip install ngxtop\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log && ln -sf /dev/stderr /var/log/hhvm/error.log\nRUN sed -i \"/# server_name_in_redirect off;/ a\\fastcgi_cache_path /var/run/nginx levels=1:2 keys_zone=drm_custom_cache:16m max_size=1024m inactive=60m;\" /etc/nginx/nginx.conf\n\nCOPY docker-entrypoint.sh /entrypoint.sh\nCOPY makedb.php /makedb.php\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n\n\n"
    },
    {
        "filename": "29614c917e10cf96e8fbd41cb972555e255884c8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM java:8\nMAINTAINER mislam@salesforce.com\n\n# Update\nRUN apt-get update \n\n# Vim\nRUN apt-get -y install vim\n\n# Download Elasticsearch, Kibana, Logstash, SFDC_ELF plugin, and config file\nRUN mkdir elk \\\n\t&& cd elk \\\n\t&& wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.1.tar.gz \\\n\t&& wget https://download.elastic.co/kibana/kibana/kibana-4.1.1-linux-x64.tar.gz \\\n\t&& wget https://download.elastic.co/logstash/logstash/logstash-1.5.5.tar.gz\n\n# Go into elk folder, untar and remove tar files.\nRUN cd elk \\\n\t&& for file in *.tar.gz; do tar -zxf $file; done \\\n\t&& rm *.tar.gz \\\n\t&& rm -rf __MACOSX \n\n# Scripts and config\nADD ./sfdc_elf.config /elk/\nADD scripts/start.sh /elk/\nRUN chmod +x /elk/start.sh\n\n# Install SFDC_ELF plugin\nRUN /elk/logstash-1.5.5/bin/plugin install logstash-input-sfdc_elf\n\n# Add Elasticsearch cluster name.clear\nRUN echo \"cluster.name: elasticsearch\" >> /elk/elasticsearch-1.7.1/elasticsearch.yml\n\nCMD [ \"/elk/start.sh\" ]\n"
    },
    {
        "filename": "298daa1b368dcb706304715bc10dd6bd5e54755f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#--------- Generic stuff all our Dockerfiles should start with so we get caching ------------\n# Note this base image is based on debian\nFROM healthsites_uwsgi\nMAINTAINER Tim Sutton<tim@kartoza.com>\n\n# Use local cached debs from host (saves your bandwidth!)\n# Change ip below to that of your apt-cacher-ng host\n# Or comment this line out if you do not with to use caching\nADD 71-apt-cacher-ng /etc/apt/apt.conf.d/71-apt-cacher-ng\n\n\n# This section taken on 2 July 2015 from\n# https://docs.docker.com/examples/running_ssh_service/\n# Sudo is needed by pycharm when it tries to pip install packages\nRUN apt-get update && apt-get install -y openssh-server sudo\nRUN mkdir /var/run/sshd\nRUN echo 'root:docker' | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\n# End of cut & paste section\n\nADD REQUIREMENTS-dev.txt /REQUIREMENTS-dev.txt\nRUN pip install -r /REQUIREMENTS-dev.txt\nADD bashrc /root/.bashrc\n\n# --------------------------------------------------------\n# Open ports as needed\n# --------------------------------------------------------\n\n# Open port 8080 as we will be running our django dev server on\nEXPOSE 8080\n# Open port 22 as we will be using a remote interpreter from pycharm\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n"
    },
    {
        "filename": "299b3567362a9e3051d59edbcb6c28706803204b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Tyler Hoyt <thoyt@berkeley.edu>\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update\nRUN apt-get install -y python-setuptools gunicorn\nRUN easy_install pip\n\nADD requirements.txt /src/requirements.txt\nRUN cd /src; pip install -r requirements.txt\n\nADD . /src\n\nWORKDIR /src\n\nEXPOSE 5000\n\nCMD [\"/usr/bin/gunicorn\", \"--config\", \"/src/gunicorn_config.py\", \"comfort:app\"]\n"
    },
    {
        "filename": "29a0d0074df0fd4016666c657c5455d978d3da6d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM        ubuntu:precise\nMAINTAINER  me \"me@example.com\"\n\nENV     LC_ALL C\nENV     DEBIAN_FRONTEND noninteractive\n\nRUN\tapt-get update && apt-get install -y -q lsb-release python-software-properties\nRUN\tadd-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\"\n\n# nginx latest ppa\nRUN     add-apt-repository -y ppa:nginx/stable\nRUN     apt-get update && apt-get install -y -q sudo curl git libpq-dev nodejs nginx\n\n# nginx config\nADD     web_conf /\n\n# ssh deploy key\nADD     dot_ssh /root/.ssh\nRUN     touch /root/.ssh/id_rsa && chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh\n\n# rvm and ruby\nRUN\tcurl -L https://get.rvm.io | sudo bash -s stable --ruby=2.0\nRUN     su root -c 'source /etc/profile.d/rvm.sh && rvm use 2.0 --default'\n"
    },
    {
        "filename": "29b77c77cb3a1ac935fd3faa562c16e8937dd58e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:armhf-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.19\n\n# qemu-user-static\nADD qemu-arm-static /usr/bin/qemu-arm-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "2a0fdea2058c7266040af481092d83bc77221db5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:arm64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.18.1\n\n# qemu-user-static\nADD qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "2a8290b671f91f890a10034be268bc0d8d406c61.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for purkinje development\nFROM ubuntu:16.04\nMAINTAINER Bernhard Biskup <bbiskup@gmx.de>\n\n# Install dependencies\nRUN echo 'Running installation'\nWORKDIR /code\n\nENV DEBIAN_FRONTEND noninteractive\nENV NODE_DIR=node-v6.2.0-linux-x64\nENV NODE_ARCHIVE=$NODE_DIR.tar.xz\nENV PATH=/opt/node/bin:$PATH\n\nRUN apt-get -q -y update && apt-get install -y wget\n\n\nRUN echo 1 > cache_bust.txt\n# Install Google Chrome APT repository\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list\n\nRUN apt-get -q -y update && apt-get install -y \\\n        dbus-x11 \\\n        default-jre-headless \\\n        firefox \\\n        gcc \\\n        git \\\n        google-chrome-stable \\\n        libyaml-dev \\\n        make \\\n        python2.7 \\\n        python2.7-dev \\\n        python3.5 \\\n        python3.5-dev \\\n        software-properties-common \\\n        wget \\\n        xvfb \\\n        xz-utils \\\n    && rm -rf /var/lib/apt/lists/*\n\n# To avoid chrome waiting for gnome keyring\nENV DBUS_SESSION_BUS_ADDRESS /dev/null\nRUN dpkg -r libfolks-eds25 gnome-keyring seahorse gcr evolution-data-server oneconf python-ubuntuone-storageprotocol ubuntu-sso-client python-ubuntu-sso-client pinentry-gnome3\n\n# TODO remove git dependency when removing bower\n\n# Install node.js; use most recent version to have access to latest features\nWORKDIR /opt\nRUN wget -q https://nodejs.org/dist/v6.2.0/$NODE_ARCHIVE && \\\n    tar xJf $NODE_ARCHIVE && \\\n    ln -s /opt/$NODE_DIR /opt/node && \\\n    rm $NODE_ARCHIVE\nWORKDIR /code\nRUN node --version\nRUN npm --version\n\n# make npm less noisy\nRUN npm config set loglevel warn\nRUN python2.7 --version\nRUN ln -sf /usr/bin/python2.7 /usr/bin/python\n\n# Ubuntu's python-pip throws exception with requests lib\n# see https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991\nRUN wget -q https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nADD package.json /code/package.json\nADD bower.json /code/bower.json\nADD .jshintrc /code/.jshintrc\nADD .bowerrc /code/.bowerrc\n\nRUN npm install\n\n# Set up Chrome webdriver for Protractor\nRUN echo 1 > cache_bust.txt  # force layer invalidation\nRUN ./node_modules/protractor/bin/webdriver-manager update --standalone\n\nRUN npm install -g bower\nRUN bower --allow-root --quiet install -F 2>&1 > bower.log\n\nADD requirements.txt /code/requirements.txt\nADD dev-requirements.txt /code/dev-requirements.txt\n\n# Python\nRUN pip install -q --upgrade -r dev-requirements.txt --cache-dir $HOME/.pip-cache\n\n# Avoid Flask freezing\n# watchdog not compatible with gevent\n# see https://github.com/gorakhargosh/watchdog/issues/306\nRUN pip uninstall -y watchdog\n\nRUN echo \"Installed Python packages:\"\nRUN pip freeze\n\nADD pytest.ini /code/pytest.ini\nADD tox.ini /code/tox.ini\nADD MANIFEST.in /code/MANIFEST.in\nADD setup.py /code/setup.py\nADD Makefile /code/Makefile\nADD purkinje /code/purkinje\nADD ./docker/purkinje*.yml /code/\n\nADD README.rst README.rst\nADD CHANGES.rst CHANGES.rst\n\n\nRUN pip install -e .\nRUN python setup.py sdist\n\nENV NODE_ARCHIVE \"\"\nENV NODE_DIR \"\"\n\nADD docker/purkinje.docker.yml purkinje.yml\n\nENTRYPOINT [\"purkinje\", \"-c\", \"purkinje.yml\"]\n"
    },
    {
        "filename": "2b30f65f6225281db82151ae3b9eb2175e1385f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base image\nFROM debian:jessie\n\nMAINTAINER Michael Pierce <hi@mep.im>\n\n# Install Node.js Dependencies\nRUN apt-get update && \\\n    apt-get -y install curl git make\n\nRUN git clone https://github.com/tj/n && \\\n    cd n && \\\n    make install && \\\n    n lts\n\n# Provides cached layer for node_modules\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /src && cp -a /tmp/node_modules /src/\n\n# Define working directory\nWORKDIR /src\nADD . /src\n\n# Expose port\nEXPOSE  8080\n\n# Run app using nodemon\nCMD [\"npm\", \"start\"]\n"
    },
    {
        "filename": "2b6a7191270bc466bcfe4cb9bc1f74ad79bfbe44.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM maxexcloo/debian:latest\nMAINTAINER Max Schaefer <max@excloo.com>\nRUN apt-get update && \\\n\tapt-get install -y znc && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\nADD supervisord.conf /etc/supervisor/conf.d/znc.conf\nEXPOSE 6667\n"
    },
    {
        "filename": "2b982756f79436e35ae042b09bc2fe1ffadcaad7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Kevin Smyth <kevin.m.smyth@gmail.com>\n\nRUN apt-get -qq update && apt-get install -y --no-install-recommends apt-transport-https ca-certificates\nRUN printf 'deb https://deb.nodesource.com/node_0.12/ trusty main\\n' > /etc/apt/sources.list.d/nodesource-trusty.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 68576280\n\nRUN apt-get -qq update && sudo apt-get install -y --no-install-recommends curl curl unzip build-essential openjdk-7-jdk git-core nodejs python\n\nENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64/\n\n# RUN ln -s /usr/bin/nodejs /usr/bin/node\n# RUN echo -e '#!/bin/sh\\nnode /usr/local/lib/node_modules/npm/bin/npm-cli.js \"$@\"' > /usr/bin/npm && chmod ugo+x /usr/bin/npm\n\nRUN npm install -g npm@2.14.1\n\n\n# Install Elasticsearch.\nENV ES_PKG_NAME elasticsearch-1.7.1\n\nRUN \\\n  cd / && \\\n  curl -f -s -S https://download.elasticsearch.org/elasticsearch/elasticsearch/$ES_PKG_NAME.tar.gz | tar xvz && \\\n  mv /$ES_PKG_NAME /elasticsearch\n\n#   - 9200: elastic HTTP\n#   - 9300: elastic transport\n# EXPOSE 9200\n# EXPOSE 9300\n# VOLUME [\"/data\"]\n\n# Mount elasticsearch.yml config\n# ADD config/elasticsearch.yml /elasticsearch/config/elasticsearch.yml\n# WORKDIR /data\n\nRUN npm install -g gulp bower\n\nRUN mkdir -p /component-server/app\nADD ./package.json /component-server/app/package.json\nADD ./bower.json /component-server/app/bower.json\nRUN cd /component-server/app && npm install && bower --allow-root install </dev/null\n\nADD . /component-server/app\nADD config.server.docker.json /component-server/app/config.server.json\n\nWORKDIR /component-server/app\nRUN echo '#!/bin/bash -ex' >> /root/run.sh &&\\\n  echo '/elasticsearch/bin/elasticsearch > elaticsearch.log &' >> /root/run.sh &&\\\n  echo 'gulp compile-all' >> /root/run.sh &&\\\n  echo 'sleep 5' >> /root/run.sh &&\\\n  echo 'node bin/www' >> /root/run.sh\n\nEXPOSE 3000\nVOLUME [\"/component-server/components/\"]\n\nCMD [\"bash\", \"-xe\", \"/root/run.sh\"]\n\n# docker build -t component-server component-server\n# docker kill component-server ; docker rm -v component-server\n# docker run --rm --name component-server -v `pwd`/morph-components:/component-server/components/  -p 3000:3000 -t component-server\n# interactive for debugging: docker run -it --rm --name component-server -v `pwd`/tonkalib/components:/component-server/components/ -p 3000:3000 -t component-server bash\n"
    },
    {
        "filename": "2bb94274dafe71fa69d16542580f3ebfa64abf21.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/python-base:v1-gpu-py2\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\nENV BAZEL_VERSION 0.16.1\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# install older version of bazel because it breaks TF build on every releasae :(\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        default-jdk-headless \\\n        bash-completion \\\n        g++ \\\n        zlib1g-dev \\\n    && curl -LO \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb\" \\\n    && dpkg -i bazel_*.deb \\\n    && rm bazel_*.deb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n        pkg-config \\\n        protobuf-compiler \\\n        rsync \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        vim \\\n        webp \\\n        xorg-dev \\\n        xvfb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/* \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install Git LFS\nRUN apt-get update \\\n    && add-apt-repository ppa:git-core/ppa \\\n    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get install -y git-lfs \\\n    && git lfs install \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/cache/apt/archives/* \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Install opencv\nARG OPENCV_VERSION=\n\nRUN apt-get update && apt-get install -y \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libav-tools \\\n        libavresample-dev \\\n        libdc1394-22-dev \\\n        libgdal-dev \\\n        libgphoto2-dev \\\n        libgtk2.0-dev \\\n        libjasper-dev \\\n        liblapacke-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libopenexr-dev \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libtheora-dev \\\n        libv4l-dev \\\n        libvorbis-dev \\\n        libvtk6-dev \\\n        libx264-dev \\\n        libxine2-dev \\\n        libxvidcore-dev \\\n        qt5-default \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\nRUN cd ~/ && \\\n    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \\\n    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -DWITH_QT=ON \\\n        -DWITH_OPENGL=ON \\\n        -D WITH_CUDA=ON \\\n        -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so \\\n        -D ENABLE_FAST_MATH=1 \\\n        -D CUDA_FAST_MATH=1 \\\n        -D WITH_CUBLAS=1 \\\n        -DFORCE_VTK=ON \\\n        -DWITH_TBB=ON \\\n        -DWITH_GDAL=ON \\\n        -DWITH_XINE=ON \\\n        -DBUILD_EXAMPLES=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n        .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n # Remove the opencv folders to reduce image size\n    rm -rf ~/opencv*"
    },
    {
        "filename": "2c2298ce7022137c3f5cada26b88169822683b0a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#--------- Generic stuff all our Dockerfiles should start with so we get caching ------------\nFROM python:2.7\nMAINTAINER Tim Sutton<tim@kartoza.com>\n\n# Use local cached debs from host (saves your bandwidth!)\n# Change ip below to that of your apt-cacher-ng host\n# Or comment this line out if you do not with to use caching\nADD 71-apt-cacher-ng /etc/apt/apt.conf.d/71-apt-cacher-ng\n\nRUN apt-get -y update\n\n#-------------Application Specific Stuff ----------------------------------------------------\n\nRUN apt-get install -y \\\n    python-imaging \\\n    python-yaml \\\n    libproj0 \\\n    libgeos-dev \\\n    python-lxml \\\n    libgdal-dev \\\n    build-essential \\\n    python-dev \\\n    libjpeg-dev \\\n    zlib1g-dev \\\n    libfreetype6-dev \\\n    python-virtualenv\nRUN pip install Shapely Pillow MapProxy uwsgi\n\nEXPOSE 8080\n\nADD uwsgi.conf /uwsgi.conf\nADD start.sh /start.sh\nRUN chmod 0755 /start.sh\n\n#USER www-data\n# Now launch mappproxy in the foreground\n# The script will create a simple config in /mapproxy\n# if one does not exist. Typically you should mount \n# /mapproxy as a volume\nCMD /start.sh\n"
    },
    {
        "filename": "2cd7c2d5a7c93bb3f00a412bda4f9d45ad69c4a1.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Paolo D. <p.donoriodemeo@cineca.it>  \n  \nENV PYVERSION 2  \nENV PYDATAPKG numpy scipy pandas matplotlib seaborn bokeh scikit-learn sympy  \n  \n##########################  \n# APT  \nRUN apt-get update && apt-get upgrade -y && \\  \napt-get install -y wget curl build-essential python-dev \\  \n&& apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \n##########################  \n# (mini)CONDA package manager  \nRUN wget --quiet \\  \nhttps://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh && \\  \nbash Miniconda-latest-Linux-x86_64.sh -b -p /opt/miniconda && \\  \nrm Miniconda-latest-Linux-x86_64.sh  \nENV PATH /opt/miniconda/bin:$PATH  \nRUN chmod -R a+rx /opt/miniconda  \n  \n##########################  \n# Install PyData modules and IPython dependencies  \nRUN conda update --quiet --yes conda && \\  \nconda install --quiet --yes ipython $PYDATAPKG \\  \nsix pip sqlalchemy cython pyzmq statsmodels \\  \ntheano tornado jinja2 sphinx pygments nose readline \\  \nopenpyxl xlrd \\  \n&& conda clean -y -t  \n  \n##########################  \n# Other python packages  \nRUN pip install pip -U && pip install jsonschema  \n# Create a basic profile for current user  \nRUN ipython profile create  \n# Add offline use of mathjax  \nRUN python -m IPython.external.mathjax  \n# Live slideshows  \nWORKDIR /tmp  \nRUN wget https://github.com/pdonorio/RISE/archive/master.tar.gz \\  \n&& tar xvzf *.gz && cd *master && \\  \npython2 setup.py install \\  \n&& rm -rf /tmp/*  \n  \n#####################################  \n# Setup and start notebook server  \nVOLUME /data  \nWORKDIR /data  \nCMD ipython notebook --ip=0.0.0.0 --port=8000 --no-browser  \n\n"
    },
    {
        "filename": "2cfe3c944e27783d802e434b6d9393cc1d9f15e5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM andrewgodwin/base\n\nMAINTAINER Andrew Godwin <andrew@aeracode.org>\n\nRUN apt-get update -qq && apt-get install -y \\\n    nginx\n\n# Nginx setup\nRUN mkdir -p /srv/www/\nADD index.html /srv/www/\nADD nginx.conf /etc/nginx/nginx.conf\nADD run-nginx.py /bin/\nRUN chmod +x /bin/run-nginx.py\nEXPOSE 80\n\nCMD [\"/bin/run-nginx.py\"]\n"
    },
    {
        "filename": "2d014da6363e10a24cf1bb28b67cf8caa63e4bf6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# ------------------------------------------------------------------------------\n# Based on a work at https://github.com/docker/docker.\n# ------------------------------------------------------------------------------\n# Pull base image.\nFROM kdelfour/supervisor-docker\nMAINTAINER Kevin Delfour <kevin@delfour.eu>\nENV PYDIO_VERSION 6.4.1\n\n# ------------------------------------------------------------------------------\n# Install Base\nRUN apt-get update\nRUN apt-get install -yq wget unzip nginx fontconfig-config fonts-dejavu-core \\\n    php5-fpm php5-common php5-json php5-cli php5-common php5-mysql\\\n    php5-gd php5-json php5-mcrypt php5-readline psmisc ssl-cert \\\n    ufw php-pear libgd-tools libmcrypt-dev mcrypt mysql-server mysql-client\n\n# ------------------------------------------------------------------------------\n# Configure mysql\nRUN sed -i -e\"s/^bind-address\\s*=\\s*127.0.0.1/bind-address = 0.0.0.0/\" /etc/mysql/my.cnf\nRUN mysql_install_db --user=mysql --basedir=/usr/ --ldata=/var/lib/mysql/\nRUN service mysql start && \\\n    mysql -uroot -e \"CREATE DATABASE IF NOT EXISTS pydio;\" && \\\n    mysql -uroot -e \"CREATE USER 'pydio'@'localhost' IDENTIFIED BY 'pydio';\" && \\\n    mysql -uroot -e \"GRANT ALL PRIVILEGES ON *.* TO 'pydio'@'localhost' WITH GRANT OPTION;\" && \\\n    mysql -uroot -e \"FLUSH PRIVILEGES;\"\n\n# ------------------------------------------------------------------------------\n# Configure php-fpm\nRUN sed -i -e \"s/output_buffering\\s*=\\s*4096/output_buffering = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 20G/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 20G/g\" /etc/php5/fpm/php.ini\nRUN php5enmod mcrypt\n\n# ------------------------------------------------------------------------------\n# Configure nginx\nRUN mkdir /var/www\nRUN chown www-data:www-data /var/www\nRUN rm /etc/nginx/sites-enabled/*\nRUN rm /etc/nginx/sites-available/*\nRUN sed -i -e\"s/keepalive_timeout\\s*65/keepalive_timeout 2/\" /etc/nginx/nginx.conf\nRUN sed -i -e\"s/keepalive_timeout 2/keepalive_timeout 2;\\n\\tclient_max_body_size 20g/\" /etc/nginx/nginx.conf\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nADD conf/pydio /etc/nginx/sites-enabled/\nRUN mkdir /etc/nginx/ssl\nRUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj '/CN=localhost/O=My Company Name LTD./C=US'\n\n# ------------------------------------------------------------------------------\n# Configure services\nRUN update-rc.d nginx defaults\nRUN update-rc.d php5-fpm defaults\nRUN update-rc.d mysql defaults\n\n# ------------------------------------------------------------------------------\n# Install Pydio\nWORKDIR /var/www\nRUN wget http://downloads.sourceforge.net/project/ajaxplorer/pydio/stable-channel/${PYDIO_VERSION}/pydio-core-${PYDIO_VERSION}.zip\nRUN unzip pydio-core-${PYDIO_VERSION}.zip\nRUN mv pydio-core-${PYDIO_VERSION} pydio-core\nRUN chown -R www-data:www-data /var/www/pydio-core\nRUN chmod -R 770 /var/www/pydio-core\nRUN chmod 777  /var/www/pydio-core/data/files/\nRUN chmod 777  /var/www/pydio-core/data/personal/\n\n# ------------------------------------------------------------------------------\n# Expose ports.\nEXPOSE 80\nEXPOSE 443\n\n# ------------------------------------------------------------------------------\n# Expose volumes\nVOLUME /var/www/pydio-core/data/files/\nVOLUME /var/www/pydio-core/data/personal/\nVOLUME /var/lib/mysql\n\n# ------------------------------------------------------------------------------\n# Add supervisord conf\nADD conf/startup.conf /etc/supervisor/conf.d/\n\n# Start supervisor, define default command.\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n"
    },
    {
        "filename": "2d40b0444fe0a62d12651754dc95821861422876.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockie: Drupal\n\nFROM dockie/lamp\nMAINTAINER Rob Loach <robloach@gmail.com>\n\n\n# Drupal\n\nADD configs/drupal/supervisor.conf /etc/supervisor/conf.d/drupal.conf\nADD configs/drupal/drupal-setup.sh /drupal-setup.sh\nRUN apt-get install -y sendmail && \\\n  chmod +x /drupal-setup.sh\n\n\n# Start\n\nWORKDIR /var/www/html\nVOLUME /var/www/html\nEXPOSE 22 80 3306\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "2d4633a8bc300be1b319aaf0cc861597cb698be2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#get the base default ubuntu 14.04 image\nFROM ubuntu:14.04\n\nMAINTAINER w4sp-book\n\n#adding a label here so we can easily delete our containers\nLABEL w4sp=true\n\nENV DEBIAN_FRONTEND noninteractive\n\n#things that are nice to have on all images\nRUN apt-get -y update && apt-get -y upgrade\n#RUN apt-get -y install wireshark tshark \nRUN apt-get -y install bridge-utils ethtool\nRUN apt-get -y install nmap mtr traceroute python wget curl supervisor \nRUN apt-get -y install python-pip python-dev smbclient\nRUN apt-get -y install iptables \n\n#set root creds to w4sp:w4spbook and create w4sp user with same password\nRUN usermod -p '$6$teB23uhk$u00/htDYpQKbBCVC2GsbcEi1m1BplEOnCs0LDE7cFM5lgq/VMSU27g7IFGRWp8k2qCd0jyiEFm5jx4.1LBrXZ.' root\nRUN useradd -d /home/w4sp -m -p '$6$teB23uhk$u00/htDYpQKbBCVC2GsbcEi1m1BplEOnCs0LDE7cFM5lgq/VMSU27g7IFGRWp8k2qCd0jyiEFm5jx4.1LBrXZ.' -s /bin/bash w4sp\n\n#fix unnecessary errors down the line\nRUN update-locale\n\n#install python dependencies\nRUN pip install netifaces\n\n#create directory for child images to store configuration in\nRUN  mkdir -p /var/log/supervisor && mkdir -p /etc/supervisor/conf.d\n\n#supervisor base configuration\nADD supervisor.conf /etc/supervisor.conf\n#add conf for dhclient\nADD supervisor_dhclient.conf /etc/supervisor/conf.d/supervisor_dhclient.conf\n\n# default command\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor.conf\"]\n\n\n"
    },
    {
        "filename": "2dd9cda044f090ae881404f487213d3d11dabaec.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Anshuman Bhartiya <anshuman.bhartiya@gmail.com>\n\n# Doing the usual here\nRUN apt-get -y update && \\\n    apt-get -y dist-upgrade\n\nRUN apt-get install -y \\\n\tcurl \\\n\ttofrodos \\\n\tbuild-essential \\\n\tgit \\\n\tlibpcap-dev \\\n\tlibxml2-dev \\\n\tlibxslt1-dev \\\n\tpython-requests \\\n\tpython-dnspython \\\n\tpython-setuptools \\\n\tpython-dev \\\n\twget \\\n\tzlib1g-dev && apt-get clean\n\nRUN easy_install pip && pip install --upgrade pip\n\nRUN mkdir /opt/subscan\nWORKDIR /opt/subscan\n\n# Install golang. \nRUN curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz && \\\n\ttar -xvf go1.6.linux-amd64.tar.gz && \\\n\tmv go /usr/local && \\\n\texport PATH=$PATH:/usr/local/go/bin && \\\n\tmkdir $HOME/work && \\\n\texport GOPATH=$HOME/work \n\n# Installing ALTDNS\nRUN git clone https://github.com/infosec-au/altdns.git\nWORKDIR /opt/subscan/altdns\nRUN pip install -r requirements.txt\n\nRUN mkdir /opt/secdevops\nCOPY scripts/* /opt/secdevops/\nRUN chmod +x /opt/secdevops/*\n"
    },
    {
        "filename": "2ee55025873cd35071482d0a74777849145a668b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#FROM node:alpine  \n#MAINTAINER Carlos Yag\u00fce, carlos.yague@upf.edu  \n#RUN mkdir /home/task  \n#RUN mkdir /home/input  \n#RUN mkdir /home/output  \n#WORKDIR /home/  \n#ADD . ./task  \n#WORKDIR /home/task  \n#RUN rm -rf node_modules  \n#RUN npm install  \n#RUN npm run build  \n#WORKDIR /home/  \n#CMD [\"sh\", \"-c\",\"node /home/task/dist/index.js /home/input /home/output\"]  \nFROM carlosym1/dcm4chetools  \n  \nMAINTAINER Carlos Yag\u00fce, carlos.yague@upf.edu  \n  \n# Do basic updates  \nRUN apt-get update -q && apt-get clean  \n# Get curl in order to download curl  \nRUN apt-get install curl -y  \n# Install the version of Node.js we need.  \nRUN bash -c 'curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -'  \nRUN apt-get install -y nodejs  \n  \nRUN mkdir /home/task  \n  \nWORKDIR /home/  \n  \nADD . ./task  \n  \nWORKDIR /home/task  \n  \nRUN rm -rf node_modules  \nRUN npm install  \nRUN npm run build  \n\n"
    },
    {
        "filename": "2f2b401e4d433a64aba0c28f2e79c99c193e1ffc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:armhf-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.18.1\n\n# qemu-user-static\nADD qemu-arm-static /usr/bin/qemu-arm-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "2fd30b862734be2a0cf483a7f6074450ddf591f3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nRUN locale-gen en_US.UTF-8\nRUN dpkg-reconfigure locales\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\nRUN apt-get update; \\\n    apt-get -y upgrade; \\\n    apt-get install -y \\\n    curl wget tar make uuid-runtime \\\n    sqlite3 libsqlite3-dev \\\n    mysql-client libmysqlclient-dev \\\n    postgresql-9.3 postgresql-client-9.3 libpq-dev \\\n    build-essential checkinstall \\\n    libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev \\\n    libyaml-dev jq; \\\n    apt-get clean\n\n# install python from source\nRUN CURRENT=$PWD && \\\n    cd /usr/src && \\\n    wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz &&\\\n    tar xzf Python-2.7.12.tgz && \\\n    cd Python-2.7.12 && \\\n    ./configure && \\\n    make install && \\\n    cd $CURRENT\n\nRUN python -m ensurepip && pip install pytz && pip install python-openstackclient==3.17.0 && \\\n    pip install awscli\n\n# install newest git CLI\nRUN apt-get install software-properties-common -y; \\\n    add-apt-repository ppa:git-core/ppa -y; \\\n    apt-get update; \\\n    apt-get install git -y\n\n# ruby-install\nRUN mkdir /tmp/ruby-install && \\\n    cd /tmp/ruby-install && \\\n    curl https://codeload.github.com/postmodern/ruby-install/tar.gz/v0.6.1 | tar -xz && \\\n    cd /tmp/ruby-install/ruby-install-0.6.1 && \\\n    sudo make install && \\\n    rm -rf /tmp/ruby-install\n\n#Ruby\nRUN ruby-install --system ruby 2.4.0\n\n#Bundler\nRUN [\"/bin/bash\", \"-l\", \"-c\", \"gem install bundler -v 1.16.5 --no-ri --no-rdoc\"]\n\n#BOSH GO CLI\nRUN wget https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-5.4.0-linux-amd64 -O /usr/local/bin/bosh-go\nRUN chmod +x /usr/local/bin/bosh-go\n\n# receipt generator\nRUN cd /tmp && \\\n    curl -o certify-artifacts -L https://s3.amazonaws.com/bosh-certification-generator-releases/certify-artifacts-linux-amd64 && \\\n    chmod +x certify-artifacts && \\\n    mv certify-artifacts /bin/certify-artifacts\n\n#GitHub CLI\nRUN cd /tmp && \\\n    curl -L https://github.com/github/hub/releases/download/v2.2.9/hub-linux-amd64-2.2.9.tgz | tar -xz && \\\n    cp hub-linux-amd64-2.2.9/bin/hub /usr/local/bin && \\\n    rm -rf /tmp/hub-linux-amd64-2.2.9 && \\\n    rm -f /tmp/hub-linux-amd64-2.2.9.tgz\n"
    },
    {
        "filename": "305fe210abc77d5fe5189f336c0ea1543de6fb72.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:latest  \nMAINTAINER Stefan Dimitrov <stefan@cloudeity.com>  \n  \nADD . /app  \nWORKDIR /app  \nRUN npm install  \nRUN apt-get update  \nRUN apt-get install -y moreutils  \n  \nEXPOSE 3000  \nCOPY ./entrypoint.sh /  \nENTRYPOINT [\"/entrypoint.sh\"]  \n\n"
    },
    {
        "filename": "306d36263dea6fb6af7e9905041e0f020c01f600.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# DOCKER-VERSION 1.0.1\nFROM ubuntu:14.04\nLABEL version=\"1.0\"\nLABEL description=\"AEM base image\"\nMAINTAINER dbenge\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install utility for AEM\nADD aemInstaller.py /aem/aemInstaller.py\n\n# Add the oak-run jar and compaction.sh for compaction\nADD oak-run-1.2.2.jar /aem/oak-run.jar\nADD compaction.sh /aem/compaction.sh\nADD org.apache.jackrabbit.oak.plugins.segment.SegmentNodeStoreService.cfg /aem/org.apache.jackrabbit.oak.plugins.segment.SegmentNodeStoreService.cfg\n\nRUN apt-get update\nRUN apt-get -y install software-properties-common\nRUN apt-get -y install ipython ipython3\nRUN apt-get -y install python-psutil\nRUN apt-get -y install python-pycurl\n#RUN apt-get -y install libxrender-dev\n\nRUN apt-add-repository -y ppa:webupd8team/java\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -y \n\n# Enable silent install\nRUN echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections\nRUN echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections\n\nRUN apt-get install -y --force-yes oracle-java8-installer\n\nENV JAVA_HOME=/usr/lib/jvm/java-8-oracle/jre/bin/java\nENV PATH $PATH:/usr/lib/jvm/java-8-oracle/jre/bin/java\n\n"
    },
    {
        "filename": "307c837f4e5610f1290f24579d6d870a56ee7fbc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\u672c\u6587\u53c2\u8003\u4e86\u300ctutum\u300d\u7684 Dockerfile\nFROM sshd\nMAINTAINER Waitfish <dwj_zz@163.com>\n#\u5b89\u88c5\u8f6f\u4ef6 \nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && \\\n  apt-get -yq install mysql-server-5.6 pwgen && \\\n  rm -rf /var/lib/apt/lists/*\n\n# \u5220\u9664\u9884\u5b89\u88c5\u7684\u6570\u636e\u5e93\u6587\u4ef6\nRUN rm -rf /var/lib/mysql/*\n\n# \u6dfb\u52a0\u6587\u4ef6\u5939\u4e0b\u7684 MYSQL \u914d\u7f6e\u6587\u4ef6\nADD my.cnf /etc/mysql/conf.d/my.cnf\nADD mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf\n\n# \u6dfb\u52a0 MYSQL \u7684\u811a\u672c\nADD import_sql.sh /import_sql.sh\nADD run.sh /run.sh\nRUN chmod 755 /*.sh\n\n# \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u7528\u6237\u540d\u4ee5\u53ca\u79d8\u5bc6\nENV MYSQL_USER admin\nENV MYSQL_PASS **Random**\n\n# \u8bbe\u7f6e\u4e3b\u4ece\u590d\u5236\u6a21\u5f0f\u4e0b\u7684\u73af\u5883\u53d8\u91cf\nENV REPLICATION_MASTER **False**\nENV REPLICATION_SLAVE **False**\nENV REPLICATION_USER replica\nENV REPLICATION_PASS replica\n\n# \u8bbe\u7f6e\u53ef\u4ee5\u5141\u8bb8\u6302\u8f7d\u7684\u5377\uff0c\u53ef\u4ee5\u7528\u6765\u5907\u4efd\u6570\u636e\u5e93\u548c\u914d\u7f6e\u6587\u4ef6\nVOLUME  [\"/etc/mysql\", \"/var/lib/mysql\"]\n\n# \u8bbe\u7f6e\u53ef\u4ee5\u6620\u5c04\u7684\u7aef\u53e3\uff0c\u5982\u679c\u662f\u4ece\u6211\u4eec\u7684 sshd \u955c\u50cf\u7ee7\u627f\u7684\u8bdd\uff0c\u9ed8\u8ba4\u8fd8\u4f1a\u5f00\u542f 22 \u7aef\u53e3\nEXPOSE 3306\nCMD [\"/run.sh\"]\n"
    },
    {
        "filename": "30c849a9325f5ae28db229874df2940a32364d33.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ruby:2.1.6-slim\n\nMAINTAINER Daniel Romero <infoslack@gmail.com>\n\nRUN apt-get update && apt-get -y install \\\n        git \\\n        bison \\\n        libbison-dev \\\n        libpq-dev \\\n        libpcap-dev \\\n        libpcap0.8 \\\n        libpcap0.8-dev \\\n        postgresql-client \\\n        build-essential \\\n        libsqlite3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN git clone --depth=1 https://github.com/rapid7/metasploit-framework.git \\\n        && cd metasploit-framework \\\n        && bundle install --without test coverage development\n\nADD files/setup.sh /\nRUN chmod +x /setup.sh\n\nWORKDIR /metasploit-framework\nADD files/database.yml config/database.yml\n\nEXPOSE 4444\nCMD [\"/setup.sh\"]\n"
    },
    {
        "filename": "30ce53fea144e760c8a5ffca1e428c291a3e5e3d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/xenial-amd64:2.39\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV UBUNTUIMAGE_VERSION=1.0+16.04ubuntu1\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git\n\nWORKDIR /tmp\nADD disable-sparse-check.patch /tmp\nRUN git clone --depth 1 --branch ${UBUNTUIMAGE_VERSION} https://github.com/CanonicalLtd/ubuntu-image \\\n && cd ubuntu-image \\\n && patch -p1 < /tmp/disable-sparse-check.patch \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && mkdir -p /snap/bin \\\n && ln -s /usr/bin/ubuntu-image /snap/bin/ubuntu-image\n\nRUN mknod /dev/loop0 b 7 0\nRUN echo \"ALL ALL=NOPASSWD: /snap/bin/ubuntu-image, /bin/mount, /bin/umount, /bin/cp\" >> /etc/sudoers.d/ubuntu-image \\\n && chmod 0440 /etc/sudoers.d/ubuntu-image\n\n# Install toolchins\nRUN apt-get install -y build-essential u-boot-tools lzop debootstrap \\\n    gcc-aarch64-linux-gnu \\\n    gcc-arm-linux-gnueabihf \\\n    gcc-4.8 \\\n    gcc-4.8-arm-linux-gnueabihf \\\n    device-tree-compiler \\\n    bc\n\n# change the default gcc to 4.8, since old kernel need old gcc.\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-5 50 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-5 50\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-4.8 100 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100\n\n# multiarch.\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y libc6:i386\n\nRUN apt-get remove --purge -y devscripts equivs\nRUN apt-get autoremove -y\nRUN apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /build\n"
    },
    {
        "filename": "30d60449cdd9d04fde76c0656d33ec09e0838058.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "\nFROM phusion/baseimage:0.9.16\nMAINTAINER sparklyballs <sparkly@madeupemail.com>\nENV DEBIAN_FRONTEND noninteractive\n# Set correct environment variables\nENV HOME /root\nENV TERM xterm\n\n\n# Use baseimage-docker's init system\nCMD [\"/sbin/my_init\"]\n\n#\u00a0Add files from local\nADD src/ root/\n\n# Set the locale\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nRUN locale-gen en_US.UTF-8 && \\\n\n# Configure user nobody to match unRAID's settings\nusermod -u 99 nobody && \\\nusermod -g 100 nobody && \\\nusermod -d /home nobody && \\\nchown -R nobody:users /home && \\\n\n# update apt, install gdebi, wget and fetch .deb file\napt-get update && \\\napt-get install -y gdebi-core wget && \\\nwget -O /root/kodi-headless_0.0.2_amd64.deb  \"https://www.dropbox.com/s/6ro81v0dh3x0ehh/kodi-headless_0.0.2_amd64.deb?dl=0\" && \\\n#\u00a0install package and clean up\ncd /root && \\\ngdebi -n kodi-headless_0.0.2_amd64.deb && \\\napt-get purge --remove -y gdebi-core wget && \\\napt-get autoremove -y && \\\nrm -rf /var/lib/apt/lists /usr/share/man /usr/share/doc && \\\nrm -rf /root/*.deb && \\\n\n#\u00a0fix up startup files, make executable etc...\n\nmkdir /etc/service/kodi && \\\nmv /root/kodi.sh /etc/service/kodi/run && \\\nchmod +x /etc/service/kodi/run && \\\nmv /root/firstrun.sh /etc/my_init.d/firstrun.sh && \\\nchmod +x /etc/my_init.d/firstrun.sh && \\\n\n#\u00a0fix up permissions\nchown -R nobody:users /opt/kodi-server\n\n#\u00a0set ports\nEXPOSE 9777/udp 8080/tcp\n"
    },
    {
        "filename": "31ace616a9a8e13402cce0ee575be257b5a1cf8a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.2\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.34\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && rm -f snapcraft/tests/plugins/test_rust.py \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod -R g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "31b3398f4717f2573e8d3b34176916aabee6bf53.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Dave MacFarlane <david.macfarlane2@mcgill.ca>\n# Stock images come without apt archive -- needs an update\nRUN apt-get -qqq update\nRUN apt-get -y install php5 php5-json curl git php5-mysql mysql-client\n#RUN git clone https://github.com/aces/Loris.git /var/www/loris\n#INCLUDE HOSTNAME REPLACEMENT?\nCOPY . /var/www/loris\n\nRUN curl -sS https://getcomposer.org/installer | php\nRUN mv composer.phar /usr/local/bin/composer\nRUN COMPOSER_HOME=/var/www/loris\nRUN cd /var/www/loris && composer install --no-dev\nWORKDIR /var/www/loris\nRUN mkdir project\nRUN sed -e \"s#%LORISROOT%#/var/www/loris/#g\" \\\n        -e \"s#%PROJECTNAME%#loris#g\" \\\n        -e \"s#%LOGDIRECTORY%#/var/log/apache2/#g\" \\\n        < docs/config/apache2-site > /etc/apache2/sites-available/loris.conf\nRUN a2dissite 000-default\nRUN ls /etc/apache2/sites-available\nRUN ls /etc/apache2/sites-enabled\nRUN a2ensite loris\nRUN mkdir smarty/templates_c\nRUN chmod 777 smarty/templates_c\n\nENV LORIS_SQL_DB=LorisDB\nENV LORIS_SQL_HOST=mysql\nENV LORIS_SQL_USER=loris\nENV LORIS_SQL_PASSWORD=\nENV LORIS_BASEURL=\n\nEXPOSE 80\nVOLUME [\"/var/www/loris/project\", \"/var/log/apache2\", \"/var/lib/php5\"]\n\nADD docs/Docker/LorisWeb-EntryPoint.sh /entrypoint.sh\nCMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "31ea8778cb1abd314005234d28bc1c72d6e4cda8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# django APP\n# do not operate database in APP's docker\n# for there would be several apps, sharing one database\n#\nFROM daocloud.io/python:2.7\nMAINTAINER JackonYang <i@jackon.me>>\n\nRUN apt-get update\n\n# install packages from source code\nRUN apt-get install -y wget\nRUN apt-get install -y cmake\n\n\n# http://stackoverflow.com/questions/23524976/capturing-output-of-python-script-run-inside-a-docker-container\nENV PYTHONUNBUFFERED=0\n\n\n# https://docs.docker.com/engine/reference/builder/#arg\nARG pip_host=pypi.douban.com\nARG pip_root_url=http://pypi.douban.com/simple/\n\n# upgrade pip to latest version\nRUN pip install --upgrade pip -i $pip_root_url --trusted-host $pip_host\n\n# logging\nRUN pip install -i $pip_root_url --trusted-host $pip_host rollbar==0.13.8\n\n\n# pygit2 and its dependencies\nRUN wget https://github.com/libgit2/libgit2/archive/v0.24.0.tar.gz && \\\ntar xzf v0.24.0.tar.gz && \\\ncd libgit2-0.24.0/ && \\\ncmake . && \\\nmake && \\\nmake install\nRUN ldconfig\nRUN pip install -i $pip_root_url --trusted-host $pip_host pygit2==0.24.2\n\n\n# common\nRUN pip install -i $pip_root_url --trusted-host $pip_host redis==2.10.5\n\nRUN pip install -i $pip_root_url --trusted-host $pip_host wechat_sdk\n\n\nCOPY . /src\nWORKDIR /src\n\nRUN pip install -r requirements.txt\n"
    },
    {
        "filename": "323eb2ee8eac14014708633fda6a269ff34a965f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM golang:1.7.5\nMAINTAINER hsfeng@gmail.com\n\nRUN apt-get -y update\n\nRUN apt-get -y install net-tools jq iptables bc module-init-tools uuid-runtime ntpdate && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY cni-conf /go/cni-conf\nCOPY kube-conf /go/kube-conf\nCOPY dnssd /go/dnssd\nCOPY flannel-conf /go/flannel-conf\n\nWORKDIR /go\n\nRUN mkdir -p /go/src \\\n    && ln -s /go/dnssd /go/src/dnssd \\\n    && go get -u github.com/kardianos/govendor \\\n    && cd /go/src/dnssd \\\n    && govendor sync \\\n    && go build -o /go/src/dnssd/registering /go/src/dnssd/registering.go \\\n    && go build -o /go/src/dnssd/browsing /go/src/dnssd/browsing.go\n\nADD runcom /go/runcom\nADD kube-up /go/kube-up\nADD kube-down /go/kube-down\nADD k8sup.sh /go/k8sup.sh\nADD cp-certs.sh /go/cp-certs.sh\nADD service-addons.sh /go/service-addons.sh\n\nRUN chmod +x /go/k8sup.sh\nRUN chmod +x /go/kube-up\n\nENTRYPOINT [\"/go/k8sup.sh\"]\nCMD []\n"
    },
    {
        "filename": "324468869818b07e62714a619a4eeeec80636e0c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM    ubuntu\nMAINTAINER      fintan@weave.works\n\nRUN     apt-get -y update \nRUN     apt-get -y install nodejs\nRUN     apt-get -y install npm \n\n# add our app\nRUN \tmkdir -p /opt/app\nCOPY\tapp/. /opt/app\nRUN\tcd /opt/app && npm install\n\n# and run our offer-service\n\nCMD\t[\"nodejs\", \"/opt/app/services/web-app.js\" ]\n"
    },
    {
        "filename": "32711ca3d311522312d5bca7c9c53f98eea4dbe9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM vulhub/ubuntu:16.04\n\nMAINTAINER phithon <root@leavesongs.com>\n\nENV BUILD_DEP wget build-essential autoconf \n\nRUN set -ex \\\n    && echo \"krb5-config krb5-config/default_realm string \" | debconf-set-selections \\\n    && apt-get update \\\n    && apt-get install -y $BUILD_DEP acl attr bison  \\\n  debhelper dnsutils docbook-xml docbook-xsl flex gdb krb5-user \\\n  libacl1-dev libaio-dev libattr1-dev libblkid-dev libbsd-dev \\\n  libcap-dev libcups2-dev libgnutls28-dev libjson-perl \\\n  libldap2-dev libncurses5-dev libpam0g-dev libparse-yapp-perl \\\n  libpopt-dev libreadline-dev pkg-config perl perl-modules \\\n  python-all-dev python-dev python-dnspython python-crypto \\\n  xsltproc zlib1g-dev libsystemd-dev libgpgme11-dev python-gpgme python-m2crypto \\\n    && mkdir -p /usr/src/samba \\\n    && wget -qO- https://download.samba.org/pub/samba/stable/samba-4.6.3.tar.gz \\\n        | tar zx -C /usr/src/samba --strip-components=1 \\\n    && cd /usr/src/samba \\\n    && ./configure \\\n    && make \\\n    && make install \\\n    && make clean \\\n    && cd / \\\n    && rm -rf /usr/src/samba \\\n    && apt-get purge -y --auto-remove $BUILD_DEP \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV PATH /usr/local/samba/bin/:/usr/local/samba/sbin/:$PATH\n\nEXPOSE 137/udp 138/udp 139 445\n\nRUN mkdir /home/share \\\n    && chmod 777 /home/share\n\nADD smb.conf /usr/local/samba/etc/smb.conf\n\nCMD [\"/usr/local/samba/sbin/smbd\", \"-FS\"]"
    },
    {
        "filename": "3296d51737bb71736eab1625120e792c36ecd6f5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockerfile/java:oracle-java7\nMAINTAINER Karol Wojtaszek <karol@appunite.com>\n\nRUN apt-get -y update && apt-get install --no-install-recommends -y -qq curl docker.io git openssh-client unzip ruby ca-certificates patch gawk g++ gcc make libc6-dev patch libreadline6-dev zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 autoconf libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev && apt-get clean all\n\n# install go agent\nRUN wget -O /tmp/go-agent.deb http://download.go.cd/gocd-deb/go-agent-14.4.0-1356.deb && dpkg -i /tmp/go-agent.deb && rm /tmp/go-agent.deb\nRUN echo \"DAEMON=n\" > /etc/default/go-agent\nADD image /\n\n# install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3; \\curl -sSL https://get.rvm.io | bash -s stable\nONBUILD RUN /bin/bash -l -c \"source /etc/profile.d/rvm.sh\"\nRUN /bin/bash -l -c \"rvm install 2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n\n# install redis\nRUN sh /opt/go/install_redis.sh\n\n# install mongodb\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/debian-sysvinit dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\nRUN apt-get -y update && apt-get install -y mongodb-org && service mongod start && apt-get clean all\n\n# install postgresql\nRUN apt-get install -y postgresql postgresql-client\n\nCMD rm /usr/share/go-agent/.agent-bootstrapper.running; sh /opt/go/start.sh\n"
    },
    {
        "filename": "c2b37e88c560c8c56147e5fdf2bf66d7d2f1df34.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM makuk66/docker-solr:4.10.4  \nMAINTAINER Alban Seurat \"alban.seurat@me.com\"  \nUSER root  \n  \nrun apt-get -y update  \nrun apt-get -y install python-pip supervisor  \nrun pip install mongo-connector  \n  \nadd ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf  \nadd ./solr.conf /etc/supervisor/conf.d/solr.conf  \nadd ./start-solr-node.sh /opt/solr/bin/start-solr-node.sh  \nadd ./mongo-connector.sh /opt/solr/bin/mongo-connector.sh  \n  \nrun chmod a+x /opt/solr/bin/start-solr-node.sh  \nrun chmod a+x /opt/solr/bin/mongo-connector.sh  \n  \nCMD \"/usr/bin/supervisord\"  \n  \n\n"
    },
    {
        "filename": "c3577927c3d4416c7786d1edd34b77d74110924f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## -*- docker-image-name: \"homme/openstreetmap-tiles:latest\" -*-\n\n##\n# The OpenStreetMap Tile Server\n#\n# This creates an image with containing the OpenStreetMap tile server stack as\n# described at\n# <http://switch2osm.org/serving-tiles/manually-building-a-tile-server-12-04/>.\n#\n\nFROM phusion/baseimage:0.9.11\nMAINTAINER Homme Zwaagstra <hrz@geodata.soton.ac.uk>\n\n# Set the locale. This affects the encoding of the Postgresql template\n# databases.\nENV LANG C.UTF-8\nRUN update-locale LANG=C.UTF-8\n\n# Ensure `add-apt-repository` is present\nRUN apt-get update -y\nRUN apt-get install -y software-properties-common python-software-properties\n\nRUN apt-get install -y libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev\n\n# Install remaining dependencies\nRUN apt-get install -y subversion git-core tar unzip wget bzip2 build-essential autoconf libtool libxml2-dev libgeos-dev libpq-dev libbz2-dev munin-node munin libprotobuf-c0-dev protobuf-c-compiler libfreetype6-dev libpng12-dev libtiff4-dev libicu-dev libgdal-dev libcairo-dev libcairomm-1.0-dev apache2 apache2-dev libagg-dev liblua5.2-dev ttf-unifont\n\nRUN apt-get install -y autoconf apache2-dev libtool libxml2-dev libbz2-dev libgeos-dev libgeos++-dev libproj-dev gdal-bin libgdal1-dev mapnik-utils python-mapnik libmapnik-dev\n\n# Install postgresql and postgis\nRUN apt-get install -y postgresql-9.3-postgis-2.1 postgresql-contrib postgresql-server-dev-9.3\n\n# Install osm2pgsql\nRUN cd /tmp && git clone git://github.com/openstreetmap/osm2pgsql.git\nRUN cd /tmp/osm2pgsql && \\\n    ./autogen.sh && \\\n    ./configure && \\\n    make && make install\n\n# Install the Mapnik library\nRUN cd /tmp && git clone git://github.com/mapnik/mapnik\nRUN cd /tmp/mapnik && \\\n    git checkout 2.2.x && \\\n    python scons/scons.py configure INPUT_PLUGINS=all OPTIMIZATION=3 SYSTEM_FONTS=/usr/share/fonts/truetype/ && \\\n    python scons/scons.py && \\\n    python scons/scons.py install && \\\n    ldconfig\n\n# Verify that Mapnik has been installed correctly\nRUN python -c 'import mapnik'\n\n# Install mod_tile and renderd\nRUN cd /tmp && git clone git://github.com/openstreetmap/mod_tile.git\nRUN cd /tmp/mod_tile && \\\n    ./autogen.sh && \\\n    ./configure && \\\n    make && \\\n    make install && \\\n    make install-mod_tile && \\\n    ldconfig\n\n# Install the Mapnik stylesheet\nRUN cd /usr/local/src && svn co http://svn.openstreetmap.org/applications/rendering/mapnik mapnik-style\n\n# Install the coastline data\nRUN cd /usr/local/src/mapnik-style && ./get-coastlines.sh /usr/local/share\n\n# Configure mapnik style-sheets\nRUN cd /usr/local/src/mapnik-style/inc && cp fontset-settings.xml.inc.template fontset-settings.xml.inc\nADD datasource-settings.sed /tmp/\nRUN cd /usr/local/src/mapnik-style/inc && sed --file /tmp/datasource-settings.sed  datasource-settings.xml.inc.template > datasource-settings.xml.inc\nADD settings.sed /tmp/\nRUN cd /usr/local/src/mapnik-style/inc && sed --file /tmp/settings.sed  settings.xml.inc.template > settings.xml.inc\n\n# Configure renderd\nADD renderd.conf.sed /tmp/\nRUN cd /usr/local/etc && sed --file /tmp/renderd.conf.sed --in-place renderd.conf\n\n# Create the files required for the mod_tile system to run\nRUN mkdir /var/run/renderd && chown www-data: /var/run/renderd\nRUN mkdir /var/lib/mod_tile && chown www-data /var/lib/mod_tile\n\n# Configure mod_tile\nADD mod_tile.load /etc/apache2/mods-available/\nADD mod_tile.conf /etc/apache2/mods-available/\nRUN a2enmod mod_tile\n\n# Ensure the webserver user can connect to the gis database\nRUN sed -i -e 's/local   all             all                                     peer/local gis www-data peer/' /etc/postgresql/9.3/main/pg_hba.conf\n\n# Tune postgresql\nADD postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.3/main/postgresql.conf\n\n# Define the application logging logic\nADD syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n\n# Create a `postgresql` `runit` service\nADD postgresql /etc/sv/postgresql\nRUN update-service --add /etc/sv/postgresql\n\n# Create an `apache2` `runit` service\nADD apache2 /etc/sv/apache2\nRUN update-service --add /etc/sv/apache2\n\n# Create a `renderd` `runit` service\nADD renderd /etc/sv/renderd\nRUN update-service --add /etc/sv/renderd\n\n# Clean up APT when done\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Expose the webserver and database ports\nEXPOSE 80 5432\n\n# We need the volume for importing data from\nVOLUME [\"/data\"]\n\n# Set the osm2pgsql import cache size in MB. Used in `run import`.\nENV OSM_IMPORT_CACHE 800\n\n# Add the README\nADD README.md /usr/local/share/doc/\n\n# Add the help file\nRUN mkdir -p /usr/local/share/doc/run\nADD help.txt /usr/local/share/doc/run/help.txt\n\n# Add the entrypoint\nADD run.sh /usr/local/sbin/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n\n# Default to showing the usage text\nCMD [\"help\"]\n"
    },
    {
        "filename": "c39413a31e3802413ccd69e641deb84ca0907b9b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM joshuawarner32/avian-build\nMAINTAINER Joshua Warner, joshuawarner32@gmail.com\n\nRUN dpkg --add-architecture arm64 && \\\n    apt-get update && \\\n    mkdir -p /opt/arm64 && \\\n    apt-get download libc6-dev:arm64 \\\n            linux-headers-3.16.0-4-all-arm64:arm64 \\\n            linux-libc-dev:arm64 \\\n            libc6:arm64 \\\n            zlib1g-dev:arm64 \\\n            zlib1g:arm64 && \\\n    for x in *.deb; do \\\n        dpkg -x $x /opt/arm64; \\\n    done && \\\n    rm *.deb && \\\n    apt-get install -y \\\n        wget \\\n        libgmp-dev \\\n        libmpfr-dev \\\n        libmpc-dev \\\n        libisl-dev && \\\n    apt-get clean all && \\\n    for x in $(find /opt/arm64 -type l); do \\\n        r=$(readlink \"$x\" | sed 's,^/,/opt/arm64/,g'); \\\n        rm \"$x\"; \\\n        ln -s \"$r\" \"$x\"; \\\n    done\n\nRUN mkdir -p /var/src\n\n# Build & install binutils\nRUN wget ftp://sourceware.org/pub/binutils/snapshots/binutils-2.23.91.tar.bz2 -O /var/src/binutils.tar.bz2 && \\\n    cd /var/src/ && tar -xjf binutils.tar.bz2 && rm binutils.tar.bz2 && \\\n    cd /var/src/binutils* && \\\n    mkdir build && \\\n    cd build && \\\n    ../configure \\\n        --target=aarch64-linux-gnu \\\n        --prefix=/opt/arm64 \\\n        --disable-multilib \\\n        --program-prefix=aarch64-linux-gnu- \\\n        --with-sysroot=/opt/arm64 \\\n        --with-headers=/opt/arm64/usr/include \\\n        --disable-werror && \\\n    make && \\\n    make install && \\\n    cd /var/src && \\\n    rm -rf *\n\n# build & install gcc\nRUN wget http://www.netgull.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.bz2 -O /var/src/gcc.tar.bz2 && \\\n    cd /var/src/ && tar -xjf gcc.tar.bz2 && rm gcc.tar.bz2 && \\\n    cd /var/src/gcc* && \\\n    mkdir build && \\\n    cd build && \\\n    ../configure \\\n        --target=aarch64-linux-gnu \\\n        --enable-languages=c,c++ \\\n        --prefix=/opt/arm64 \\\n        --disable-multilib \\\n        --program-prefix=aarch64-linux-gnu- \\\n        --with-sysroot=/opt/arm64 \\\n        --with-headers=/opt/arm64/usr/include \\\n        --disable-werror && \\\n    make && \\\n    make install && \\\n    cd /var/src && \\\n    rm -rf *\n\nENV PATH $PATH:/opt/arm64/bin\n"
    },
    {
        "filename": "c3c4cdad978dab559afb6ada27d91bc2cb00bfab.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \n  \n#Autor  \nMAINTAINER \u00c1NGEL VALERA MOTOS <angelvalera.epal@gmail.com>  \n  \n#Actualizar Sistema Base  \nRUN sudo apt-get -y update  \n  \n#Descargar aplicacion  \nRUN sudo apt-get install -y git  \nRUN sudo git clone https://github.com/AngelValera/bares-y-tapas-DAI  \n  \n# Instalar Python y PostgreSQL  \nRUN sudo apt-get install -y python-setuptools  \nRUN sudo apt-get -y install python-dev  \nRUN sudo apt-get -y install build-essential  \nRUN sudo apt-get -y install python-psycopg2  \nRUN sudo apt-get -y install libpq-dev  \nRUN sudo easy_install pip  \nRUN sudo pip install --upgrade pip  \n  \n#Instalar la app  \nRUN ls  \nRUN cd bares-y-tapas-DAI/ && ls -l  \nRUN cd bares-y-tapas-DAI/ && cat requirements.txt  \nRUN cd bares-y-tapas-DAI/ && sudo pip install -r requirements.txt  \n  \n#Migraciones  \nRUN cd bares-y-tapas-DAI/ && python populate_app.py  \nRUN cd bares-y-tapas-DAI/ && python manage.py migrate --noinput  \n\n"
    },
    {
        "filename": "c3f3b9e0b5f6b81be05eef6fd6b361f7c0b51843.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM php:7.3.0-cli\nWORKDIR /app\nRUN apt-get update \\\n    && apt-get install -y libzip-dev wget git-core python-pip \\\n    && docker-php-ext-install zip \\\n    && pip install Sphinx sphinx_rtd_theme\nADD . /app\nRUN cd /app && make cs test html\nCMD [ \"php\", \"-S\", \"0.0.0.0:80\", \"-t\", \"_build/html\" ]\n"
    },
    {
        "filename": "c461a386ef9eb49ba9e4a09ad40bacd4a781f14a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM metabrainz/base-image\nLABEL maintainer=jeffsturgis@gmail.com\n\nENV DOCKERIZE_VERSION v0.5.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    rm -f dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nARG POSTGRES_VERSION=9.5\nRUN curl -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \\\n    echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && \\\n    apt-get install -y \\\n        cpanminus \\\n        build-essential \\\n        gettext \\\n        git-core \\\n        libdb-dev \\\n        libexpat1-dev \\\n        libicu-dev \\\n        liblocal-lib-perl \\\n        libpq-dev \\\n        libxml2-dev \\\n        libssl-dev \\\n        memcached \\\n        postgresql-${POSTGRES_VERSION} \\\n        python-minimal \\\n        zlib1g-dev\n\nRUN git clone https://github.com/metabrainz/musicbrainz-server.git musicbrainz-server && \\\n    cd musicbrainz-server && \\\n    git checkout v-2019-05-13-schema-change\n\nRUN cd musicbrainz-server && \\\n    cp docker/yarn_pubkey.txt /tmp && \\\n    cd /tmp && \\\n    apt-key add yarn_pubkey.txt && \\\n    apt-key adv --keyserver hkps.pool.sks-keyservers.net --refresh-keys Yarn && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n    apt-get update -o Dir::Etc::sourcelist=\"sources.list.d/yarn.list\" -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\" && \\\n    curl -sLO https://deb.nodesource.com/node_8.x/pool/main/n/nodejs/nodejs_8.11.3-1nodesource1_amd64.deb && \\\n    dpkg -i nodejs_8.11.3-1nodesource1_amd64.deb && \\\n    apt remove -y cmdtest && \\\n    apt-get install -y yarn\n\nRUN cd /musicbrainz-server/ && \\\n    eval $( perl -Mlocal::lib) && cpanm --installdeps --notest .\nRUN eval $( perl -Mlocal::lib) && cpanm --notest \\\n        Cache::Memcached::Fast \\\n        Cache::Memory \\\n        Catalyst::Plugin::Cache::HTTP \\\n        Catalyst::Plugin::StackTrace \\\n        Digest::MD5::File \\\n        JSON::Any \\\n        LWP::Protocol::https \\\n        Plack::Handler::Starlet \\\n        Plack::Middleware::Debug::Base \\\n        Server::Starter \\\n        Starlet \\\n        Starlet::Server \\\n        Term::Size::Any \\\n        TURNSTEP/DBD-Pg-3.7.4.tar.gz\n\nADD DBDefs.pm /musicbrainz-server/lib/\nADD scripts/start.sh /start.sh\nADD scripts/start_mb_renderer.pl /start_mb_renderer.pl\nADD scripts/crons.conf /crons.conf\nADD scripts/replication.sh /replication.sh\nADD scripts/createdb.sh /createdb.sh\nADD scripts/recreatedb.sh /recreatedb.sh\nADD scripts/set-token.sh /set-token.sh\n\n# Postgres user/password would be solely needed to compile tests\nARG POSTGRES_USER=doesntmatteraslongasyoudontcompiletests\nARG POSTGRES_PASSWORD=doesntmatteraslongasyoudontcompiletests\nRUN cd /musicbrainz-server/ && yarn install --production && \\\n    eval $( perl -Mlocal::lib) && /musicbrainz-server/script/compile_resources.sh\n\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN crontab /crons.conf\n\nVOLUME  [\"/media/dbdump\"]\nWORKDIR /musicbrainz-server\nCMD dockerize -wait tcp://db:5432 -timeout 60s \\\n        -wait tcp://redis:6379 -timeout 60s \\\n        /start.sh\n"
    },
    {
        "filename": "c4a65a6c43cec1be8b8663a52baaca63ca42bbae.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\nMAINTAINER Frank Austin Nothaft, fnothaft@berkeley.edu\n\nRUN apt-get update && \\\n  apt-get install -y \\\n    python \\\n    libnss3 \\\n    openjdk-8-jre-headless \\\n    curl\n\n# Install statically linked version of docker client\nRUN curl https://get.docker.com/builds/Linux/x86_64/docker-1.12.3.tgz \\\n    | tar -xvzf - --transform='s,[^/]*/,,g' -C /usr/local/bin/ \\\n    && chmod u+x /usr/local/bin/docker\n\n# pull down spark jar\nRUN mkdir /opt/apache-spark && \\\n  curl http://apache.osuosl.org/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.6.tgz \\\n  | tar --strip-components=1 -xzC /opt/apache-spark\n\n# add spark to path\nENV PATH /opt/apache-spark/bin:$PATH\n\n# add master runner script\nADD run-master.sh .\n\nENTRYPOINT [\"bash\", \"+x\", \"run-master.sh\"]\n"
    },
    {
        "filename": "c4b5513cc30bc2d82079eec5a486b2f1194c2f6b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# MySQL Server with Apache and phpmyadmin\n#\n# VERSION               0.0.1\n#\n# Docs: \n# - https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps\n#\n\n\nFROM     ubuntu:latest\nMAINTAINER Jonas Colmsj\u00f6 \"jonas@gizur.com\"\n\nRUN echo \"export HOME=/root\" >> /root/.profile\n\nRUN apt-get update\nRUN apt-get install -y wget nano curl git\n\n#\n# Install supervisord (used to handle processes)\n#\n\nRUN apt-get install -y supervisor\nADD ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n\n#\n# Install haproxy and rsyslog\n#\n\nRUN apt-get install -y haproxy rsyslog\n\n# Move default configuration out\nRUN mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.original\n\n# Add out own configuration\nADD ./etc-haproxy-haproxy.cfg /etc/haproxy/haproxy.cfg\n\nADD ./etc-rsyslog.conf /etc/rsyslog.conf\nADD ./etc-rsyslog.d-50-default.conf /etc/rsyslog.d/50-default.conf\n\nRUN rm /etc/rsyslog.d/haproxy.conf\n\n# Create a volume\nRUN mkdir /volume\nVOLUME [\"/volume\"]\n\n\n#\n# Start haproxy\n#\n#There are only a few command line options :\n#\n#    -f <configuration file>\n#    -n <high limit for the total number of simultaneous connections>\n#       = 'maxconn' in 'global' section\n#    -N <high limit for the per-listener number of simultaneous connections>\n#       = 'maxconn' in 'listen' or 'default' sections\n#    -d starts in foregreound with debugging mode enabled\n#    -D starts in daemon mode\n#    -q disable messages on output\n#    -V displays messages on output even when -q or 'quiet' are specified.\n#    -c only checks config file and exits with code 0 if no error was found, or\n#       exits with code 1 if a syntax error was found.\n#    -p <pidfile> asks the process to write down each of its children's\n#       pids to this file in daemon mode.\n#    -sf specifies a list of pids to send a FINISH signal to after startup.\n#    -st specifies a list of pids to send a TERMINATE signal to after startup.\n#    -s shows statistics (only if compiled in)\n#    -l shows even more statistics (implies '-s')\n#    -dk disables use of kqueue()\n#    -ds disables use of speculative epoll()\n#    -de disables use of epoll()\n#    -dp disables use of poll()\n#    -db disables background mode (stays in foreground, useful for debugging)\n#    -m <megs> enforces a memory usage limit to a maximum of <megs> megabytes.\n\n\nADD ./start.sh /start.sh\n\nEXPOSE 80 443\nCMD [\"/start.sh\"]"
    },
    {
        "filename": "c585eb4be06f572f7b9495cf3666c8555d5f39e6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty\nMAINTAINER Alex Stapleton <alexs@prol.etari.at>\n\nRUN apt-get update\nRUN apt-get install -y python-pip\nRUN pip install -U pip\nRUN pip install wheel\n\nADD packages.txt /tmp/\nRUN xargs apt-get install -y < /tmp/packages.txt && rm /tmp/packages.txt\n\nADD bin/ /root/bin/\n"
    },
    {
        "filename": "c5da9882da553d5425ae1f033f1d024cba34c075.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM b.gcr.io/tensorflow/tensorflow\n\nMAINTAINER Craig Citro <craigcitro@google.com>\n\n# Set up Bazel.\n# Install dependencies for bazel.\nRUN apt-get update && apt-get install -y \\\n        g++ \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        wget \\\n        zip \\\n        zlib1g-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# We need to add a custom PPA to pick up JDK8, since trusty doesn't\n# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n# Matthias Klose (https://launchpad.net/~doko).  It will do until\n# we either update the base image beyond 14.04 or openjdk-8 is\n# finally backported to trusty; see e.g.\n#   https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    apt-get update && \\\n    apt-get install -y openjdk-8-jdk openjdk-8-jre-headless && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/root/.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/root/.bazelrc\nENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.1.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    wget -O /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\nWORKDIR /tensorflow\n\n# Add in the source tree\nCOPY tensorflow /tensorflow\n\n# Now we build\nRUN bazel clean && \\\n    bazel build -c opt tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip install --upgrade /tmp/pip/tensorflow-*.whl\n\nWORKDIR /root\n"
    },
    {
        "filename": "c64b133aa6c9189f445323ac204fbe4dda239965.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nginx:latest\n\nMAINTAINER Geek Pie Association @ ShnaghaiTech\n\nEXPOSE 80\n\nRUN apt-get update && apt-get install curl -y && apt-get install gnupg -y\n\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash -\nRUN apt-get install -y nodejs\n\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY fresh.conf /etc/nginx/sites-enabled/fresh.conf\n\nRUN mkdir /logs\nRUN mkdir /fresh\nCOPY . /fresh\n\nRUN rm -Rf /fresh/dist\n\nRUN cd /fresh \\\n  && npm install\n\nRUN cd /fresh \\\n  && npm run build \\\n  && mv dist/assets/index.html dist/ \\\n  && rm -rf node_modules\n"
    },
    {
        "filename": "c68d1f5745f4d03845cbda6a32ae22f7d96a2adb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM markleith/ubuntu-14.04\n\nMAINTAINER Mark Leith (mark@markleith.co.uk)\n\n# Latest MySQL from Oracle offical repos\nADD http://dev.mysql.com/get/mysql-apt-config_0.1.5-2ubuntu14.04_all.deb /tmp/\nRUN DEBIAN_FRONTEND=noninteractive dpkg -i /tmp/mysql-apt-config_0.1.5-2ubuntu14.04_all.deb\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-server\n\nRUN git clone https://github.com/MarkLeith/mysql-sys.git /tmp/mysql-sys\n\nADD my.cnf /etc/mysql/my.cnf\n\nADD mysql-init /usr/bin/mysql-init\nRUN chmod +x /usr/bin/mysql-init\nRUN /usr/bin/mysql-init\n\nADD mysql-start /usr/bin/mysql-start\nRUN chmod +x /usr/bin/mysql-start\n\nEXPOSE 22 3306\n\nENTRYPOINT [\"/usr/bin/mysql-start\"]\n\n"
    },
    {
        "filename": "c6f9d83b0c2bdf239c34f584cf521c08a6526efc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:xenial\nMAINTAINER The Apache Mesos Developers <dev@mesos.apache.org>\n\nWORKDIR /tmp/build\n\n# Build Mesos-flavored `clang-tidy`.\nRUN apt-get update && \\\n  apt-get install -qy --no-install-recommends \\\n  build-essential \\\n  ca-certificates \\\n  curl \\\n  git \\\n  python-dev && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Mesos requires at least cmake-3.7.0 on Linux and cmake-3.8.0 on Windows.\n#\n# TODO(abudnik): Skip this step when a newer version of CMake package is\n# available in OS repository.\nRUN curl -sSL https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh \\\n    -o /tmp/install-cmake.sh && \\\n    sh /tmp/install-cmake.sh --skip-license --prefix=/usr/local\n\nRUN \\\n  git clone --depth 1 -b release_70 http://llvm.org/git/llvm /tmp/llvm && \\\n  git clone --depth 1 -b mesos_70 http://github.com/mesos/clang.git /tmp/llvm/tools/clang && \\\n  git clone --depth 1 -b mesos_70 http://github.com/mesos/clang-tools-extra.git /tmp/llvm/tools/clang/tools/extra && \\\n  \\\n  cmake /tmp/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt && \\\n  cmake --build tools/clang/lib/Headers --target install -- -j $(nproc) && \\\n  cmake --build tools/clang/tools/extra/clang-tidy --target install -- -j $(nproc) && \\\n  \\\n  cd / && \\\n  rm -rf /tmp/llvm && \\\n  rm -rf /tmp/build\n\nENV PATH /opt/bin:$PATH\n\n# Install Mesos dependencies\n# TODO(mpark): Remove `libssl-dev` from this list once `MESOS-6942` is resolved.\nRUN apt-get update && \\\n  apt-get install -qy \\\n  autoconf \\\n  libapr1-dev \\\n  libcurl4-nss-dev \\\n  libsasl2-dev \\\n  libsasl2-modules \\\n  libssl-dev \\\n  libsvn-dev \\\n  libtool \\\n  zlib1g-dev && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install `jq` and `parallel` for `clang-tidy` invocation.\nRUN apt-get update && \\\n  apt-get install -qy \\\n  jq \\\n  parallel && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Wire up the script which performs the actual work.\nWORKDIR /BUILD\nADD [\"entrypoint.sh\", \"entrypoint.sh\"]\nCMD exec ./entrypoint.sh\n"
    },
    {
        "filename": "c752dd806b60e73858dbabb173ff91afab96bb6d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest  \n\nRUN apt-get update && apt-get install -y openjdk-7-jre-headless wget\nRUN wget -q -O - http://apache.mirrors.pair.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz | tar -xzf - -C /opt \\\n    && mv /opt/zookeeper-3.4.6 /opt/zookeeper \\\n    && cp /opt/zookeeper/conf/zoo_sample.cfg /opt/zookeeper/conf/zoo.cfg \\\n    && mkdir -p /tmp/zookeeper\n\nENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64\n\nRUN apt-get -y install python\nRUN apt-get -y install python-dev\nRUN apt-get -y install gcc\nRUN apt-get -y install make\nRUN cd /opt/zookeeper/src/c && ./configure && make && make install\n\nADD workspace /opt/workspace\n\nRUN wget https://bootstrap.pypa.io/ez_setup.py -O - | python\nRUN cd /opt/workspace/argparse-1.3.0/ && python setup.py install\nRUN cd /opt/workspace/zkpython-0.4/ && python setup.py install\nRUN cp /opt/workspace/zk_setup.py /opt/\nRUN mkdir /opt/share\n\nENV LD_LIBRARY_PATH /usr/local/lib/\n\nWORKDIR /opt/\n\nADD hadoop-1.2.1 /opt/hadoop-1.2.1\nRUN cp /opt/hadoop-1.2.1/hdfs_setup.py /opt\nRUN /opt/hadoop-1.2.1/bin/hadoop-config.sh\n\nRUN apt-get -y install build-essential\nRUN cd /opt/workspace/zlib-1.2.8 && ./configure && make && make install\nRUN apt-get -y install libssl-dev\nENV PATH /usr/bin:/bin:/opt/hadoop-1.2.1/bin:/usr/local/sbin:/usr/sbin:/sbin\nENV LD_LIBRARY_PATH $JAVA_HOME/jre/lib/amd64/server:$JAVA_HOME/jre/lib/amd64/:/opt/hadoop-1.2.1/c++/Linux-amd64-64/lib:/usr/local/lib/\nRUN cp /opt/workspace/ifconfig /sbin/\n\nADD share/tera /opt/tera\nRUN mv /opt/tera/bin/tera_setup.py /opt\nRUN apt-get -y install vim\n"
    },
    {
        "filename": "c7942c614dfad07924fd685f8d2cd82b9e4e24f6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Peter Lauri <peterlauri@gmail.com>\n\n#######################################################\n# OS Updates and Python packages\n#######################################################\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y\n\nRUN apt-get install -y python-dev python-setuptools nginx supervisor libpq-dev postgresql-client\nRUN easy_install pip\nRUN pip install --upgrade pip\nRUN pip install virtualenv\n\n#######################################################\n# Setting up project virtual environment\n#######################################################\n\nADD requirements /requirements\nRUN virtualenv /app/.vedocker\nRUN /app/.vedocker/bin/pip install -r /requirements/production.txt\n\n#######################################################\n# Adding application code\n#######################################################\n\nADD {{ cookiecutter.source_root }} /app/\nRUN /app/.vedocker/bin/python /app/manage.py collectstatic --noinput\n\n#######################################################\n# Setting up uWSGI with supervisor\n#######################################################\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\nADD docker/supervisor_django.conf /etc/supervisor/conf.d/app.conf\nADD docker/nginx.conf /etc/nginx/sites-available/app.conf\n\nRUN ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled\nRUN rm -f /etc/nginx/sites-enabled/default\n\n\nEXPOSE 80\n\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "c801e0ed5b25c4d54432b6b9f656759b7a71265d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:i386-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.29\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "c815b5b2bd1d7857331ddb8526b874db0838ad3e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "########################################################\n# Dockerfile for ansible-playbook\n# Based on debian\n########################################################\n\nFROM ubuntu\n\nMAINTAINER Ronak Nathani\n\nRUN apt-get update \\\n\t&& apt-get install -y software-properties-common \\\n\t&& apt-add-repository ppa:ansible/ansible \\\n\t&& apt-get update \\\n\t&& apt-get install -y ansible \\\n\t&& apt-get install -y python-pip \\\n\t&& apt-get install -y vim \\\n    && apt-get install -y git\n\nRUN pip install boto\n\nCOPY . /root/ansible-playbook\n\nRUN rm /etc/ansible/hosts\nRUN mkdir /etc/ansible/hosts/\n\nCOPY ansible_example.cfg /etc/ansible/ansible.cfg\nCOPY ec2.py /etc/ansible/hosts/\nCOPY ec2.ini /etc/ansible/hosts/\n"
    },
    {
        "filename": "c82476b692fd797774113b890e29d2737ad60eb0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Usage:\n#\n# cd pyblish-qml\n# docker run --rm -v $(pwd):/pyblish-qml pyblish/pyblish-qml\n\nFROM ubuntu:18.10\n\nMAINTAINER marcus@abstractfactory.io\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    git \\\n    python3-pyqt5 \\\n    python3-pyqt5.qtquick \\\n    python3-pip \\\n    python3-nose && \\\n    pip3 install \\\n        coverage\n\nRUN mkdir /deps && cd /deps && \\\n    git clone https://github.com/pyblish/pyblish-base && \\\n    cd pyblish-base && git checkout 1.4.4\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONPATH=/deps/pyblish-base\n\nWORKDIR /pyblish-qml\nENTRYPOINT nosetests3 \\\n    --verbose \\\n    --with-doctest \\\n    --exe \\\n    --exclude=vendor\n"
    },
    {
        "filename": "c84400a57cbf5991fed73d136fbe621b2338071d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# docker build -t opencog/ros-indigo-blender .\n# xhost +\n# docker run --rm --privileged -i -v /dev/ttyACM0:/dev/ttyACM0 -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -v /dev/dri:/dev/dri -v /dev/shm:/dev/shm -e DISPLAY=:0.0 -p 33433:33433/udp -t opencog/ros-indigo-blender \n# Note: port 33433=faceshift, /dev/ttyACM0=pololu, /dev/dri=gpu, /dev/shm=gpu\n### Blender: click Run Script\n### Blender: right-click & drag target (blue cube)\n# ToDo: add MORSE robot simulator\n#       replace faceshift with OpenCV FaceRecognizer, etc.\n\nFROM opencog/ros-indigo-dev\nMAINTAINER Mandeep Singh Bhatia \"mandeep.singh.bhatia@gmail.com\"\nMAINTAINER David Hart \"dhart@opencog.org\"\n\nRUN apt-get -y update\nRUN apt-get -y install blender\n\nRUN apt-get -y install python3-yaml python3-pip\nRUN pip3 install rospkg catkin_pkg\n\nRUN echo source /catkin_ws/devel/setup.bash >> /.bash_profile && \\\n    echo -e \"\\e[1;34m[$SELF_NAME] catkin devel setup\\.bash sourced\\e[0m\"\n\nWORKDIR /catkin_ws/src\nRUN cp /opt/ros/indigo/setup.sh /etc/profile.d/ros_indigo.sh\nENV PYTHONPATH /opt/ros/indigo/lib/python2.7/dist-packages\nRUN /usr/bin/python3 /opt/ros/indigo/bin/catkin_init_workspace\n\nRUN git clone https://github.com/hansonrobotics/robo_blender\nRUN git clone https://github.com/yantrabuddhi/ros_pololu_servo\nRUN git clone https://github.com/yantrabuddhi/ros_nmpt_saliency\nRUN git clone https://github.com/yantrabuddhi/ros_faceshift\nRUN git clone https://github.com/yantrabuddhi/simple_face_tracker\nRUN git clone https://github.com/OctoMap/octomap\n\nWORKDIR /catkin_ws\nRUN bash -l -c \"/usr/bin/python3 /opt/ros/indigo/bin/catkin_make\"\n\nWORKDIR /catkin_ws/src/robo_blender/src\n\nENV STARTSCRIPT \"\\\necho evaluating startup script... &&\\\nsource /catkin_ws/devel/setup.bash &&\\\ntmux new-session -d 'echo -e \\\"\\e[1;34mroscore\\e[0m\\\" ; roscore' &&\\\ntmux set -g set-remain-on-exit on &&\\\ntmux set-option -g set-remain-on-exit on &&\\\ntmux bind-key R respawn-window &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mros_pololu_servo\\e[0m\\\" ;\\\n  rosrun ros_pololu_servo ros_pololu_servo_node' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mblender robo.blend\\e[0m\\\" ;\\\n  sleep 4 && blender robo.blend' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mbash shell\\e[0m\\\" ;\\\n  bash -l -i' &&\\\ntmux select-layout even-vertical &&\\\ntmux attach \\\n\"\n\nCMD /bin/bash -l -c \"eval $STARTSCRIPT\"\n"
    },
    {
        "filename": "c879a477d00703f00ad201d80c77851fda9b7b88.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM 42nerds/android-sdk:latest  \nMAINTAINER 42nerds - Inh. Julian Kaffke <info@42nerds.com>  \n  \nRUN curl -sL https://deb.nodesource.com/setup_5.x > install_node.sh && \\  \nbash install_node.sh && \\  \nrm -f install_node.sh && \\  \napt-get install -y nodejs build-essential && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \n#Install cordova globally  \nRUN npm install -g cordova gulp bower  \nRUN mkdir -p ~/.ssh  \nADD ./ssh_config /root/.ssh/config  \n\n"
    },
    {
        "filename": "c8c694e234d3f4c33441a30dc6de952c70e43c65.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\nMAINTAINER slush@satoshilabs.com\n\nENV DEBIAN_FRONTEND noninteractive\nENV HOME /root\nENV TERM linux\n\nRUN apt-get update && \\\n    apt-get upgrade -qy && \\\n    apt-get install -qy apt-transport-https curl git && \\\n    echo 'deb https://deb.nodesource.com/node_4.x jessie main' | tee /etc/apt/sources.list.d/nodesource.list && \\\n    curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\nRUN apt-get update && \\\n    apt-get -qy install nodejs python make build-essential devscripts dh-systemd\nRUN npm install -g yarn\nADD bitcore-tbcc/ /root/bitcore-tbcc\nRUN ( cd /root/bitcore-tbcc && debuild -uc -us )\n\n"
    },
    {
        "filename": "c8df852899dfaf67c919b1f83d80cb3db105b82b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# This Dockerfile will create an image that allows to generate upstart and\n# systemd scripts (more to come)\n#\n\nFROM\t\tubuntu:12.10\nMAINTAINER\tGuillaume J. Charmes <guillaume@docker.com>\n\nRUN\t\tapt-get update && apt-get install -y wget git mercurial\n\n# Install Go\nRUN\t\twget --no-check-certificate https://go.googlecode.com/files/go1.1.2.linux-amd64.tar.gz -O go-1.1.2.tar.gz\nRUN\t\ttar -xzvf go-1.1.2.tar.gz && mv /go /goroot\nRUN\t\tmkdir /go\n\nENV\t\tGOROOT\t  /goroot\nENV\t\tGOPATH\t  /go\nENV\t\tPATH\t  $GOROOT/bin:$PATH\n\nRUN\t\tgo get github.com/docker/docker && cd /go/src/github.com/docker/docker && git checkout v0.6.3\nADD\t\tmanager.go\t/manager/\nRUN\t\tcd /manager && go build -o /usr/bin/manager\n\nENTRYPOINT\t[\"/usr/bin/manager\"]\n\n"
    },
    {
        "filename": "c94408a6245c7a644fc2158f1bd76cbbfbb8b482.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER mmoroz@chromium.org\nRUN apt-get update && apt-get install -y python3-pip pkg-config zlib1g-dev && \\\n    pip3 install meson ninja\nRUN git clone --depth 1 https://github.com/khaledhosny/ots.git\nWORKDIR ots\nRUN git submodule update --init --recursive\nCOPY build.sh ots-fuzzer.* $SRC/\n"
    },
    {
        "filename": "c9b97ce5cd2c510e72529fece4dd51d673448bd0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Creates an image with the required set up for Fish Plays Pok\u00e9mon to run.\nFROM phusion/baseimage:0.9.15\nMAINTAINER Patrick Facheris <plfacheris@gmail.com>\nENV HOME /root\nENV DISPLAY :0\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n# Update Repository Listings\nRUN apt-add-repository multiverse && apt-get -qq update && apt-get -qq -y install \\\n    git \\\n    zip \\\n    unzip \\\n    wget \\\n    xvfb \\\n    pulseaudio \\\n    xdotool \\\n    python python-dev python-distribute python-pip \\\n    build-essential pkg-config libasound2-dev libcdio-dev libsdl1.2-dev libsdl-net1.2-dev libsndfile1-dev zlib1g-dev \\\n    libtiff5-dev libjpeg8-dev zlib1g-dev \\\n    libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk && \\\n    apt-get -qq -y clean\n\n\n# Install OpenCV\nWORKDIR /tmp\nRUN git clone https://github.com/jayrambhia/Install-OpenCV.git && chmod +x /tmp/Install-OpenCV/*/*.sh\nWORKDIR /tmp/Install-OpenCV/Ubuntu\nRUN /bin/bash ./2.4/opencv2_4_9.sh\nWORKDIR /\n\n# Install FFMPEG\nRUN add-apt-repository ppa:jon-severinsson/ffmpeg && apt-get -qq update && apt-get -qq -y install \\\n    ffmpeg && apt-get -qq -y clean\n\n# Configure XVFB\nRUN mkdir /etc/service/xvfb\nADD environment/xvfb.sh /etc/service/xvfb/run\nRUN chmod +x /etc/service/xvfb/run\n\n# Configure PulseAudio\nRUN mkdir /etc/service/pulseaudio\nADD environment/pulseaudio.sh /etc/service/pulseaudio/run\nRUN chmod +x /etc/service/pulseaudio/run\n\n# Install Gambatte\nWORKDIR /tmp\nADD environment/gambatte gambatte\nWORKDIR /tmp/gambatte\nRUN pip install --egg SCons\nRUN ./build_sdl.sh\nWORKDIR /\nRUN mv /tmp/gambatte/gambatte_sdl/gambatte_sdl /usr/bin/gambatte\n\n# Copy Application Files\nRUN mkdir /whereisthefish\nCOPY . /whereisthefish/\n\n# Install Python Requirements\nWORKDIR /whereisthefish\nRUN pip install -r requirements.txt\n\n# Clean Unused\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "c9d9ec90b8623257e552228b6af69de622085ce6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile for building Mesos from source\n#\n# Create snapshot builds with:\n# docker build -t mesos/mesos:git-`git rev-parse --short HEAD` .\n#\n# Run master/slave with:\n# docker run mesos/mesos:git-`git rev-parse --short HEAD` mesos-master [options]\n# docker run mesos/mesos:git-`git rev-parse --short HEAD` mesos-slave [options]\n#\nFROM ubuntu:14.04\nMAINTAINER Gabriel Monroy <gabriel@opdemand.com>\n\n# build packages\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\nRUN apt-get install -yq build-essential autoconf libtool zlib1g-dev\nRUN apt-get install -yq libcurl4-nss-dev libsasl2-dev\nRUN apt-get install -yq openjdk-6-jdk maven\nRUN apt-get install -yq python-dev python-boto\nRUN apt-get install -yq libsvn-dev libapr1-dev\n\n# export environment\nENV JAVA_HOME /usr/lib/jvm/java-6-openjdk-amd64\n\n# include libmesos on library path\nENV LD_LIBRARY_PATH /usr/local/lib\n\n# copy local checkout into /opt\nADD . /opt\n\nWORKDIR /opt\n\n# configure\nRUN ./bootstrap\nRUN mkdir build && cd build && ../configure\n\nWORKDIR /opt/build\n\n# build and cleanup in a single layer\nRUN make -j4 install && cd / && rm -rf /opt\n\nWORKDIR /\n"
    },
    {
        "filename": "cad822af767fcf3a9de4a42751f53f94e658d409.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM continuumio/miniconda3\n\n# docker build -t vanessa/watchme .\n\nRUN apt-get update && apt-get install -y git gcc && \\\n    mkdir -p /code\nADD . /code\nWORKDIR /code\nRUN pip install .[all]\nENTRYPOINT [\"watchme\"]\n"
    },
    {
        "filename": "cbfbeb05bad6cbdd072647de0fca44658fcc4fb0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM docker.io/phusion/baseimage:0.9.21\nMAINTAINER Li Meng Jun <lmjubuntu@gmail.com>\n\nRUN apt-get update && apt-get install -y python3-pip git python-pip python\n\nRUN pip3 install beautifulsoup4 anymarkup\n\nADD bootstrap.py /usr/local/bin/bootstrap.py\n\nWORKDIR /tmp\n\nCMD /usr/local/bin/bootstrap.py\n"
    },
    {
        "filename": "9988f3b78339425a9b17e6e3f8c33801d7c71b7d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Hooram Nam <nhooram@gmail.com>\n\nENV MAPZEN_API_KEY mapzen-XXXX\nENV MAPBOX_API_KEY mapbox-XXXX\nENV ALLOWED_HOSTS=*\n\nRUN apt-get update && \\\n    apt-get install -y \\\n    libsm6 \\\n    libboost-all-dev \\\n    libglib2.0-0 \\\n    libxrender-dev \\\n    wget \\\n    curl \\\n    nginx \n\nRUN apt-get install -y bzip2\n\n\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b -p /miniconda\n# RUN apt-get install libopenblas-dev liblapack-dev\nRUN /miniconda/bin/conda install -y faiss-cpu -c pytorch\nRUN /miniconda/bin/conda install -y cython\n\n# Build and install dlib\nRUN apt-get update && \\\n    apt-get install -y cmake git build-essential && \\\n    git clone https://github.com/davisking/dlib.git && \\\n    mkdir /dlib/build && \\\n    cd /dlib/build && \\\n    cmake .. -DDLIB_USE_CUDA=0 -DUSE_AVX_INSTRUCTIONS=0 && \\\n    cmake --build . && \\\n    cd /dlib && \\\n    /miniconda/bin/python setup.py install --no USE_AVX_INSTRUCTIONS --no DLIB_USE_CUDA \n\nRUN /miniconda/bin/conda install -y pytorch=0.4.1 -c pytorch\n# RUN /venv/bin/pip install http://download.pytorch.org/whl/cpu/torch-0.4.1-cp35-cp35m-linux_x86_64.whl && /venv/bin/pip install torchvision\nRUN /miniconda/bin/conda install -y psycopg2\n\nRUN mkdir /code\nWORKDIR /code\nCOPY requirements.txt /code/\nRUN /miniconda/bin/pip install -r requirements.txt\n\nRUN /miniconda/bin/python -m spacy download en_core_web_sm\n\nWORKDIR /code/api/places365\nRUN wget https://s3.eu-central-1.amazonaws.com/ownphotos-deploy/places365_model.tar.gz\nRUN tar xf places365_model.tar.gz\n\nWORKDIR /code/api/im2txt\nRUN wget https://s3.eu-central-1.amazonaws.com/ownphotos-deploy/im2txt_model.tar.gz\nRUN tar xf im2txt_model.tar.gz\nRUN wget https://s3.eu-central-1.amazonaws.com/ownphotos-deploy/im2txt_data.tar.gz\nRUN tar xf im2txt_data.tar.gz\n\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get remove --purge -y cmake git && \\\n    rm -rf /var/lib/apt/lists/*\n\nVOLUME /data\n\n# Application admin creds\nENV ADMIN_EMAIL admin@dot.com\nENV ADMIN_USERNAME admin\nENV ADMIN_PASSWORD changeme\n\n# Django key. CHANGEME\nENV SECRET_KEY supersecretkey\n# Until we serve media files properly (django dev server doesn't serve media files with with debug=false)\nENV DEBUG true \n\n# Database connection info\nENV DB_BACKEND postgresql\nENV DB_NAME ownphotos\nENV DB_USER ownphotos\nENV DB_PASS ownphotos\nENV DB_HOST database\nENV DB_PORT 5432\n\nENV BACKEND_HOST localhost\nENV FRONTEND_HOST localhost\n\n# REDIS location\nENV REDIS_HOST redis\nENV REDIS_PORT 11211\n\n# Timezone\nENV TIME_ZONE UTC\n\nEXPOSE 80\nCOPY . /code\n\n\nRUN mv /code/config_docker.py /code/config.py\n\nWORKDIR /code\n\nENTRYPOINT ./entrypoint.sh\n"
    },
    {
        "filename": "99a4ccaa48f3fe100f2b39ec175ffbe46cbd9e4d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu  \nMAINTAINER Takashi Takebayashi <changesworlds@gmail.com>  \n  \n# Install packages for JDK, Scala, npm, Node.js  \n# Update-alternative nodojs to node  \n# Update npm  \n# Install sbt  \n# Install the agent installer  \n# Create Agent  \nRUN apt-get update && \\  \napt-get install -y --force-yes \\  \ncurl \\  \ndefault-jdk \\  \ngit \\  \nnodejs \\  \nnpm \\  \nscala \\  \nwget && \\  \nupdate-alternatives --install /usr/bin/node node /usr/bin/nodejs 10 && \\  \nnpm install npm -g && \\  \nwget https://dl.bintray.com/sbt/debian/sbt-0.13.9.deb && \\  \napt-get update && \\  \ndpkg -i sbt-0.13.9.deb && \\  \nsbt && \\  \nnpm install -g vsoagent-installer && \\  \nmkdir /opt/myagent && \\  \ncd /opt/myagent && \\  \nvsoagent-installer && \\  \necho \"vsoagent\\nvsoagent\\n\\n\\n\\n\\n\\n\\n\" | adduser vsoagent && \\  \nchown -R vsoagent /opt/myagent  \n  \nWORKDIR /opt/myagent  \nENTRYPOINT /bin/bash  \n\n"
    },
    {
        "filename": "99a715f11c4467dfc6f81ee4b3af0714525da41e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "#build off of w4sp base image\nFROM w4sp/labs:base\n\nRUN wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -\nRUN echo \"deb http://packages.elastic.co/elasticsearch/2.x/debian stable main\" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list\n\nRUN apt-get update -q\nRUN sudo apt-get install elasticsearch\nRUN apt-get -y install default-jre-headless\n\nENV KIBANA_VERSION 4.4.1 \n\nRUN cd /tmp && \\\n    wget -nv https://download.elastic.co/kibana/kibana/kibana-${KIBANA_VERSION}-linux-x64.tar.gz && \\\n    tar zxf kibana-${KIBANA_VERSION}-linux-x64.tar.gz && \\\n    rm -f kibana-${KIBANA_VERSION}-linux-x64.tar.gz && \\\n    mv /tmp/kibana-${KIBANA_VERSION}-linux-x64 /kibana\n\nRUN echo 'network.host: 0.0.0.0' >> /etc/elasticsearch/elasticsearch.yml\n\n#add supervisor conf to start kibana and es\nADD supervisor_elk.conf /etc/supervisor/conf.d/supervisor_elk.conf\n"
    },
    {
        "filename": "9a101180f64fac00f866e6b6f875df66834bba19.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockcross/base:latest\nMAINTAINER Matt McCormick \"matt.mccormick@kitware.com\"\nRUN \\\n  sed -i '/debian-security/d' /etc/apt/sources.list && \\\n  dpkg --add-architecture arm64 && \\\n  apt-get update\n\n# The cross-compiling emulator\nRUN apt-get update && apt-get install -y \\\n  qemu-user \\\n  qemu-user-static \\\n  unzip\n\nENV CROSS_TRIPLE=aarch64-linux-android\nENV CROSS_ROOT=/usr/${CROSS_TRIPLE}\nENV AS=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-as \\\n    AR=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ar \\\n    CC=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-clang \\\n    CPP=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-cpp \\\n    CXX=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-clang++ \\\n    LD=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ld \\\n    FC=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-gfortran\n\nENV ANDROID_NDK_REVISION 16b\nENV ANDROID_NDK_API 21\nRUN mkdir -p /build && \\\n    cd /build && \\\n    curl -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    unzip ./android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    cd android-ndk-r${ANDROID_NDK_REVISION} && \\\n    ./build/tools/make_standalone_toolchain.py \\\n      --arch arm64 \\\n      --api ${ANDROID_NDK_API} \\\n      --stl=libc++ \\\n      --install-dir=${CROSS_ROOT} && \\\n    cd / && \\\n    rm -rf /build && \\\n    find ${CROSS_ROOT} -exec chmod a+r '{}' \\; && \\\n    find ${CROSS_ROOT} -executable -exec chmod a+x '{}' \\;\n\n\nCOPY Toolchain.cmake ${CROSS_ROOT}/\nENV CMAKE_TOOLCHAIN_FILE ${CROSS_ROOT}/Toolchain.cmake\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG IMAGE=dockcross/android-arm64\nARG VERSION=latest\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\"\nENV DEFAULT_DOCKCROSS_IMAGE ${IMAGE}:${VERSION}\n"
    },
    {
        "filename": "9a1799bcc5f845fd23a9af3e994bd2aa8eebd921.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Universal image for running Notebook, Dask pipelines, libs, and lint checkers\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\nARG PYTHON=python3\nARG PIP=pip3\n\nLABEL \\\n      author=\"Piers Harding <piers.harding@catalyst.net.nz>\" \\\n      description=\"ARL reference image\" \\\n      license=\"Apache2.0\" \\\n      registry=\"library/piersharding/arl\" \\\n      vendor=\"Catalyst\" \\\n      org.skatelescope.team=\"Systems Team\" \\\n      org.skatelescope.version=\"0.1.0\" \\\n      org.skatelescope.website=\"http://github.com/SKA-ScienceDataProcessor/algorithm-reference-library/\"\n\n# Set environment variables for pipenv execution:\n#\n# * LC_ALL and LANG: Pipenv (specifically, its Click dependency) exits with an\n#   error unless the language encoding is set.\n# * PIPENV_TIMEOUT: increased Pipenv timeout as locking dependencies takes\n#   *forever* inside a Docker container.\n# * PATH: puts virtualenv python/pip/pipenv first on path\n# * VIRTUAL_ENV: for completeness. This environment variable would have been\n#   set by 'source /venv/bin/activate'\n# * PIPENV_VERBOSITY: hides warning about pipenv running inside a virtualenv.\n# * PIPENV_NOSPIN: disables animated spinner for cleaner CI logs\n#\nENV LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    PIPENV_TIMEOUT=900 \\\n    PATH=/arl/venv/bin:$PATH \\\n    VIRTUAL_ENV=/arl/venv \\\n    PIPENV_VERBOSITY=-1 \\\n    PIPENV_NOSPIN=1 \\\n    HOME=/root \\\n    DEBIAN_FRONTEND=noninteractive\n\n# the package basics for Python 3\nRUN \\\n    apt-get update -y && \\\n    apt-get install -y software-properties-common pkg-config dirmngr \\\n            python3-software-properties build-essential curl wget fonts-liberation ca-certificates libcfitsio-dev libffi-dev && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 && \\\n    apt-get install -y git-lfs && \\\n    git lfs install && \\\n    apt-get install -y $PYTHON-dev $PYTHON-tk flake8 $PYTHON-nose \\\n            virtualenv virtualenvwrapper && \\\n    apt-get install -y graphviz && \\\n    apt-get install -y nodejs npm && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n\n# node node is linked to nodejs\nRUN if [ ! -f /usr/bin/node ]; then ln -s /usr/bin/nodejs /usr/bin/node ; fi && \\\n    node --version\n\n# sort out pip and python for 3.x\nRUN cd /src; wget https://bootstrap.pypa.io/get-pip.py && $PYTHON get-pip.py; \\\n    rm -rf /root/.cache\n\n# Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\nRUN mkdir -p /arl\n\nWORKDIR /arl\nRUN virtualenv -p $PYTHON ${VIRTUAL_ENV}\n\n# Install pipenv into the new virtual environment\nRUN pip install pipenv; rm -rf /root/.cache\n\n# Copy the Pipfile and frozen hashes (Pipfile.lock) across to the image so\n# that pipenv knows what to install\nCOPY Pipfile /src/Pipfile\nCOPY Pipfile.lock /src/Pipfile.lock\n\n# Install ARL dependencies into the virtual environment.\nRUN cd /src; pipenv install --dev; rm -rf /root/.cache\n\n\n# Add and install Jupyter dependencies\nRUN $PIP install bokeh && $PIP install pytest; $PIP install jupyter_nbextensions_configurator; $PIP install jupyter_contrib_nbextensions; rm -rf /root/.cache\nRUN $PIP install -U pylint; rm -rf /root/.cache\nRUN jupyter contrib nbextension install --system --symlink\nRUN jupyter nbextensions_configurator enable --system\n\n# runtime specific environment\nENV JENKINS_URL 1\nENV PYTHONPATH /arl\nENV ARL /arl\nENV JUPYTER_PATH /arl/examples/arl\n\nRUN touch \"${HOME}/.bash_profile\"\n\n# Bundle app source\n# COPY limited by /.dockerignore\nCOPY ./docker/boot.sh ./Makefile ./setup.py /arl/\nCOPY . /arl/\n\n# run setup\nRUN \\\n    cd /arl && \\\n    $PYTHON setup.py build && \\\n    $PYTHON setup.py install && \\\n    cp ./build/lib.*/*.so . && \\\n    cd /arl/workflows/ffiwrapped/serial && \\\n    make && \\\n    $PIP install mpi4py\n\n# create space for libs\nRUN mkdir -p /arl/test_data /arl/test_results && \\\n    chmod 777 /arl /arl/test_data /arl/test_results\n\nCOPY --chown=\"1000:100\" ./docker/jupyter_notebook_config.py \"${HOME}/.jupyter/\"\nCOPY ./docker/notebook.sh /usr/local/bin/\nCOPY ./docker/start-dask-scheduler.sh /usr/local/bin/\nCOPY ./docker/start-dask-worker.sh /usr/local/bin\n\n# We share in the arl data here\nVOLUME [\"/arl/data\", \"/arl/tmp\"]\n\n# Expose Jupyter and Bokeh ports\nEXPOSE  8888 8786 8787 8788 8789\n\n# Setup the entrypoint or environment\nENTRYPOINT [\"tini\", \"--\"]\n\n# Run - default is notebook\nCMD [\"/arl/boot.sh\"]\n"
    },
    {
        "filename": "9a50a9250a0afdb21df36309834d7a0f43a74145.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM        debian\nMAINTAINER  Love Nyberg \"love.nyberg@lovemusic.se\"\n\n# Update the package repository\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\ \n\tDEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y wget curl locales\n\n# Configure timezone and locale\nRUN echo \"Europe/Stockholm\" > /etc/timezone && \\\n\tdpkg-reconfigure -f noninteractive tzdata\nRUN export LANGUAGE=en_US.UTF-8 && \\\n\texport LANG=en_US.UTF-8 && \\\n\texport LC_ALL=en_US.UTF-8 && \\\n\tlocale-gen en_US.UTF-8 && \\\n\tDEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n\n# Added dotdeb to apt\nRUN echo \"deb http://packages.dotdeb.org squeeze all\" >> /etc/apt/sources.list.d/dotdeb.org.list && \\\n\techo \"deb-src http://packages.dotdeb.org squeeze all\" >> /etc/apt/sources.list.d/dotdeb.org.list && \\\n\twget -O- http://www.dotdeb.org/dotdeb.gpg | apt-key add -\n\n# Install PHP 5.5\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y php5-cli php5 php5-mcrypt php5-curl php5-pgsql postgresql-contrib phppgadmin\n \n# Let's set the default timezone in both cli and apache configs\nRUN sed -i 's/\\;date\\.timezone\\ \\=/date\\.timezone\\ \\=\\ Europe\\/Stockholm/g' /etc/php5/cli/php.ini && \\\n\tsed -i 's/\\;date\\.timezone\\ \\=/date\\.timezone\\ \\=\\ Europe\\/Stockholm/g' /etc/php5/apache2/php.ini\n\n# Setup Composer\nRUN curl -sS https://getcomposer.org/installer | php && \\\n\tmv composer.phar /usr/local/bin/composer\n\n# Setup conf for Zend Framework\nRUN sed -i 's/;include_path = \".:\\/usr\\/share\\/php\"/include_path = \".:\\/var\\/www\\/library\"/g' /etc/php5/cli/php.ini && \\\n\tsed -i 's/\\;include_path = \".:\\/usr\\/share\\/php\"/include_path = \".:\\/var\\/www\\/library\"/g' /etc/php5/apache2/php.ini\n\n# Activate a2enmod\nRUN a2enmod rewrite\n\n# Fix phppgadmin\nADD ./phppgadmin.conf /etc/apache2/conf.d/phppgadmin\nADD ./config.inc.php /usr/share/phppgadmin/conf/config.inc.php\nRUN sed -i 's/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/g' /etc/php5/apache2/php.ini \n\n# Set Apache environment variables (can be changed on docker run with -e)\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\nENV APACHE_PID_FILE /var/run/apache2.pid\nENV APACHE_RUN_DIR /var/run/apache2\nENV APACHE_LOCK_DIR /var/lock/apache2\nENV APACHE_SERVERADMIN admin@localhost\nENV APACHE_SERVERNAME localhost\nENV POSTGRES_DEFAULTDB defaultdb\nENV POSTGRES_HOST localhost\nENV POSTGRES_PORT 5432\n\nEXPOSE 80\nADD start.sh /start.sh\nRUN chmod 0755 /start.sh\nCMD [\"bash\", \"start.sh\"]"
    },
    {
        "filename": "9a72f5e5bf700379f68b71c8c47bc07a6c31b161.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\n# ========== Anaconda ==========\n# https://github.com/ContinuumIO/docker-images/blob/master/anaconda/Dockerfile\nRUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git mercurial subversion\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget  --no-check-certificate --quiet https://repo.continuum.io/archive/Anaconda2-2.5.0-Linux-x86_64.sh && \\\n    /bin/bash /Anaconda2-2.5.0-Linux-x86_64.sh -b -p /opt/conda && \\\n    rm /Anaconda2-2.5.0-Linux-x86_64.sh\n\nRUN apt-get update --fix-missing && apt-get -y install autotools-dev autoconf\n\nRUN apt-get install -y curl grep sed dpkg && \\\n    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` && \\\n    curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb && \\\n    apt-get clean\n\nENV PATH /opt/conda/bin:$PATH\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n\n# ========== Special Deps ==========\nRUN apt-get -y install git make cmake unzip\nRUN pip install awscli\n# ALE requires zlib\nRUN apt-get -y install zlib1g-dev\n# MUJOCO requires graphics stuff (Why?)\n# RUN apt-get -y build-dep glfw\n# RUN apt-get -y install libxrandr2 libxinerama-dev libxi6 libxcursor-dev\n# copied from requirements.txt\n# RUN pip install imageio tabulate nose\n# RUN apt-get install -y vim ack-grep\n# RUN pip install --upgrade pip\n# usual pip install pygame will fail\n# RUN apt-get build-dep -y python-pygame\n# RUN pip install Pillow\n\n# ========== SUMO =================\n\nENV SUMO_SRC sumo\nENV SUMO_HOME /opt/sumo\n\n# Install system dependencies.\nRUN apt-get update && apt-get -y install -qq \\\n    g++ libxerces-c3.1 libxerces-c3-dev \\\n    libproj-dev proj-bin proj-data libtool libgdal1-dev \\\n    libfox-1.6-0 libfox-1.6-dev\n\n\n# Download SUMO nightly build\n# Download SUMO nightly build\nRUN git clone https://github.com/DLR-TS/sumo.git\nRUN mv $SUMO_SRC $SUMO_HOME\nRUN cd $SUMO_HOME && git checkout 1d4338ab80\n\nRUN cd $SUMO_HOME && wget https://s3-us-west-1.amazonaws.com/cistar.patch/tmp.patch && patch -p1 < tmp.patch\n\n# Install SUMO\nRUN cd $SUMO_HOME && make -f Makefile.cvs && ./configure && make -j8 && make install\n\n# RUN echo \"export PYTHONPATH=\\\"/opt/sumo/sumo/tools\\\"\" >> /root/.bashrc\nENV PYTHONPATH $SUMO_HOME/tools:$PYTHONPATH\n\n# Ensure the installation works. If this call fails, the whole build will fail.\nRUN sumo\n\n# ========== OpenAI Gym ==========\nRUN apt-get -y update --fix-missing \nRUN apt-get -y install libgtk2.0-0\nRUN pip install gym\n#RUN apt-get -y install ffmpeg\nRUN apt-get -y install libav-tools\nCMD alias ffmpeg=\"avconv\"\n\n# ========== Add codebase stub ==========\nCMD mkdir /root/code\nADD environment.yml /root/code/environment.yml\nRUN conda env create -f /root/code/environment.yml\n\nENV PYTHONPATH /root/code/rllab/flow:$PYTHONPATH\nENV PYTHONPATH /root/code/flow:$PYTHONPATH\nENV PYTHONPATH /root/code/rllab:$PYTHONPATH\nENV PYTHONPATH /root/code/rllab/learning-traffic:$PYTHONPATH\nENV PATH /opt/conda/envs/flow/bin:$PATH\nRUN echo \"source activate flow\" >> /root/.bashrc\nRUN echo \"source activate flow\"\nENV BASH_ENV /root/.bashrc\nWORKDIR /root/code\n\nRUN apt-get install -y libopenblas-dev\nRUN printf \"[blas]\\nldflags = -lopenblas\\n\" > ~/.theanorc\nRUN conda env list\n"
    },
    {
        "filename": "9b41321ed0d891c99afc3853a88e9fa7a5c0cbc6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM node:latest\n\nRUN apt-get update; apt-get -y upgrade; apt-get clean\n\nRUN apt-get install -y git curl wget tar make; apt-get clean\n\nRUN apt-get install -y sqlite3 libsqlite3-dev; apt-get clean\n\nRUN apt-get install -y mysql-client libmysqlclient-dev; apt-get clean\n\nRUN apt-get install -y jq; apt-get clean\n\nRUN apt-get install -y postgresql-9.3 postgresql-client-9.3 libpq-dev; apt-get clean\n\nRUN apt-get install -y sudo; apt-get clean\n\n# azure command line\nRUN npm install -g azure-cli\n\n# chruby\nRUN mkdir /tmp/chruby && \\\n    cd /tmp && \\\n    curl https://codeload.github.com/postmodern/chruby/tar.gz/v0.3.9 | tar -xz && \\\n    cd /tmp/chruby-0.3.9 && \\\n    sudo ./scripts/setup.sh && \\\n    rm -rf /tmp/chruby\n\n# ruby-install\nRUN mkdir /tmp/ruby-install && \\\n    cd /tmp && \\\n    curl https://codeload.github.com/postmodern/ruby-install/tar.gz/v0.5.0 | tar -xz && \\\n    cd /tmp/ruby-install-0.5.0 && \\\n    sudo make install && \\\n    rm -rf /tmp/ruby-install\n\n# ruby\nRUN ruby-install ruby 2.2.4\n\n# Bundler and BOSH CLI\nRUN /bin/bash -l -c \"source /etc/profile.d/chruby.sh ;  \\\n                     chruby 2.2.4 ;                     \\\n                     gem install bundler bosh_cli --no-ri --no-rdoc\"\n\n"
    },
    {
        "filename": "9bf2fdd123c716d0b0d0797c8b21f49d949f382c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.18.1\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "9c2a834dd89449ae9bab63287e3716ec5823c592.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# This Dockerfile specifies the recipe for creating an image for the tests\n# to run in.\n#\n# We install as many test dependencies here as we can, because these setup\n# steps can be cached.  They do *not* run every time we run the build.\n# The Docker image is only rebuilt when the Dockerfile (ie. this file)\n# changes.\n\n# Base Dockerfile for gRPC dev images\nFROM debian:latest\n\n# Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n\n# Apt source for Oracle Java.\nrun echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && \\\n  echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n\n# Apt source for Mono\nrun echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list && \\\n  echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n\n# Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n# (Ubuntu instructions need apt to support https)\nRUN apt-get update && apt-get install -y curl libunwind8 gettext && \\\n  curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 && \\\n  mkdir -p /opt/dotnet && tar zxf dotnet.tar.gz -C /opt/dotnet && \\\n  ln -s /opt/dotnet/dotnet /usr/local/bin\n\n# Install dependencies.  We start with the basic ones require to build protoc\n# and the C++ build\nRUN apt-get update && apt-get install -y \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  bzip2 \\\n  ccache \\\n  curl \\\n  gcc \\\n  git \\\n  libc6 \\\n  libc6-dbg \\\n  libc6-dev \\\n  libgtest-dev \\\n  libtool \\\n  make \\\n  parallel \\\n  time \\\n  wget \\\n  # -- For csharp --\n  mono-devel \\\n  referenceassemblies-pcl \\\n  nunit \\\n  # -- For all Java builds -- \\\n  maven \\\n  # -- For java_jdk6 -- \\\n  #   oops! not in jessie. too old? openjdk-6-jdk \\\n  # -- For java_jdk7 -- \\\n  openjdk-7-jdk \\\n  # -- For java_oracle7 -- \\\n  oracle-java7-installer \\\n  # -- For python / python_cpp -- \\\n  python-setuptools \\\n  python-pip \\\n  python-dev \\\n  python2.6-dev \\\n  python3.3-dev \\\n  python3.4-dev \\\n  # -- For Ruby --\n  ruby \\\n  && apt-get clean\n\n##################\n# C# dependencies\n\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n\n##################\n# Python dependencies\n\n# These packages exist in apt-get, but their versions are too old, so we have\n# to get updates from pip.\n\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n\n##################\n# Ruby dependencies\n\n# Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN \\curl -sSL https://get.rvm.io | bash -s stable\n\n# Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n\n##################\n# Java dependencies\n\n# This step requires compiling protoc. :(\n\nENV MAVEN_REPO /var/maven_local_repository\nENV MVN mvn --batch-mode\n\nRUN cd /tmp && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf && \\\n  ./autogen.sh && \\\n  ./configure && \\\n  make -j4 && \\\n  cd java && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO && \\\n  cd ../javanano && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n\n##################\n# Go dependencies.\nRUN apt-get install -y  \\\n  # -- For go -- \\\n  golang\n\n##################\n# Javascript dependencies.\nRun apt-get install -y \\\n  # -- For javascript -- \\\n  npm\n\n# On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n# is taken by another legacy binary. We don't have that legacy binary and\n# npm expects the binary to be named 'node', so we just create a symbol\n# link here.\nRUN ln -s `which nodejs` /usr/bin/node\n\n##################\n# Prepare ccache\n\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n\n# Define the default command.\nCMD [\"bash\"]\n"
    },
    {
        "filename": "9c40a555078b690a38c720315523cc1ef4878c3f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.04\n\nMAINTAINER Anciety <anciety512@gmail.com>\n\n\n# Apt packages\nRUN dpkg --add-architecture i386 && apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -qy \\\n    git nasm  python \\\n    build-essential \\\n    python-dev python-pip python-setuptools \\\n    libc6-dbg \\\n    libc6-dbg:i386 \\\n    gcc-multilib \\\n    gdb-multiarch \\\n    gcc \\\n    wget \\\n    curl \\\n    glibc-source \\\n    cmake \\\n    python-capstone \\\n    socat \\\n    netcat \\\n    ruby \\\n    lxterminal && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    cd ~ && tar -xvf /usr/src/glibc/glib*.tar.xz\n\n# python/ruby packages & gdb-plugin\nRUN pip install --no-cache-dir pwntools ropper ancypatch && \\\n    gem install one_gadget && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# git installaing package\nRUN cd ~/ && \\\n    git clone https://github.com/pwndbg/pwndbg.git && \\\n    cd ~/pwndbg/ && ./setup.sh && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV LANG C.UTF-8\n\nCOPY ./notiterm.py /usr/local/bin/notiterm\n\nVOLUME [\"/pwn\"]\nWORKDIR /pwn\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "9cdcf14f6ce23bca873d64d9817bfe01116942f2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.10\n\nRUN apt-get update && apt-get install -y make gcc net-tools build-essential libtool ruby\n\nMAINTAINER kingdz\n\nADD soft /usr/local/src/\n\nWORKDIR /usr/local/src/\n\nRUN tar -zxf redis-3.0.0.tar.gz && \\\n\trm -f redis-3.0.0.tar.gz && \\\n\tgem install redis && \\\n\tcd redis-3.0.0 && \\\n\tmake && \\\n\tmake install && \\\n\n#\u642d\u5efa\u96c6\u7fa4\u7684\u51c6\u5907\u5de5\u4f5c\n\tcp src/redis-trib.rb /usr/local/bin/ && \\\n\tcd .. && \\\n\tmkdir redis_cluster && \\\n\tcd redis_cluster && \\\n\tmkdir 7001 && \\\n\tmkdir 7002 && \\\n\tmkdir 7003 && \\\n\tcd /usr/local/src/ && \\\n\tmv redis-7001.conf redis_cluster/7001/ && \\\n\tmv redis-7002.conf redis_cluster/7002/ && \\\n\tmv redis-7003.conf redis_cluster/7003/ && \\\n\tchmod u+x three-single-cluster.sh\n"
    },
    {
        "filename": "9ce94cb08c90acc143a91eb31bf5449be79989fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# NGINX image with build artifact\n\nFROM nginx:latest\n\nMAINTAINER Gary A. Stafford <garystafford@rochester.rr.com>\nENV REFRESHED_AT 2016-09-17\n\nENV GITHUB_REPO https://github.com/garystafford/spring-music/raw/build-artifacts\nENV STATIC_FILE spring-music-static.zip\n\nRUN apt-get update -qq \\\n  && apt-get install -qqy curl wget unzip nano \\\n  && apt-get clean \\\n  \\\n  && wget -O /tmp/${STATIC_FILE} ${GITHUB_REPO}/${STATIC_FILE} \\\n  && unzip /tmp/${STATIC_FILE} -d /usr/share/nginx/assets/\n\nCOPY default.conf /etc/nginx/conf.d/default.conf\n\n# tweak nginx image set-up, remove log symlinks\nRUN rm /var/log/nginx/access.log /var/log/nginx/error.log\n\n# install Filebeat\nENV FILEBEAT_VERSION=filebeat_1.2.3_amd64.deb\nRUN curl -L -O https://download.elastic.co/beats/filebeat/${FILEBEAT_VERSION} \\\n && dpkg -i ${FILEBEAT_VERSION} \\\n && rm ${FILEBEAT_VERSION}\n\n# configure Filebeat\nADD filebeat.yml /etc/filebeat/filebeat.yml\n\n# CA cert\nRUN mkdir -p /etc/pki/tls/certs\nADD logstash-beats.crt /etc/pki/tls/certs/logstash-beats.crt\n\n# start Filebeat\nADD ./start.sh /usr/local/bin/start.sh\nRUN chmod +x /usr/local/bin/start.sh\nCMD [ \"/usr/local/bin/start.sh\" ]\n"
    },
    {
        "filename": "9dc65f05f9e932157c793d79aa88f2f736a410e8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \nMAINTAINER Ambroise Maupate <ambroise@rezo-zero.com>  \nLABEL description=\"Backup a data-oriented container and a \\  \nMariaDB/MySQL container and upload them to a FTP server using lftp.\" \\  \nvendor=\"Ambroise Maupate\"  \n  \nADD conf /conf  \n  \nENV DEBIAN_FRONTEND noninteractive  \nENV FTP_USER user  \nENV FTP_PASS pass  \nENV FTP_HOST mybackupserver.test  \nENV FTP_PORT 21  \nENV FTP_PROTO ftp  \nENV LOCAL_PATH /data  \nENV REMOTE_PATH /my/backup/dir  \n  \nRUN apt-get update -yqq && \\  \napt-get install -y ca-certificates openssh-client mysql-client lftp && \\  \nmkdir -p /backups  \n  \nADD etc/lftp.conf /etc/lftp.conf  \n  \nCMD [\"/bin/bash\",\"/conf/doBackup.sh\"]  \n\n"
    },
    {
        "filename": "9f59c6dd27b6d244d240838d681079cacf48d393.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# DO NOT EDIT FILES CALLED 'Dockerfile'; they are automatically\n# generated. Edit 'Dockerfile.in' and generate the 'Dockerfile'\n# with the 'rake' command.\n\n# The suggested name for this image is: bioconductor/release_base.\n\nFROM rocker/rstudio:3.6.0\n\n# FIXME? in release, default CRAN mirror is set to rstudio....should it be fhcrc?\n\nMAINTAINER maintainer@bioconductor.org\n\n# nuke cache dirs before installing pkgs; tip from Dirk E fixes broken img\nRUN  rm -f /var/lib/dpkg/available && rm -rf  /var/cache/apt/*\n\n\n# temporarily (?) change mirror used\n# RUN sed -i.bak 's!http://httpredir.debian.org/debian jessie main!http://mirrors.kernel.org/debian jessie main!' /etc/apt/sources.list\n\n# temporarily (?) remove explicit jessie source\n#RUN sed -i.bak -e '/deb http:..ftp.de.debian.org.debian jessie main/d' /etc/apt/sources.list\n\n# currently unstable option not available\n\n\n\nRUN apt-get update && \\\n    apt-get -y  install --fix-missing gdb libxml2-dev python-pip libz-dev libmariadb-client-lgpl-dev\n    # valgrind\n\n\nRUN pip install awscli\n\n\n\n\n# requested install \nRUN apt-get update && apt-get -y install libpng-dev\n\n# install headers needed for Rhtslib\nRUN apt-get update && apt-get -y install libbz2-dev liblzma-dev\n\n\n\nADD install.R /tmp/\n\nRUN R -f /tmp/install.R\n\n# Add bioc user as requested\nRUN useradd -ms /bin/bash -d /home/bioc bioc\nRUN echo \"bioc:bioc\" | chpasswd && adduser bioc sudo\nUSER bioc\nRUN mkdir -p /home/bioc/R/library && \\\n        echo \"R_LIBS=/usr/local/lib/R/host-site-library:~/R/library\" | cat > /home/bioc/.Renviron \nUSER root\n\nRUN echo \"R_LIBS=/usr/local/lib/R/host-site-library:\\${R_LIBS}\" > /usr/local/lib/R/etc/Renviron.site\nRUN echo \"R_LIBS_USER=''\" >> /usr/local/lib/R/etc/Renviron.site\nRUN echo \"options(defaultPackages=c(getOption('defaultPackages'),'BiocManager'))\" >> /usr/local/lib/R/etc/Rprofile.site\n\n"
    },
    {
        "filename": "9fb21a30d7139c62d48e6bcb75c42bbe7ea110c4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM    ubuntu\nMAINTAINER      ilya@weave.works\n\nRUN     apt-get -y update \nRUN     apt-get -y install nodejs\nRUN     apt-get -y install npm \n\n# add our app\nRUN \tmkdir -p /opt/app\nCOPY\tapp/. /opt/app\nRUN\tcd /opt/app && npm install\n\n# and run our offer-service\n\nCMD\t[\"nodejs\", \"/opt/app/services/offer-service.js\" ]\n"
    },
    {
        "filename": "a048463b652062c21751cf5cb04bf7dc642fc02d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>\n# DOCKER-VERSION    1.6.2\n#\n# Dockerizing CentOS7: Dockerfile for building CentOS images\n#\nFROM       index.alauda.cn/canyue/centos7_1\nMAINTAINER Carson,C.J.Zeong <zcy@nicescale.com>\n\nENV TZ \"Asia/Shanghai\"\nENV TERM xterm\n\nRUN yum install -y curl wget tar bzip2 unzip vim-enhanced passwd sudo yum-utils hostname net-tools rsync man\nRUN yum install -y gcc gcc-c++ git make automake cmake patch logrotate python-devel libpng-devel libjpeg-devel\nRUN yum install -y epel-release && \\\n    yum update -y && \\\n    yum install -y pwgen python-pip \n\nRUN yum clean all\n\nRUN pip install supervisor\nADD supervisord.conf /etc/supervisord.conf\n\nRUN mkdir -p /etc/supervisor.conf.d && \\\n    mkdir -p /var/log/supervisor\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\n"
    },
    {
        "filename": "a06251b669c9fe668480d073374ebac61aab9e18.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM autodeskcloud/pod:1.0.7\n\n#\n# - add dnsutils (to get dig)\n# - add pyyaml\n#\nRUN apt-get -y update && apt-get -y install dnsutils\nRUN pip install pyyaml\n\n#\n# - add our internal toolset package\n# - install it\n#\nADD resources/toolset /opt/python/toolset\nRUN cd /opt/python/toolset && python setup.py install\n\n#\n# - add our spiffy pod script + the portal code itself\n# - add our supervisor script\n# - start supervisor\n#\nADD resources/pod /opt/portal/pod\nADD resources/portal.py /opt/portal/\nADD resources/supervisor /etc/supervisor/conf.d\nCMD /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf"
    },
    {
        "filename": "a090bdb320b1d6aafca6a95f32e98bcdd8c53f79.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com, yihao.peng@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.9.22\nMAINTAINER PanZhibiao <zhibiao.pan@bitmain.com>\n\nENV HOME /root\nENV TERM xterm\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\nADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update\nRUN apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\nRUN apt-get install -y libboost-all-dev libzmq3-dev curl wget net-tools\n\n# install libdb for wallet\nRUN apt-get install -y software-properties-common \\\n  && add-apt-repository -y ppa:bitcoin/bitcoin \\\n  && apt-get -y update \\\n  && apt-get install -y libdb4.8-dev libdb4.8++-dev\n\n# build bitcoind\nRUN mkdir ~/source\nRUN cd ~/source && wget https://github.com/UnitedBitcoin/UnitedBitcoin/archive/v2.3.0.1.tar.gz\nRUN cd ~/source \\\n  && tar zxf v2.3.0.1.tar.gz && cd UnitedBitcoin-2.3.0.1 \\\n  && ./autogen.sh \\\n  && ./configure --disable-bench --disable-tests \\\n  && make && make install\n\n# make some alias\nRUN ln -s ubcd /usr/local/bin/bitcoind \\\n  && ln -s ubc-cli /usr/local/bin/bitcoin-cli \\\n  && ln -s ubc-tx /usr/local/bin/bitcoin-tx \\\n  && ln -s /root/.bitcoin /root/.unitedbitcoin\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n# service for testnet3\n#RUN mkdir        /etc/service/bitcoind_testnet3\n#ADD run_testnet3 /etc/service/bitcoind_testnet3/run\n#RUN chmod +x     /etc/service/bitcoind_testnet3/run\n"
    },
    {
        "filename": "a0c933f3e99ca28021b07f396bd3a9e2e177064f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:12.04\n\nMAINTAINER Julien Vey\n\nRUN apt-get update\n\nRUN apt-get -y install sudo openssh-server git\n\nRUN locale-gen en_US.UTF-8\nRUN dpkg-reconfigure locales\n\nRUN mkdir /var/run/sshd\n\nRUN adduser --system --group --shell /bin/sh git\nRUN su git -c \"mkdir /home/git/bin\"\n\nADD admin.pub /home/git/admin.pub\n\nRUN cd /home/git; su git -c \"git clone git://github.com/sitaramc/gitolite\"\nRUN cd /home/git; su git -c \"gitolite/install -ln\"\nRUN cd /home/git; su git -c \"bin/gitolite setup -pk admin.pub\"\n\nENTRYPOINT [\"/usr/sbin/sshd\", \"-D\"]\n\nEXPOSE 22"
    },
    {
        "filename": "a0e4aec26597f1dd374e7a1ae4320ec88a340319.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.04\nMAINTAINER Ken O'Brien \"kennetho@xilinx.com\"\nWORKDIR /app\nRUN sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list\nRUN apt-get -y update && apt-get -y upgrade\nRUN apt-get install -y  tzdata \nRUN echo \"Ireland/Dublin\" >> /etc/timezone\nRUN dpkg-reconfigure --frontend noninteractive tzdata\nRUN apt-get install -y bash git libatlas-base-dev liblapack-dev libblas-dev python-pip git-lfs\nRUN apt -y build-dep caffe-cpu\nRUN pip install numpy scipy pandas lmdb protobuf scikit-image\nCMD [\"/bin/bash\"]\nRUN git clone https://github.com/zhaoweicai/hwgq\nRUN cd hwgq && sed -i 's/add\\_subdirectory(examples)//g' CMakeLists.txt && mv Makefile.config.example Makefile.config && cmake . && make -j && cd .. && git clone https://github.com/Xilinx/FINN.git\n"
    },
    {
        "filename": "a118fdbba14b4b11cc3a6a27812e93695fb974aa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ibmcom/ibmnode:latest\nMAINTAINER Scott Graham <swgraham@us.ibm.com>\n#\n#  This is the watson-multimedia-analyzer image\n#\nENV NODE_ENV production\nADD . /watson-multimedia-analyzer\nWORKDIR /watson-multimedia-analyzer\n\nRUN apt-get update \\\n  && apt-get -y install vim \\\n  && apt-get -y install ffmpeg\\\n  && apt-get -y install curl\\\n  && apt-get clean \\\n  && npm install \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 8080\nCMD [\"node\" , \"app.js\"]"
    },
    {
        "filename": "a137fa3c5b33c9a61174276cb2edb7fab5aa67ed.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM bioconductor/release_core  \n  \nMAINTAINER Dennis Hazelett \"dennis.hazelett at csmc.edu\"  \nRUN DEBIAN_FRONTEND=noninteractive apt-get update  \n## rtracklayer depends:  \nRUN apt-get install -y libxml2-dev libcurl4-openssl-dev  \n  \nRUN R -e \"biocLite('rtracklayer')\"  \n  \nRUN su rstudio; cd /home/rstudio \\  \n&& git clone https://bitbucket.org/dennishazelett/footprint \\  \n&& mv footprint/data . \\  \n&& mv footprint/promoter.no_utr3.no_exon.bed . \\  \n&& rm -rf footprint  \n  \nWORKDIR /home/rstudio  \n  \nRUN mv data/config/footprint.sh /usr/bin/footprint \\  \n&& chmod +x /usr/bin/footprint  \n  \nENTRYPOINT [\"footprint\"]  \n\n"
    },
    {
        "filename": "a17ba6fbce5e92628bef631cd6fcb8210bdab2e5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Facebook FAIR SentEval\n# A python tool for evaluating the quality of sentence embeddings.\n#\n# @see https://github.com/facebookresearch/SentEval\n#\n# Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker\n#\n\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\nMAINTAINER Loreto Parisi <loretoparisi@gmail.com>\n\n# Install base packages\nRUN apt-get update && apt-get install -y \\\n  git \\\n  software-properties-common \\\n  python-dev \\\n  python-pip \\\n  cabextract \\\n  sudo\n\n# install dependencies\nRUN pip install numpy scipy nltk\n\nWORKDIR /root/\n\n# InferSent\nRUN git clone https://github.com/facebookresearch/InferSent.git\n\n# download dataset and models\nRUN \\\n    cd InferSent/dataset && \\\n    ./get_data.bash && \\\n    cd ../encoder && \\\n    curl -Lo encoder/infersent.allnli.pickle https://s3.amazonaws.com/senteval/infersent/infersent.allnli.pickle\n\n# test nvidia docker\nCMD nvidia-smi -q\n\n# defaults command\nCMD [\"bash\"]"
    },
    {
        "filename": "a20b71c70fb98ba380462f3a6cb95b222bd9ea18.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\n# install dependencies \nRUN apt-get -y update --fix-missing && \\\n    apt-get install -y \\\n        python-pip \\\n        python-dev \\\n        libev4 \\\n        libev-dev \\\n        gcc \\\n        libxslt-dev \\\n        libxml2-dev \\\n        libffi-dev \\\n        python-numpy \\\n        python-scipy && \\\n    pip install --upgrade pip && \\\n    pip install scikit-learn flask-restful && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# add our project\nADD . /\n\n# expose the port for the API\nEXPOSE 5000\n\n# run the API \nCMD [ \"python\", \"/api.py\" ]\n\n"
    },
    {
        "filename": "a2a2eaa1f3e83114ae4d067a2854b0d892d6d7c3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for ELK stack on Ubuntu base\n\n# Help:\n# Default command: docker run -d -p 80:80 -p 3333:3333 -p 3334:3334 -p 9200:9200 cyberabis/docker-elkauto /elk_start.sh\n# Default command will start ELK within a docker\n# To send data to elk, stream to TCP port 3333\n# Example: echo 'test data' | nc HOST 3333. Host is the IP of the docker host\n# To login to bash: docker run -t -i cyberabis/docker-elkauto /bin/bash\n\n\nFROM ubuntu\nMAINTAINER Abishek Baskaran\n\n# Initial update\nRUN apt-get update\n\n# This is to install add-apt-repository utility. All commands have to be non interactive with -y option\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common\n\n# Install Oracle Java 8, accept license command is required for non interactive mode\nRUN\tapt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && \\\n\tDEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:webupd8team/java && \\\n\tapt-get update && \\\n\techo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections &&\\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y oracle-java8-installer\n\n# Elasticsearch installation\n# Start Elasticsearch by /elasticsearch/bin/elasticsearch. This will run on port 9200.\nRUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.1.tar.gz && \\\n\ttar xf elasticsearch-1.3.1.tar.gz && \\\n\trm elasticsearch-1.3.1.tar.gz && \\\n\tmv elasticsearch-1.3.1 elasticsearch \n\n# Logstash installation\n# Create a logstash.conf and start logstash by /logstash/bin/logstash agent -f logstash.conf\nRUN wget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz && \\\n\ttar xf logstash-1.4.2.tar.gz && \\\n\trm logstash-1.4.2.tar.gz && \\\n\tmv logstash-1.4.2 logstash && \\\n\ttouch logstash.conf && \\\n\techo 'input { tcp { port => 3333 type => \"text event\"} tcp { port => 3334 type => \"json event\" codec => json_lines {} } }' >> logstash.conf && \\\n\techo 'output { elasticsearch { host => localhost } }' >> logstash.conf \n\n# Kibana installation\nRUN wget https://download.elasticsearch.org/kibana/kibana/kibana-3.1.0.tar.gz && \\\n\ttar xf kibana-3.1.0.tar.gz && \\\n\trm kibana-3.1.0.tar.gz && \\\n\tmv kibana-3.1.0  kibana\n\n# Install curl utility just for testing\nRUN apt-get update && \\\n\tapt-get install -y curl\n\n# Install Nginx\n# Start or stop with /etc/init.d/nginx start/stop. Runs on port 80.\n# Sed command is to make the worker threads of nginx run as user root\nRUN apt-get update && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y nginx && \\\n\tsed -i -e 's/www-data/root/g' /etc/nginx/nginx.conf\n\n# Deploy kibana to Nginx\nRUN mv /usr/share/nginx/html /usr/share/nginx/html_orig && \\\n\tmkdir /usr/share/nginx/html && \\\n\tcp -r /kibana/* /usr/share/nginx/html\n\n# Create a start bash script\nRUN touch elk_start.sh && \\\n\techo '#!/bin/bash' >> elk_start.sh && \\\n\techo '/elasticsearch/bin/elasticsearch &' >> elk_start.sh && \\\n\techo '/etc/init.d/nginx start &' >> elk_start.sh && \\\n\techo 'exec /logstash/bin/logstash agent -f /logstash.conf' >> elk_start.sh && \\\n\tchmod 777 elk_start.sh\n\n# 80=nginx, 9200=elasticsearch, 3333,3334=logstash tcp input\nEXPOSE 80 3333 3334 9200 49021\n\n"
    },
    {
        "filename": "a2addcdc2c46ecd51fc70468b7850a883950f918.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:18.04\n\n# Supresses unwanted user interaction (like \"Please select the geographic area\" when installing tzdata)\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update packages (use us.archive.ubuntu.com instead of archive.ubuntu.com \u2014 solves the painfully slow apt-get update)\nRUN sed -i 's/archive\\.ubuntu\\.com/us\\.archive\\.ubuntu\\.com/' /etc/apt/sources.list\nRUN apt-get update\n\n# Miscellaneous deps\nRUN apt-get -y install curl gnupg git pandoc\n\n# PHP\nRUN apt-get install -y php php-curl php-iconv php-mbstring php-bcmath\n\n# Node\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get -y install nodejs\n\n# Python 2\nRUN apt-get install -y python-pip\nRUN pip2 install --upgrade setuptools\n\n# Python 3\nRUN apt-get install -y python3 python3-pip\nRUN pip3 install --upgrade setuptools\n\n# Copy files to workdir to run install scripts against it (will be replaced with a live-mounted volume at startup)\nRUN mkdir -p /ccxt\nWORKDIR /ccxt\nADD . /ccxt\nRUN rm -rf /ccxt/node_modules\n\n# Installs as a local Node & Python module, so that `require ('ccxt')` and `import ccxt` should work after that\nRUN npm install\nRUN ln -s /ccxt /usr/lib/node_modules/\nRUN echo \"export NODE_PATH=/usr/lib/node_modules\" >> $HOME/.bashrc\nRUN cd python && python3 setup.py install && python setup.py install && cd ..\n"
    },
    {
        "filename": "a2c5ce3d897fe9c1f134bed161fa8c603c35b3ae.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Postgresql\n#\n# VERSION               0.3\n\nFROM allisson/docker-ubuntu:latest\nMAINTAINER Allisson Azevedo <allisson@gmail.com>\n\n# avoid debconf and initrd\nENV DEBIAN_FRONTEND noninteractive\nENV INITRD No\n\n# install packages\nRUN apt-get update\nRUN apt-get install -y openssh-server postgresql supervisor\n\n# make /var/run/sshd\nRUN mkdir /var/run/sshd\n\n# copy supervisor conf\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# setup postgresql\nADD set-psql-password.sh /tmp/set-psql-password.sh\nRUN /bin/sh /tmp/set-psql-password.sh\nRUN sed -i \"/^#listen_addresses/i listen_addresses='*'\" /etc/postgresql/9.1/main/postgresql.conf\nRUN sed -i \"/^# DO NOT DISABLE\\!/i # Allow access from any IP address\" /etc/postgresql/9.1/main/pg_hba.conf\nRUN sed -i \"/^# DO NOT DISABLE\\!/i host all all 0.0.0.0/0 md5\\n\\n\\n\" /etc/postgresql/9.1/main/pg_hba.conf\n\n# set root password\nRUN echo \"root:root\" | chpasswd\n\n# clean packages\nRUN apt-get clean\nRUN rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*\n\n# expose postgresql port\nEXPOSE 22 5432\n\n# volumes\nVOLUME [\"/var/lib/postgresql/9.1/main\"]\n\n# start supervisor\nCMD [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "a3579ad18dc31ff1e005cf9e95fba8f0bf566769.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM homme/gdal:v1.11.1  \nMAINTAINER Marc Harter <wavded@gmail.com  \n  \nRUN add-apt-repository -y ppa:chris-lea/node.js  \nRUN apt-get -y update  \nRUN apt-get -y install nodejs  \nADD . /ogre  \nRUN cd /ogre && npm install  \nEXPOSE 3000  \nCMD cd /ogre && node run  \n\n"
    },
    {
        "filename": "a39531a85262dcbbfbdb799e87d48c8c367e0dbe.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ann-benchmarks\n\nRUN apt-get update && apt-get install -y libopenblas-base libopenblas-dev libpython-dev python-numpy python-pip swig\nRUN git clone https://github.com/facebookresearch/faiss lib-faiss\nRUN cd lib-faiss && git checkout tags/v1.2.1 -b lib-faiss && cp example_makefiles/makefile.inc.Linux makefile.inc && make -j4 py BLASLDFLAGS=/usr/lib/x86_64-linux-gnu/libopenblas.so.0\nENV PYTHONPATH lib-faiss\n\n# faiss doesn't work with python3 afaik\nRUN python -c 'import faiss'\nRUN pip install -r requirements.txt\nRUN pip install sklearn enum34\nENTRYPOINT [\"python\", \"run_algorithm.py\"]\n"
    },
    {
        "filename": "8f7598cfa1a9112fa78b36251774b079abb71e2e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base image\n#\n# VERSION 0.2\nFROM debian:latest\nMAINTAINER LFE Maintainers <maintainers@lfe.io>\n\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends \\\n    apt-utils \\\n    build-essential\nRUN apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    libcurl4-openssl-dev \\\n    curl \\\n    wget \\\n    git\nRUN apt-get install -y --no-install-recommends \\\n    libsctp1 libsctp-dev lksctp-tools\nRUN apt-get install -y --no-install-recommends \\\n    pandoc\n\nENV ERLANG_DEB1 erlang-solutions_1.0_all.deb\nENV ERLANG_DEB2 esl-erlang_19.1.3-1~debian~jessie_amd64.deb\nENV ERLANG_HOST https://packages.erlang-solutions.com\nENV ERLANG_PATH erlang/esl-erlang/FLAVOUR_1_general\nRUN curl -L -O $ERLANG_HOST/$ERLANG_DEB1\nRUN dpkg -i $ERLANG_DEB1 && rm $ERLANG_DEB1\nRUN apt-get update\nRUN curl -L -O $ERLANG_HOST/$ERLANG_PATH/$ERLANG_DEB2\nRUN dpkg -i --force-depends $ERLANG_DEB2 && rm $ERLANG_DEB2\n\nENV REBAR_REPO https://github.com/rebar/rebar.git\nRUN git clone $REBAR_REPO && cd rebar && \\\n    git checkout tags/2.6.0 && \\\n    ./bootstrap && \\\n    cp rebar /usr/local/bin\n\nADD . /opt/erlang/lfe\nRUN cd /opt/erlang/lfe && make install\n\nENV ERL_LIBS=$ERL_LIBS:/opt/erlang/lfe\nENV DEBIAN_FRONTEND \"\"\nCMD /usr/bin/lfe -eval \"(io:format \\\"~p~n\\\"  (list (* 2 (lists:foldl #'+/2 0 (lists:seq 1 6)))))\"\n"
    },
    {
        "filename": "90908372a77cf8c4de51b01cdb5d3cd0419255f4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2014 Google Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This file creates a standard build environment for building Kubernetes\n\nFROM kube-build:cross\nMAINTAINER  Joe Beda <jbeda@google.com>\n\n# (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM 5\nENV GOOS    linux\nENV GOARCH  amd64\n\n# Get the code coverage tool and godep\nRUN go get code.google.com/p/go.tools/cmd/cover github.com/tools/godep\n\n# We use rsync to copy some binaries around.  It is faster (0.3s vs. 1.1s) on my\n# machine vs. `install`\nRUN rm -rf /var/lib/apt/lists/\nRUN apt-get update && apt-get install -y rsync\n\n# Download and symlink etcd.  We need this for our integration tests.\nRUN mkdir -p /usr/local/src/etcd &&\\\n    cd /usr/local/src/etcd &&\\\n    curl -L -O -s https://github.com/coreos/etcd/releases/download/v0.4.6/etcd-v0.4.6-linux-amd64.tar.gz &&\\\n    tar xzf etcd-v0.4.6-linux-amd64.tar.gz &&\\\n    ln -s ../src/etcd/etcd-v0.4.6-linux-amd64/etcd /usr/local/bin/\n\n# Mark this as a kube-build container\nRUN touch /kube-build-image\n\nWORKDIR /go/src/github.com/GoogleCloudPlatform/kubernetes\n\n# Propagate the git tree version into the build image\nADD kube-version-defs /kube-version-defs\nENV KUBE_GIT_VERSION_FILE /kube-version-defs\n\n# Make output from the dockerized build go someplace else\nENV KUBE_OUTPUT_SUBPATH _output/dockerized\n\n# Upload Kubernetes source\nADD kube-source.tar.gz /go/src/github.com/GoogleCloudPlatform/kubernetes\n"
    },
    {
        "filename": "90939a90b019f97f9b6905826871833d9edd7bfc.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile for shadowsocks-libev-arm:debian\n#\n\nFROM resin/rpi-raspbian\nMAINTAINER EasyPi Software Foundation\n\nENV SS_VER 3.0.8\nENV SS_DIR shadowsocks-libev-${SS_VER}\nENV SS_DEB shadowsocks-libev_${SS_VER}-1_armhf.deb\nENV SS_URL https://github.com/shadowsocks/shadowsocks-libev/archive/v${SS_VER}.tar.gz\n\nRUN set -xe \\\n    && apt-get update \\\n    && apt-get install -y apg \\\n                          asciidoc \\\n                          autoconf \\\n                          build-essential \\\n                          curl \\\n                          debhelper \\\n                          dh-systemd \\\n                          gawk \\\n                          gettext \\\n                          init-system-helpers \\\n                          libev4 \\\n                          libev-dev \\\n                          libpcre3 \\\n                          libpcre3-dev \\\n                          libssl1.0.0 \\\n                          libssl-dev \\\n                          libtool \\\n                          libudns0 \\\n                          libudns-dev \\\n                          pkg-config \\\n                          xmlto \\\n                          zlib1g \\\n                          zlib1g-dev \\\n    && curl -sSL ${SS_URL} | tar xz \\\n    && cd ${SS_DIR} \\\n        && curl -sSL https://download.libsodium.org/libsodium/releases/libsodium-1.0.11.tar.gz | tar xz \\\n        && cd libsodium-1.0.11 \\\n        && ./configure --prefix=/usr \\\n        && make install \\\n        && cd .. \\\n        && curl -sSL https://tls.mbed.org/download/mbedtls-2.4.0-gpl.tgz | tar xz \\\n        && cd mbedtls-2.4.0 \\\n        && make SHARED=1 CFLAGS=-fPIC \\\n        && make install \\\n        && cd .. \\\n        && curl -sSL https://github.com/shadowsocks/ipset/archive/shadowsocks.tar.gz | tar xz --strip 1 -C libipset \\\n        && curl -sSL https://github.com/shadowsocks/libcork/archive/shadowsocks.tar.gz | tar xz --strip 1 -C libcork \\\n        && curl -sSL https://github.com/shadowsocks/libbloom/archive/master.tar.gz | tar xz --strip 1 -C libbloom \\\n        && ./autogen.sh \\\n        && dpkg-buildpackage -b -us -uc -i \\\n        && cd .. \\\n        && rm -rf ${SS_DIR} \\\n    && dpkg -i ${SS_DEB} \\\n    && apt-get remove -y asciidoc \\\n                         autoconf \\\n                         build-essential \\\n                         debhelper \\\n                         dh-systemd \\\n                         gawk \\\n                         gettext \\\n                         init-system-helpers \\\n                         libev-dev \\\n                         libpcre3-dev \\\n                         libssl-dev \\\n                         libtool \\\n                         libudns-dev \\\n                         pkg-config \\\n                         xmlto \\\n                         zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nEXPOSE 8388/tcp 8388/udp\n\nENTRYPOINT [\"/usr/bin/ss-server\"]\nCMD [\"-c\", \"/etc/shadowsocks-libev/config.json\", \"-u\"]\n"
    },
    {
        "filename": "90b7d4113cbc86e0d47db25fad33cfb2f89817c5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:trusty\n\nRUN apt-get update && \\\n    apt-get install -y -q curl bzip2 git && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install CDH5 in a single node: Pseudo Distributed\n# Docs: http://www.cloudera.com/content/www/en-us/documentation/enterprise/latest/topics/cdh_qs_yarn_pseudo.html\nADD docker-files/cloudera.pref /etc/apt/preferences.d/cloudera.pref\nRUN curl -s http://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/archive.key | apt-key add - && \\\n    echo 'deb [arch=amd64] http://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh trusty-cdh5 contrib' > /etc/apt/sources.list.d/cloudera.list && \\\n    echo 'deb-src http://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh trusty-cdh5 contrib' >> /etc/apt/sources.list.d/cloudera.list && \\\n    apt-get update && \\\n    apt-get install -y -q openjdk-7-jre-headless hadoop-conf-pseudo && \\\n    sudo -u hdfs hdfs namenode -format -force && \\\n    for x in `cd /etc/init.d ; ls hadoop-hdfs-*` ; do sudo service $x start ; done && \\\n    bash /usr/lib/hadoop/libexec/init-hdfs.sh && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Needed for hdfs3\nENV LIBHDFS3_CONF /etc/hadoop/conf/hdfs-site.xml\n\n# Install conda & build conda environments:\n# py35 is root environment\n# py27 gets own environment\nRUN curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh && \\\n    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \\\n    rm /tmp/miniconda.sh && \\\n    /opt/conda/bin/conda install -y -q libhdfs3 pytest flake8 -c conda-forge && \\\n    /opt/conda/bin/conda create -y -n py27 python=2.7 && \\\n    /opt/conda/bin/conda install -y -q -n py27 libhdfs3 pytest -c conda-forge\n\nENV PATH /opt/conda/bin:$PATH\n\nEXPOSE 8020 50070\n\nVOLUME /hdfs3\nWORKDIR /hdfs3\n\nADD docker-files/start.sh /tmp/start.sh\nCMD [\"bash\", \"/tmp/start.sh\", \"-d\"]\n"
    },
    {
        "filename": "91109218f6b83539a3a5889c3cd7e0e8b4a4e7a7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM\tphusion/baseimage:0.9.16\nMAINTAINER\tMarkus Binsteiner <makkus@gmail.com>\n\nCMD [\"/sbin/my_init\"]\n\n# Seafile dependencies and system configuration\nRUN apt-get update && apt-get install -y \\\n\t\tpython2.7 \\\n\t\tlibpython2.7 \\\n\t\tpython-setuptools \\\n\t\tpython-simplejson \\\n\t\tpython-imaging \\\n\t\tsqlite3 \\\n\t\tpython-mysqldb \\\n\t\tpython-memcache \\\n\t\tmysql-client \\\n\t\tsocat \\\n\t\tzile \\ \n\t\tbup \\\n\t\texpect \\\n\t\tpython-flup \\\n\t\topenjdk-7-jre \\\n\t\tpoppler-utils \\\n\t\tpython-pip \\\n\t\tpython-memcache \\\n\t\tlibreoffice \\\n\t\tlibreoffice-script-provider-python \\\n\t\tttf-wqy-microhei \\\n\t\tttf-wqy-zenhei \\\n    xfonts-wqy \\\n    wget\n\nRUN pip install boto\n\t\t\nRUN ulimit -n 30000\n\n# script to download seafile\nRUN mkdir -p /opt/scripts/\n#COPY seafile-pro-server_5.0.5_x86-64.tar.gz /tmp/seafile-pro-server_5.0.5_x86-64.tar.gz\nADD setup-seafile.sh /usr/local/bin/setup-seafile\nADD setup-seafile.expect /usr/local/bin/setup-seafile.expect\nRUN chmod 755 /usr/local/bin/setup-seafile\nRUN chmod 755 /usr/local/bin/setup-seafile.expect\nADD upgrade-seafile.sh /usr/local/bin/upgrade-seafile\nADD create_db.sql /opt/scripts/create_db.sql\nADD garbage_collection.sh /opt/scripts/seafile-gc\nADD backup.sh /opt/scripts/seafile-backup\nADD custom /tmp/seafile-custom\n# create seafile & backup user\nADD ids.lst /tmp/ids.lst\nADD prepare-user.sh /tmp/prepare-user.sh\nRUN /tmp/prepare-user.sh\n\nADD backup_schedule.sh /etc/cron.d/backup_schedule.sh\nADD garbage_collection_schedule.sh /etc/cron.d/garbage_collection_schedule.sh\n\nEXPOSE 10001 12001 8000 8080 8082\n\nRUN mkdir -p /var/log/seafile\nRUN chown -R seafile /var/log/seafile\n\n# Seafile daemons\nRUN mkdir -p /etc/service/seafile_services\nADD seafile_services.sh /etc/service/seafile_services/run\nADD seafile_services_stop.sh /etc/service/seafile_services/finish\nRUN mkdir -p /etc/seafile/service/seafile /etc/seafile/service/seahub\nADD seafile.sh /etc/seafile/service/seafile/run\nADD seafile_stop.sh /etc/seafile/service/seafile/finish\nADD seahub.sh /etc/seafile/service/seahub/run\nADD seahub_stop.sh /etc/seafile/service/seahub/finish\nRUN chown -R seafile /etc/seafile\n\n# Clean up for smaller image\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /var/tmp/*\n"
    },
    {
        "filename": "9119d75f7d12b2f7c65abe1719de89cc1c518894.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Build a docker image for C-ICAP+SquidClamav\nFROM centos:latest\n\nMAINTAINER Sebastian Weitzel <sebastian.weitzel@gmail.com>\n\nENV C_ICAP_VERSION=\"0.5.2\" SQUIDCLAMAV_VERSION=\"6.16\"\n\nWORKDIR /tmp\n\n# 1. install dependencies, includin some just needed for build purpose\n# 2. build\n# 3. cleanup\n# Note: Maybe ugly to have all in one RUN, but it avoids creating unneccessary layers\nRUN yum --quiet --assumeyes update && \\\n  yum --quiet --assumeyes install epel-release && \\\n  yum --quiet --assumeyes --setopt=tsflags=nodocs install curl zlib bzlib2 file tar gcc make zlib-devel bzip2-devel && \\\n  curl --silent --location --remote-name \"http://downloads.sourceforge.net/project/c-icap/c-icap/0.5.x/c_icap-${C_ICAP_VERSION}.tar.gz\" && \\\n  tar -xzf \"c_icap-${C_ICAP_VERSION}.tar.gz\" && \\\n  cd /tmp/c_icap-${C_ICAP_VERSION} && \\\n  ./configure 'CXXFLAGS=-O2 -m64 -pipe' 'CFLAGS=-O2 -m64 -pipe' --quiet --without-bdb --prefix=/usr/local/c-icap --enable-large-files && \\\n  make > /tmp/build.log 2>&1 && make install >>/tmp/build.log 2>&1 && \\\n  cd /tmp && \\\n  curl --silent --location --remote-name \"http://downloads.sourceforge.net/project/squidclamav/squidclamav/${SQUIDCLAMAV_VERSION}/squidclamav-${SQUIDCLAMAV_VERSION}.tar.gz\" && \\\n  tar -xzf \"squidclamav-${SQUIDCLAMAV_VERSION}.tar.gz\" && \\\n  cd /tmp/squidclamav-${SQUIDCLAMAV_VERSION} && \\\n  PATH=\"$PATH:/usr/local/c-icap/bin/\" ./configure 'CXXFLAGS=-O2 -m64 -pipe' 'CFLAGS=-O2 -m64 -pipe' --quiet --with-c-icap=/usr/local/c-icap/ && \\\n  gmake > /tmp/build.log 2>&1 && gmake install-strip >>/tmp/build.log 2>&1 && \\\n  rm -rf /tmp/* /var/tmp/* /var/log/*\n\nADD ./bin/ /usr/local/bin/\nADD ./etc/ /usr/local/c-icap/etc/\n\n# add user/group proxy, c-icap will execute as\nRUN chmod a+x /usr/local/bin/* && \\\n  adduser -M -s /sbin/nologin -U proxy && \\\n  mkdir -p /var/run/c-icap/ && \\\n  chown -R proxy:proxy /var/run/c-icap/ && \\\n  chown -R proxy:proxy /usr/local/c-icap/ && \\\n  chmod 750 /usr/local/c-icap\n\nEXPOSE 1344/tcp\n\nENTRYPOINT [\"/usr/local/bin/run.sh\"]\n"
    },
    {
        "filename": "913ec248328e4f1a0566b0c31c38b8300c952322.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Sah Lee <contact@leesah.name>\n\nENV DEPENDENCIES git-core build-essential autoconf libtool libssl-dev\nENV BASEDIR /tmp/shadowsocks-libev\nENV PORT 8338\n\n# Set up building environment\nRUN apt-get update \\\n && apt-get install -y $DEPENDENCIES\n\n# Get the latest code, build and install\nRUN git clone https://github.com/shadowsocks/shadowsocks-libev.git $BASEDIR\nWORKDIR $BASEDIR\nRUN ./configure \\\n && make \\\n && make install\n\n# Tear down building environment and delete git repository\nWORKDIR /\nRUN rm -rf $BASEDIR/shadowsocks-libev\\\n && apt-get --purge autoremove -y $DEPENDENCIES\n\n# Port in the config file won't take affect. Instead we'll use 8388.\nEXPOSE $PORT\n\n# Override the host and port in the config file.\nADD entrypoint /\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"-h\"]\n"
    },
    {
        "filename": "91f7aba8a354a80a09c8d406367000f099cbcd4a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "###\n# swagger-editor - https://github.com/swagger-api/swagger-editor/\n#\n# Run the swagger-editor service on port 8080\n###\n\nFROM registry-ice.ng.bluemix.net/ibmnode:latest\nCOPY id_med_rsa.pub /root/.ssh/\nRUN cat /root/.ssh/id_med_rsa.pub >> /root/.ssh/authorized_keys\n\nMAINTAINER Marcello_deSales@intuit.com\n\nENV     DEBIAN_FRONTEND noninteractive\n\nRUN     apt-get update && apt-get install -y git npm nodejs\n#RUN     ln -s /usr/bin/nodejs /usr/local/bin/node\n\nWORKDIR /runtime\nADD     package.json    /runtime/package.json\n#RUN     npm install\n\nRUN     npm install -g bower grunt-cli\n\n\nADD     bower.json      /runtime/bower.json\nADD     .bowerrc        /runtime/.bowerrc\nRUN     bower --allow-root install\n\nADD     .   /runtime\nRUN \tgrunt build\n\n# The default port of the application\nEXPOSE  8080\nCMD     grunt connect:dist\n"
    },
    {
        "filename": "920747bd20b568e0ee72849db20a39eef9a939cc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM node:latest  \n  \n# Surpress Upstart errors/warning  \nRUN dpkg-divert --local \\--rename --add /sbin/initctl  \nRUN ln -sf /bin/true /sbin/initctl  \n  \n# Let the container know that there is no tty  \nENV DEBIAN_FRONTEND noninteractive  \n  \n# Install software requirements  \nRUN apt-get update && \\  \napt-get install -y git  \nRUN npm install -g node-gyp  \n  \n# Install Supervisor  \nRUN apt-get install -y supervisor  \n  \n# Install/setup Python deps  \nRUN apt-get install -y python-pip  \nRUN pip install requests  \n  \n# Copy supervisor config  \nADD conf/supervisord.conf /etc/supervisord.conf  \n  \n# Add git commands to allow container updating  \nADD scripts/pull /usr/bin/pull  \nADD scripts/push /usr/bin/push  \nADD scripts/docker-hook /usr/bin/docker-hook  \nADD scripts/hook-listener /usr/bin/hook-listener  \nRUN chmod 755 /usr/bin/pull && chmod 755 /usr/bin/push  \nRUN chmod +x /usr/bin/docker-hook  \nRUN chmod +x /usr/bin/hook-listener  \n  \n# copy start script  \nADD scripts/start.sh /usr/bin/start.sh  \n  \n# Expose Ports (example: 80)  \nEXPOSE 80  \nEXPOSE 8555  \n# run start script  \nCMD [\"/bin/bash\", \"/usr/bin/start.sh\"]\n\n"
    },
    {
        "filename": "920b2234b0cbf308fb1e6619a808239688287057.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\n# Set the file maintainer (your name - the file's author)\nMAINTAINER Ray Alez\n\n# Set env variables used in this Dockerfile (add a unique prefix, such as DOCKYARD)\nENV DOCKYARD_SRC=nexus\n# Directory in container for all project files\nENV DOCKYARD_SRVHOME=/home\n# Directory in container for project source files\nENV DOCKYARD_SRVPROJ=/home/nexus\n# Update the default application repository sources list\n\nRUN apt-get update\nRUN apt-get install -y python python-dev python-pip supervisor nginx libpq-dev libcurl4-openssl-dev\nRUN apt-get install -y libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk\n\n\n# Create application subdirectories\nWORKDIR $DOCKYARD_SRVHOME\nRUN mkdir media static logs\nVOLUME [\"$DOCKYARD_SRVHOME/media/\", \"$DOCKYARD_SRVHOME/logs/\"]\n\nENV SECRET_KEY 7-pwxu4=a0th_s$)8)#z5f-^jlsn_^rg@l+r6$b0)!yfji6m13\nENV ACCESS_TOKEN loyZ-Xv74V4AAAAAAAAHofK10zIpP3gK-p1tLJmpOLNFjtF10Q4w0pQYGk-AD2ly\nENV PG_USERNAME nexus\nENV PG_PASS nexus\n\nCOPY $DOCKYARD_SRC $DOCKYARD_SRVPROJ\n# Install Python dependencies\nRUN pip install -r $DOCKYARD_SRVPROJ/requirements.txt\nRUN pip install uwsgi\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nCOPY nginx-app.conf /etc/nginx/sites-available/default\nCOPY supervisor-app.conf /etc/supervisor/conf.d/ \nCOPY uwsgi.ini $DOCKYARD_SRVPROJ\nCOPY uwsgi_params $DOCKYARD_SRVPROJ\n# Port to expose\nEXPOSE 8000\n\n# Copy entrypoint script into the image\nWORKDIR $DOCKYARD_SRVPROJ\n\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "92140bec944c9841968a499c5d33497ca1623d11.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:bionic\n\nMAINTAINER tchoedak <tchoedak@gmail.com>\n\nARG SMTP_USERNAME\nARG SMTP_PASSWORD\nARG SELLER_CENTRAL_ACCESS_KEY_ID\nARG SELLER_CENTRAL_SECRET_KEY\nARG ANOTI_NUMBER\nARG ACCOUNT_SID\nARG AUTH_TOKEN\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    git \\\n    cron \\\n    vim \\\n    build-essential \\\n    python-dev \\\n    python3-dev \\\n    python3.7 \\\n    python3.7-dev \\\n    libsasl2-dev \\\n    python-setuptools \\\n    python3.7-distutils \\\n    ca-certificates \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python3.7 get-pip.py --disable-pip-version-check --no-cache-dir pip setuptools;\n\nRUN python3.7 -m pip install -U pip --no-cache-dir\nRUN pip3 install -U pip --no-cache-dir\n\nRUN cp /usr/local/bin/pip3.7 /usr/local/bin/pip\nRUN cd /usr/bin && ln -sf python3.7 python3\nRUN cd /usr/bin && ln -sf python3.7m python3m\n\nADD requirements.txt /tmp/requirements.txt\nRUN pip3 install virtualenv\nRUN virtualenv --python=python3 venv\nRUN . venv/bin/activate && pip install -r /tmp/requirements.txt\n\nENV SMTP_USERNAME=$SMTP_USERNAME\nENV SMTP_PASSWORD=$SMTP_PASSWORD\nENV SELLER_CENTRAL_ACCESS_KEY_ID=$SELLER_CENTRAL_ACCESS_KEY_ID\nENV SELLER_CENTRAL_SECRET_KEY=$SELLER_CENTRAL_SECRET_KEY\nENV ACCOUNT_SID=$ACCOUNT_SID\nENV AUTH_TOKEN=$AUTH_TOKEN\nENV ANOTI_NUMBER=$ANOTI_NUMBER\n\nRUN mkdir /root/app\nADD . /root/app/\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "92ad84c57ce3c1b0e3b2dd18b1c069fde69ba72e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#FROM    ubuntu:16.04\nFROM    debian:stretch\n\nENV     DEBIAN_FRONTEND noninteractive\nARG\tGITREPO=conversence/idealoom\nARG\tGITBRANCH=master\nARG DOCKER_RC=configs/docker.rc\nARG BUILDING_DOCKER=true\n\nRUN     apt-get update && apt-get install -y \\\n            apt-utils \\\n            locales \\\n            python3 \\\n            python3-pip \\\n            python3-paramiko \\\n            python3-future \\\n            python3-virtualenv \\\n            python3-wheel \\\n            python3-setuptools \\\n            python3-nose \\\n            python3-venv \\\n            python3-psycopg2 \\\n            git \\\n            openssh-server \\\n            sudo \\\n            net-tools \\\n            monit \\\n            uwsgi \\\n            curl \\\n            uwsgi-plugin-python\nRUN         pip3 install Fabric3\nRUN         useradd -m -U -G www-data idealoom_user && \\\n            ssh-keygen -P '' -f ~/.ssh/id_rsa && cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys && \\\n            sudo -u idealoom_user -i sh -c \"cd && mkdir .ssh && ssh-keygen -P '' -f .ssh/id_rsa && cat .ssh/id_rsa.pub >> .ssh/authorized_keys\" && \\\n            cat ~/.ssh/id_rsa.pub >> ~idealoom_user/.ssh/authorized_keys\nWORKDIR /opt\nRUN     /etc/init.d/ssh start && \\\n           ssh-keyscan localhost && \\\n           curl -o fabfile.py https://raw.githubusercontent.com/$GITREPO/$GITBRANCH/fabfile.py && \\\n           touch empty.rc && \\\n           fab -c empty.rc install_assembl_server_deps && \\\n           rm -r __pycache__ fabfile.py* empty.rc && \\\n           /etc/init.d/ssh stop\nRUN     cd /opt ; set -x ; git clone -b $GITBRANCH https://github.com/$GITREPO.git ; chown -R idealoom_user:idealoom_user idealoom\nWORKDIR /opt/idealoom\nENV LC_ALL C.UTF-8\nENV LC_CTYPE C.UTF-8\nRUN     /etc/init.d/ssh start && \\\n           ssh-keyscan localhost && \\\n           fab -c $DOCKER_RC build_virtualenv && \\\n           fab -c $DOCKER_RC app_update_dependencies && \\\n           /etc/init.d/ssh stop\nRUN        /etc/init.d/ssh start && \\\n           ssh-keyscan localhost && \\\n           fab -c $DOCKER_RC app_compile_nodbupdate && \\\n           fab -c $DOCKER_RC set_file_permissions && \\\n           /etc/init.d/ssh stop\nCMD     /etc/init.d/ssh start && \\\n        . venv/bin/activate && \\\n        fab -c $DOCKER_RC docker_startup && \\\n        tail -f /dev/null\n"
    },
    {
        "filename": "92af8b3ff5c1fa6705c9c1839431f4fb7be1ceac.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \nMAINTAINER Alban Linard <alban.linard@unige.ch>  \n  \nADD bin/install /root/install  \nADD bin/colorize /usr/local/bin  \nRUN chmod a+x /usr/local/bin/colorize && \\  \napt-get update --yes && \\  \napt-get install --yes sudo && \\  \n/root/install /usr/local && \\  \nrm -rf /root/install /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n\n"
    },
    {
        "filename": "9369b2a006539984f065b17fcf1e7eb3aeee65fa.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:latest\nMAINTAINER Vilibald Wan\u010da (vilibald.wanca@oracle.com)\n\nENV EMCC_SDK_VERSION 1.38.11\nENV EMCC_SDK_ARCH 64\nENV EMCC_BINARYEN_VERSION 1.38.11\n\nWORKDIR /\n\nRUN apt-get update && apt-get install -y --no-install-recommends gnupg ca-certificates build-essential cmake curl git-core openjdk-8-jre-headless python \\\n    && apt-mark hold openjdk-8-jre-headless \\\n    && apt-mark hold make \\\n    && curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n    && apt-get install -y nodejs \\\n    && git clone https://github.com/juj/emsdk.git \\\n    && cd /emsdk \\\n    && ./emsdk update-tags \\\n    && ./emsdk install --build=MinSizeRel sdk-tag-$EMCC_SDK_VERSION-${EMCC_SDK_ARCH}bit \\\n    && mkdir -p /clang \\\n    && cp -r /emsdk/clang/tag-e$EMCC_SDK_VERSION/build_tag-e${EMCC_SDK_VERSION}_${EMCC_SDK_ARCH}/bin /clang \\\n    && mkdir -p /clang/src \\\n    && cp /emsdk/clang/tag-e$EMCC_SDK_VERSION/src/emscripten-version.txt /clang/src/ \\\n    && mkdir -p /emscripten \\\n    && cp -r /emsdk/emscripten/tag-$EMCC_SDK_VERSION/* /emscripten \\\n    && cp -r /emsdk/emscripten/tag-${EMCC_SDK_VERSION}_${EMCC_SDK_ARCH}bit_optimizer/optimizer /emscripten/ \\\n    && mkdir -p /binaryen \\\n    && cp -r /emsdk/binaryen/tag-${EMCC_BINARYEN_VERSION}_${EMCC_SDK_ARCH}bit_binaryen/* /binaryen \\\n    && echo \"import os\\nLLVM_ROOT='/clang/bin/'\\nNODE_JS='nodejs'\\nEMSCRIPTEN_ROOT='/emscripten'\\nEMSCRIPTEN_NATIVE_OPTIMIZER='/emscripten/optimizer'\\nSPIDERMONKEY_ENGINE = ''\\nV8_ENGINE = ''\\nTEMP_DIR = '/tmp'\\nCOMPILER_ENGINE = NODE_JS\\nJS_ENGINES = [NODE_JS]\\nBINARYEN_ROOT = '/binaryen/'\\n\" > ~/.emscripten \\\n    && rm -rf /emsdk \\\n    && rm -rf /emscripten/tests \\\n    && rm -rf /emscripten/site \\\n    && rm -rf /binaryen/src /binaryen/lib /binaryen/CMakeFiles \\\n    && for prog in em++ em-config emar emcc emconfigure emmake emranlib emrun emscons emcmake; do \\\n           ln -sf /emscripten/$prog /usr/local/bin; done \\\n    && apt-get -y --purge remove gnupg curl git-core build-essential gcc \\\n    && apt-get -y clean \\\n    && apt-get -y autoclean \\\n    && apt-get -y autoremove \\\n    && echo \"Installed ... testing\"\nRUN emcc --version \\\n    && mkdir -p /tmp/emscripten_test && cd /tmp/emscripten_test \\\n    && printf '#include <iostream>\\nint main(){std::cout<<\"HELLO\"<<std::endl;return 0;}' > test.cpp \\\n    && em++ -O2 test.cpp -o test.js && nodejs test.js \\\n    && em++ test.cpp -o test.js && nodejs test.js \\\n    && em++ -s WASM=1 test.cpp -o test.js && nodejs test.js \\\n    && cd / \\\n    && rm -rf /tmp/emscripten_test \\\n    && echo \"All done.\"\n\nVOLUME [\"/src\"]\nWORKDIR /src\n"
    },
    {
        "filename": "93905e7c31518710bfe044787ec9ba2f6667210c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:10\nMAINTAINER Benjamin Bouvier <public@benj.me>\n\n# Install Weboob OS-level dependencies.\nRUN apt-get update \\\n && apt-get install -y git python python-dev libffi-dev \\\n    libxml2-dev libxslt-dev libyaml-dev libtiff-dev libjpeg-dev zlib1g-dev \\\n    libfreetype6-dev libwebp-dev build-essential gcc g++ wget unzip mupdf-tools \\\n && rm -rf /var/lib/apt/lists/;\n\n# Install Weboob python dependencies\nRUN mkdir /tmp/install && \\\n    cd /tmp/install && \\\n    wget https://bootstrap.pypa.io/get-pip.py && \\\n    python ./get-pip.py && \\\n    pip install -U setuptools && \\\n    pip install html2text simplejson BeautifulSoup PyExecJS pdfminer && \\\n    rm -rf /tmp/install;\n\n# Setup kresus layout.\nRUN useradd -d /home/user -m -s /bin/bash -U user && \\\n    mkdir -p /home/user/data && \\\n    mkdir -p /weboob;\n\nCOPY ./config.example.ini /opt/config.ini\nRUN chmod -x /opt/config.ini\nCOPY ./entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\n# -> Install and compile the app.\nRUN cd /home/user && \\\n    wget https://github.com/kresusapp/kresus/archive/master.zip && \\\n    unzip master.zip && \\\n    rm master.zip && \\\n    mv kresus-master app && \\\n    cd /home/user/app && \\\n    npm install && \\\n    npm run build:prod && \\\n    rm -rf node_modules && \\\n    npm install --production && \\\n    chown -R user:user /home/user;\n\nWORKDIR /home/user/app\n\nENV HOST 0.0.0.0\nENV KRESUS_DIR /home/user/data\nENV KRESUS_WEBOOB_DIR /weboob\nENV NODE_ENV production\n\nVOLUME /home/user/data\nVOLUME /weboob\nEXPOSE 9876\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/home/user/app/bin/kresus.js --config /opt/config.ini\"]\n"
    },
    {
        "filename": "93aa2c2db61ee802b60825fb43d95dd65de48a38.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockette/wheezy\n\nMAINTAINER Milan Sulc <sulcmil@gmail.com>\n\n# PHP\nENV PHP_MODS_DIR=/etc/php5/mods-available\nENV PHP_CLI_DIR=/etc/php5/cli\nENV PHP_CLI_CONF_DIR=${PHP_CLI_DIR}/conf.d\nENV PHP_CGI_DIR=/etc/php5/cgi\nENV PHP_CGI_CONF_DIR=${PHP_CGI_DIR}/conf.d\n\n# INSTALLATION\nRUN apt-get update && apt-get dist-upgrade -y && \\\n    # DEPENDENCIES #############################################################\n    apt-get install -y wget curl git && \\\n    # PHP DOTDEB ###############################################################\n    echo 'deb http://packages.dotdeb.org wheezy-php55 all' >> /etc/apt/sources.list.d/dotdeb.list && \\\n    echo 'deb-src http://packages.dotdeb.org wheezy-php55 all' >> /etc/apt/sources.list.d/dotdeb.list && \\\n    wget http://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg && rm dotdeb.gpg && \\\n    apt-get update && \\\n    apt-get install -y \\\n        php5-apcu \\\n        php5-cgi \\\n        php5-cli \\\n        php5-curl \\\n        php5-geoip \\\n        php5-gd \\\n        php5-intl \\\n        php5-imagick \\\n        php5-imap \\\n        php5-ldap \\\n        php5-mcrypt \\\n        php5-memcache \\\n        php5-mongo \\\n        php5-mysql \\\n        php5-pgsql \\\n        php5-redis \\\n        php5-sqlite \\\n        php5-ssh2 \\\n        php5-xmlrpc \\\n        php5-xsl && \\\n    # COMPOSER #################################################################\n    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\n    composer global require \"hirak/prestissimo:^0.3\" && \\\n    # PHP MOD(s) ###############################################################\n    ln -s ${PHP_MODS_DIR}/custom.ini ${PHP_CLI_CONF_DIR}/999-custom.ini && \\\n    ln -s ${PHP_MODS_DIR}/custom.ini ${PHP_CGI_CONF_DIR}/999-custom.ini && \\\n    # CLEAN UP #################################################################\n    apt-get clean -y && \\\n    apt-get autoclean -y && \\\n    apt-get remove -y wget curl && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/* /var/lib/log/* /tmp/* /var/tmp/*\n\n# FILES (it overrides originals)\nADD conf.d/custom.ini ${PHP_MODS_DIR}/custom.ini\n\n# WORKDIR\nWORKDIR /srv\n\n# COMMAND\nCMD [\"php\"]\n"
    },
    {
        "filename": "9444b9cb9eb7a8aaac2263720fa774e24634e32a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM zachdeibert/mono-docker\n\nMAINTAINER Zach Deibert<zachdeibert@gmail.com>\n\nENTRYPOINT [\"/launch.sh\"]\nCMD [\":0\"]\n\nRUN apt-get update && apt-get install -y monodevelop monodevelop-nunit && rm -rf /var/lib/apt/lists/*\nADD launch.sh /launch.sh\n"
    },
    {
        "filename": "94794e816845132123a593d2fca02a76bd4e9830.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ceph/base \nMAINTAINER franck@besnard.mobi \n\nRUN apt-get install -y ceph-deploy\nRUN apt-get clean\n\nRUN echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\n\nRUN mkdir -p /root/.ssh\nADD id_rsa /root/.ssh/id_rsa\nADD id_rsa.pub /root/.ssh/id_rsa.pub\nADD config /root/.ssh/config\n\nRUN mkdir -p /home/ceph/.ssh\nADD id_rsa /home/ceph/.ssh/id_rsa\nADD id_rsa.pub /home/ceph/.ssh/id_rsa.pub\nADD config /home/ceph/.ssh/config\nADD ceph.conf /home/ceph/ceph.conf\nADD bootstrap.sh /home/ceph/bootstrap.sh\nADD init-mon.sh /home/ceph/init-mon.sh\nADD init-osd.sh /home/ceph/init-osd.sh\nADD init-mds.sh /home/ceph/init-mds.sh\nRUN chown -R ceph.ceph /home/ceph/\n\nENTRYPOINT [\"/bin/bash\"]\n"
    },
    {
        "filename": "94dae2db16af81aef49775deaf7903cdbc4389d0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Petter Chr. Bjelland <post@pcbje.com>\n\nADD gransk /app/gransk\nADD utils /app/utils\nADD config.yml /app/config.yml\nADD requirements.txt /app/requirements.txt\nADD run_tests.py /app/run_tests.py\nADD setup.py /app/setup.py\nADD README.md /app/README.md\nWORKDIR /app\n\nRUN apt-get update\nRUN apt-get install --force-yes -y \\\n      python-dev python-setuptools zlib1g-dev unzip p7zip-full p7zip-rar \\\n      python-pip libicu-dev poppler-utils ghostscript && \\\n  pip install -r utils/dfvfs-requirements.txt && \\\n  pip install -r requirements.txt && \\\n  python setup.py install && \\\n  python setup.py download\n\nRUN python run_tests.py\n\nRUN apt-get install --force-yes -y \\\n    nodejs nodejs-legacy npm openjdk-7-jdk fontconfig && \\\n    cd gransk/web/tests/ && rm -rf node_modules && npm install && cd ../../../ && \\\n    gransk/web/tests/node_modules/.bin/karma start gransk/web/tests/cover.conf.js && \\\n    rm -rf gransk/web/tests/node_modules && \\\n    apt-get remove --force-yes -y --purge \\\n        nodejs nodejs-legacy npm default-jre openjdk-7-jdk fontconfig && \\\n    apt-get --force-yes -y autoremove\n\nENTRYPOINT [\"python\", \"-m\", \"gransk.boot.ui\", \"--host=0.0.0.0\"]\n"
    },
    {
        "filename": "94dde68c20651a4a6542c10b3f50d26ca5f5321a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# base image\nFROM ubuntu:xenial\n\n# metadata\nLABEL base.image=\"ubuntu:xenial\"\nLABEL version=\"2\"\nLABEL software=\"QUAST\"\nLABEL software.version=\"5.0.0\"\nLABEL description=\"Genome assembly evaluation tool\"\nLABEL website=\"https://github.com/ablab/quast\"\nLABEL license=\"https://github.com/ablab/quast/blob/master/LICENSE.txt\"\n\n# Maintainer\nMAINTAINER Curtis Kapsak <pjx8@cdc.gov>\n\nRUN apt-get update && apt-get install -y zlib1g-dev \\\n  pkg-config \\\n  libfreetype6-dev \\\n  libpng-dev \\\n  wget \\\n  g++ \\\n  make \\\n  perl \\\n  python \\\n  python-setuptools \\\n  python-matplotlib \\\n  python-pip \\\n  locales && \\\n  locale-gen en_US.UTF-8 && \\\n  apt-get clean && apt-get autoclean\n\nRUN python -m pip install -U pip\n\nRUN wget https://downloads.sourceforge.net/project/quast/quast-5.0.0.tar.gz && \\\n    tar -xzf quast-5.0.0.tar.gz && \\\n    rm -r quast-5.0.0.tar.gz\n\nRUN cd /quast-5.0.0 && \\\n    /quast-5.0.0/setup.py install\nRUN cd /quast-5.0.0 && \\\n    /quast-5.0.0/setup.py test && \\\n    mkdir /data\n\nWORKDIR /data\n"
    },
    {
        "filename": "94fe0be602096d4c1461e8f3cce825b55c9a0ec0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:17.10\nARG ORCHID_DB_USED='false'\nARG ORCHID_DB_HOST='localhost'\nARG ORCHID_DB_USER='orchid'\nARG ORCHID_DB_PASS='orchid_flower'\n\nMAINTAINER Clint Cario, https://github.com/ccario83\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install python2.7, java 8, and required system libraries\nUSER root\nRUN apt-get update -q && \\\n\tapt-get install -y -q \\\n\tpython \\\n\tpython-pip \\\n\tpython-dev \\\n\tpython-six \\\n\tpython-ipykernel \\\n\tpython-tk \\\n\tjupyter-notebook \\\n\tjupyter-core \\\n\tdefault-jre \\\n\tdefault-jdk \\\n\tmysql-client \\\n\tlibmysqlclient-dev \\\n\tbedtools \\\n\tsamtools \\\n\ttabix \\\n\tgit \\\n\twget \\\n\tcurl \\\n\tunzip && \\\n\tapt-get -q clean\n\n# Get the orchid code\n#RUN git clone https://github.com/Wittelab/orchid.git\nADD . /orchid\n\n# Set the working directory to /app\nWORKDIR /orchid\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --upgrade pip && pip install -r requirements.txt\n\n# If building a database, get nextflow\nWORKDIR /orchid/workflow\nRUN if [ \"$ORCHID_DB_USED\" = \"true\" ]; then export NXF_VER='0.26.0'; curl -s https://get.nextflow.io | bash; fi\n\n# If building a database, download genomic data\nRUN if [ \"$ORCHID_DB_USED\" = \"true\" ]; then /orchid/workflow/nextflow run /orchid/workflow/download.nf; fi\n\n# If building a database, build it\nWORKDIR /orchid\nRUN if [ \"$ORCHID_DB_USED\" = \"true\" ]; then sh ./make_database.sh ; fi\n\n# Define environment variable\nENV NAME Orchid\n\n# Change to the notebook directory \nWORKDIR /orchid/notebooks\n\n# Make port 8400 available to the world outside this container\nEXPOSE 8400\n\n# There is an issue running jupyter directly in docker (something about pseudo-exec...), this wrapper script is the workaround\n#RUN echo '#!/bin/bash\\njupyter notebook --ip=0.0.0.0 --port=8400 --no-browser --debug' > jupyter_wrapper.sh && chmod a+x jupyter_wrapper.sh\n\n# And start jupyter notebook (using the wrapper script)\nCMD jupyter notebook --ip=0.0.0.0 --port=8400 --no-browser --debug\n#CMD [\"bash\", \"/orchid/notebooks/jupyter_wrapper.sh\"]"
    },
    {
        "filename": "955c1aa7e70811f530098fdf6f21d94e76be90af.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Christian L\u00fcck <christian@lueck.tv>\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \\\n  nginx php5-fpm supervisor \\\n  wget unzip php5-cli\n\n# install phpvirtualbox\nRUN wget http://sourceforge.net/projects/phpvirtualbox/files/phpvirtualbox-4.3-1.zip/download -O phpvirtualbox-4.3-1.zip\nRUN unzip phpvirtualbox-4.3-1.zip\nRUN mv phpvirtualbox-4.3-1 /var/www\nADD config.php /var/www/config.php\nRUN chown www-data:www-data -R /var/www\n\n# add phpvirtualbox as the only nginx site\nADD phpvirtualbox.nginx.conf /etc/nginx/sites-available/phpvirtualbox\nRUN ln -s /etc/nginx/sites-available/phpvirtualbox /etc/nginx/sites-enabled/phpvirtualbox\nRUN rm /etc/nginx/sites-enabled/default\n\nWORKDIR /var/www\n\n# use supervisor to monitor all services\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# add startup script to write linked instances to server config\nADD servers-from-env.php /servers-from-env.php\n\n# add empty dummy config that will be overwritten by CMD script\nRUN echo \"<?php return array(); ?>\" > /var/www/config-servers.php\n\n# write linked instances to config, then monitor all services\nCMD php /servers-from-env.php && \\\n  supervisord -c /etc/supervisor/conf.d/supervisord.conf\n\n# expose only nginx HTTP port\nEXPOSE 80\n\n"
    },
    {
        "filename": "956ae28e932e9c6feb11fa028dfff1bfcc42aaa5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM andreyfedoseev/django-static-precompiler\nMAINTAINER Andrey Fedoseev <andrey.fedoseev@gmail.com>\nRUN apt-get update && apt-get install -y python2.7-dev python3.5-dev python-pip sqlite3\nRUN mkdir /app\nWORKDIR /app\nADD requirements-*.txt /app/\nRUN pip install -r requirements-dev.txt\nADD . /app/\nRUN pip install -e .[libsass]\n"
    },
    {
        "filename": "9576ab30b65fba887201d1e2069415a1cba525ef.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.13\nMAINTAINER Nicolas Pace <nicolas.pace@unixono.com.ar>\n\n# Set correct environment variables.\nENV HOME /root\n\n# Regenerate SSH host keys. baseimage-docker does not contain any, so you\n# have to do that yourself. You may also comment out this instruction; the\n# init system will auto-generate one during boot.\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n# Use libssh 0.7 https://github.com/tmate-io/tmate/issues/82#issuecomment-216165761\nRUN apt-add-repository ppa:kedazo/libssh-0.7.x\n\nRUN apt-get update && \\\n    apt-get -y install git-core build-essential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev automake libssh-dev cmake ruby && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Use the latest msgpack-c https://github.com/tmate-io/tmate/issues/82#issuecomment-216165761\nRUN git clone https://github.com/msgpack/msgpack-c.git && \\\n    cd msgpack-c && \\\n    cmake . && \\\n    make && \\\n    make install && \\\n    cd ..\n\nRUN git clone https://github.com/nviennot/tmate-slave.git\n\nRUN cd tmate-slave && \\\n    ./create_keys.sh && \\\n    ./autogen.sh && \\\n    ./configure && \\\n     make\n\nRUN mkdir /etc/service/tmate-slave\nADD tmate-slave.sh /etc/service/tmate-slave/run\n\nRUN mkdir -p /etc/my_init.d\nADD message.sh /etc/my_init.d/message.sh\n"
    },
    {
        "filename": "957b4e26002319d43deec265899fb7aaad194012.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\nWORKDIR /codec_compare\n\n# DEPENDENCIES\nRUN apt-get clean && apt-get update && apt-get install -y \\\n    wget \\\n    unzip \\\n    g++ \\\n    make \\\n    patchelf \\\n    bzip2 \\\n    pkg-config \\\n    yasm \\\n    subversion \\\n    python \\\n    imagemagick \\\n    python-pip && \\\n    pip install plotly\n\n# JPEG\nRUN mkdir -p /tools && \\\n    cd /tools && \\\n    wget -O jpeg.zip https://jpeg.org/downloads/jpegxt/reference1367abcd89.zip && \\\n    unzip jpeg.zip -d jpeg && \\\n    rm -f jpeg.zip && \\\n    cd jpeg && \\\n    ./configure && \\\n    make\n\n# KAKADU\nRUN mkdir -p /tools && \\\n    cd /tools && \\\n    wget -O kakadu.zip http://kakadusoftware.com/wp-content/uploads/2014/06/KDU7A2_Demo_Apps_for_Ubuntu-x86-64_170827.zip && \\\n    unzip kakadu.zip -d kakadu && \\\n    rm -f kakadu.zip && \\\n    patchelf --set-rpath '$ORIGIN/' /tools/kakadu/KDU7A2_Demo_Apps_for_Ubuntu-x86-64_170827/kdu_compress && \\\n    patchelf --set-rpath '$ORIGIN/' /tools/kakadu/KDU7A2_Demo_Apps_for_Ubuntu-x86-64_170827/kdu_expand && \\\n    patchelf --set-rpath '$ORIGIN/' /tools/kakadu/KDU7A2_Demo_Apps_for_Ubuntu-x86-64_170827/kdu_v_compress && \\\n    patchelf --set-rpath '$ORIGIN/' /tools/kakadu/KDU7A2_Demo_Apps_for_Ubuntu-x86-64_170827/kdu_v_expand\n\n# WEBP\nRUN mkdir -p /tools && \\\n    cd /tools && \\\n    wget -O libwebp.tar.gz https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-0.6.1-linux-x86-64.tar.gz  && \\\n    tar xvzf libwebp.tar.gz && \\\n    rm -f libwebp.tar.gz\n\n# HEVC\nRUN mkdir -p /tools && \\\n    cd /tools && \\\n    svn checkout https://hevc.hhi.fraunhofer.de/svn/svn_HEVCSoftware/tags/HM-16.9+SCM-8.0/ && \\\n    cd HM-16.9+SCM-8.0/build/linux && \\\n    make\n\n# VMAF, FFMPEG\nRUN mkdir -p /tools && \\\n    cd /tools && \\\n    wget -O vmaf.zip https://github.com/Netflix/vmaf/archive/v1.3.1.zip && \\\n    unzip vmaf.zip && \\\n    rm -f vmaf.zip && \\\n    cd vmaf-1.3.1 && \\\n    make && \\\n    make install && \\\n    cd /tools && \\\n    wget -O ffmpeg.tar.bz2 http://ffmpeg.org/releases/ffmpeg-3.4.1.tar.bz2 && \\\n    tar -vxjf ffmpeg.tar.bz2 && \\\n    rm ffmpeg.tar.bz2 && \\\n    cd ffmpeg-3.4.1 && \\\n    ./configure --enable-libvmaf && \\\n    make install\n\n# TO ADD ANOTHER\n# ADD /local/path/to/bin /tools/bin\n# ^ This will add the file from the host machine into the container. In this case the bin is accessible at: `/tools/bin`.\n"
    },
    {
        "filename": "95ca0cb61eeef79df0b8391ee360d2dae27496ee.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Damian Soriano <ds@ingadhoc.com>\n\nRUN apt-get clean\nRUN apt-get update\nRUN apt-get upgrade -y\n\nRUN apt-get -y install postgresql\n\nRUN apt-get -y install python\nRUN apt-get -y install python-pip\n\nRUN apt-get -y install rsync\n\nRUN apt-get -y install postgresql-server-dev-all\n\nRUN apt-get -y install libpq-dev python-dev\n\nRUN pip install argcomplete\nRUN pip install argh\nRUN pip install psycopg2\nRUN pip install python-dateutil\nRUN pip install distribute\n\nRUN apt-get -y install barman\n\nRUN apt-get -y install vim\nRUN apt-get -y install man\n\n# Add pg public key and authorized_key\nADD pg_id_rsa.pub /var/lib/barman/.ssh/pg_id_rsa.pub\nADD authorized_keys /var/lib/barman/.ssh/authorized_keys\n\nRUN chown -R barman.barman /var/lib/barman/.ssh\n\n# Add barman keys and change permisions\nADD id_rsa /var/lib/barman/.ssh/id_rsa\nADD id_rsa.pub /var/lib/barman/.ssh/id_rsa.pub\nADD ssh_config /var/lib/barman/.ssh/config\nRUN chown -R barman.barman /var/lib/barman/.ssh\nRUN chmod 700 /var/lib/barman/.ssh/id_rsa\n\n# From http://stackoverflow.com/questions/18173889/cannot-access-centos-sshd-on-docker\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nRUN sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config\n\nADD barman.conf /etc/barman.conf\n\n#RUN service postgresql start\n\nEXPOSE 22\n\nRUN /etc/init.d/ssh start\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "9648903363cd4e4ee6199804b0454f88e938148d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ann-benchmarks\n\nRUN apt-get install -y python-setuptools python-pip\nRUN pip3 install pybind11 numpy setuptools\nRUN git clone https://github.com/nmslib/hnsw.git;cd hnsw; git checkout denorm\n\nRUN cd hnsw/python_bindings; python3 setup.py install\n\nRUN python3 -c 'import hnswlib'\n\n"
    },
    {
        "filename": "967159e688afee40282ce2cfa5e49f801d7c02c6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \nMAINTAINER dolby xiaowen \"githubxiaowen@gmail.com\"  \nRUN apt-get install -y curl  \nRUN curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -  \nRUN apt-get update  \nRUN apt-get install -y nodejs  \nRUN npm install -g bower  \nRUN npm install -g mongoose  \nRUN npm install -g express  \n\n"
    },
    {
        "filename": "96b9e6899e5fc00fc478d60f6e909a984b9d7006.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:xenial\nMAINTAINER obscur95 <obscur95@gmail.com>\n#\nENV DEBIAN_FRONTEND noninteractive \\\n\tDEBCONF_NONINTERACTIVE_SEEN true\n#\n#Configuration de la langue FR\n#\nRUN locale-gen fr_FR.UTF-8\nENV LANG fr_FR.UTF-8\nENV LANGUAGE fr_FR:fr\nENV LC_ALL fr_FR.UTF-8\n#\n#\n#Creation des repertoires\n#\nRUN mkdir /home/gns3 \\\n\t&& mkdir /home/gns3/GNS3 \\\n\t&& mkdir /home/gns3/GNS3/images \\\n\t&& mkdir /home/gns3/GNS3/images/IOS \\\n\t&& mkdir /home/gns3/GNS3/images/IOU \\\n\t&& mkdir /home/gns3/GNS3/images/QEMU \\\n\t&& mkdir /home/gns3/GNS3/images/QEMU/CSR1000v \\\n\t&& mkdir /home/gns3/GNS3/images/QEMU/Fortigate \\\n\t&& mkdir /home/gns3/GNS3/images/QEMU/PC \\\n\t&& mkdir /home/gns3/GNS3/projects\n#\n#Copie du fichier sources.list\n#\nCOPY sources.list /etc/apt/sources.list\n#\n#Mise a jour de la distribution\n#\nRUN dpkg --add-architecture i386 \\\n\t&& apt-get update \\\n\t&& apt-get -y dist-upgrade\n#\n#Installation des packages\n#\nRUN apt-get -y install libc6:i386 libstdc++6:i386 \\\n\t&& apt-get -y install libssl1.0.0:i386 \\\n\t&& apt-get -y install lsb-release telnet traceroute tcpdump net-tools vim nano \\\n\t&& apt-get -y install git bison flex \\\n\t&& apt-get -y install python3-setuptools python3.5 \\\n\t&& apt-get -y install python3-pip \\\n\t&& python3.5 -m pip install -U pip\n#\n#Pre-requis GNS3 server\n#\nRUN apt-get -y install qemu-kvm qemu-system-x86 vpcs dynamips uuid-runtime \\\n\t&& cd /tmp ; git clone http://github.com/ndevilla/iniparser.git ; cd iniparser ; make \\\n\t&& cp /tmp/iniparser/libiniparser.* /usr/lib/ \\\n\t&& cp /tmp/iniparser/src/iniparser.h /usr/local/include \\\n\t&& cp /tmp/iniparser/src/dictionary.h /usr/local/include \\\n\t&& cd /tmp ; git clone https://github.com/GNS3/iouyap.git ; cd iouyap ; make ; make install \\\n\t&& apt-get -y install libpcap-dev \\\n\t&& cd /tmp ; git clone https://github.com/GNS3/ubridge.git ; cd ubridge ; make ; make install \\\n\t&& cd / \\\n\t&& ln -s /lib/i386-linux-gnu/libcrypto.so.1.0.0 /lib/i386-linux-gnu/libcrypto.so.4\n#\n#Installation de GNS3 server\n#\nRUN python3.5 -m pip install gns3-server\n#\n#Copie du fichier de configuration de GNS3 server\n#\nCOPY GNS3.conf /etc/xdg/GNS3.conf\n#\n#Copie des images IOS\n#\nCOPY IOS/c3745-advipservicesk9-mz.124-25d.bin /home/gns3/GNS3/images/IOS/c3745-advipservicesk9-mz.124-25d.bin\nCOPY IOS/c7200-adventerprisek9-mz.124-15.T17.bin /home/gns3/GNS3/images/IOS/c7200-adventerprisek9-mz.124-15.T17.bin\nCOPY IOS/c7200-adventerprisek9-mz.152-4.S7.bin /home/gns3/GNS3/images/IOS/c7200-adventerprisek9-mz.152-4.S7.bin\n#\n#Copie des images IOU\n#\nCOPY IOU/CiscoIOUKeygen.py /home/gns3/GNS3/images/IOU/CiscoIOUKeygen.py\nCOPY IOU/i86bi-linux-l2-adventerprisek9-15.6.0.9S.bin /home/gns3/GNS3/images/IOU/i86bi-linux-l2-adventerprisek9-15.6.0.9S.bin\nCOPY IOU/i86bi-linux-l2-ipbasek9-15.1g.bin /home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin\nCOPY IOU/i86bi-linux-l3-adventerprisek9-15.5.2T.bin /home/gns3/GNS3/images/IOU/i86bi-linux-l3-adventerprisek9-15.5.2T.bin\n#\n#Copie des images QEMU\n#\nCOPY QEMU/CSR1000v/csr1000v_harddisk.vmdk /home/gns3/GNS3/images/QEMU/CSR1000v/csr1000v_harddisk.vmdk\nCOPY QEMU/CSR1000v/csr1000v-universalk9.03.16.04b.S.155-3.S4b-ext.iso /home/gns3/GNS3/images/QEMU/CSR1000v/csr1000v-universalk9.03.16.04b.S.155-3.S4b-ext.iso\nCOPY QEMU/Fortigate/fortios_5.4.2.qcow2 /home/gns3/GNS3/images/QEMU/Fortigate/fortios_5.4.2.qcow2\nCOPY QEMU/Fortigate/fortigate_p10G.qcow2 /home/gns3/GNS3/images/QEMU/Fortigate/fortigate_p10G.qcow2\nCOPY QEMU/PC/TinyCore-current.iso /home/gns3/GNS3/images/QEMU/PC/TinyCore-current.iso\nCOPY QEMU/PC/TinyCore-hda.qcow2 /home/gns3/GNS3/images/QEMU/PC/TinyCore-hda.qcow2\n#\n#Rends executable les images IOS et IOU\n#\nRUN chmod +x /home/gns3/GNS3/images/IOS/c3745-advipservicesk9-mz.124-25d.bin \\\n\t&& chmod +x /home/gns3/GNS3/images/IOS/c7200-adventerprisek9-mz.124-15.T17.bin \\\n\t&& chmod +x /home/gns3/GNS3/images/IOS/c7200-adventerprisek9-mz.152-4.S7.bin \\\n\t&& chmod +x /home/gns3/GNS3/images/IOU/i86bi-linux-l2-adventerprisek9-15.6.0.9S.bin \\\n\t&& chmod +x /home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin \\\n\t&& chmod +x /home/gns3/GNS3/images/IOU/i86bi-linux-l3-adventerprisek9-15.5.2T.bin\n#\n#Ouverture des ports\n#\nEXPOSE 3080 4000-4050 5900-5910\n#\n#Copie du fichier de demarrage\n#\nCOPY startup.sh /home/gns3/startup.sh\nRUN chmod a+x /home/gns3/startup.sh\n#\nENTRYPOINT cd /home/gns3 ; ./startup.sh\n#\n"
    },
    {
        "filename": "974f5fde02f6baa9510512ffe099c9e4018b7091.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM mysql  \nMAINTAINER Florian Lambert <florian.lambert@cycloid.io>  \n  \nRUN apt-get update && \\  \napt-get install python-pip cron -y && \\  \npip install awscli && \\  \nrm -fr /var/cache/apk/* /var/lib/apt/lists/*  \n  \nRUN mkdir -p /backup  \nCOPY scripts /scripts  \n  \nWORKDIR /scripts  \n  \nENTRYPOINT [\"/scripts/entrypoint.sh\"]  \n\n"
    },
    {
        "filename": "97696b7915817ffb1557b989a1d14f63847a4a50.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# We're using Ubuntu 14:04 because ProxySQL compilation needs one of the latest\n# g++ compilers. Also, it's a long term release.\nFROM ubuntu:14.04\nMAINTAINER Andrei Ismail <iandrei@gmail.com>\nRUN apt-get update && apt-get install -y\\\n\tautomake\\\n\tcmake\\\n\tmake\\\n\tg++\\\n\tgcc\\\n\tgdb\\\n\tgdbserver\\\n\tgit\\\n\tlibmysqlclient-dev\\\n\tlibssl-dev\\\n\tlibtool\n\nRUN cd /opt; git clone https://github.com/akopytov/sysbench.git\nRUN cd /opt/sysbench; ./autogen.sh; ./configure --bindir=/usr/bin; make; make install\n\nADD ./proxysql.cnf /etc/\nRUN mkdir -p /var/run/proxysql\nADD ./compile_and_start_proxysql.sh /tmp/\nRUN chmod +x /tmp/compile_and_start_proxysql.sh\n\nCMD [\"/tmp/compile_and_start_proxysql.sh\"]"
    },
    {
        "filename": "982fbe8579d5cff154df2081420eeccabc831609.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM docker.io/phusion/baseimage:0.9.21\nMAINTAINER Li Meng Jun <lmjubuntu@gmail.com>\n\nRUN apt-get update && apt-get install -y python3-pip git python-pip python\n\nRUN pip3 install anymarkup\n\nADD bootstrap.py /usr/local/bin/bootstrap.py\nADD xmlrunner.py /root/xmlrunner\n\nWORKDIR /tmp\n\nCMD /usr/local/bin/bootstrap.py\n"
    },
    {
        "filename": "98869c22b4c3ea40f462c91b81d659295a461044.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Arthur Caranta <arthur@caranta.com>\n\n# Set the UTF-8 encoding and locale\nRUN locale-gen en_US.UTF-8  \nENV LANG en_US.UTF-8  \nENV LANGUAGE en_US:en  \nENV LC_ALL en_US.UTF-8 \n\n# Make sure the package repository is up to date\nRUN apt-get update && apt-get upgrade -y\n\n# Install Python\nRUN apt-get -y install python-pip\nRUN pip install docker-py\n\n# Clean up APT when done.\nRUN apt-get -qy clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nADD backup.py /backup.py\nWORKDIR /\n\nENTRYPOINT [\"python\",  \"/backup.py\" ]\n"
    },
    {
        "filename": "990339c81597d080174616a8576e7b8613b1597c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.11\nMAINTAINER Lien Chiang <xsoameix@gmail.com>\n\n# Install berkshelf\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN apt-get update -y\nRUN apt-get install -y curl libxml2-dev libxslt-dev git \\\n                       autoconf automake build-essential\nRUN curl -L https://www.opscode.com/chef/install.sh | bash\nRUN echo \"gem: --no-ri --no-rdoc\" > ~/.gemrc\nRUN /opt/chef/embedded/bin/gem install berkshelf\n\n# install dependencies\nADD package.json app/package.json\n\n# Use cookbooks\nADD docker/cookbooks/ly.g0v.tw /chef\nRUN cd /chef && LC_ALL=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor cookbooks\nRUN chef-solo -c /chef/solo.rb -j /chef/solo.json\n"
    },
    {
        "filename": "990747e92521b76660e76221079e672bf828d24e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Gianluca Arbezzano <gianarb92@gmail.com>\n\nENV INFLUXDB_CONF=/etc/influxdb_conf.toml\n\nRUN apt-get update\nRUN apt-get install -y wget\n\nRUN wget https://s3.amazonaws.com/influxdb/influxdb_0.12.1-1_amd64.deb\nRUN dpkg -i influxdb_0.12.1-1_amd64.deb\nRUN rm influxdb_0.12.1-1_amd64.deb\n\nEXPOSE 8083\nEXPOSE 8086\n\nADD ./run.sh ./run.sh\nRUN chmod 755 ./run.sh\nADD ./influxdb_conf.toml $INFLUXDB_CONF\n\nENTRYPOINT [\"./run.sh\"]\n"
    },
    {
        "filename": "b7f02b8a753ee0db6dea004f1e833e44db67d5d3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM python:3.6\nMAINTAINER Frojd\nLABEL version=\"v{{cookiecutter.version}}\"\n\nENV PYTHONUNBUFFERED=1 \\\n    DJANGO_SETTINGS_MODULE=pipit.settings.local \\\n    ALLOWED_HOSTS=* \\\n    INTERNAL_IPS=0.0.0.0 \\\n    SECRET_KEY=generatesecretkeyhere \\\n    MEDIA_PATH=/app/media \\\n    STATIC_PATH=/app/static \\\n    APP_LOG_DIR=/var/log/ \\\n    REQUIREMENTS=local.txt \\\n    DATABASE_USER=postgres \\\n    DATABASE_PASSWORD=postgres \\\n    DATABASE_NAME=postgres \\\n    DATABASE_HOST=db \\\n    REACT_HOST=http://ssr:3000\n\nWORKDIR /app\nADD . /app/\n\nRUN apt-get update \\\n    && apt-get install -y netcat \\\n    && apt-get install -y binutils libproj-dev gdal-bin \\\n    && apt-get install -y vim curl gettext \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -L https://raw.githubusercontent.com/Frojd/Wagtail-Boilerplate/develop/config/.vimrc > ~/.vimrc\n\nRUN apt-get update && apt-get -y install postgresql\n\nRUN pip install --upgrade pip \\\n    && pip install -r requirements/$REQUIREMENTS --no-cache-dir \\\n    && pip install ipython \\\n    && pip install pywatchman\n\nEXPOSE 8000\n\nENTRYPOINT [\"./docker-entrypoint.sh\"]\nCMD [\"runserver\"]\n"
    },
    {
        "filename": "b92f4b2326b2b4108dbd67290284b44a4f444cdb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Christian Decker <decker@blockstream.com>\nRUN apt-get update -q && apt-get install -y supervisor git software-properties-common && \\\n    add-apt-repository ppa:bitcoin/bitcoin && \\\n    apt-get update -q && \\\n    apt-get install -y \\\n    \t    autoconf \\\n\t    libtool \\\n\t    libprotobuf-c-dev \\\n\t    libsodium-dev \\\n\t    libsqlite3-dev \\\n\t    libgmp-dev \\\n\t    build-essential \\\n\t    libsqlite3-dev \\\n\t    bitcoind \\\n\t    protobuf-c-compiler \\\n\t    g++ \\\n\t    curl \\\n\t    gcc \\\n\t    libc6-dev \\\n\t    make \\\n\t    pkg-config && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get install -y build-essential\nRUN git clone https://github.com/luke-jr/libbase58.git /opt/libbase58 && cd /opt/libbase58 && ./autogen.sh && ./configure && make && make install\nRUN useradd lightning; mkdir /lightning /bitcoin; chown lightning:users /lightning /bitcoin\nRUN git clone https://github.com/ElementsProject/lightning.git /opt/lightning; cd /opt/lightning; make\n\nADD supervisor.conf /etc/supervisor/conf.d/\nRUN echo \"testnet=1\\nrpcuser=rpcuser\\nrpcpassword=rpcpass\" > /bitcoin/bitcoin.conf\n\nRUN sed -i 's/^\\(\\[supervisord\\]\\)$/\\1\\nnodaemon=true/' /etc/supervisor/supervisord.conf\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.7.3\nENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz\nENV GOLANG_DOWNLOAD_SHA256 508028aac0654e993564b6e2014bf2d4a9751e3b286661b0b0040046cf18028e\n\nRUN curl -fsSL \"$GOLANG_DOWNLOAD_URL\" -o golang.tar.gz \\\n\t&& echo \"$GOLANG_DOWNLOAD_SHA256  golang.tar.gz\" | sha256sum -c - \\\n\t&& tar -C /usr/local -xzf golang.tar.gz \\\n\t&& rm golang.tar.gz\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\nRUN go get github.com/cdecker/kugelblitz/...\n\nVOLUME ['/bitcoin', '/lightning']\nEXPOSE 19735\n"
    },
    {
        "filename": "b9dffbc0ccd6550d111336361731885a9762b32c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\nEXPOSE 8125 \nADD . /statsite\n\nRUN mkdir -p /statsite && mkdir -p /var/run/statsite && \\\n    apt-get update && \\\n    apt-get install -y build-essential check scons libjansson-dev libcurl4-openssl-dev libcurl3 libjansson4 && \\\n    (cd statsite && make) && \\\n    apt-get purge -y build-essential check scons libcurl4-openssl-dev libjansson-dev && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nVOLUME [\"/etc/statsite\"]\nCMD [\"/statsite/statsite\", \"-f\", \"/etc/statsite/statsite.conf\"]\n\n"
    },
    {
        "filename": "bae1e3ed616e96fd52c7e3c9295666208d999d45.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM chriz2600/quartus-lite:latest\n\nRUN apt-get update && apt-get install -y curl make gcc\nADD files/51-usbblaster.rules /etc/udev/rules.d/51-usbblaster.rules\nRUN mkdir -p /srv && cd /root && git clone --recurse-submodules https://github.com/chriz2600/DreamcastHDMI.git\nADD files/build /root/build\nADD files/build.projects /root/build.projects\nADD files/program /root/program\nADD files/firmware-packer /root/firmware-packer\nADD files/firmware-unpacker /root/firmware-unpacker\n"
    },
    {
        "filename": "bb402f40df3ed4657df6d2329a2d4361cd53f77d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile for ab-mruby on ubuntu 14.04 64bit\n#\n\n#\n# Using Docker Image matsumotory/ab-mruby\n#\n# Pulling\n#   docker pull matsumotory/ab-mruby\n#\n# Running\n#  docker run -d matsumotory/ab-mruby http://example.com/\n#\n\n#\n# Manual Build\n#\n# Building\n#   docker build -t your_name:ab-mruby .\n#\n# Runing\n#   docker run -d your_name:ab-mruby http://example.com/\n#\n\nFROM ubuntu:14.04\nMAINTAINER matsumotory\n\nRUN apt-get -y update\nRUN apt-get -y install rake\nRUN apt-get -y install bison\nRUN apt-get -y install libapr1-dev\nRUN apt-get -y install libaprutil1-dev\nRUN apt-get -y install git\nRUN apt-get -y install make\n\nRUN cd /usr/local/src/ && git clone git://github.com/matsumoto-r/ab-mruby.git\nRUN cd /usr/local/src/ab-mruby && make && cp ab-mruby /usr/bin/.\n\nADD docker/ab-mruby.conf.rb /etc/ab-mruby/ab-mruby.conf.rb\nADD docker/ab-mruby.test.rb /etc/ab-mruby/ab-mruby.test.rb\n\nENTRYPOINT [\"/usr/bin/ab-mruby\", \"-m\", \"/etc/ab-mruby/ab-mruby.conf.rb\", \"-M\", \"/etc/ab-mruby/ab-mruby.test.rb\"]\n"
    },
    {
        "filename": "bc3c76de6881c8749bb5cd6a97fda534f50aba0f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Yugandha deshpande <yugandha@us.ibm.com>\"\n\nENV _R_CHECK_FORCE_SUGGESTS_ false\nRUN apt-get update \\\n\t&& apt-get install git -y \\\n\t&& R -e 'install.packages(\"RColorBrewer\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\"); install.packages(\"maps\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& git clone https://github.com/cran/latticeExtra.git  \\\n\t&& cd latticeExtra && git checkout 0.6-28 \\\n\t&& cd .. \\\n\t&& R CMD build latticeExtra \\\n\t&& R CMD INSTALL latticeExtra \\\n\t&& R CMD check latticeExtra --no-manual \\\n\t&& apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "bc56cc59fafe88b2d8f550d16dad592e770b1a2f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM cloud9/workspace\nMAINTAINER Cloud9 IDE, inc. <info@c9.io>\n\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && \\\n    apt-get install -y g++-5\n\nADD ./files/workspace /home/ubuntu/workspace\n\nRUN chmod -R g+w /home/ubuntu/workspace && \\\n    chown -R ubuntu:ubuntu /home/ubuntu/workspace\n\nADD ./files/check-environment /.check-environment/cpp\n"
    },
    {
        "filename": "bd3d1ca67407f722d04da8f31b4490b8498231ba.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# This Dockerfile aims to make building Hubble v2 packages easier.\n# To build an image: 1. copy pkg/scripts/pyinstaller-requirements.txt to directory with this Dockerfile\n#                    2. docker build -t <image_name> . --build-arg=HUBBLE_GIT_URL=<git_repo_url>\n#                                                      --build-arg=HUBBLE_CHECKOUT=<branch/tag/commit>\n# The resulting image is ready to run the pyinstaller on container start and drop hubble<version>-coreos.tar.gz\n# in the /data directory. Mount /data volume into a directory on the host to access the package.\n# To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n# Requires docker 17.05 or higher\n\nARG OSQUERY_BUILD_ENV=remote\n\n#--------------- TEMP CONTAINER FOR LOCAL OSQUERY -------------------------\nFROM alpine as osquery_local\nONBUILD COPY osquery /osquery\nONBUILD RUN echo \"Copying osquery from local folder\"\n\n\n\n#--------------- TEMP CONTAINER FOR GIT OSQUERY ----------------------------\nFROM alpine/git as osquery_remote\nENV OSQUERY_SRC_VERSION=3.3.2\nENV OSQUERY_GIT_URL=https://github.com/facebook/osquery.git\nONBUILD RUN cd / \\\n && git clone \"$OSQUERY_GIT_URL\" \\\n && cd osquery/ \\\n && git checkout \"$OSQUERY_SRC_VERSION\" \\\n && echo \"Fetching osquery from git\"\n\n\n#--------------- TEMP CONTAINER FOR OSQUERY ( BASED UPON FLAG)  ----------------\nFROM osquery_\"$OSQUERY_BUILD_ENV\" as osquery\n\n\n#--------------- ACTUAL DOCKERFILE FOR BUILD CREATION  --------------------------\nFROM debian:8\n\nRUN apt-get update     \\\n && apt-get -y upgrade\n\n#paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n\n#patchelf build start\n#must precede osquery as at the moment, osquery won't build without patchelf\nENV PATCHELF_GIT_URL=https://github.com/NixOS/patchelf.git\nENV PATCHELF_TEMP=/tmp/patchelf\nRUN apt-get -y install autoconf git make g++\nRUN mkdir -p \"$PATCHELF_TEMP\" \\\n && cd \"$PATCHELF_TEMP\" \\\n && git clone \"$PATCHELF_GIT_URL\" \\\n && cd patchelf \\\n && sed -i 's/serial-tests/parallel-tests/' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install\n\n#osquery build start\n#osquery should be built first since requirements for other packages can interfere with osquery dependencies\n#to build, osquery scripts want sudo and a user to sudo with.\n#to pin to a different version change the following envirnment variable\nENV OSQUERY_BUILD_USER=osquerybuilder\nRUN apt-get -y install git make python ruby sudo locales curl xz-utils\nRUN useradd --shell /bin/bash --create-home --user-group --groups sudo \"$OSQUERY_BUILD_USER\" \\\n && sed -i 's/^%sudo.*/%sudo\\ ALL=\\(ALL\\)\\ NOPASSWD:\\ ALL/' /etc/sudoers\nCOPY --from=osquery /osquery /home/\"$OSQUERY_BUILD_USER\"/osquery\nRUN mkdir -p /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && echo \"LC_ALL=en_US.UTF-8\" >> /etc/default/locale \\\n && sed -i '/en_US.UTF-8\\ UTF-8/s/^#//' /etc/locale.gen \\\n && locale-gen\nUSER $OSQUERY_BUILD_USER\nENV SKIP_TESTS=1\nRUN cd /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && make sysprep \\\n#have the default augeas lenses directory point to /opt/osquery/lenses, must be done after sysprep\n && sed -i '/augeas_lenses,/,/\\\"Directory\\ that\\ contains\\ augeas\\ lenses\\ files\\\"\\\\)\\;/ s/\\/usr\\/share\\/osquery\\/lenses/\\/opt\\/osquery\\/lenses/' osquery/tables/system/posix/augeas.cpp \\\n && make deps \\\n && make \\\n && make strip\nUSER root\nRUN cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryi /opt/osquery \\\n && cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryd /opt/osquery/hubble_osqueryd \\\n && chown -R root. /opt/osquery \\\n && chmod -R 500 /opt/osquery/* \\\n#put augeas lenses into the default directory that we changed earlier\n && mkdir -p /opt/osquery/lenses \\\n && cp -r /usr/local/osquery/share/augeas/lenses/dist/* /opt/osquery/lenses \\\n && chmod -R 400 /opt/osquery/lenses/*\nRUN ls -lahR /opt/osquery/ && /opt/osquery/osqueryi --version\n\n#install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN apt-get -y install  \\\n               python-dev libffi-dev libssl-dev libyaml-dev libssh2-1 libssh2-1-dev autoconf automake libtool \\\n               libxml2-dev libxslt1-dev zlib1g-dev cmake python-setuptools \\\n               gcc wget openssl \\\n && apt-get clean\n\n#libcurl install start\n#install libcurl to avoid depending on host version\n#requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=https://github.com/curl/curl.git\nENV LIBCURL_SRC_VERSION=curl-7_64_1\nENV LIBCURL_TEMP=/tmp/libcurl\nENV PATH=/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install\n\n#git install start\n#install git so that git package won't be a package dependency\n#requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=https://github.com/git/git.git\nENV GIT_SRC_VERSION=v2.21.0\nENV GITTEMP=/tmp/gittemp\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no  --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install\n\n#clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n\n#libgit2 install start\n#must precede pyinstaller requirements\nENV LIBGIT2_SRC_URL=https://github.com/libgit2/libgit2/archive/v0.26.5.tar.gz\n#it turns out github provided release files can change. so even though the code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=52e28a5166564bc4365a2e4112f5e5c6e334708dbf13596241b2fd34efc1b0a9\nENV LIBGIT2_SRC_VERSION=0.26.5\nENV LIBGIT2TEMP=/tmp/libgit2temp\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256  libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && export LIBGIT2=/usr/local/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2 \\\n && make \\\n && make install\n\n#pyinstaller requirements start\n#must be preceded by libgit2 install\nCOPY pyinstaller-requirements.txt /\n#default python-pip from yum does not like upgrading itself from pip. looking for better options other than wget.\nRUN wget -c https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && pip -v install -r pyinstaller-requirements.txt\n\n#deb package making requirements start\nRUN apt-get install -y ruby ruby-dev rubygems gcc make \\\n && gem install --no-ri --no-rdoc fpm\n\n#pyinstaller start\n#commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n#use the following variables to choose the version of hubble\nARG HUBBLE_CHECKOUT=develop\nARG HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_VERSION=3.0.0-develop\nENV HUBBLE_ITERATION=1\nENV HUBBLE_URL=https://github.com/hubblestack/hubble\nENV HUBBLE_SRC_PATH=/hubble_src\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nRUN git clone ${HUBBLE_GIT_URL} \"$HUBBLE_SRC_PATH\" \\\n && cd \"$HUBBLE_SRC_PATH\" \\\n && git checkout ${HUBBLE_CHECKOUT} \\\n && cp -rf \"$HUBBLE_SRC_PATH\" /hubble_build \\\n && sed -i \"s/BRANCH_NOT_SET/${HUBBLE_CHECKOUT}/g\" /hubble_build/hubblestack/__init__.py \\\n && sed -i \"s/COMMIT_NOT_SET/`git describe`/g\" /hubble_build/hubblestack/__init__.py\nRUN mkdir /data\nVOLUME /data\nWORKDIR /hubble_build\nENTRYPOINT [ \"/bin/bash\", \"-o\", \"xtrace\", \"-c\" ]\nCMD [ \"if [ -f /data/hubble_buildinfo ] ; then echo \\\"\\\" >> /hubble_build/hubblestack/__init__.py ; cat /data/hubble_buildinfo >> /hubble_build/hubblestack/__init__.py; fi \\\n    && pyinstaller --onedir --noconfirm --log-level ${_BINARY_LOG_LEVEL} --additional-hooks-dir=${_HOOK_DIR} --runtime-hook=pkg/pyinstaller-runtimehooks/pathopthubble.py hubble.py \\\n    && mkdir -p /var/log/hubble_osquery/backuplogs \\\n# hubble default configuration file\n    && cp -rf /hubble_build/conf/hubble /etc/hubble/ \\\n    && cp -rf /hubble_build/conf/hubble-profile.sh /etc/profile.d/ \\\n    && cp -pr /hubble_build/dist/hubble /opt/hubble/hubble-libs \\\n    && ln -s /opt/hubble/hubble-libs/hubble /opt/hubble/hubble \\\n    # make sure rpm shared libs are taken out to avoid mismatch between rpm database and shared libs that pyinstaller includes\n    && rm -rf /opt/hubble/hubble-libs/librpm* \\\n    # hack to get libssh2 since pyinstaller 3.2 does not do it\n    && cp /usr/lib/x86_64-linux-gnu/libssh2.so.1 /opt/hubble/hubble-libs \\\n#debian pkg start\n    && tar -cPvzf /data/hubblestack-${HUBBLE_VERSION}.tar.gz /etc/hubble /opt/hubble /opt/osquery /etc/profile.d/hubble-profile.sh /var/log/hubble_osquery/backuplogs \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && tar -xzvf /data/hubblestack-${HUBBLE_VERSION}.tar.gz -C /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d \\\n    && cp /hubble_build/pkg/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d/ \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/usr/lib/systemd/system \\\n    && cp /hubble_build/pkg/hubble.service /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/usr/lib/systemd/system/ \\\n    && cp -f /hubble_build/conf/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ \\\n#during container run, if a configuration file exists in a /data copy it over the existing one so it would be\n#possile to optionally include a custom one with the package\n    && if [ -f /data/hubble ] ; then cp /data/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ ; fi \\\n#also bring in anything from a /data/opt/ directory so we can bundle other executables if needed\n    && if [ -d /data/opt ] ; then cp -r /data/opt/* /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/opt/ ; fi \\\n    && cd /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && mkdir -p usr/bin \\\n#symlink to have hubble binary in path\n    && ln -s /opt/hubble/hubble usr/bin/hubble \\\n#fpm start\n    && fpm -s dir -t deb \\\n       -n hubblestack \\\n       -v ${HUBBLE_VERSION} \\\n       --iteration ${HUBBLE_ITERATION} \\\n       --url ${HUBBLE_URL} \\\n       --deb-no-default-config-files \\\n       --after-install /hubble_build/conf/afterinstall-systemd.sh \\\n       --after-upgrade /hubble_build/conf/afterupgrade.sh \\\n       --before-remove /hubble_build/conf/beforeremove.sh \\\n       etc/hubble etc/init.d opt usr /var/log/hubble_osquery/backuplogs \\\n    && cp hubblestack_${HUBBLE_VERSION}-${HUBBLE_ITERATION}_amd64.deb /data/hubblestack_${HUBBLE_VERSION}-${HUBBLE_ITERATION}deb8_amd64.deb \\\n    && openssl dgst -sha256 /data/hubblestack_${HUBBLE_VERSION}-${HUBBLE_ITERATION}deb8_amd64.deb \\\n                          > /data/hubblestack_${HUBBLE_VERSION}-${HUBBLE_ITERATION}deb8_amd64.deb.sha256\" ]\n"
    },
    {
        "filename": "bdc82ce82aef92f30a87e7bb69db15b9bfc60e07.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM thoughtmachine/please_ubuntu:latest\nMAINTAINER peter.ebden@gmail.com\n\n# Install the gRPC C++ plugin. Currently there is no binary distribution\n# so the only option is to compile from source, and the only way to really\n# make that work is from git (it seems very hard to get a version of c-ares that\n# will satisfy gRPC otherwise).\nWORKDIR /tmp\nRUN apt-get update && apt-get install -y build-essential autoconf libtool\nRUN git clone -qb $(curl -fsSL https://grpc.io/release) https://github.com/grpc/grpc && \\\n    cd grpc && \\\n    git submodule update --init && \\\n    make && \\\n    make install && \\\n    rm -rf /tmp/grpc\n\n# Need protobuf as well.\nRUN curl -fsSL https://github.com/google/protobuf/releases/download/v3.4.0/protobuf-cpp-3.4.0.tar.gz | tar -xz && \\\n    cd protobuf-3.4.0 && \\\n    ./configure --prefix=/usr && \\\n    make && \\\n    make install && \\\n    rm -rf /tmp/protobuf-3.4.0\n"
    },
    {
        "filename": "be0b09297032aa0f4a48ac6d0f809f8433da9cf3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:arm64-16.04.2\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.29.1\n\n# qemu-user-static\nADD qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "be8334c16b22c65e9c21b3a4cccd14cb09d106bc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos:latest\n\nMAINTAINER Roni V\u00e4yrynen <roni@vayrynen.info>\n\n# Install set of dependencies to support running Xen-Orchestra\n\n# Node v8\nRUN curl -s -L https://rpm.nodesource.com/setup_8.x | bash -\n\n# yarn for installing node packages\nRUN curl -s -o /etc/yum.repos.d/yarn.repo https://dl.yarnpkg.com/rpm/yarn.repo\nRUN yum -y install yarn\n\n# epel-release for various packages not available from base repo\nRUN yum -y install epel-release\n\n# build dependencies, git for fetching source and redis server for storing data\nRUN yum -y install gcc gcc-c++ make openssl-devel redis libpng-devel python git\n\n# monit to keep an eye on processes\nRUN yum -y install monit\nADD monit-services /etc/monit.d/services\n\n# Fetch Xen-Orchestra sources from git stable branch\nRUN git clone -b master https://github.com/vatesfr/xen-orchestra /etc/xen-orchestra\n\n# Run build tasks against sources\nRUN cd /etc/xen-orchestra && yarn && yarn build\n\n# Fix path for xo-web content in xo-server configuration\nRUN sed -i \"s/#'\\/': '\\/path\\/to\\/xo-web\\/dist\\//'\\/': '..\\/xo-web\\/dist\\//\" /etc/xen-orchestra/packages/xo-server/sample.config.yaml\n\n# Move edited config sample to place\nRUN mv /etc/xen-orchestra/packages/xo-server/sample.config.yaml /etc/xen-orchestra/packages/xo-server/.xo-server.yaml\n\n# Install forever for starting/stopping Xen-Orchestra\nRUN npm install forever -g\n\nWORKDIR /etc/xen-orchestra/xo-server\n\nEXPOSE 80\n\nCMD [\"/usr/bin/monit\"]\n"
    },
    {
        "filename": "be8c6bdd4b0f5ffd96d323e801e641c4be9dbb9c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04.2\nMAINTAINER Konstantin Weitz <konstantin.weitz@gmail.com>\n\nRUN apt-get update; \\\n    apt-get install -y \\\n      binutils \\\n      camlp5 \\\n      curl \\\n      libpcre-ocaml-dev \\\n      libpcre3-dev \\\n      libreadline-dev \\\n      libz-dev \\\n      make \\\n      pkg-config\n\nRUN curl -L -O http://downloads.sourceforge.net/project/c-bgp/cbgp-2.3.2.tar.gz\nRUN tar -xvf cbgp-2.3.2.tar.gz\nRUN curl -L -O http://downloads.sourceforge.net/project/libgds/libgds-2.2.2.tar.gz\nRUN tar -xvf libgds-2.2.2.tar.gz\nRUN curl -O https://coq.inria.fr/distrib/V8.5beta2/files/coq-8.5beta2.tar.gz\nRUN tar -xvf coq-8.5beta2.tar.gz\n\nRUN cd libgds-2.2.2; ./configure; make -j4; make install\nRUN ldconfig\nRUN cd cbgp-2.3.2; ./configure; make -j4; make install\nRUN ldconfig\n\nRUN cd coq-8.5beta2; ./configure \\\n  -bindir /usr/local/bin \\\n  -libdir /usr/local/lib/coq \\\n  -configdir /etc/xdg/coq \\\n  -datadir /usr/local/share/coq \\\n  -mandir /usr/local/share/man \\\n  -docdir /usr/local/share/doc/coq \\\n  -emacs /usr/local/share/emacs/site-lisp \\\n  -coqdocdir /usr/local/share/texmf/tex/latex/misc\nRUN cd coq-8.5beta2; make -j4; make install\n\nRUN apt-get install -y haskell-platform\n\nRUN cabal update; \\\n    cabal install parsec\n\nRUN apt-get install -y vim\n\nRUN cabal install either\nRUN cabal install Quickcheck\n\nADD Main src/Main\nADD Makefile src/\nRUN cd src; make\n\nADD Test src/Test\nRUN cd src; make test\n\nRUN cp src/Test/*.hs src/build/\nRUN cd src/build; ghc TestCBGP\n\n# ENTRYPOINT [\"src/build/TestCBGP\"]\n"
    },
    {
        "filename": "beec44fb05c6f5b2fcebbb748460fb6361e947c0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'workspace' base Image, visit its repository on Github\n#    https://github.com/Laradock/workspace\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/workspace/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/workspace:1.8-70\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"php7.0-cli\", \"git\", \"vim\", ....) are\n# installed on the base image 'laradock/workspace' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/workspace).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_NODE=false\n#   - ...\n#\n\n#####################################\n# Non-Root User:\n#####################################\n\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\n\nENV PUID ${PUID}\nENV PGID ${PGID}\n\nRUN groupadd -g ${PGID} laradock && \\\n    useradd -u ${PUID} -g laradock -m laradock && \\\n    apt-get update -yqq\n\n#####################################\n# SOAP:\n#####################################\nUSER root\n\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP ${INSTALL_SOAP}\n\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n  # Install the PHP SOAP extension\n  add-apt-repository -y ppa:ondrej/php && \\\n  apt-get update -yqq && \\\n  apt-get -y install libxml2-dev php7.0-soap \\\n;fi\n\n#####################################\n# PHP GMP\n#####################################\n\nARG INSTALL_GMP=false\nENV INSTALL_GMP ${INSTALL_GMP}\n\nRUN if [ ${INSTALL_GMP} = true ]; then \\\n    # Install GMP extension\n    apt-get -y install php-gmp \\\n;fi\n\n#####################################\n# Set Timezone\n#####################################\n\nARG TZ=UTC\nENV TZ ${TZ}\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n#####################################\n# Composer:\n#####################################\n\n# Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n\n# Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install \\\n;fi\n\n# Export composer vendor path\nRUN echo \"\" >> ~/.bashrc && \\\necho 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Crontab\n#####################################\nUSER root\n\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n\n#####################################\n# User Aliases\n#####################################\n\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\nUSER root\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    # Load the xdebug extension only with phpunit commands\n    apt-get install -y --force-yes php7.0-xdebug && \\\n    sed -i 's/^;//g' /etc/php/7.0/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc \\\n;fi\n# ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.0/cli/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\n\nENV BLACKFIRE_CLIENT_ID ${BLACKFIRE_CLIENT_ID}\nENV BLACKFIRE_CLIENT_TOKEN ${BLACKFIRE_CLIENT_TOKEN}\n\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    curl -L https://packagecloud.io/gpg.key | apt-key add - && \\\n    echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list && \\\n    apt-get update -yqq && \\\n    apt-get install blackfire-agent \\\n;fi\n\n#####################################\n# ssh:\n#####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}\n\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\n\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \\\n    rm -f /etc/service/sshd/down && \\\n    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n        && rm -f /tmp/id_rsa* \\\n        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n    && chmod 400 /root/.ssh/id_rsa \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\n# Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO ${INSTALL_MONGO}\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    echo \"extension=mongodb.so\" >> /etc/php/7.0/cli/conf.d/30-mongodb.ini \\\n;fi\n\n#####################################\n# Drush:\n#####################################\nUSER root\nENV DRUSH_VERSION 8.1.2\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH ${INSTALL_DRUSH}\nRUN if [ ${INSTALL_DRUSH} = true ]; then \\\n    # Install Drush 8 with the phar file.\n    curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash && \\\n    chmod +x /usr/local/bin/drush && \\\n    drush core-status \\\n;fi\n\nUSER laradock\n\n#####################################\n# Node / NVM:\n#####################################\n\n# Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=false\nENV INSTALL_NODE ${INSTALL_NODE}\nENV NVM_DIR /home/laradock/.nvm\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    # Install nvm (A Node Version Manager)\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n        . $NVM_DIR/nvm.sh && \\\n        nvm install ${NODE_VERSION} && \\\n        nvm use ${NODE_VERSION} && \\\n        nvm alias ${NODE_VERSION} && \\\n        npm install -g gulp bower vue-cli \\\n;fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add NVM binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n#####################################\n# YARN:\n#####################################\n\nUSER laradock\n\nARG INSTALL_YARN=false\nENV INSTALL_YARN ${INSTALL_YARN}\nARG YARN_VERSION=latest\nENV YARN_VERSION ${YARN_VERSION}\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    if [ ${YARN_VERSION} = \"latest\" ]; then \\\n        curl -o- -L https://yarnpkg.com/install.sh | bash; \\\n    else \\\n        curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc \\\n;fi\n\n# Add YARN binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\nUSER root\n\nARG INSTALL_AEROSPIKE=true\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.0/cli/conf.d/aerospike.ini\n\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    # Install the php aerospike extension\n    curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src/aerospike \\\n        && phpize \\\n        && ./build.sh \\\n        && make install \\\n    ) \\\n    && rm /tmp/aerospike-client-php.tar.gz \\\n;fi\n\nRUN if [ ${INSTALL_AEROSPIKE} = false ]; then \\\n    rm /etc/php/7.0/cli/conf.d/aerospike.ini \\\n;fi\n\n#####################################\n# PHP V8JS:\n#####################################\nUSER root\n\nARG INSTALL_V8JS=false\nENV INSTALL_V8JS ${INSTALL_V8JS}\n\nRUN if [ ${INSTALL_V8JS} = true ]; then \\\n    # Install the php V8JS extension\n    add-apt-repository -y ppa:pinepain/libv8-5.4 \\\n    && apt-get update -yqq \\\n    && apt-get install -y php7.0-xml php7.0-dev php-pear libv8-5.4 \\\n    && pecl install v8js \\\n    && echo \"extension=v8js.so\" >> /etc/php/7.0/cli/php.ini \\\n;fi\n\n#####################################\n# Non-root user : PHPUnit path\n#####################################\n\n# add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Laravel Artisan Alias\n#####################################\nUSER root\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'alias art=\"php artisan\"' >> ~/.bashrc\n\n#####################################\n# Laravel Envoy:\n#####################################\nUSER laradock\n\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY ${INSTALL_LARAVEL_ENVOY}\n\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ]; then \\\n    # Install the Laravel Envoy\n    composer global require \"laravel/envoy=~1.0\" \\\n;fi\n\n#####################################\n# Deployer:\n#####################################\nUSER laradock\n\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER ${INSTALL_DEPLOYER}\n\nRUN if [ ${INSTALL_DEPLOYER} = true ]; then \\\n    # Install the Deployer\n    composer global require \"deployer/deployer\" \\\n;fi\n\n#####################################\n# Linuxbrew:\n#####################################\nUSER root\n\nARG INSTALL_LINUXBREW=true\nENV INSTALL_LINUXBREW ${INSTALL_LINUXBREW}\n\nRUN if [ ${INSTALL_LINUXBREW} = true ]; then \\\n\n    # Preparation\n    apt-get upgrade -y && \\\n    apt-get install -y build-essential make cmake scons curl git \\\n      ruby autoconf automake autoconf-archive \\\n      gettext libtool flex bison \\\n      libbz2-dev libcurl4-openssl-dev \\\n      libexpat-dev libncurses-dev && \\\n\n    # Install the Linuxbrew\n    git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew && \\\n\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n\n    # Setup linuxbrew\n    echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc && \\\n    echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n    echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# SQL SERVER:\n#####################################\nARG INSTALL_MSSQL=true\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\n\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n    #####################################\n    # Install Depenencies:\n    #####################################\n        cd / && \\\n        apt-get install -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \\\n\n    #####################################\n    #  The following steps were taken from\n    #  Microsoft's github account:\n    #  https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-getting-pdo_sqlsrv-for-PHP-7.0-on-Debian-in-3-ways\n    #####################################\n\n    # Add PHP 7 repository\n    # for Debian jessie\n    # And System upgrade\n        cd / && \\\n        echo \"deb http://packages.dotdeb.org jessie all\" \\\n        | tee /etc/apt/sources.list.d/dotdeb.list \\\n        && wget -qO- https://www.dotdeb.org/dotdeb.gpg \\\n        | apt-key add - \\\n        && apt-get update -yqq \\\n        && apt-get upgrade -qq && \\\n\n    # Install UnixODBC\n    # Compile odbc_config as it is not part of unixodbc package\n        cd / && \\\n        apt-get install -y whiptail \\\n        unixodbc libgss3 odbcinst devscripts debhelper dh-exec dh-autoreconf libreadline-dev libltdl-dev \\\n        && dget -u -x http://http.debian.net/debian/pool/main/u/unixodbc/unixodbc_2.3.1-3.dsc \\\n        && cd unixodbc-*/ \\\n        && ./configure && make && make install \\\n        && cp -v ./exe/odbc_config /usr/local/bin/ && \\\n\n    # Fake uname for install.sh\n        printf '#!/bin/bash\\nif [ \"$*\" == \"-p\" ]; then echo \"x86_64\"; else /bin/uname \"$@\"; fi' \\\n        | tee /usr/local/bin/uname \\\n        && chmod +x /usr/local/bin/uname && \\\n\n    # Microsoft ODBC Driver 13 for Linux\n    # Note: There's a copy of this tar on my hubiC\n        cd / && \\\n        wget -nv -O msodbcsql-13.0.0.0.tar.gz \\\n        \"https://meetsstorenew.blob.core.windows.net/contianerhd/Ubuntu%2013.0%20Tar/msodbcsql-13.0.0.0.tar.gz?st=2016-10-18T17%3A29%3A00Z&se=2022-10-19T17%3A29%3A00Z&sp=rl&sv=2015-04-05&sr=b&sig=cDwPfrouVeIQf0vi%2BnKt%2BzX8Z8caIYvRCmicDL5oknY%3D\" \\\n        && tar -xf msodbcsql-13.0.0.0.tar.gz \\\n        && cd msodbcsql-*/ \\\n        && ldd lib64/libmsodbcsql-13.0.so.0.0 \\\n        && ./install.sh install --accept-license \\\n        && ls -l /opt/microsoft/msodbcsql/ \\\n        && odbcinst -q -d -n \"ODBC Driver 13 for SQL Server\" && \\\n\n\n    #####################################\n    # Install sqlsrv y pdo_sqlsrv\n    # extensions:\n    #####################################\n\n    pecl install sqlsrv-4.0.8 && \\\n    pecl install pdo_sqlsrv-4.0.8 && \\\n\n    #####################################\n    # Set locales for the container\n    #####################################\n\n    apt-get install -y locales \\\n    && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n    && locale-gen \\\n    && echo \"extension=sqlsrv.so\" > /etc/php/7.0/cli/conf.d/20-sqlsrv.ini \\\n    && echo \"extension=pdo_sqlsrv.so\" > /etc/php/7.0/cli/conf.d/20-pdo_sqlsrv.ini \\\n;fi\n\n#####################################\n# Minio:\n#####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC ${INSTALL_MC}\n\nCOPY mc/config.json /root/.mc/config.json\n\nRUN if [ ${INSTALL_MC} = true ]; then\\\n    curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc && \\\n    chmod +x /usr/local/bin/mc \\\n;fi\n\n#####################################\n# Symfony:\n#####################################\nUSER root\nARG INSTALL_SYMFONY=false\nENV INSTALL_SYMFONY ${INSTALL_SYMFONY}\nRUN if [ ${INSTALL_SYMFONY} = true ]; then \\\n\n  mkdir -p /usr/local/bin \\\n  && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n  && chmod a+x /usr/local/bin/symfony \\\n\n  #  Symfony 3 alias\n  && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n  && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc \\\n\n  #  Symfony 2 alias\n  #  && echo 'alias dev=\"php app/console -e=dev\"' >> ~/.bashrc \\\n  #  && echo 'alias prod=\"php app/console -e=prod\"' >> ~/.bashrc \\\n\n;fi\n\n#####################################\n# MySQL client\n#####################################\nUSER root\n\nARG INSTALL_MYSQL_CLIENT=false\nENV INSTALL_MYSQL_CLIENT ${INSTALL_MYSQL_CLIENT}\n\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ]; then \\\n    apt-get update && \\\n    apt-get install -y mysql-client \\\n;fi\n\n#####################################\n# PostgreSQL client\n#####################################\nUSER root\n\nARG INSTALL_PGSQL_CLIENT=false\nENV INSTALL_PGSQL_CLIENT ${INSTALL_PGSQL_CLIENT}\n\nRUN if [ ${INSTALL_PGSQL_CLIENT} = true ]; then \\\n    apt-get update && \\\n    apt-get install -y postgresql-client \\\n;fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\n# Clean up\nUSER root\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set default work directory\nWORKDIR /var/www\n"
    },
    {
        "filename": "bf48bee69c9fe1b3ab2f77f925b299d10ab1b98e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\n\n# ------------------------------------------------------\n# --- Environments and base directories\n\n# Environments\n# - Language\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    # - CI\n    CI=\"true\" \\\n    BITRISE_IO=\"true\" \\\n    # - main dirs\n    BITRISE_SOURCE_DIR=\"/bitrise/src\" \\\n    BITRISE_BRIDGE_WORKDIR=\"/bitrise/src\" \\\n    BITRISE_DEPLOY_DIR=\"/bitrise/deploy\" \\\n    BITRISE_CACHE_DIR=\"/bitrise/cache\" \\\n    BITRISE_PREP_DIR=\"/bitrise/prep\" \\\n    BITRISE_TMP_DIR=\"/bitrise/tmp\" \\\n    # Configs - tool versions\n    TOOL_VER_BITRISE_CLI=\"1.31.0\" \\\n    TOOL_VER_RUBY=\"2.5.1\" \\\n    TOOL_VER_GO=\"1.12.5\" \\\n    TOOL_VER_DOCKER=\"5:18.09.4\" \\\n    TOOL_VER_DOCKER_COMPOSE=\"1.21.2\"\n\n# create base dirs\nRUN mkdir -p ${BITRISE_SOURCE_DIR} \\\n    && mkdir -p ${BITRISE_DEPLOY_DIR} \\\n    && mkdir -p ${BITRISE_CACHE_DIR} \\\n    && mkdir -p ${BITRISE_TMP_DIR} \\\n    # prep dir\n    && mkdir -p ${BITRISE_PREP_DIR}\n\n# switch to temp/prep workdir, for the duration of the provisioning\nWORKDIR ${BITRISE_PREP_DIR}\n\n\n# ------------------------------------------------------\n# --- Base pre-installed tools\nRUN apt-get update -qq\n\n# Generate proper EN US UTF-8 locale\n# Install the \"locales\" package - required for locale-gen\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    locales \\\n    # Do Locale gen\n    && locale-gen en_US.UTF-8\n\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install \\\n    # Requiered for Bitrise CLI\n    git \\\n    mercurial \\\n    curl \\\n    wget \\\n    rsync \\\n    sudo \\\n    expect \\\n    # Python\n    python \\\n    python-dev \\\n    python-pip \\\n    # Common, useful\n    build-essential \\\n    zip \\\n    unzip \\\n    tree \\\n    clang \\\n    imagemagick \\\n    groff \\\n    # For PPAs\n    software-properties-common\n\n\n\n# ------------------------------------------------------\n# --- Pre-installed but not through apt-get\n\n# install AWSCLI from pip\nRUN [\"pip\", \"install\", \"awscli\"]\n\n# install Ruby from source\n#  from source: mainly because of GEM native extensions,\n#  this is the most reliable way to use Ruby on Ubuntu if GEM native extensions are required\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install \\\n    build-essential \\\n    zlib1g-dev \\\n    libssl-dev \\\n    libreadline6-dev \\\n    libyaml-dev \\\n    libsqlite3-dev \\\n    && mkdir -p /tmp/ruby-inst \\\n    && cd /tmp/ruby-inst \\\n    && wget -q http://cache.ruby-lang.org/pub/ruby/ruby-${TOOL_VER_RUBY}.tar.gz \\\n    && tar -xvzf ruby-${TOOL_VER_RUBY}.tar.gz \\\n    && cd ruby-${TOOL_VER_RUBY} \\\n    && ./configure --prefix=/usr/local && make && make install \\\n    # cleanup\n    && cd / \\\n    && rm -rf /tmp/ruby-inst \\\n    && gem update --system --no-document\nRUN [ -x \"$(command -v bundle)\" ] || gem install bundler --no-document\n\n\n# install Go\n#  from official binary package\nRUN wget -q https://storage.googleapis.com/golang/go${TOOL_VER_GO}.linux-amd64.tar.gz -O go-bins.tar.gz \\\n    && tar -C /usr/local -xvzf go-bins.tar.gz \\\n    && rm go-bins.tar.gz\n# ENV setup\nENV PATH $PATH:/usr/local/go/bin\n# Go Workspace dirs & envs\n# From the official Golang Dockerfile\n#  https://github.com/docker-library/golang\nENV GOPATH /bitrise/go\nENV PATH $GOPATH/bin:$PATH\n# 755 because Ruby complains if 777 (warning: Insecure world writable dir ... in PATH)\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 755 \"$GOPATH\"\n\n\n# Install NodeJS\n#  from official docs: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN sudo apt-get install -y nodejs\n\n\n# Install Yarn\n# as described at: https://yarnpkg.com/en/docs/install#linux-tab\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -qq && sudo apt-get install -y yarn\n\n\n# Install docker\n#  as described at: https://docs.docker.com/engine/installation/linux/ubuntu/\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    apt-transport-https \\\n    ca-certificates\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nRUN sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \\\n    && DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n    && DEBIAN_FRONTEND=noninteractive apt-cache policy docker-ce \\\n    # For available docker-ce versions\n    #  you can run `sudo apt-get update && sudo apt-cache policy docker-ce`\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    docker-ce=${TOOL_VER_DOCKER}~3-0~ubuntu-xenial\n\n\n\n# docker-compose\nRUN wget -q https://github.com/docker/compose/releases/download/${TOOL_VER_DOCKER_COMPOSE}/docker-compose-`uname -s`-`uname -m` -O /usr/local/bin/docker-compose \\\n    && chmod +x /usr/local/bin/docker-compose \\\n    && docker-compose --version\n\n\n# ------------------------------------------------------\n# --- Bitrise CLI\n\n#\n# Install Bitrise CLI\nRUN wget -q https://github.com/bitrise-io/bitrise/releases/download/${TOOL_VER_BITRISE_CLI}/bitrise-$(uname -s)-$(uname -m) -O /usr/local/bin/bitrise \\\n    && chmod +x /usr/local/bin/bitrise \\\n    && bitrise setup \\\n    && bitrise envman -version \\\n    && bitrise stepman -version \\\n    # setup the default StepLib collection to stepman, for a pre-warmed\n    #  cache for the StepLib\n    && bitrise stepman setup -c https://github.com/bitrise-io/bitrise-steplib.git \\\n    && bitrise stepman update\n\n\n# ------------------------------------------------------\n# --- SSH config\n\nCOPY ./ssh/config /root/.ssh/config\n\n# ------------------------------------------------------\n# --- Git config\n\nRUN git config --global user.email \"please-set-your-email@bitrise.io\" \\\n    && git config --global user.name \"J. Doe (https://devcenter.bitrise.io/builds/setting-your-git-credentials-on-build-machines/)\"\n\n\n# ------------------------------------------------------\n# --- Git LFS\n\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git-lfs \\\n    && git lfs install\n\n\n# ------------------------------------------------------\n# --- Cleanup, Workdir and revision\n\nWORKDIR $BITRISE_SOURCE_DIR\n\nENV BITRISE_DOCKER_REV_NUMBER_BASE v2019_06_12_1\nCMD bitrise --version\n"
    },
    {
        "filename": "bf84a2652442e7fe9f2259ba311d2d692eccacb5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile to build a discoursegraphs container image\nFROM ubuntu:16.04\n\nMAINTAINER Arne Neumann <discoursegraphs.programming@arne.cl>\n\nRUN apt-get update && \\\n    apt-get install -y python-dev python-pip git graphviz graphviz-dev \\\n        libxml2-dev libxslt-dev && \\\n    easy_install -U setuptools && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/discoursegraphs/\nADD docs docs/\nADD src src/\nADD tests tests/\nADD LICENSE Makefile NEWS.rst README.rst requirements.txt setup.py ./\n\n# on current Ubuntu systems you will need to install pygraphviz manually,\n# cf. http://stackoverflow.com/questions/32885486/pygraphviz-importerror-undefined-symbol-agundirected\nRUN pip2 install pygraphviz==1.3.1 \\\n    --install-option=\"--include-path=/usr/include/graphviz\" \\\n    --install-option=\"--library-path=/usr/lib/graphviz/\" && \\\n    pip2 install -U pip && \\\n    pip2 install -r requirements.txt\n"
    },
    {
        "filename": "c0013f224a6493b45367711da66ad0dd2f8f1d20.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base Image\nFROM  ppc64le/ubuntu:16.04\n\n# The author\nMAINTAINER \"Srikanth G\"\n\nENV PROTOBUF_VERSION 3.2.0\nENV PROTOBUF_REPOSITORY https://github.com/google/protobuf\nENV PROTOBUF_DIR protobuf\n\n# Install dependent packages\n# Download ProtoBuf and checkout the branch v2.6.1, Generates the configure file, Creates make files and run make, Install Protobuf\nRUN  apt-get update \\\n     && apt-get install -y git autoconf libtool automake g++ make curl unzip\\\n     && git clone ${PROTOBUF_REPOSITORY} -b v${PROTOBUF_VERSION} --depth 1 ./${PROTOBUF_DIR}\\\n     && cd ./${PROTOBUF_DIR} \\ \n     && ./autogen.sh \\\n     && ./configure --prefix=/usr \\\n     &&  make && make check && make install\\\n     && cd .. && rm -rf protobuf\\\n     && rm -rf ./${PROTOBUF_DIR}\\\n     && apt-get autoremove -y make curl unzip automake git libtool g++ autoconf\\\n     && apt-get clean \n\nENV LD_LIBRARY_PATH /usr/local/lib\n\nADD . /proto\nWORKDIR /proto\n# Entry point\nENTRYPOINT [\"protoc\"]\n\n\n\n"
    },
    {
        "filename": "c0cde3c06c7e92ef43c80d085abf06a45aa60262.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\n\nMAINTAINER Ric Lister, rlister@gmail.com\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -yq \\\n    openjdk-7-jre-headless \\\n    wget\n\nWORKDIR /app\n\nENV KIBANA_VERSION 4.0.0-beta3\n\nRUN cd /tmp && \\\n    wget -q https://download.elasticsearch.org/kibana/kibana/kibana-${KIBANA_VERSION}.tar.gz && \\\n    tar zxf /tmp/kibana-${KIBANA_VERSION}.tar.gz -C /app --strip-components=1 && \\\n    rm -f /tmp/kibana-${KIBANA_VERSION}.tar.gz\n\nEXPOSE 5601\n\n## sub env vars into config file\nADD config.sh /app/\nENTRYPOINT [ \"sh\", \"./config.sh\" ]\n\nCMD [ \"bin/kibana\" ]\n"
    },
    {
        "filename": "c1017bcc194cb466a63a27725e13bbd3887aacf4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Yugandha deshpande <yugandha@us.ibm.com>\"\n\nENV _R_CHECK_FORCE_SUGGESTS_ false\nRUN apt-get update \\\n\t&& apt-get install git -y \\\n\t&& git clone https://github.com/cran/tree.git \\\n\t&& cd tree && git checkout 1.0-39 \\\n\t&& cd .. \\\n\t&& R CMD build tree \\\n\t&& R CMD INSTALL tree \\\n\t&& R CMD check tree --no-manual \\\n\t&& apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "c1aac3ef169c9e93b81ec5695b8671754ab11619.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM docker-dev.yelpcorp.com/trusty_yelp\nMAINTAINER Team Distributed Systems <team-dist-sys@yelp.com>\n\nRUN apt-get update && apt-get -y install java-8u20-oracle confluent-kafka=0.8.2.0-1\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-oracle-1.8.0.20/\"\n\nADD config.properties /server.properties\n\nCMD echo \"Kafka starting\" && /usr/bin/kafka-server-start /server.properties\n"
    },
    {
        "filename": "c1b61b774848e0af0f958ce9889bb341dae6d0ec.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "################################################################################\n#                                         \n# |              |    |         |         \n# |---.,---.,---.|---.|    ,---.|--- ,---.\n# |   |,---|`---.|   ||    |---'|    `---.\n# `---'`---^`---'`   '`---'`---'`---'`---'\n#\n#                                        \n# bashlets -- A modular extensible toolbox for Bash\n#\n# Copyright (c) 2014-8 Roberto Reale\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n################################################################################\n\nFROM ubuntu\nMAINTAINER Roberto Reale\n\nRUN apt-get update && apt-get install -y git curl make jq\n\nWORKDIR ~/\n\nRUN git clone https://github.com/bashlets/bashlets.git\nRUN cd bashlets && make install\n"
    },
    {
        "filename": "c1ba8da837184e3aeb7e459ce25fd6e5e9353d73.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "################################################################################\n# Build a dockerfile for pinitto.me\n# Based on ubuntu\n################################################################################\n\nFROM dockerfile/nodejs\n\nMAINTAINER Lloyd Watkin <lloyd@evilprofessor.co.uk>\n\nEXPOSE 3000\n\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get install -y --no-install-recommends libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++\n\nRUN git clone https://github.com/pinittome/pinitto.me.git pinitto.me\nRUN cd pinitto.me && npm i . && cp contrib/docker/config.production.js .\nADD contrib/docker/start.sh /data/\n\nRUN chmod +x start.sh\nCMD ./start.sh"
    },
    {
        "filename": "c1db75c5726685495503cb39d749b6a559ba2838.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Example Minimalist Base Docker Image\n# Start with Ubuntu base image\nFROM ubuntu:14.04\nMAINTAINER Brett Beaulieu-Jones <brettbe@med.upenn.edu>\n\n# install python depencies for plotting\nRUN apt-get update && apt-get install -y \\\n build-essential \\\n git \\\n pkg-config \\\n python-matplotlib \\\n libpng-dev \\\n libfreetype6 \\\n libfreetype6-dev \\\n python3-dev \\\n python3-pip \\\n python3-numpy \\\n python3-scipy \\\n cmake \\\n zlib1g-dev \\\n libhdf5-dev\n\nRUN pip3 install seaborn && \\\n\tpip3 install jupyter && \\\n\tpip3 install nose2 && \\\n\tpip3 install coverage \n\nRUN git clone https://github.com/pachterlab/kallisto.git\nRUN mkdir /kallisto/build\nRUN cd kallisto/build && \\\n\tcmake .. && \\\n\tmake && \\\n\tmake install"
    },
    {
        "filename": "c234dcab3dade2b2d86c37899e7a1d470aaedd81.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM andrewosh/binder-base\n\nMAINTAINER Ben Mabey <ben@benmabey.com>\n\nUSER root\n\nRUN apt-get update -y && \\\n    apt-get install -y postgresql postgresql-contrib && \\\n    service postgresql start\n\nUSER main\n\nADD environment.yml /home/main/environment.yml\nRUN /home/main/anaconda/bin/conda install nb_conda_kernels && \\\n    cd /home/main &&  /home/main/anaconda/bin/conda env create && \\\n    /bin/bash -c \"source /home/main/anaconda/bin/activate provenance-dev && pip install git+https://github.com/bmabey/provenance\"\n\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "a4105d7eef2207d72c5ac556af59c663d840910f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# FRONTEND BUILD CONTAINER\nFROM ubuntu:18.04 as ui-builder\nMAINTAINER Gigantum <support@gigantum.com>\n\n# Install system level dependencies\nRUN apt-get -y update && apt-get -y install git curl gosu nodejs npm\nRUN npm install yarn -g\n\n# Install babel-node\nRUN npm install -g @babel/cli@7.2.3 @babel/core@7.2.2 jest@24.0.0 relay-compiler@1.6.1\n\n# Make build location dir\nRUN mkdir /opt/ui\n\n# Set the react port to match nginx\nENV PORT \"10001\"\n\n# Copy source to build\nCOPY ui /opt/ui\nCOPY resources/docker/ui_build_script.sh /opt/ui_build_script.sh\nRUN /bin/bash /opt/ui_build_script.sh\n\n\n# PRODUCTION CONTAINER\nFROM ubuntu:18.04\nLABEL maintainer=\"Gigantum <support@gigantum.com>\"\n\n# Copy requirements files\nCOPY packages/gtmcore/requirements.txt /opt/gtmcore/requirements.txt\nCOPY packages/gtmapi/requirements.txt /opt/gtmapi/requirements.txt\nCOPY packages/confhttpproxy /opt/confhttpproxy\nENV SHELL=/bin/bash\n\n# Super instruction to install all dependencies\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install git nginx supervisor wget openssl python3 python3-pip python3-distutils \\\n    gcc g++ gosu redis-server libjpeg-dev git-lfs python3-setuptools python3-dev libdpkg-perl zip unzip libsnappy-dev && \\\n    git lfs install && \\\n    apt-get -y install curl gnupg gnupg1 gnupg2 && \\\n    curl -sL https://deb.nodesource.com/setup_8.x | bash && \\\n    apt-get -y install nodejs && \\\n    npm install -g configurable-http-proxy && \\\n    cd /opt/confhttpproxy && pip3 install . && \\\n    pip3 install wheel && \\\n    pip3 install -r /opt/gtmcore/requirements.txt && \\\n    pip3 install -r /opt/gtmapi/requirements.txt && \\\n    pip3 install uwsgi && \\\n    apt-get -qq -y remove gcc g++ python3-dev wget curl gnupg gnupg1 gnupg2 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /var/log/dpkg.log\n\n# Arguments, defaulted to production values\nARG CLIENT_CONFIG_FILE=build/client/labmanager-config.yaml\nARG NGINX_UI_CONFIG=resources/client/nginx_ui.conf\nARG NGINX_API_CONFIG=resources/client/nginx_api.conf\nARG SUPERVISOR_CONFIG=build/client/supervisord.conf\nARG ENTRYPOINT_FILE=resources/client/entrypoint.sh\nARG REDIS_CONFIG=resources/client/redis.conf\n\n# Copy Libraries\n# TODO: Make pip installs once refactor is completed\nCOPY packages/gtmapi /opt/gtmapi\nCOPY packages/gtmcore /opt/gtmcore\n\nRUN cd /opt/gtmcore/ && python3 setup.py install\n\n# Install testing requirements (will essentially be a noop in production)\nCOPY build/requirements-testing.txt /opt/requirements-testing.txt\nRUN pip3 install -r /opt/requirements-testing.txt\n\n# Setup lmcommon config file - should be written by automation before copy\nCOPY $CLIENT_CONFIG_FILE /etc/gigantum/labmanager.yaml\n\n# Setup logging config file\nCOPY packages/gtmcore/gtmcore/logging/logging.json.default /etc/gigantum/logging.json\n\n# Make needed directories\nRUN mkdir -p /mnt/gigantum && mkdir /opt/redis\n\n# Copy frontend\nCOPY --from=ui-builder /opt/ui/build /var/www/\n\n# Setup NGINX/uWSGI\nCOPY $NGINX_UI_CONFIG /etc/nginx/sites-enabled/\nCOPY $NGINX_API_CONFIG /etc/nginx/sites-enabled/\nRUN rm /etc/nginx/sites-enabled/default\n\n# Setup Redis\nCOPY $REDIS_CONFIG /opt/redis/redis.conf\n\n# Setup Supervisord to launch both uwsgi and nginx\nRUN mkdir -p /opt/log/supervisor && mkdir -p /opt/log/nginx && mkdir -p /opt/run && \\\n    mkdir -p /opt/nginx && nginx && nginx -s reload && nginx -s quit\nCOPY resources/client/supervisord_base.conf /etc/supervisor/supervisord.conf\nCOPY $SUPERVISOR_CONFIG /etc/supervisor/conf.d/supervisord.conf\n\nCOPY $ENTRYPOINT_FILE /usr/local/bin/entrypoint.sh\nRUN chmod u+x /usr/local/bin/entrypoint.sh\n\n# Setup demo labbook\nCOPY resources/my-first-project.zip /opt/my-first-project.zip\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\n# Expose Ports\nEXPOSE 10000 10001 10002\n\n# Start by firing up uwsgi, nginx, redis, and workers via supervisord\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\"]\n"
    },
    {
        "filename": "a4d3c8937b1b721e5455a10b766522fdc2498768.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM python:3.5\nMAINTAINER Matthias Endler <matthias-endler@gmx.net>\n\nRUN apt-get update \\\n    && apt-get install -y git \\\n    && git clone https://github.com/edenhill/librdkafka.git \\\n    && cd librdkafka \\\n    && ./configure --prefix=/usr \\\n    && make \\\n    && make install \\\n    && cd .. \\\n    && rm -rf librdkafka \\\n    && apt-get purge -y git \\\n    && apt-get clean -y \\\n    && apt-get autoclean -y \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/cache/debconf/*-old \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /usr/share/doc/* \\\n    && rm -rf /usr/local/manual/mod \\\n    && rm -rf /usr/local/manual/programs \\\n    && rm -rf /usr/share/vim/*/doc\n\nADD . /kafka-influxdb\nWORKDIR /kafka-influxdb\nRUN python setup.py install\nCMD [\"./docker/run.sh\"]"
    },
    {
        "filename": "a4d57348a58913243ef70e8aefe952ac1b1f2f5d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Tutum Labs <support@tutum.co>\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \\\n    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list && \\\n    apt-get update && \\\n    apt-get install -y pwgen mongodb-org mongodb-org-server mongodb-org-shell mongodb-org-mongos mongodb-org-tools && \\\n    echo \"mongodb-org hold\" | dpkg --set-selections && \\\n    echo \"mongodb-org-server hold\" | dpkg --set-selections && \\\n    echo \"mongodb-org-shell hold\" | dpkg --set-selections && \\\n    echo \"mongodb-org-mongos hold\" | dpkg --set-selections && \\\n    echo \"mongodb-org-tools hold\" | dpkg --set-selections\n\nVOLUME /data/db\n\nENV AUTH yes\nENV JOURNALING yes\n\nADD run.sh /run.sh\nADD set_mongodb_password.sh /set_mongodb_password.sh\n\nEXPOSE 27017 28017\n\nCMD [\"/run.sh\"]\n"
    },
    {
        "filename": "a4e7bb86e6c6108f9c77265b063fda1fa9aaf886.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:9.0-cudnn7-devel\n\nMAINTAINER Satoshi Terasaki <s.terasaki@idein.jp>\n# Reference: OpenCV setting\n#https://github.com/ildoonet/tf-pose-estimation/blob/master/docker/Dockerfile \n\n# setup\nRUN apt-get update -yq && apt-get install -yq build-essential cmake git pkg-config wget zip && \\\napt-get install -yq libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev && \\\napt-get install -yq libavcodec-dev libavformat-dev libswscale-dev libv4l-dev && \\\napt-get install -yq libgtk2.0-dev && \\\napt-get install -yq libatlas-base-dev gfortran && \\\napt-get install -yq libcanberra-gtk-module && \\\napt-get install -yq python3 python3-dev python3-pip python3-setuptools python3-tk git && \\\napt-get remove -yq python-pip python3-pip && wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py\n# install opencv\nRUN pip3 install numpy && \\\ncd ~ && git clone -b 3.4.3 https://github.com/Itseez/opencv.git && \\\ncd opencv && mkdir build && cd build && \\\ncmake -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D INSTALL_PYTHON_EXAMPLES=ON \\\n    -D BUILD_opencv_python3=yes -D PYTHON_EXECUTABLE=/usr/bin/python3 .. && \\\nmake -j8 && make install && rm -rf /root/opencv/ && \\\nrm -rf /tmp/*.tar.gz && \\\napt-get clean && rm -rf /tmp/* /var/tmp* /var/lib/apt/lists/* && \\\nrm -f /etc/ssh/ssh_host_* && rm -rf /usr/share/man?? /usr/share/man/??_*\n# install python dependencies\nRUN pip3 install pillow matplotlib scipy tqdm\nRUN pip3 install chainer==5.1.0 cupy-cuda90==5.1.0 chainercv==0.11.0 ideep4py\n# Use Agg backend for matplotlib\nENV DISPLAY 0"
    },
    {
        "filename": "a4f61a99931227279f09a18cbc3edd4d90c59329.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:latest\n\nMAINTAINER ZeroC0D3 Team<zeroc0d3.team@gmail.com>\n\n# Set Environment Variables\nENV DEBIAN_FRONTEND noninteractive\n\n# Install Dependencies\nRUN apt-get update && apt-get install -y apt-utils && apt-get upgrade -y\nRUN mkdir /home/site && mkdir /home/site/cache\nRUN apt-get install -y varnish\nRUN rm -rf /var/lib/apt/lists/*\n\n# Setting Configurations\nENV VARNISH_CONFIG  /etc/varnish/default.vcl\nENV CACHE_SIZE      128m\nENV VARNISHD_PARAMS -p default_ttl=3600 -p default_grace=3600\nENV VARNISH_PORT    6081\nENV BACKEND_HOST    localhost\nENV BACKEND_PORT    80\n\nADD default.vcl /etc/varnish/default.vcl\nADD start.sh /etc/varnish/start.sh\n\nRUN chmod +x /etc/varnish/start.sh\n\nCMD [\"/etc/varnish/start.sh\"]\n\nEXPOSE 8080\n"
    },
    {
        "filename": "a543009b0556680be3a1305e0b62be295f8e3055.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM maxexcloo/debian:latest\nMAINTAINER Max Schaefer <max@excloo.com>\n\nENV MARIADB_USER=docker\nENV MARIADB_PASS=docker\n\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CBCB082A1BB943DB && \\\n\techo \"deb http://ftp.osuosl.org/pub/mariadb/repo/10.1/debian/ jessie main\" > /etc/apt/sources.list.d/mariadb.list && \\\n\tapt-get update && \\\n\tapt-get install -y mariadb-server && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\nRUN sed -i -e \"s/^bind-address/#bind-address/\" /etc/mysql/my.cnf && \\\n\tsed -i -e \"s/^datadir.*=.*/datadir = \\/data/\" /etc/mysql/my.cnf && \\\n\tsed -i -e \"s/^user.*=.*/user = core/\" /etc/mysql/my.cnf && \\\n\tsed -i -e \"s/\\/var\\/log\\/mysql/\\/data\\/log/\" /etc/mysql/my.cnf && \\\n\tchown -R core:adm /var/log/mysql.err && \\\n\tchown -R core:adm /var/log/mysql.log && \\\n\tchown -R core:adm /var/log/mysql && \\\n\tchown -R core:root /run/mysqld\nADD config /config\nADD supervisord.conf /etc/supervisor/conf.d/mariadb.conf\nEXPOSE 3306\n"
    },
    {
        "filename": "a5583e0144e4d832c10b9dab6b1739b6d9521d8f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Herval Freire <hervalfreire@gmail.com>\n\n# General dependencies, lots of them\nRUN apt-get update && apt-get install -y git\nRUN apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev libatlas-dev libzmq3-dev libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler bc libopenblas-dev\n\n\n# Python + pip\nRUN apt-get install -y python python-dev python-pip python-numpy python-scipy\nRUN pip install numpy --upgrade\n\n\n# Caffe\nRUN git clone https://github.com/BVLC/caffe.git /caffe\nWORKDIR /caffe\nRUN cp Makefile.config.example Makefile.config\nRUN easy_install --upgrade pip\n\n# Enable CPU-only + openblas (faster than atlas)\nRUN sed -i 's/# CPU_ONLY/CPU_ONLY/g' Makefile.config\nRUN sed -i 's/BLAS := atlas/BLAS := open/g' Makefile.config\n\n# Caffe's Python dependencies...\nRUN pip install -r python/requirements.txt\nRUN make all\nRUN make pycaffe\nENV PYTHONPATH=/caffe/python\n\n# Download model\nRUN scripts/download_model_binary.py models/bvlc_googlenet\n\n\nVOLUME [\"/data\"]\n\n\nWORKDIR /\nADD deepdream.py /deepdream.py\n\nCMD [\"python\", \"-u\", \"deepdream.py\"]\n"
    },
    {
        "filename": "a5c0885a8f61aca4f93c22a3d9553991a29cfbfa.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/python-base:2.0.0-py3\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\nENV BAZEL_VERSION 0.16.1\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# install older version of bazel because it breaks TF build on every releasae :(\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        default-jdk-headless \\\n        bash-completion \\\n        g++ \\\n        zlib1g-dev \\\n    && curl -LO \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb\" \\\n    && dpkg -i bazel_*.deb \\\n    && rm bazel_*.deb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n        pkg-config \\\n        protobuf-compiler \\\n        rsync \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        vim \\\n        webp \\\n        xorg-dev \\\n        xvfb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/* \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install Git LFS\nRUN apt-get update \\\n    && add-apt-repository ppa:git-core/ppa \\\n    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get install -y git-lfs \\\n    && git lfs install \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/cache/apt/archives/* \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Install opencv\nARG OPENCV_VERSION=\n\nRUN apt-get update && apt-get install -y \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libav-tools \\\n        libavresample-dev \\\n        libdc1394-22-dev \\\n        libgdal-dev \\\n        libgphoto2-dev \\\n        libgtk2.0-dev \\\n        libjasper-dev \\\n        liblapacke-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libopenexr-dev \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libtheora-dev \\\n        libv4l-dev \\\n        libvorbis-dev \\\n        libvtk6-dev \\\n        libx264-dev \\\n        libxine2-dev \\\n        libxvidcore-dev \\\n        qt5-default \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\nRUN cd ~/ && \\\n    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \\\n    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -DWITH_QT=ON \\\n        -DWITH_OPENGL=ON \\\n        -D ENABLE_FAST_MATH=1 \\\n        -DFORCE_VTK=ON \\\n        -DWITH_TBB=ON \\\n        -DWITH_GDAL=ON \\\n        -DWITH_XINE=ON \\\n        -DBUILD_EXAMPLES=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n        .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n # Remove the opencv folders to reduce image size\n    rm -rf ~/opencv*"
    },
    {
        "filename": "a630324a44ae95106cb33b89841cfa8c6d8ec60a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Ashwin Madavan (ashwin.madavan@gmail.com)\n\n####################################################################################################\n#                                    Install Pants Dependencies                                    #\n#              https://github.com/pantsbuild/pants/blob/master/README.md#requirements              #\n####################################################################################################\nRUN apt-get update && apt-get -y install curl build-essential python python-dev openjdk-8-jdk\n\n####################################################################################################\n#                                         Compile Beaker                                           #\n#                    Automatically bootstraps Pants and downloads dependencies.                    #\n####################################################################################################\nCOPY . /beaker/\nRUN cd /beaker && ./pants compile ::\nWORKDIR /beaker"
    },
    {
        "filename": "a6716e94a65061cf0f8a11bfb5aedc849f8bb8b9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty  \nMAINTAINER Cooper Maa <coopermaa77@gmail.com>  \n  \nENV IMG_VERSION 07-Feb-2015  \n# Install dependencies for minimal linux live and qemu, git...  \n# see http://minimal.linux-bg.org/  \nRUN DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y \\  \nwget build-essential bc syslinux genisoimage busybox-static \\  \nlibncurses5-dev git tree qemu  \n  \nRUN git clone https://github.com/ivandavidov/minimal/ && \\  \ncd minimal && \\  \ngit checkout $IMG_VERSION  \n  \nADD ./run /minimal/src/  \nADD ./fix-dns /minimal/src/  \nWORKDIR /minimal/src  \nRUN ./build_minimal_linux_live.sh  \n\n"
    },
    {
        "filename": "a728104e29cad2bf21b2cfd9ec3b5203938373e8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM mbartoli/caffe  \nMAINTAINER awentzonline  \n  \nRUN apt-get update -y && apt-get install -y wget  \n  \nRUN /root/caffe/data/ilsvrc12/get_ilsvrc_aux.sh  \nRUN python /root/caffe/scripts/download_model_binary.py \\  \n/root/caffe/models/bvlc_googlenet  \n  \nADD ./webapp /webapp  \nWORKDIR /webapp  \nRUN pip install -r requirements.txt  \n  \nCOPY ./model /model  \n  \nEXPOSE 5000  \nCMD [\"python\", \"/webapp/app.py\", \"-p 5000\"]  \n\n"
    },
    {
        "filename": "a76e384fcfde828db6467709a4ca2ec0a4929b72.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Portions Copyright 2019 Productize SPRL\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n# \n#\n# This docker configuration was originally based on https://github.com/productize/docker-kicad as of 301bf181b72c811e9644b83a895ec4a16f2fa1a0\n\n\nFROM ubuntu:disco\nMAINTAINER Jesse Vincent <jesse@keyboard.io>\nLABEL Description=\"Minimal KiCad image based on Ubuntu\"\n\n\nADD upstream/kicad-automation-scripts/kicad-ppa.pgp .\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \\\n        apt-get -y update && \\\n        apt-get -y install gnupg2 && \\\n        echo 'deb http://ppa.launchpad.net/js-reynaud/kicad-5.1/ubuntu disco main' >> /etc/apt/sources.list && \\\n        apt-key add kicad-ppa.pgp && \\\n        apt-get -y update && apt-get -y install --no-install-recommends kicad kicad-footprints kicad-symbols kicad-packages3d && \\\n        apt-get -y purge gnupg2 && \\\n        apt-get -y autoremove && \\\n        rm -rf /var/lib/apt/lists/* && \\\n        rm kicad-ppa.pgp\n\nCOPY upstream/kicad-automation-scripts/eeschema/requirements.txt .\nRUN apt-get -y update && \\\n    apt-get install -y python python-pip xvfb recordmydesktop xdotool xclip && \\\n    pip install -r requirements.txt && \\\n    rm requirements.txt\n\nRUN apt-get -y remove python3-pip && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# Use a UTF-8 compatible LANG because KiCad 5 uses UTF-8 in the PCBNew title\n# This causes a \"failure in conversion from UTF8_STRING to ANSI_X3.4-1968\" when\n# attempting to look for the window name with xdotool.\nENV LANG C.UTF-8\n\nCOPY upstream/kicad-automation-scripts /usr/lib/python2.7/dist-packages/kicad-automation\n\n# Copy default configuration and fp_lib_table to prevent first run dialog\nCOPY upstream/kicad-automation-scripts/config/* /root/.config/kicad/\n\n# Copy the installed global symbol and footprint so projcts built with stock\n# symbols and footprints don't break\nRUN cp /usr/share/kicad/template/sym-lib-table /root/.config/kicad/\nRUN cp /usr/share/kicad/template/fp-lib-table /root/.config/kicad/\n\n\n\n# Install KiPlot\n\n# Kicad's libraries are tied to python3, so we need to install kiplot with\n# python 3\nRUN apt-get -y update && \\\n    apt-get install -y python3-pip\n\nCOPY upstream/kiplot /opt/kiplot\n\nRUN cd /opt/kiplot && pip3 install -e . \n\nCOPY etc/kiplot /opt/etc/kiplot\n\n\n# Install KiCost\n#\n# Disabled because KiCost depends on Octopart which no longer has a free API\n#RUN pip3 install 'kicost==1.0.4'\n#\n#RUN apt-get -y remove python3-pip && \\\n#    rm -rf /var/lib/apt/lists/*\n#\n\n# Install the interactive BOM\n\nCOPY upstream/InteractiveHtmlBom /opt/InteractiveHtmlBom\nCOPY scripts/make-interactive-bom /opt/InteractiveHtmlBom/\n\n# Install image diffing\nRUN apt-get -y update && \\\n    apt-get install -y imagemagick && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY bin-on-docker/git-diff-boards.sh /opt/diff-boards/\n#COPY bin/git-imgdiff /opt/diff-boards/\nCOPY bin-on-docker/plot_board.py /opt/diff-boards/\nCOPY bin-on-docker/pcb-diff.sh /opt/diff-boards/\nCOPY bin-on-docker/schematic-diff.sh /opt/diff-boards/\n"
    },
    {
        "filename": "a78474ee2ec99903691f433eedaa80b1b247cf40.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM manastech/crystal\nMAINTAINER Ian Blenke <ian@blenke.com>\n\n# This is an example Dockerized Crystal Kemal project\n\n# Install shards\nWORKDIR /usr/local\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y curl git\nRUN curl -Lo bin/shards.gz https://github.com/crystal-lang/shards/releases/download/v0.6.1/shards-0.6.1_linux_x86_64.gz; gunzip bin/shards.gz; chmod 755 bin/shards\n\n# Add this directory to container as /app\nADD . /app\nWORKDIR /app\n\n# Install dependencies\nRUN shards install\n\n# Build our app\nRUN crystal build --release src/app.cr\n\n# Run the tests\nRUN crystal spec\n\nEXPOSE 3000\n\nCMD ./app\n"
    },
    {
        "filename": "a795cf73ecefdc6569fe9567622acf032532312b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# php7.0-fpm\n#\n# build:\n#   docker build --force-rm=true -t subicura/php7.0-fpm:latest .\n#\n\nFROM subicura/ubuntu:16.04\n\nMAINTAINER subicura@subicura.com\n\nENV XDEBUG_VERSION 2.5.5\nENV V8_VERSION 5.9.223\nENV V8JS_VERSION 1.4.0\n\n# install php7.0 fpm\nRUN apt-get -qq -y install build-essential wget && \\\n\tapt-get -qq -y install software-properties-common python-software-properties && \\\n\tapt-get -qq -y install php-pear \\\n\t\tphp7.0-fpm php7.0-mysql php7.0-curl php7.0-gd php7.0-intl \\\n  \t\tphp7.0-imap php7.0-soap php7.0-mcrypt php7.0-ps php7.0-pspell \\\n\t\tphp7.0-recode php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php7.0-zip\n\n# install v8\nRUN apt-get -qq -y install php7.0-dev git subversion re2c libglib2.0-dev\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/depot_tools\nENV PATH $PATH:/usr/local/depot_tools\nRUN mkdir -p /tmp/src && cd /tmp/src && fetch v8 && cd v8 && git checkout ${V8_VERSION} && gclient sync && \\\n\techo \"# Setup GN\" && \\\n    tools/dev/v8gen.py -vv x64.release -- is_component_build=true && \\\n\techo \"# Build\" && \\\n\tninja -C out.gn/x64.release/ && \\\n\techo \"# Install to /opt/v8/\" && \\\n\tmkdir -p /opt/v8/lib /opt/v8/include && \\\n\tcp out.gn/x64.release/lib*.so out.gn/x64.release/*_blob.bin /opt/v8/lib/ && \\\n\tcp -R include/* /opt/v8/include/ && \\\n    rm -rf /tmp/src/v8\n\nRUN git clone -b ${V8JS_VERSION} https://github.com/phpv8/v8js.git /tmp/src/v8js && \\\n\tcd /tmp/src/v8js && \\\n\tphpize && ./configure --with-v8js=/opt/v8 && \\\n\tmake all install && \\\n\tmake clean && rm -rf /tmp/src/v8js\n\n# xdebug\nRUN pear config-create ${HOME} ${HOME}/.pearrc && \\\n\tpecl channel-update pecl.php.net && \\\n\tpecl install xdebug-${XDEBUG_VERSION}\n\n# clean up\nRUN apt-get -qq -y --purge remove php7.0-dev git subversion\n\n# remove package\nRUN apt-get -qq -y --purge remove build-essential wget && \\\n    apt-get -qq -y autoremove && \\\n    apt-get clean && \\\n    rm -rf /tmp/src\n\n# add config\nADD 99-php-custom.ini /etc/php/7.0/fpm/conf.d/99-php-custom.ini\nADD global.conf /etc/php/7.0/fpm/pool.d/global.conf\nADD www2.conf /etc/php/7.0/fpm/pool.d/www2.conf\nADD v8js.ini /etc/php/7.0/mods-available/v8js.ini\nADD xdebug.ini /etc/php/7.0/mods-available/xdebug.ini\n\n# RUN\nCOPY entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"entrypoint.sh\"]\n\nCMD [\"/usr/sbin/php-fpm7.0\", \"-F\"]\n"
    },
    {
        "filename": "a7bbb14d36d6ee6b9add7d1b02e4b6d28e9ade64.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER vdloo <rickvandeloo@gmail.com>\n\nRUN rm -f /etc/service/sshd/down\nADD instance_key.pub /tmp/instance_key.pub\nRUN cat /tmp/instance_key.pub > /root/.ssh/authorized_keys && rm -f /tmp/instance_key.pub\nRUN apt-get update && apt-get install -y \\\n    rsync \\\n    htop \\\n    nodejs \\\n    build-essential \\\n    python \\\n    python-pip \\\n    iputils-ping \\\n    net-tools \\\n    wget \\\n    unzip \\\n    screen \\\n    git \\\n    puppet\nRUN puppet module install puppetlabs-vcsrepo\nRUN puppet module install maestrodev-wget\nRUN puppet module install saz-sudo --version=4.2.0\n\n"
    },
    {
        "filename": "a7e8c9b667f4b524a842b3452fb512a43acc663e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM php:5.5-apache\nCOPY config/php.ini /usr/local/etc/php/\n\n# ADD BASHRC CONFIG\nCOPY config/bashrc /root/\nRUN mv /root/bashrc /root/.bashrc\n\nRUN apt-get clean && apt-get update && apt-get install --fix-missing -y \\\n  ruby-dev \\\n  rubygems \\\n  imagemagick \\\n  graphviz \\\n  sudo \\\n  git \\\n  vim \\\n  memcached \\\n  libmemcached-tools \\\n  php5-memcached \\\n  php5-dev \\\n  libpng12-dev \\\n  libjpeg62-turbo-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  libxslt1-dev \\\n  mysql-client \\\n  php5-mysqlnd \\\n  zip \\\n  wget \\\n  linux-libc-dev \\\n  libyaml-dev \\\n  apt-transport-https \\\n  zlib1g-dev \\\n  libicu-dev \\\n  libpq-dev\n\n# Install PECL packages\nCOPY docker-php-pecl-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-pecl-install\nRUN docker-php-pecl-install \\\n  uploadprogress-1.0.3.1 \\\n  memcache-3.0.8 \\\n  yaml-1.2.0 \\\n  mongo-1.6.12\n\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \\\n&& docker-php-ext-install \\\n  gd \\\n  mbstring \\\n  mcrypt \\\n  zip \\\n  soap \\\n  mysql \\\n  pdo_mysql \\\n  mysqli \\\n  xsl \\\n  opcache \\\n  calendar \\\n  intl \\\n  exif \\\n  pgsql \\\n  pdo_pgsql \\\n  ftp\n\nCOPY core/memcached.conf /etc/memcached.conf\n\n  # install xdebug and codesniffer\n  RUN apt-get install --fix-missing php5-xdebug -y; \\\n  pecl install xdebug; \\\n  echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so' >> /usr/local/etc/php/php.ini; \\\n  touch /usr/local/etc/php/conf.d/xdebug.ini &&\\\n    echo xdebug.remote_enable=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n    echo xdebug.remote_autostart=0 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n    echo xdebug.remote_connect_back=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n    echo xdebug.remote_port=9000 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n    echo xdebug.remote_log=/tmp/php5-xdebug.log >> /usr/local/etc/php/conf.d/xdebug.ini; \\\n\n    # SASS and Compass installation\n    gem install compass; \\\n\n    # Installation node.js\n    curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -; \\\n    DEBIAN_FRONTEND=noninteractive apt-get -yq --no-install-recommends install -y nodejs; \\\n\n    # Installation of LESS\n    npm update -g npm && \\\n    npm install -g less && npm install -g less-plugin-clean-css; \\\n\n    # Installation of Grunt\n    npm install -g grunt-cli; \\\n\n    # Installation of Gulp\n    npm install -g gulp; \\\n\n    # Installation of Composer\n    cd /usr/src && curl -sS http://getcomposer.org/installer | php; \\\n    cd /usr/src && mv composer.phar /usr/bin/composer; \\\n\n    # Installation of drush\n    git clone https://github.com/drush-ops/drush.git /usr/local/src/drush; \\\n    cd /usr/local/src/drush && git checkout 8.0.5; \\\n    ln -s /usr/local/src/drush/drush /usr/bin/drush; \\\n    cd /usr/local/src/drush && composer update && composer install; \\\n\n    # Add drush components\n    mkdir /var/www/.drush; \\\n    cd /var/www/.drush && wget https://ftp.drupal.org/files/projects/registry_rebuild-7.x-2.3.zip && unzip registry_rebuild-7.x-2.3.zip; \\\n    cd /var/www/.drush && wget https://ftp.drupal.org/files/projects/site_audit-7.x-1.15.zip && unzip site_audit-7.x-1.15.zip; \\\n    cd /var/www/.drush && rm *.zip; \\\n    chown -R www-data:www-data /var/www; \\\n    sudo -u www-data drush cc drush; \\\n\n    # Installation of PHP_CodeSniffer with Drupal coding standards.\n    # See https://www.drupal.org/node/1419988#coder-composer\n    composer global require drupal/coder; \\\n    ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin; \\\n    ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin; \\\n    phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\nRUN rm -rf /var/www/html && \\\n  mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && \\\n  chown -R www-data:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n\n# installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\n\nCOPY config/apache2.conf /etc/apache2\nRUN chown -R www-data:www-data /var/www\n\n# Installation of Opcode cache\nRUN ( \\\n  echo \"opcache.memory_consumption=128\"; \\\n  echo \"opcache.interned_strings_buffer=8\"; \\\n  echo \"opcache.max_accelerated_files=4000\"; \\\n  echo \"opcache.revalidate_freq=5\"; \\\n  echo \"opcache.fast_shutdown=1\"; \\\n  echo \"opcache.enable_cli=1\"; \\\n  ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nRUN a2enmod rewrite expires && service apache2 restart\n\n# install phing\nRUN pear channel-discover pear.phing.info && pear install [--alldeps] phing/phing\n\n# install phpcpd\nRUN wget https://phar.phpunit.de/phpcpd.phar && chmod +x phpcpd.phar && mv phpcpd.phar /usr/local/bin/phpcpd\n\n# install phpmetrics\nRUN wget https://github.com/phpmetrics/PhpMetrics/raw/master/build/phpmetrics.phar && chmod +x phpmetrics.phar && mv phpmetrics.phar /usr/local/bin/phpmetrics\n\n# Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar && mv drupal.phar /usr/local/bin/drupal && chmod +x /usr/local/bin/drupal\n\n# Our apache volume\nVOLUME /var/www/html\n\n# create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R www-data:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n\n# Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n# Expose 80 for apache, 9000 for xdebug\nEXPOSE 80 9000\n\n# Set a custom entrypoint.\nCOPY core/docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "a842c3e83bc1ac07934ffa068d5bb6f444308b5a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM golang:latest\nMAINTAINER Andreas Koch <andy@allmark.io>\n\n# Install pandoc for RTF conversion\nRUN apt-get update && apt-get install -qy pandoc\n\n# Build\nADD . /go\nRUN make install\nRUN make crosscompile\n\n# Data\nRUN mkdir /data\nADD . /data\n\nVOLUME [\"/data\"]\n\nCMD [\"/go/bin/allmark\", \"serve\", \"/data\"]\n"
    },
    {
        "filename": "a863e9a41b8240374320745d9b9b9ddb83f84a4d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for the DASH project\nFROM          ubuntu:latest\n\nMAINTAINER    The DASH Team <team@dash-project.org>\n\nRUN           apt-get update -y    \\\n           && apt-get install -y   \\\n                  git              \\\n                  build-essential  \\\n                  libz-dev         \\\n                  cmake            \\\n                  uuid-runtime     \\\n                  libhwloc-plugins \\\n                  libhwloc-dev     \\\n                  clang-3.8\n\nWORKDIR       /tmp\nENV           CC=gcc\nENV           CXX=g++\n\n# Compiler error when compiling with -pedantic for papi >= 5.5\n ADD         http://icl.utk.edu/projects/papi/downloads/papi-5.5.1.tar.gz papi.tgz\n#ADD           http://icl.cs.utk.edu/projects/papi/downloads/papi-5.4.3.tar.gz papi.tgz\nRUN           tar -xf papi.tgz\nRUN           cd papi*/src/                     \\\n              && ./configure --prefix=/opt/papi \\\n              && make                           \\\n              && make install\nENV           PAPI_BASE=/opt/papi\n\n# Openmpi 1.10.5\nADD           https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.7.tar.gz ompi.tgz\nRUN           tar -xf ompi.tgz\nRUN           cd openmpi*                         \\\n           && ./configure --prefix=/opt/openmpi  \\\n                           --enable-mpi-thread-multiple \\\n           && make                               \\\n           && make install\nENV           PATH=${PATH}:/opt/openmpi/bin\nENV           LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/openmpi/lib\n\n# PHDF5 1.10\nADD           https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz phdf5.tgz\nRUN           tar -xf phdf5.tgz\nRUN           cd hdf5*                        \\\n           && CC=/opt/openmpi/bin/mpicc       \\\n              ./configure --enable-parallel   \\\n                          --prefix=/opt/phdf5 \\\n           && make                            \\\n           && make install\nENV           HDF5_BASE=/opt/phdf5\n\nENV           LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PAPI_BASE}/lib:${HDF5_BASE}/lib\nENV           MPI_EXEC_FLAGS='--allow-run-as-root'\nENV           VERBOSE_CI='true'\n\n# Set workdir to dash home\nWORKDIR       /opt/dash\n"
    },
    {
        "filename": "a89cfe1daa41ec5e8fe1edf0b50fcdfc9ad114a3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER Felix B\u00f6hm \"felix@owncloud.com\"\n\nENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\n# Update apt sources\n# RUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\n\nRUN apt-get -y update\n# RUN apt-get -y upgrade\n\n# Configure timezone and locale\nRUN apt-get install locales\nRUN echo \"Europe/Berlin\" > /etc/timezone; dpkg-reconfigure -f noninteractive tzdata\nRUN export LANGUAGE=en_US.UTF-8; export LANG=en_US.UTF-8; export LC_ALL=en_US.UTF-8; locale-gen en_US.UTF-8; dpkg-reconfigure locales\n\n# Install memcached\nRUN apt-get -y install wget curl memcached\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Memcached deamon\nRUN mkdir /etc/service/memcached\nADD config/memcached.conf /etc/memcached.conf\nADD runit/memcached.sh /etc/service/memcached/run\n\nEXPOSE 11211\n\nCMD [\"/sbin/my_init\"]"
    },
    {
        "filename": "a8beab16a1cec83358ba3ae7de8af3f617639ded.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get upgrade -y && apt-get -y install \\\n    tzdata \\\n    python-pip \\\n    python-dev \\\n    nmap \\\n    curl \\\n    libffi-dev \\\n    build-essential \\\n    libssl-dev && \\\n    rm -rf /var/lib/apt/lists/*\nRUN ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && dpkg-reconfigure --frontend noninteractive tzdata\nADD requirements.txt /\nRUN pip install --upgrade setuptools pip\nRUN pip install -r /requirements.txt\nRUN pip install honcho\nADD . /\nRUN find -name \"*.sh\" -exec chmod 755 {} \\;\nCMD honcho start\n"
    },
    {
        "filename": "a8d06771c7b89665c87356f37a334248c9abc2fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM maxexcloo/debian:latest\nMAINTAINER Max Schaefer <max@excloo.com>\nRUN apt-get update && \\\n\tapt-get install -y iptables netcat openvpn && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\nADD app /app\nADD config /config\nADD supervisord.conf /etc/supervisor/conf.d/openvpn.conf\nEXPOSE 80\nEXPOSE 443\nEXPOSE 1194/udp\n"
    },
    {
        "filename": "aa54c9637555a502ce89576cc35a40573a496568.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM alpine\nMAINTAINER HyperApp <hyperappcloud@gmail.com>\n\n#### Build ARGS ####\n\nARG SS_VER=3.2.3\nARG SS_OBFS_VER=0.0.5\nARG OC_VERSION=0.11.11\n# V2Ray is always installed from latest official build\n\n#### VOLUME\nENV TLS_PORT=\nENV DASHBOARD_PORT=\nENV DASHBOARD_PASS hyperapp\nENV CERTS_ROOT /srv/certs\nENV CA_ROOT /srv/ca\n\nRUN mkdir -p /srv/certs && \\\n    mkdir -p /var/log/love && \\\n    mkdir -p /etc/love/ && \\\n    mkdir -p /opt/ && \\\n    mkdir -p $CA_ROOT\n\n# certs dir\nVOLUME /srv/certs/\nVOLUME $CA_ROOT\n# log dir\nVOLUME /var/log/love\n# config dir\nVOLUME /etc/love\n\n\n#### CONFIGURATION ####\n\n# Global\nENV LOVE_USERNAME hyperapp\nENV LOVE_PASSWORD hyperapp\n\nENV LISTEN_ADDRESS 127.0.0.1\nENV SS_TLS_PORT 21025\nENV SSR_TLS_PORT 21027\nENV V2RAY_TLS_PORT 21029\nENV V2RAY_WS_PORT 21030\nENV HTTP2_PORT 21031\nENV HTTP_PROXY_PORT 21032\nENV OCSERV_PORT 21033\nENV OC_LAN_NETWORK 10.10.10.0\n\n# Shadowsocks\nENV ENABLE_SS true\nENV SS_METHOD rc4-md5\nENV SS_TLS_DOMAINS bing.com\n\n# ShadowsocksR\nENV ENABLE_SSR true\nENV SSR_METHOD none\nENV SSR_PROTOCOL auth_chain_b\nENV SSR_TLS_DOMAIN cloudflare.com\n\n# V2ray\nENV ENABLE_V2RAY true\nENV V2RAY_INSECURE true\nENV V2RAY_TLS_DOMAIN=\nENV V2RAY_WS_DOMAIN=\n\n# nghttpx\nENV ENABLE_HTTP2 true\nENV HTTP2_DOMAIN=\n\n# OCSERV\nENV ENABLE_OCSERV true\nENV OCSERV_INSECURE false\nENV OCSERV_DOMAIN=\n\n\nADD etc /etc/love/templates\n\n######## INSTALLATION #########\nRUN apk add --no-cache curl bash && \\\n    curl -sSO https://raw.githubusercontent.com/tests-always-included/mo/master/mo && \\\n    mv mo /usr/local/bin && \\\n    chmod +x /usr/local/bin/mo\n\n#### Install supervisord ####\nRUN apk add --no-cache python py-pip && pip install supervisor supervisor-stdout\n\n\n\n#### Install Shadowsocks ####\nRUN set -ex && \\\n    apk add --no-cache udns && \\\n    apk add --no-cache --virtual .build-deps \\\n                                git \\\n                                autoconf \\\n                                automake \\\n                                make \\\n                                build-base \\\n                                curl \\\n                                libev-dev \\\n                                c-ares-dev \\\n                                libtool \\\n                                linux-headers \\\n                                libsodium-dev \\\n                                mbedtls-dev \\\n                                pcre-dev \\\n                                tar \\\n                                udns-dev && \\\n\n    cd /tmp/ && \\\n    git clone https://github.com/shadowsocks/shadowsocks-libev.git && \\\n    cd shadowsocks-libev && \\\n    git checkout v$SS_VER && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --prefix=/usr --disable-documentation && \\\n    make install && \\\n    cd /tmp/ && \\\n    git clone https://github.com/shadowsocks/simple-obfs.git shadowsocks-obfs && \\\n    cd shadowsocks-obfs && \\\n    git checkout v$SS_OBFS_VER && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --prefix=/usr --disable-documentation && \\\n    make install && \\\n    cd .. && \\\n\n    runDeps=\"$( \\\n        scanelf --needed --nobanner /usr/bin/ss-* \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" && \\\n    apk add --no-cache --virtual .run-deps $runDeps && \\\n    apk del .build-deps && \\\n    rm -rf /tmp/*\n\n\n#### Install SSR\nADD shadowsocksr-manyuser.zip /tmp\nRUN unzip /tmp/shadowsocksr-manyuser.zip -d /tmp/ \\\n    && mv /tmp/shadowsocksr-manyuser /opt/ \\\n    && rm /tmp/shadowsocksr-manyuser.zip\n\n#### Install V2ray\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/v2ray /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/v2ctl /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/geoip.dat /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/geosite.dat /usr/local/bin/\n\n#### Install nghttpx\n\nRUN apk add --no-cache nghttp2 openssl ca-certificates apache2-utils\n#CMD nghttpx --http2-proxy -f $FRONTEND -b $BACKEEND $OPTIONS /certs/${DOMAIN}.key /certs/${DOMAIN}.crt\n\n\n#### Install ocserv\nRUN apk add --update --no-cache musl-dev iptables libev openssl gnutls-dev readline-dev libnl3-dev lz4-dev libseccomp-dev gnutls-utils\n\nRUN buildDeps=\"xz gcc autoconf make linux-headers libev-dev  \"; \\\n\tset -x \\\n\t&& apk add --no-cache $buildDeps \\\n\t&& mkdir /src && cd /src \\\n\t&& OC_FILE=\"ocserv-$OC_VERSION\" \\\n\t&& rm -fr download.html \\\n\t&& wget ftp://ftp.infradead.org/pub/ocserv/$OC_FILE.tar.xz \\\n\t&& tar xJf $OC_FILE.tar.xz \\\n\t&& rm -fr $OC_FILE.tar.xz \\\n\t&& cd $OC_FILE \\\n\t&& sed -i '/#define DEFAULT_CONFIG_ENTRIES /{s/96/200/}' src/vpn.h \\\n\t&& ./configure \\\n\t&& make -j\"$(nproc)\" \\\n\t&& make install \\\n\t&& mkdir -p /etc/ocserv \\\n\t&& cp ./doc/sample.config /etc/ocserv/ocserv.conf \\\n\t&& cd \\\n\t&& rm -fr ./$OC_FILE \\\n\t&& apk del --purge $buildDeps \\\n        && rm -rf /src\n\n### Install haproxy\nRUN apk add --no-cache haproxy\n\nADD entrypoint.sh /usr/local/bin\nADD gencert.sh /usr/local/bin\nENTRYPOINT [\"entrypoint.sh\"]\n"
    },
    {
        "filename": "aa7f57b932055216905e9dda4f65729df330d259.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Pull image and upgrade / fetch packages\nFROM ubuntu:latest\nMAINTAINER Louis Dion-Marcil <ldionmarcil@riseup.net>\nRUN apt-get update\nRUN apt-get -y upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-client mysql-server apache2 php libapache2-mod-php python-setuptools vim-tiny php-mysql php7.0-xml sudo wget iputils-ping nmap cron xvfb phantomjs supervisor\n\n\n# Hack to get SSL working\nRUN mkdir /etc/pki\nRUN mkdir /etc/pki/tls\nRUN mkdir /etc/pki/tls/certs\nRUN wget http://curl.haxx.se/ca/cacert.pem\nRUN mv cacert.pem ca-bundle.crt\nRUN mv ca-bundle.crt /etc/pki/tls/certs\n\n\n# Bootstrap MySQL\nRUN mkdir /var/run/mysqld\nRUN chown mysql:mysql /var/run/mysqld\nCOPY ./mysql/ /root/mysql/\n\n# Copy and clean httpd workdir\nRUN rm -rf /var/www/\nCOPY ./www /var/www\nRUN chown -R root:www-data /var/www/\nRUN chmod -R 755 /var/www\n\n\n# Package sysadmin user\nRUN adduser --disabled-password --gecos '' sysadmin\nADD ./files/.bash_history /home/sysadmin/.bash_history\nADD ./files/banking.txt.pgp /home/sysadmin/banking.txt.pgp\nRUN chown -R sysadmin:sysadmin /home/sysadmin/\nRUN chmod 600 /home/sysadmin/.bash_history\nRUN chmod 600 /home/sysadmin/banking.txt.pgp\n\n\n# Sysadmin crontab\nADD ./files/sysadmin_crontab /var/spool/cron/crontabs/sysadmin\nRUN chmod 600 /var/spool/cron/crontabs/sysadmin\nRUN chown sysadmin:crontab /var/spool/cron/crontabs/sysadmin\nADD ./scripts/deletetmp.sh /home/sysadmin/deletetmp.sh\nRUN chown sysadmin:sysadmin /home/sysadmin/deletetmp.sh\nRUN chmod 744 /home/sysadmin/deletetmp.sh\n\n\n# Setup XSS bot\nADD ./scripts/xss.js /root/xss.js\nRUN chmod 700 /root/xss.js\nADD ./files/xss_crontab /var/spool/cron/crontabs/root\nRUN chmod 600 /var/spool/cron/crontabs/root\nRUN chown root:crontab /var/spool/cron/crontabs/root\n\n\n# Setup startup scripts\nADD ./configs/000-default.conf /etc/apache2/sites-available/000-default.conf\nADD ./configs/supervisord.conf /etc/supervisor/supervisord.conf\nADD ./scripts/start.sh /root/start.sh\nADD ./scripts/setupmysql.sh /root/setupmysql.sh\nADD ./scripts/httpd.sh /root/httpd.sh\nRUN chmod 700 /root/start.sh\nRUN chmod 700 /root/setupmysql.sh\nRUN chmod 700 /root/httpd.sh\n\n#HACK PLZ WORK\nADD ./files/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf\n\n\n# Start main execution loop\nEXPOSE 80\n#CMD [\"/bin/bash\", \"/root/start.sh\"]\nENTRYPOINT [\"/root/start.sh\"]"
    },
    {
        "filename": "aa9aa8ae5b20fc0c18f8adf24bc924c347e0a8f1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER Brendan Tobolaski \"brendan@tobolaski.com\"\nENV OC_VERSION 8.2.1\nRUN apt-get -y update\nRUN apt-get install -y apache2 php5 php5-gd php-xml-parser php5-intl php5-mysqlnd php5-json php5-mcrypt smbclient curl libcurl3 php5-curl bzip2 wget\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh\n\nRUN curl -k https://download.owncloud.org/community/owncloud-$OC_VERSION.tar.bz2 | tar jx -C /var/www/\nRUN mkdir /var/www/owncloud/data\nRUN chown -R www-data:www-data /var/www/owncloud\n\nADD ./001-owncloud.conf /etc/apache2/sites-available/\nRUN rm -f /etc/apache2/sites-enabled/000*\nRUN ln -s /etc/apache2/sites-available/001-owncloud.conf /etc/apache2/sites-enabled/\nRUN a2enmod rewrite\n\nADD rc.local /etc/rc.local\nRUN chown root:root /etc/rc.local\n\nVOLUME [\"/var/www/owncloud/data\", \"/var/www/owncloud/config\"]\nEXPOSE 80\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "aab2179e98ddd09d8a8eba4ab9169ac05724cf4b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Dockerfile for Hyperledger fabric all-in-one development, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * chaintools\n# * gotools\n\n# If you need a pure peer node to run, please see the \n# * yeasy/hyperledger-peer\n# * yeasy/hyperledger-orderer\n# * yeasy/hyperledger-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/db and /var/hyperledger/production\n\nFROM golang:1.8\nLABEL maintainer \"Baohua Yang <yangbaohua@gmail.com>\"\n\n# fabric-peers\nEXPOSE 7050 7051\n# fabric-ca-server RESTful\nEXPOSE 7054\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\n\nENV ARCH x86_64\n\n# version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE 0.3.1\n# BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION 1.0.0\n# version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\nENV PROJECT_VERSION 1.0.0\n# generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS hyperledger\n# for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n             -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n\n# peer env \nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    CORE_LOGGING_LEVEL=DEBUG\n\n# orderer env \nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=$HOME/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/db \\\n        /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        /chaincode/input \\\n        /chaincode/output \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install -y apt-utils python-dev \\\n        && apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install -y python-pip \\\n        && apt-get install -y vim tree \\\n        && pip install --upgrade pip \\\n        && pip install behave nose docker-compose \\\n        && rm -rf /var/cache/apt\n\n# Install chaintool\nRUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n        && chmod a+x /usr/local/bin/chaintool\n\n# Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/kardianos/govendor \\\n        && go get github.com/golang/lint/golint \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get github.com/onsi/ginkgo/ginkgo \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/AlekSi/gocov-xml\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && git clone --single-branch -b master http://gerrit.hyperledger.org/r/fabric \\\n        && cd fabric && git checkout v1.0.0 \\\n        && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n\n# install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n        && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx/tool/configtxgen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n\n# Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n        && go build \\\n        && mv block-listener $GOPATH/bin\n\n# install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\n# install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\nADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n    && git clone --single-branch -b master https://github.com/hyperledger/fabric-ca \\\n    && cd fabric-ca && git checkout v1.0.0 \\\n    # This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n    && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n    # Copy example ca and key files\n    && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n    && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/*.sh /tmp/\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\n# temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION} \\\n      org.hyperledger.fabric.base.version=${BASEIMAGE_RELEASE}\n"
    },
    {
        "filename": "aac545119043888e3e4525f0272d90aaa5eaa20d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM fedora\nMAINTAINER http://fedoraproject.org/wiki/Cloud\n\nRUN yum -y update && yum clean all\nRUN yum -y install npm && yum clean all\n\nADD . /src\n\nRUN cd /src; npm install\n\nEXPOSE 8080\n\nCMD [\"node\", \"/src/index.js\"]\n"
    },
    {
        "filename": "aae4285946a249cc4ffa85e8046b8211b84010d8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM floydhub/buildpack-deps:cuda9.1-cudnn7-1.1\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\n# Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n        tcl \\\n        tk \\\n        ant \\\n        apt-utils \\\n        bazel \\\n        bc \\\n        build-essential \\\n        cmake \\\n        default-jdk \\\n        doxygen \\\n        gfortran \\\n        golang \\\n        iptables \\\n        libav-tools \\\n        libboost-all-dev \\\n        libeigen3-dev \\\n        libfreetype6-dev \\\n        libhdf5-dev \\\n        libjpeg-turbo8-dev \\\n        liblcms2-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsdl2-dev \\\n        libtiff-dev \\\n        libtiff5-dev \\\n        libvncserver-dev \\\n        libzmq3-dev \\\n        nano \\\n        net-tools \\\n        openmpi-bin \\\n        pkg-config \\\n        protobuf-compiler \\\n        rsync \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        vim \\\n        webp \\\n        xorg-dev \\\n        xvfb \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/* \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install Git LFS\nRUN apt-get update \\\n    && add-apt-repository ppa:git-core/ppa \\\n    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get install -y git-lfs \\\n    && git lfs install \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/cache/apt/archives/* \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Install opencv\nARG OPENCV_VERSION=3.4.0\n\nRUN apt-get update && apt-get install -y \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libav-tools \\\n        libavresample-dev \\\n        libdc1394-22-dev \\\n        libgdal-dev \\\n        libgphoto2-dev \\\n        libgtk2.0-dev \\\n        libjasper-dev \\\n        liblapacke-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libopenexr-dev \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libtheora-dev \\\n        libv4l-dev \\\n        libvorbis-dev \\\n        libvtk6-dev \\\n        libx264-dev \\\n        libxine2-dev \\\n        libxvidcore-dev \\\n        qt5-default \\\n    && apt-get clean \\\n    && apt-get autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/apt/archives/*\n\nRUN cd ~/ && \\\n    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \\\n    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -DWITH_QT=ON \\\n        -DWITH_OPENGL=ON \\\n        -D WITH_CUDA=ON \\\n        -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so \\\n        -D ENABLE_FAST_MATH=1 \\\n        -D CUDA_FAST_MATH=1 \\\n        -D WITH_CUBLAS=1 \\\n        -DFORCE_VTK=ON \\\n        -DWITH_TBB=ON \\\n        -DWITH_GDAL=ON \\\n        -DWITH_XINE=ON \\\n        -DBUILD_EXAMPLES=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n        .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n # Remove the opencv folders to reduce image size\n    rm -rf ~/opencv*"
    },
    {
        "filename": "ab5136ca559e0647012b6b5f972430bec6fe72ab.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nginmesh/ngx-rust-tool:1.21.0\n\nMAINTAINER Sehyo Chang \"sehyo@nginx.com\"\n\nRUN apt-get install -y pkg-config libssl-dev\n\nRUN mkdir /src\nADD ./Makefile /src\nADD ./nginx.mk /src\nRUN mkdir /src/build\nRUN mkdir /src/protobuf\nADD ./protobuf /src/protobuf\nADD ./module /src/module\nRUN cd /src;make nginx-setup;\n\n# add source for initial build to download dependency\nADD ./Cargo.toml /src\nADD ./Cargo.lock /src\nADD ./mixer-ngx /src/mixer-ngx\nADD ./mixer-transport /src/mixer-transport\nADD ./mixer-tests /src/mixer-tests\nRUN cd /src;cargo build --all\n\n\n\n"
    },
    {
        "filename": "aba6dff86f891fab27c665ef96a0cfe66261ae9d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run",
        "num": 6,
        "text": "#  Copyright (C) 2018-2019 LEIDOS.\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n#  use this file except in compliance with the License. You may obtain a copy of\n#  the License at\n# \n#  http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#  License for the specific language governing permissions and limitations under\n#  the License.\n\n# CARMA Base CI Image Docker Configuration Script\n\n# Use carma-base image to pull in ros dependancies\n# This image is meant to be build with carma_base/build-image.sh\n# The latest tag is used to grab the carma_base image build directly before this one\nFROM usdotfhwastol/carma-base:latest\n\nARG BUILD_DATE=\"NULL\"\nARG VCS_REF=\"NULL\"\nARG VERSION=\"NULL\"\n\n# Set environment variable for SonarQube Binaries\n# Two binaries are will go in this repo. \n# The Build Wrapper which executes a code build to capture C++\n# The Sonar Scanner which evaluates both C++ and Java then uploads the results to SonarCloud\nENV SONAR_DIR=/opt/sonarqube\n\n# Pull scanner from internet\nRUN sudo apt-get -y install curl && \\\n        sudo mkdir $SONAR_DIR && \\\n        sudo curl -o $SONAR_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip && \\\n        sudo curl -o $SONAR_DIR/build-wrapper.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip && \\\n        # Install Dependancy of NodeJs 6+\n        sudo curl -sL https://deb.nodesource.com/setup_10.x | sudo bash - && \\\n        sudo sudo apt-get install -y nodejs && \\\n        # Install JQ Json Parser Tool\n        sudo mkdir /opt/jq && \\\n        sudo curl -L \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -o /opt/jq/jq && \\\n        sudo chmod +x /opt/jq/jq\n\n\n# Unzip scanner\nRUN cd $SONAR_DIR && \\ \n        sudo apt-get -y install unzip && \\\n        sudo unzip $SONAR_DIR/sonar-scanner.zip -d . && \\\n        sudo unzip $SONAR_DIR/build-wrapper.zip -d . && \\\n        # Remove zip files \n        sudo rm $SONAR_DIR/sonar-scanner.zip && \\\n        sudo rm $SONAR_DIR/build-wrapper.zip && \\\n        # Rename files \n        sudo mv $(ls $SONAR_DIR | grep \"sonar-scanner-\") $SONAR_DIR/sonar-scanner/ && \\\n        sudo mv $(ls $SONAR_DIR | grep \"build-wrapper-\") $SONAR_DIR/build-wrapper/ && \\\n        # Add scanner, wrapper, and jq to PATH\n        sudo echo 'export PATH=$PATH:/opt/jq/:$SONAR_DIR/sonar-scanner/bin/:$SONAR_DIR/build-wrapper/' >> /home/carma/.base-image/init-env.sh\n\n# Install gcovr for code coverage tests and add code_coverage script folder to path\nRUN sudo apt-get -y install gcovr && \\\n        sudo echo 'export PATH=$PATH:/home/carma/.ci-image/engineering_tools/code_coverage/' >> /home/carma/.base-image/init-env.sh\n\n# Add engineering tools scripts to image\nADD --chown=carma ./engineering_tools/code_coverage /home/carma/.ci-image/engineering_tools/code_coverage\n\n        \n\n# Set metadata labels\nLABEL org.label-schema.schema-version=\"1.0\"\nLABEL org.label-schema.name=\"CARMA-SonarCloud\"\nLABEL org.label-schema.description=\"Base image for CARMA CI testing using SonarCloud\"\nLABEL org.label-schema.vendor=\"Leidos\"\nLABEL org.label-schema.version=\"${VERSION}\"\nLABEL org.label-schema.url=\"https://highways.dot.gov/research/research-programs/operations/CARMA\"\nLABEL org.label-schema.vcs-url=\"https://github.com/usdot-fhwa-stol/CARMAPlatform\"\nLABEL org.label-schema.vcs-ref=${VCS_REF}\nLABEL org.label-schema.build-date=${BUILD_DATE}\n\n# Setup environment on login\nENTRYPOINT [ \"/home/carma/.base-image/entrypoint.sh\" ]\n"
    },
    {
        "filename": "abf1419c8f2988e787eb62ef834ddd9e9fc1f2ca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian  \nMAINTAINER Cheng Jeng<s100062314@m100.nthu.edu.tw>  \nADD ./wrapdocker /usr/local/bin/wrapdocker  \nRUN apt-get update && apt-get install -y \\  \napparmor \\  \napt-transport-https \\  \nca-certificates \\  \ncurl \\  \nlxc \\  \niptables && \\  \ncurl -sSL https://get.docker.com/ | sh && \\  \nchmod +x /usr/local/bin/wrapdocker  \nVOLUME /var/lib/docker  \nCMD [\"wrapdocker\"]  \n  \n\n"
    },
    {
        "filename": "ac0d823b2a4279ff7f2df0c4ae53e5821f72d41c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# version 1.6.1-2\n# docker-version 1.11.1\nFROM ubuntu:15.04\nMAINTAINER Jim Myhrberg \"contact@jimeh.me\"\n\nENV ZNC_VERSION 1.6.1\n\nRUN apt-get update \\\n    && apt-get install -y sudo wget build-essential libssl-dev libperl-dev \\\n               pkg-config swig3.0 libicu-dev ca-certificates \\\n    && mkdir -p /src \\\n    && cd /src \\\n    && wget \"http://znc.in/releases/archive/znc-${ZNC_VERSION}.tar.gz\" \\\n    && tar -zxf \"znc-${ZNC_VERSION}.tar.gz\" \\\n    && cd \"znc-${ZNC_VERSION}\" \\\n    && ./configure --disable-ipv6 \\\n    && make \\\n    && make install \\\n    && apt-get remove -y wget \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /src* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN useradd znc\nADD docker-entrypoint.sh /entrypoint.sh\nADD znc.conf.default /znc.conf.default\nRUN chmod 644 /znc.conf.default\n\nVOLUME /znc-data\n\nEXPOSE 6667\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"\"]\n"
    },
    {
        "filename": "ac171d95ecc0f6bc116dd56b59a4044df8e51bdd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# mccahill/r-studio\n#\n# VERSION 1.4\n\nFROM ubuntu:18.04\nMAINTAINER Mark McCahill \"mark.mccahill@duke.edu\"\n\nRUN apt-get  update \nRUN apt-get dist-upgrade -y \t\nRUN apt-get install -y \\\n    gnupg2 \\\n    apt-utils \\\n    libopenblas-base \\\n    vim \\\n    less \\\n    net-tools \\\n    inetutils-ping \\\n    curl \\\n    git \\\n    telnet \\\n    nmap \\\n    socat \\\n    software-properties-common \\\n    wget \\\n    locales\n\n# Configure default locale\nRUN locale-gen en_US en_US.UTF-8 \nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n\n\t\n# get R from a CRAN archive (we want the 3.5 version of R)\nRUN  echo  \"deb http://cran.rstudio.com/bin/linux/ubuntu bionic-cran35/\"  >>  /etc/apt/sources.list\nRUN  DEBIAN_FRONTEND=noninteractive apt-key adv   --keyserver keyserver.ubuntu.com   --recv-keys  E084DAB9\n\nRUN apt-get  update ; \\\n    apt-get  dist-upgrade -y \n\n# we need gdal > 2\nRUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\nRUN apt-get update\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n  r-base \\\n  r-base-dev \\\n  libcurl4-gnutls-dev \\\n  libgit2-dev \\\n  libxml2-dev \\\n  libssl-dev \\\n  libudunits2-dev \\\n  libpoppler-cpp-dev \\\n  texlive \\\n  texlive-base \\\n  texlive-latex-extra \\\n  texlive-pstricks \\\n  pandoc \\\n  texlive-publishers \\\n  texlive-fonts-extra \\\n  texlive-latex-extra \\\n  texlive-humanities \\\n  lmodern \\\n  libxml2  \\\n  libxml2-dev  \\\n  libssl-dev \\\n  libproj-dev \\\n  libudunits2-0  \\\n  libudunits2-dev \\\n  software-properties-common \\\n  gdal-bin \\\n  python-gdal \\\n  libgdal-dev \\\n  gdebi-core \\\n  libapparmor1 \\\n  gdal-bin \\\n  python-gdal \\\n  libgdal-dev \\\n  libproj-dev \\\n  libudunits2-0 \\\n  libudunits2-dev \n\n# R-Studio   \n# RUN DEBIAN_FRONTEND=noninteractive wget https://download2.rstudio.org/rstudio-server-1.1.383-amd64.deb\nRUN DEBIAN_FRONTEND=noninteractive wget https://s3.amazonaws.com/rstudio-ide-build/server/trusty/amd64/rstudio-server-1.2.907-amd64.deb\nRUN DEBIAN_FRONTEND=noninteractive gdebi --n rstudio-server-1.2.907-amd64.deb\nRUN rm rstudio-server-1.2.907-amd64.deb\n\n# update the R packages we will need for knitr\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"xfun\", \"knitr\", \"yaml\", \"Rcpp\", \"htmltools\", \"caTools\", \"bitops\", \"digest\", \"glue\", \"stringr\", \"markdown\", \"highr\", \"formatR\", \"evaluate\", \"mime\", \"stringi\", \"magrittr\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n # R packages we need for devtools - and we need devtools to be able to update the rmarkdown package\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"processx\", \"ps\", \"callr\", \"crayon\", \"assertthat\", \"cli\", \"desc\", \"prettyunits\", \"backports\", \"rprojroot\", \"withr\", \"pkgbuild\", \"rlang\", \"rstudioapi\", \"pkgload\", \"rcmdcheck\", \"remotes\", \"xopen\", \"clipr\", \"clisymbols\", \"sessioninfo\", \"purrr\", \"usethis\", \"sys\", \"askpass\", \"openssl\", \"brew\", \"roxygen2\", \"fs\", \"gh\", \"rversions\", \"git2r\", \"devtools\", \"R6\", \"httr\", \"RCurl\", \"BH\", \"xml2\", \"curl\", \"jsonlite\", \"ini\", \"downloader\", \"memoise\", \"plyr\", \"XML\", \"whisker\", \"bitops\", \"nloptr\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n# libraries Eric Green wanted\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"lubridate\", \"lazyeval\", \"utf8\", \"fansi\", \"zeallot\", \"vctrs\", \"pillar\", \"pkgconfig\", \"tibble\", \"ggplot2\", \"RColorBrewer\", \"dichromat\", \"colorspace\", \"munsell\", \"labeling\", \"viridisLite\", \"scales\", \"stargazer\", \"reshape2\", \"gtable\", \"proto\", \"minqa\",\"RcppEigen\",\"lme4\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n# more libraries Mine Cetinakya-Rundel asked for\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"openintro\", \"bindr\", \"bindrcpp\", \"plogr\", \"tidyselect\", \"dplyr\", \"DBI\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n  \nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"chron\", \"data.table\", \"rematch\", \"cellranger\", \"tidyr\", \"googlesheets\", \"hms\", \"readr\", \"selectr\", \"rvest\", \"pbkrtest\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n# Shiny\nADD ./conf /r-studio\nRUN wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.7.907-amd64.deb\nRUN DEBIAN_FRONTEND=noninteractive gdebi -n shiny-server-1.5.7.907-amd64.deb\nRUN rm shiny-server-1.5.7.907-amd64.deb\nRUN R CMD BATCH /r-studio/install-Shiny.R\nRUN rm /install-Shiny.Rout\n\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"SparseM\", \"MatrixModels\", \"quantreg\", \"sp\", \"maptools\", \"haven\", \"ellipsis\", \"forcats\", \"readxl\", \"zip\", \"openxlsx\", \"rio\", \"abind\", \"carData\", \"car\", \"mosaicData\", \"latticeExtra\", \"gridExtra\", \"ggdendro\", \"mnormt\", \"psych\", \"generics\", \"broom\", \"reshape\", \"progress\", \"GGally\", \"ggstance\", \"ggformula\", \"mosaicCore\", \"ggrepel\", \"base64enc\", \"crosstalk\", \"htmlwidgets\", \"png\", \"raster\", \"viridis\", \"leaflet\", \"mosaic\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n# Cliburn Chan requested these:\nRUN  DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"maps\", \"zoo\", \"gcookbook\", \"corrplot\", \"grepel\", \"base64enc\", \"crosstalk\", \"htmlwidgets\", \"png\", \"raster\", \"viridis\", \"leaflet\", \"mosaic\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n   \n\n# install rmarkdown\nRUN R CMD BATCH /r-studio/install-rmarkdown.R\nRUN rm /install-rmarkdown.Rout \n\n# Cliburn also wanted these\n# but they have mega-dependencies, so intall them the other way\nRUN R CMD BATCH /r-studio/install-dendextend.R\nRUN rm /install-dendextend.Rout \nRUN R CMD BATCH /r-studio/install-igraph.R\nRUN rm /install-igraph.Rout \n\n# install sparklyr so we can do Spark via Livy\nRUN  DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"config\", \"dbplyr\", \"rappdirs\", \"r2d3\", \"forge\", \"sparklyr\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n   \n\n# install templates and examples from Reed and the Tufte package\nRUN DEBIAN_FRONTEND=noninteractive wget \\\n   https://archive.linux.duke.edu/cran/src/contrib/BHH2_2016.05.31.tar.gz   \nRUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \\\n   BHH2_2016.05.31.tar.gz   \nRUN rm \\\n  BHH2_2016.05.31.tar.gz  \nRUN R CMD BATCH /r-studio/install-reed.R\nRUN rm /install-reed.Rout \n\n\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"rgdal\", \"rgeos\", \"uuid\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n\nRUN R CMD BATCH /r-studio/install-rappdirs.R\nRUN rm /install-rappdirs.Rout \n\t\n# new packages for fall 2018\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"tigris\", \"tidycensus\", \"tidyverse\", \"future\", \"doMC\", \"foreach\", \"doParallel\", \"furrr\", \"drat\", \"tidygraph\", \"here\", \"rticles\", \"styler\", \"lintr\", \"testthat\", \"reprex\", \"microbenchmark\", \"modelr\", \"globals\", \"listenv\", \"iterators\", \"enc\", \"rematch2\", \"rex\", \"stringdist\", \"praise\", \"profmem\", \"bench\" ), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"pryr\", \"profvis\", \"RcppArmadillo\", \"servr\", \"xaringan\", \"rsconnect\", \"PKI\", \"RJSONIO\", \"packrat\", \"highlight\", \"pkgdown\", \"bookdown\", \"blogdown\", \"cowplot\", \"influenceR\", \"Rook\", \"rgexf\", \"visNetwork\", \"DiagrammeR\", \"farver\", \"tweenr\", \"polyclip\", \"ggforce\", \"RgoogleMaps\", \"rjson\", \"mapproj\", \"jpeg\", \"geosphere\", \"ggmap\", \"ggraph\", \"shinyjs\", \"flexdashboard\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"nycflights13\", \"babynames\", \"janeaustenr\", \"NHANES\", \"repurrrsive\", \"infer\", \"ipred\", \"numDeriv\", \"SQUAREM\", \"lava\", \"prodlim\", \"kernlab\", \"CVST\", \"DRR\", \"dimRed\", \"timeDate\", \"sfsmisc\", \"magic\", \"lpSolve\", \"RcppProgress\", \"geometry\", \"DEoptimR\", \"robustbase\", \"ddalpha\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\t\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"gower\",\"RcppRoll\", \"pls\", \"recipes\", \"rsample\", \"hunspell\", \"SnowballC\", \"tokenizers\", \"ISOcodes\", \"stopwords\", \"tidytext\", \"ggridges\", \"bayesplot\", \"matrixStats\", \"checkmate\", \"loo\", \"StanHeaders\", \"inline\", \"rstan\", \"rstantools\", \"tidypredict\"), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\t\nRUN DEBIAN_FRONTEND=noninteractive R --vanilla --quiet -e 'install.packages( c(\"pROC\", \"gtools\", \"gdata\", \"gplots\", \"MLmetrics\", \"yardstick\", \"xgboost\", \"ModelMetrics\", \"caret\", \"e1071\", \"dotCall64\", \"spam\", \"fields\", \"ROCR\", \"reticulate\", \"tfruns\", \"tensorflow\", \"zeallot\", \"keras\", \"coda\", \"greta\" ), repos=\"http://cran.us.r-project.org\",quiet=TRUE)'\n\n\nRUN R CMD BATCH /r-studio/install-2018-packages-1.R\nRUN R CMD BATCH /r-studio/install-2018-packages-2.R\nRUN R CMD BATCH /r-studio/install-2018-packages-3.R\nRUN R CMD BATCH /r-studio/install-2018-packages-4.R\n\n# remove install Rout files\nRUN rm \\\n   /install-2018-packages-1.Rout \\\n   /install-2018-packages-2.Rout \\\n   /install-2018-packages-3.Rout \\\n   /install-2018-packages-4.Rout \n   \n\t\n# Supervisord\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor && \\\n   mkdir -p /var/log/supervisor\nCMD [\"/usr/bin/supervisord\", \"-n\"]\n\n# Config files\nRUN cd /r-studio && \\\n    cp supervisord-RStudio.conf /etc/supervisor/conf.d/supervisord-RStudio.conf\nRUN rm /r-studio/*\n\n# the default packages for everyone running R\nRUN echo \"\" >> /etc/R/Rprofile.site && \\\n    echo \"# add the downloader package to the default libraries\" >> /etc/R/Rprofile.site && \\\n    echo \".First <- function(){\" >> /etc/R/Rprofile.site && \\\n    echo \"library(downloader)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(knitr)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(rmarkdown)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(ggplot2)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(googlesheets)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(lubridate)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(stringr)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(rvest)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(openintro)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(broom)\" >> /etc/R/Rprofile.site && \\\n    echo \"library(GGally)\" >> /etc/R/Rprofile.site && \\\n    echo \"}\" >> /etc/R/Rprofile.site  && \\\n    echo \"\" >> /etc/R/Rprofile.site\n\t\n\n# add a non-root user so we can log into R studio as that user; make sure that user is in the group \"users\"\nRUN adduser --disabled-password --gecos \"\" --ingroup users guest \n\n# add a script that supervisord uses to set the user's password based on an optional\n# environmental variable ($VNCPASS) passed in when the containers is instantiated\nADD initialize.sh /\n\n\n#########\n#\n# if you need additional tools/libraries, add them here.\n# also, note that we use supervisord to launch both the password\n# initialize script and the RStudio server. If you want to run other processes\n# add these to the supervisord.conf file\n#\n#########\n\n# expose the RStudio IDE port\nEXPOSE 8787 \n\n# expose the port for the shiny server\n#EXPOSE 3838\n\nCMD [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "ac38faffa7e8b9fcc0391ccbcfdaa75cd50efacd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian\n\nMAINTAINER Dickriven Chellemboyee\n\nADD . /odc\nWORKDIR /odc\n\nENV DEBIAN_FRONTEND noninteractive\n\nEXPOSE 8000\n\nRUN apt-get update -qq\nRUN apt-get upgrade -yqq\nRUN apt-get install -yqq apt-utils\nRUN apt-get install -yqq php5 php5-curl php-soap libreoffice ghostscript pdftohtml\nRUn apt-get clean -y\n\nCMD [\"php\", \"-S\", \"0.0.0.0:8000\", \"-t\", \".\"]\n"
    },
    {
        "filename": "ac95c3ef2620b9304a3a176677641444312737b2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#First build Tutorial tensorflow\nFROM dlws/tutorial-tensorflow:1.6\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n\n# Add Glove vectors \nRUN mkdir -p /utils/glove; cd /utils/glove; \\\n    wget http://nlp.stanford.edu/data/glove.6B.zip; \\ \n    unzip glove.6B.zip; \\\n    rm glove.6B.zip glove.6B.?00d.txt \n# Add Yolo models\nRUN cd /utils; git clone --recurse-submodules git://github.com/DLWorkspace/YAD2K\nRUN mkdir /utils/models; cd /utils/models; wget https://dlwsdata.blob.core.windows.net/models/yolo.h5\n# Additional utility\nRUN pip3 install music21 emoji faker Babel pydub dill imagehash\nRUN cd /utils; git clone --recurse-submodules https://github.com/DLWorkspace/nmt\n\n# The following install Cython & Pycocotools \nRUN pip3 install Cython\nRUN cd /utils && \\\n    git clone https://github.com/pdollar/coco.git && \\\n    cd /utils/coco/PythonAPI && \\\n    make && \\\n    make install && \\\n    python3 setup.py install \n\n# Install mask RCNN\nRUN cd /utils && git clone https://github.com/matterport/Mask_RCNN\n\n# For audio demo\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 && apt-get update && apt-get install -y ffmpeg libav-tools x264 x265 \n\n# data for final task \nRUN apt-get update && apt-get install -y p7zip-full\nRUN cd /utils && \\\n    git clone https://github.com/stormstone/deeplearning.ai && \\\n    mkdir -p /utils/data/trigger_word && \\\n    mv deeplearning.ai/02-\u8bfe\u540e\u4f5c\u4e1a/05-\u7b2c\u4e94\u8bfe\\ \u5e8f\u5217\u6a21\u578b/03-\u7b2c\u4e94\u8bfe\u7b2c\u4e09\u5468\u4f5c\u4e1a/Trigger\\ word\\ detection/XY_train/ /utils/data/trigger_word/XY_train && \\\n    mv deeplearning.ai/02-\u8bfe\u540e\u4f5c\u4e1a/05-\u7b2c\u4e94\u8bfe\\ \u5e8f\u5217\u6a21\u578b/03-\u7b2c\u4e94\u8bfe\u7b2c\u4e09\u5468\u4f5c\u4e1a/Trigger\\ word\\ detection/XY_dev/ /utils/data/trigger_word/XY_dev && \\\n    rm -rf deeplearning.ai && \\\n    cd /utils/data/trigger_word/XY_train && unzip X.zip && rm X.zip && \\\n    cd /utils/data/trigger_word/XY_dev && 7z x X_dev.7z && rm X_dev.7z \n\nRUN pip3 install fastai\n\nRUN cd /utils;  git clone --recurse-submodules git://github.com/DLWorkspace/deep-learning-coursera\n\n# The following operation needs GPU to create yolo.h5, This currently only works for Yolo V2 (V1 and V3 have layers that can't be interpreted)\n# RUN cd /utils/YAD2K; \\\n#    wget https://pjreddie.com/media/files/yolov2.weights; \\\n#    wget https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov2.cfg; \\\n#    ./yad2k.py yolov2.cfg yolov2.weights model_data/yolo.h5\n"
    },
    {
        "filename": "ace72fb124ab936f855f107c96d2a3d15ad319af.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04.1\nMAINTAINER justinc@yelp.com\n\nrun apt-get update && apt-get upgrade -y\nrun apt-get install -y wget language-pack-en-base\n\nrun locale-gen en_US en_US.UTF-8 && dpkg-reconfigure locales\n\nrun mkdir /src\n\nworkdir /src\n\nrun wget https://bitbucket.org/pypy/pypy/downloads/pypy-5.1.1-linux64.tar.bz2\nrun bunzip2 pypy-5.1.1-linux64.tar.bz2\nrun tar xvf pypy-5.1.1-linux64.tar\n\nENV PATH $PATH:/src/pypy-5.1.1-linux64/bin/\n\nrun wget https://bootstrap.pypa.io/get-pip.py\nrun pypy get-pip.py\n\nrun apt-get update && apt-get install -y build-essential git vim libpq5 libpq-dev docker \\\n    libmysqlclient-dev libsnappy-dev\n\n\nrun ln -s /usr/bin/gcc /usr/local/bin/cc\n\nrun pip install virtualenv tox\n\n# Setup clientlib\nWORKDIR /data_pipeline\nadd requirements.d/dev.txt /data_pipeline/requirements.d/dev.txt\nadd requirements.d/tools.txt /data_pipeline/requirements.d/tools.txt\nadd requirements.txt /data_pipeline/requirements.txt\nadd setup.py /data_pipeline/setup.py\nadd data_pipeline/__init__.py /data_pipeline/data_pipeline/__init__.py\nadd README.rst /data_pipeline/README.rst\nadd HISTORY.rst /data_pipeline/HISTORY.rst\nadd bin/ /data_pipeline/bin\n\n# Install dependencies\nrun mkdir /dp_reqs\nrun virtualenv /dp_reqs/venv\nrun /dp_reqs/venv/bin/pip install -i https://pypi.yelpcorp.com/simple/ -r /data_pipeline/requirements.d/dev.txt\n\nADD . /data_pipeline\n\nVOLUME [\"/data_pipeline\"]\n"
    },
    {
        "filename": "ad35ecdd9cb2a2e931d1689adaaec90a836e1eaf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Iliyan Trifonov <iliyan.trifonov@gmail.com>\n\nRUN echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt xenial main restricted universe multiverse\" > /etc/apt/sources.list;\\\n\techo \"deb mirror://mirrors.ubuntu.com/mirrors.txt xenial-updates main restricted universe multiverse\" >> /etc/apt/sources.list;\\\n\techo \"deb mirror://mirrors.ubuntu.com/mirrors.txt xenial-backports main restricted universe multiverse\" >> /etc/apt/sources.list;\\\n\techo \"deb mirror://mirrors.ubuntu.com/mirrors.txt xenial-security main restricted universe multiverse\" >> /etc/apt/sources.list\n\nRUN apt-key adv --keyserver keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A;\\\n\techo \"deb http://repo.percona.com/apt xenial main\" >> /etc/apt/sources.list;\\\n\techo \"deb-src http://repo.percona.com/apt xenial main\" >> /etc/apt/sources.list\n\nRUN export DEBIAN_FRONTEND=noninteractive;\\\n\tapt-get update;\\\n\tapt-get -qq install percona-server-server-5.5 percona-server-client-5.5 \\\n\tphp-fpm php-mysqlnd php-mcrypt php-cli \\\n\tnginx-full \\\n\tcurl openssh-server\n\nRUN mkdir /var/run/sshd;\\\n\techo \"root:root\"|chpasswd;\\\n\tsed -i 's|session.*required.*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd;\\\n\techo LANG=\"en_US.UTF-8\" > /etc/default/locale\n\nRUN curl -L https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > wp-cli.phar;\\\n\tchmod +x wp-cli.phar;\\\n\tmv wp-cli.phar /usr/bin/wp\n\nRUN sed -i '0,/listen.*=.*/ s/listen.*=.*/listen=127.0.0.1:9000/' /etc/php/7.0/fpm/pool.d/www.conf;\\\n\tsed -i 's|;cgi.fix_pathinfo.*=.*|cgi.fix_pathinfo=0|' /etc/php/7.0/fpm/php.ini;\\\n\tsed -i 's|;date.timezone.*=.*|date.timezone=Europe/Sofia|' /etc/php/7.0/fpm/php.ini\n\nRUN mkdir -p /var/www/wordpress;\\\n\tchown -R www-data:www-data /var/www;\\\n\tchmod 0755 /var/www\n\nADD nginx/default /etc/nginx/sites-available/default\n\nRUN /etc/init.d/mysql start;\\\n\tsleep 3;\\\n\techo 'CREATE DATABASE wordpress; GRANT ALL PRIVILEGES ON wordpress.* TO \"wordpress\"@\"127.0.0.1\" IDENTIFIED BY \"wordpress\"; FLUSH PRIVILEGES;' | mysql -h127.0.0.1 -uroot;\\\n\tcd /var/www/wordpress;\\\n\twp --allow-root core download;\\\n\twp --allow-root core config --dbhost=\"127.0.0.1\" --dbname=\"wordpress\" --dbuser=\"wordpress\" --dbpass=\"wordpress\";\\\n\twp --allow-root core install --url=\"127.0.0.1\" --title=\"My Docker Wordpress Blog!\" --admin_user=\"admin\" --admin_password=\"admin\" --admin_email=\"me@127.0.0.1\";\\\n\tchown -R www-data:www-data ./*;\\\n\t/etc/init.d/mysql stop\n\nADD shell/run_all_servers.sh /\n\nEXPOSE 80 22\n\nCMD [\"sh\", \"/run_all_servers.sh\"]\n"
    },
    {
        "filename": "ad5c0a042c88261114e26d28d3a68f3298fc6f99.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu\n\n# File Author / Maintainer\nMAINTAINER Adrian Moreno <adrian.moreno@emc.com>\n\n# Update the sources list\nRUN apt-get update\n\n# Install Python and Basic Python Tools\nRUN apt-get install -y python python-dev python-distribute python-pip\nRUN apt-get install -y build-essential git curl\n\n# Copy the application folder inside the container\nADD . /app/mosaicme-cacher\n\n# Get pip to download and install requirements:\nRUN pip install -r /app/mosaicme-cacher/requirements.txt\n\n# Set environment variables\nENV PYTHONPATH /app/mosaicme-cacher:$PYTHON_PATH\n\n# Set the default directory where CMD will execute\nWORKDIR /app/mosaicme-cacher\n\nCMD python cacher.py\n"
    },
    {
        "filename": "ad607a2e7352ab6ccb18f742de3828f03efa72b9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage  \nMAINTAINER Jeff Dickey jeff@dickeyxxx.com  \nEXPOSE 22021  \nENV HOME /root  \nCMD [\"/sbin/my_init\"]  \nRUN apt-get install -y socat  \nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \nRUN mkdir /etc/service/socat  \nADD socat.sh /etc/service/socat/run  \n\n"
    },
    {
        "filename": "adb8b0f879c6a6e9b09b619fc8c56b47fdc04ffd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM        ubuntu\nMAINTAINER  Matthew Fisher <me@bacongobbler.com>\n\n# install nginx\nRUN apt-get update\nRUN apt-get install -y software-properties-common python-software-properties\nRUN add-apt-repository -y ppa:nginx/stable\nRUN apt-get update\nRUN apt-get install -y nginx\n\nADD nginx.conf  /etc/nginx/nginx.conf\nADD default     /etc/nginx/sites-enabled/default\n\nWORKDIR /etc/nginx\n\nEXPOSE  80\n\nCMD nginx\n"
    },
    {
        "filename": "adcd31262108b8030973b07281a3db493dbb6ea9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build Nginx Amplify Agent autotests\n# Based on Ubuntu\n############################################################\n\n# Set the base image to Ubuntu\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Mike Belov\n\n# create required groups/users\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\n# install NGINX OS and some other applications\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ $(lsb_release -sc) main universe\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install -y --fix-missing \\\n     build-essential \\\n     curl \\\n     dialog \\\n     mysql-server-5.5 \\\n     nano \\\n     net-tools \\\n     nginx \\\n     php5-fpm \\\n     python \\\n     python-dev \\\n     python-distribute \\\n     tar \\\n     wget\n\n# copy nginx binary\nRUN cp /usr/sbin/nginx /usr/sbin/nginx2\n\n# prepare mysql init file\nRUN echo \"SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');\" > /mysql.init \\\n && echo \"CREATE USER 'amplify-agent'@'localhost' IDENTIFIED BY 'amplify-agent';\" >> /mysql.init\n\n# configure for php-fpm\nRUN rm -rf /run && mkdir -p /run/php/\n\n# add fastcgi_params and php-fpm.conf for nginx\nADD docker/test/fastcgi_params /etc/nginx/fastcgi_params\nADD docker/test/php-fpm.conf /etc/nginx/conf.d/php-fpm.conf\n\n# overwrite default www.conf for php5.0-fpm and add second one\nADD docker/test/php-fpm-www.conf /etc/php5/fpm/pool.d/www.conf\nADD docker/test/php-fpm-www2.conf /etc/php5/fpm/pool.d/www2.conf\n\n# add test .php file to /var/www/php-fpm root\nADD docker/test/test.php /var/www/php-fpm/test.php\n\n# install basic python tools\nRUN curl https://bootstrap.pypa.io/get-pip.py | python - 'pip==18.1.0' \\\n && pip install supervisor\n\n# install agent requirements:\nADD docker/test/requirements.txt /etc/naas/requirements.txt\nRUN pip install -I -r /etc/naas/requirements.txt\n\n# install test requirements\nRUN pip install \\\n    pytest \\\n    pytest-xdist \\\n    pyhamcrest \\\n    requests_mock \\\n    timeout-decorator \\\n    freezegun \\\n    mock\n\n# set some environment variables\nENV AMPLIFY_ENVIRONMENT testing\nENV PYTHONPATH /amplify\n\n# set the default directory where CMD will execute\nWORKDIR /amplify\n\n# add config files\nADD docker/test/nginx.conf /etc/nginx/nginx.conf\nADD docker/test/nginx2.conf /etc/nginx/nginx2.conf\nADD docker/test/nginx_bad_status.conf /etc/nginx/nginx_bad_status.conf\nADD docker/test/nginx_syslog.conf /etc/nginx/nginx_syslog.conf\nADD docker/test/supervisord.conf /etc/supervisord.conf\nADD docker/test/nginx_no_logs.conf /etc/nginx/nginx_no_logs.conf\n\n# add ssl stuff\nADD docker/test/amplify-agent-test.crt /etc/nginx/certs.d/amplify-agent-test.crt\nADD docker/test/amplify-agent-test.key /etc/nginx/certs.d/amplify-agent-test.key\n\n# set the home dir of the mysql user\nRUN usermod -d /var/lib/mysql/ mysql\n\nCMD bash\n"
    },
    {
        "filename": "ade41fe273316c9cdf6b795d6b08ec0bca0a5845.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM davidshen84/jupyter  \nMAINTAINER Xi Shen <davidshen84@gmail.com>  \n  \nRUN apt-get update && apt-get install -y \\  \nbuild-essential \\  \ngfortran \\  \nlibblas-dev \\  \nliblapack-dev \\  \nlibxft-dev \\  \n&& rm -rf /var/lib/apt/lists/*  \n  \n# order matters  \nRUN pip3 install --upgrade \\  \nnumpy \\  \nscipy \\  \nscikit-learn \\  \nmatplotlib \\  \npandas  \n\n"
    },
    {
        "filename": "adf5d3dd413fe092cd2ffa72eaad96d136b9e9e2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Serveur apache\nFROM debian:latest\nMAINTAINER Arnaud POINTET <arnaud.pointet@gmail.com>\n\nRUN echo 'deb http://ftp.fr.debian.org/debian/ jessie non-free' >> /etc/apt/sources.list\nRUN echo 'deb-src http://ftp.fr.debian.org/debian/ jessie non-free' >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get -y install apache2 libapache2-mod-fastcgi\n\nRUN rm /etc/apache2/sites-enabled/*\n\nENV VIRTUALHOST lab.dev\n\nADD conf-available /etc/apache2/conf-available\nADD sites-available /etc/apache2/sites-available\n#ADD mods-available /etc/apache2/mods-available\n\nEXPOSE 80\n\nADD apache.sh /usr/bin/apache.sh\nRUN chmod +x /usr/bin/apache.sh\nENTRYPOINT apache.sh\n\nVOLUME /var/www\n\nWORKDIR /var/www\n"
    },
    {
        "filename": "af9a48aa1612738c09d2453396b2cb9ae4b438fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu_ppc64le:16.04\nMAINTAINER Meghali Dhoble\n\nENV KIBANA 4.6\nENV ELASTIC 2.x\nENV LOGSTASH 2.4\n\nENV GOSU_VERSION 1.7\nENV GOSU_URL https://github.com/tianon/gosu/releases/download\n\nRUN echo \"deb http://ports.ubuntu.com/ubuntu-ports xenial restricted multiverse universe\"  >> /etc/apt/sources.list\nRUN apt-get update -y\nRUN apt-get install -y openjdk-8-jdk openjdk-8-jre \nENV JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-ppc64el\nENV PATH=$JAVA_HOME/bin:$PATH\nRUN apt-get install -y wget\nRUN set -x \\\n\t&& echo \"Grab gosu for easy step-down from root...\" \\\n\t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true \n\n# Install ELK Required Dependancies\nRUN set -x \\\n\t&& apt-get -qq update \\\n\t&& apt-get install -yq wget ca-certificates \\\n\t&& echo \"NOTE: the 'ffi-rzmq-core' gem is very picky about where it looks for libzmq.so\" \\\n\t&& mkdir -p /usr/local/lib && ln -s /usr/lib/*/libzmq.so.3 /usr/local/lib/libzmq.so \\\n\t&& groupadd -r kibana && useradd -r -m -g kibana kibana \\\n\t&& groupadd -r logstash && useradd -r -m -g logstash logstash \\\n\t&& apt-get -qq update && apt-get -yq install apache2-utils \\\n                                               supervisor \\\n                                               libzmq3-dev \\\n\t\t\t\t\t\t#elasticsearch \\\n                                               nginx --no-install-recommends \\\n  && apt-get purge -y --auto-remove wget \\\n  && apt-get clean \\\n  && apt-get autoclean \\\n  && apt-get autoremove \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n\t&& echo \"Creating Elasticsearch Paths...\" \\\n\t&& for path in \\\n\t\t/opt/elasticsearch-2.4.1/data \\\n\t\t/opt/elasticsearch-2.4.1/logs \\\n\t\t/opt/elasticsearch-2.4.1/config \\\n\t\t/opt/elasticsearch-2.4.1/config/scripts \\\n\t; do \\\n\tmkdir -p \"$path\"; \\\n\tdone\n\n## Install elastic-search using tarball as the apt-get version fails not compatible with Kibana \n# source build failing on Ubuntu \nWORKDIR /opt\nRUN apt-get -qq update && apt-get install -yq git wget\nRUN wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.1/elasticsearch-2.4.1.tar.gz\nRUN tar -xvzf elasticsearch-2.4.1.tar.gz\n\n# Install kibana\nRUN apt-get -qq update && apt-get install -yq git wget\nWORKDIR /opt\n#RUN git clone https://github.com/elastic/kibana.git && cd kibana && git tag && git checkout v5.0.0-alpha1\nRUN git clone https://github.com/elastic/kibana.git && cd kibana \nWORKDIR /opt/kibana\nRUN git checkout 4.6\nRUN apt-get -qq update && apt-get install -yq bcrypt make python g++ \nRUN wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | sh\nRUN bash -l -c 'nvm install \"$(cat .node-version)\"'\nRUN bash -l -c \"npm install\"\n\n# Configure Nginx\nADD config/nginx/kibana.conf /etc/nginx/sites-available/\nRUN cd /opt \\\n\t&& echo \"Configuring Nginx...\" \\\n\t&& mkdir -p /var/www \\\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log \\\n\t&& echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf \\\n\t&& rm /etc/nginx/sites-enabled/default \\\n\t&& ln -s /etc/nginx/sites-available/kibana.conf /etc/nginx/sites-enabled/kibana.conf\n\n# install logstash \nRUN apt-get -qq update && apt-get install -yq git curl\nWORKDIR /opt\nRUN git clone https://github.com/elastic/logstash.git && cd logstash && git checkout 2.4\nWORKDIR /opt/logstash\nRUN curl -sSL https://rvm.io/mpapis.asc | gpg --import -\nRUN curl -sSL https://get.rvm.io | bash -s --\nRUN bash -l -c \"rvm install jruby 1.7.25 && rvm use jruby-1.7.25\"\n\nENV RUBY_PLATFORM=java\nRUN wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.4-bin.tar.gz && tar -xvzf apache-ant-1.9.4-bin.tar.gz\nENV ANT_HOME=/opt/logstash/apache-ant-1.9.4\nENV PATH=$ANT_HOME/bin:$PATH\nRUN apt-get -qq update && apt-get install -yq unzip\nRUN wget https://github.com/jnr/jffi/archive/master.zip && unzip master.zip && cd jffi-master #&& ant\nRUN bash -l -c \"rake bootstrap\" # && rake test:install-core\"\n\n\n# Install Timelion Kibana Plugin\n#RUN /opt/kibana/bin/kibana plugin -i kibana/timelion\n\n# Add ELK PATHs\nENV PATH /opt/elasticsearch-2.4.1/bin:$PATH\nENV PATH /opt/logstash/bin:$PATH\nENV PATH /opt/kibana/bin:$PATH\n\n# Add elastic config\nCOPY config/elastic /usr/share/elasticsearch/config\n# Add admin/admin web user account\nCOPY config/nginx/htpasswd /etc/nginx/.htpasswd\n# Add configs\nCOPY config/supervisord/supervisord.conf /etc/supervisor/conf.d/\n\n# Add entrypoints\nCOPY entrypoints/logstash-entrypoint.sh /\nCOPY entrypoints/kibana-entrypoint.sh /\nRUN chmod +x /*.sh\n\nVOLUME [\"/usr/share/elasticsearch/data\"]\nVOLUME [\"/etc/logstash/conf.d\"]\nVOLUME [\"/etc/nginx\"]\n\nEXPOSE 80 443 9200 9300\nCMD [bash -l -c \"/logstash-entrypoint.sh kibana -e 'input { stdin { } } output { stdout { } }'\" && nohup elasticsearch && bash -l -c \"kibana\"] \nCMD [\"/usr/bin/supervisord\"]\n\n"
    },
    {
        "filename": "afc7c2eba079171ea9ce91754fc1fbc0ae2687ca.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Axelle Apvrille \nENV REFRESHED_AT 2019-03-04\n\nARG DEBIAN_FRONTEND=noninteractive\nENV SMALI_VERSION \"2.2.6\"\nENV APKTOOL_VERSION \"2.4.0\"\nENV JD_VERSION \"1.4.0\"\nENV PROCYON_VERSION \"0.5.30\"\nENV ANDROID_SDK_VERSION \"4333796\"\nENV FRIDA_VERSION \"12.4.0\"\nENV SSH_PASSWORD \"rootpass\"\nENV VNC_PASSWORD \"rootpass\"\nENV USER root\nENV TERM xterm\n\n# System install ------------------------------\nRUN dpkg --add-architecture i386\nRUN apt-get update && \\\n    apt-get install -yqq \\\n    default-jdk \\\n    software-properties-common \\\n    unzip \\\n    zip \\\n    wget \\\n    git \\\n    androguard \\\n    build-essential \\\n    emacs \\\n    vim \\\n    nano \\\n    iptables \\\n    iputils-ping \\\n    python-protobuf \\\n    python-pip \\\n    python-crypto \\\n    protobuf-compiler \\\n    libprotobuf-java \\\n    apt-transport-https \\\n    openssh-server \\\n    ssh  \\\n    telnet \\\n    gdb-multiarch \\\n    eog \\\n    p7zip-full \\\n    curl \\\n    pkg-config \\\n    tree \\\n    firefox \\\n    python3 \\\n    qemu-kvm \\\n    libvirt-bin \\\n    ubuntu-vm-builder \\\n    bridge-utils \\\n    libc6:i386 \\\n    libncurses5:i386 \\\n    libstdc++6:i386 \\\n    lib32z1 \\\n    libbz2-1.0:i386 \\\n    xvfb \\\n    x11vnc \\\n    xfce4 \\\n    xfce4-terminal \\\n    supervisor \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN pip install --upgrade pip\n\n# We need supervisor to launch ssh and vnc\nRUN mkdir -p /var/log/supervisor\n\n# Install SSH access\nRUN mkdir /var/run/sshd\nRUN echo \"root:$SSH_PASSWORD\" | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN echo \"X11UseLocalhost no\" >> /etc/ssh/sshd_config\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n# SSH login fix. Otherwise user is kicked off after login\n\n\n# Install VNC server - we need GLX support for Android emulator\nRUN mkdir ~/.vnc\nRUN  x11vnc -storepasswd $VNC_PASSWORD ~/.vnc/passwd\nRUN echo '#!/bin/bash' >> /root/startXvfb.sh\nRUN echo \"Xvfb :1 +extension GLX +render -noreset -screen 0 1280x1024x24& DISPLAY=:1 /usr/bin/xfce4-session >> /root/xsession.log 2>&1 &\"  >> /root/startXvfb.sh\nRUN echo \"x11vnc -loop -usepw -display :1\"  >> /root/startXvfb.sh\nRUN echo \"exit 0\"  >> /root/startXvfb.sh\n\n# Configure supervisor\nRUN echo \"[supervisord]\" >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo \"nodaemon=true\" >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo \"[program:sshd]\" >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo \"command=/usr/sbin/sshd -D\" >> /etc/supervisor/conf.d/supervisord.conf\nRUN echo \"[program:startxvfb]\">> /etc/supervisor/conf.d/supervisord.conf\nRUN echo \"command=/bin/sh /root/startXvfb.sh\">> /etc/supervisor/conf.d/supervisord.conf\n#RUN echo \"[program:vnc]\" >> /etc/supervisor/conf.d/supervisord.conf\n#RUN echo \"command=/root/vnc.sh\" >> /etc/supervisor/conf.d/supervisord.conf\n\n\n# NodeJS & NPM useful for some labs and r2frida\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install -y nodejs\n\n# Android Reverse Engineering tools -------------\nRUN mkdir -p /opt\n\n# Install Smali / Baksmali\nRUN wget -q -O \"/opt/smali.jar\" \"https://bitbucket.org/JesusFreke/smali/downloads/smali-$SMALI_VERSION.jar\"\nRUN wget -q -O \"/opt/baksmali.jar\" \"https://bitbucket.org/JesusFreke/smali/downloads/baksmali-$SMALI_VERSION.jar\"\n\n# Apktool\nRUN mkdir -p /opt/apktool\nRUN wget -q -O \"/opt/apktool/apktool\" https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\nRUN wget -q -O \"/opt/apktool/apktool.jar\" https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_$APKTOOL_VERSION.jar\nRUN chmod u+x /opt/apktool/apktool /opt/apktool/apktool.jar\nENV PATH $PATH:/opt/apktool\n\n# Dex2Jar\nRUN wget -q -O \"/opt/dex2jar-2.0.zip\" http://downloads.sourceforge.net/project/dex2jar/dex2jar-2.0.zip \\\n    && cd /opt \\\n    && unzip /opt/dex2jar-2.0.zip \\\n    && chmod u+x /opt/dex2jar-2.0/*.sh \\\n    && rm -f /opt/dex2jar-2.0.zip \nENV PATH $PATH:/opt/dex2jar-2.0\n\n# JD-GUI\nRUN wget -q -O \"/opt/jd-gui.jar\" \"https://github.com/java-decompiler/jd-gui/releases/download/v$JD_VERSION/jd-gui-$JD_VERSION.jar\"\nRUN cd /opt && git clone https://github.com/kwart/jd-cmd\n\n# JADX\nRUN cd /opt && git clone https://github.com/skylot/jadx.git\nRUN cd /opt/jadx && ./gradlew dist\n\n# Procyon\nRUN wget -q -O \"/opt/procyon-decompiler.jar\" \"https://bitbucket.org/mstrobel/procyon/downloads/procyon-decompiler-$PROCYON_VERSION.jar\"\n\n# Krakatau\nRUN cd /opt && git clone https://github.com/Storyyeller/Krakatau\n\n# APKiD\n#RUN cd /opt && git clone https://github.com/rednaga/APKiD\n#RUN cd /opt/APKiD && git clone https://github.com/rednaga/yara-python\n#RUN cd /opt/APKiD/yara-python && python setup.py install\n#RUN cd /opt/APKiD && pip install apkid\n\n# AXMLPrinter\nRUN cd /opt && git clone https://github.com/rednaga/axmlprinter\nRUN cd /opt/axmlprinter && ./gradlew jar\n\n# Google Play API\nRUN cd /opt && git clone https://github.com/egirault/googleplay-api\n\n# Google Play crawler\nRUN wget -q -O \"/opt/googleplaycrawler.jar\" https://raw.githubusercontent.com/Akdeniz/google-play-crawler/master/googleplay/googleplaycrawler-0.3.jar\n\n# Google Play downloader\nRUN cd /opt && git clone https://github.com/bluemutedwisdom/google-play-downloader\n\n# Radare2\nRUN cd /opt && git clone https://github.com/radare/radare2\nRUN cd /opt/radare2 && sys/install.sh && make symstall && r2pm init && pip install r2pipe\n\n# Frida\nRUN pip install frida && pip install --upgrade frida && pip install frida-tools\nRUN cd /opt && wget -q -O \"/opt/frida-server.xz\" https://github.com/frida/frida/releases/download/${FRIDA_VERSION}/frida-server-${FRIDA_VERSION}-android-arm.xz && unxz /opt/frida-server.xz\n#RUN r2pm -i r2frida\nRUN echo \"#!/bin/bash\" >> /opt/install-frida-server.sh\nRUN echo \"adb push /opt/frida-server /data/local/tmp/\"  >> /opt/install-frida-server.sh\nRUN echo \"adb shell \\\"chmod 755 /data/local/tmp/frida-server\\\"\" >> /opt/install-frida-server.sh\nRUN chmod u+x /opt/install-frida-server.sh\n\n# Simplify\n#RUN cd /opt && git clone --recursive https://github.com/CalebFenton/simplify.git && cd simplify && ./gradlew fatjar && cd /opt && ln -s /opt/simplify/simplify/build/libs/simplify.jar simplify.jar\n\n# Other tools with simple install\nRUN wget -q -O \"/opt/oat2dex.py\" https://github.com/jakev/oat2dex-python/blob/master/oat2dex.py\nRUN wget -q -O \"/opt/extract.sh\" https://gist.githubusercontent.com/PaulSec/39245428eb74577c5234/raw/4ff2c87fbe35c0cfdb55af063a6fee072622f292/extract.sh \\\n    && sed -i 's/\\/path\\/to\\/jd-gui/java -jar \\/opt\\/jd-gui\\.jar/g' /opt/extract.sh \\\n    && sed -i 's/\\/path\\/to\\/dex2jar-0.0.9.15\\/d2j-dex2jar\\.sh/\\/opt\\/dex2jar-2\\.0\\/d2j-dex2jar\\.sh/g' /opt/extract.sh \\\n    && chmod +x /opt/extract.sh\nRUN mkdir -p /opt/jebPlugins && wget -q -O \"/opt/jebPlugins/DeCluster.java\" https://raw.githubusercontent.com/CunningLogic/myJEBPlugins/master/DeCluster.java\nRUN wget -q -O \"/opt/ClassyShark.jar\" https://github.com/google/android-classyshark/releases/download/6.7/ClassyShark.jar\n#RUN wget -q -O \"/opt/androarsc.py\" https://raw.githubusercontent.com/androguard/androguard/master/androarsc.py\nRUN wget -q -O \"/opt/cfr_0_118.jar\" http://www.benf.org/other/cfr/cfr_0_118.jar\nRUN cd /opt && git clone https://github.com/Storyyeller/enjarify && ln -s /opt/enjarify/enjarify.sh /usr/bin/enjarify\nRUN cd /opt && wget -q -O \"/opt/parse_apk.py\" https://raw.githubusercontent.com/cryptax/dextools/master/parseapk/parse_apk.py && wget -q -O \"/opt/dexview.py\" https://raw.githubusercontent.com/cryptax/dextools/master/dexview/dexview.py\n\n\n\n# IDA Pro Demo\nRUN wget -q -O \"/opt/idafree70_linux.run\" https://out7.hex-rays.com/files/idafree70_linux.run && chmod u+x /opt/idafree70_linux.run\n\n# Android emulator\nRUN wget -q -O \"/opt/tools-linux.zip\" https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_SDK_VERSION.zip\nRUN unzip /opt/tools-linux.zip -d /opt/android-sdk-linux\nRUN rm -f /opt/tools-linux.zip\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH $PATH:/opt:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\nRUN echo y | /opt/android-sdk-linux/tools/bin/sdkmanager --update\nRUN echo \"yes\" | /opt/android-sdk-linux/tools/bin/sdkmanager \"emulator\" \"tools\" \"platform-tools\" \\\n    \"build-tools;28.0.3\" \\\n    \"ndk-bundle\" \\\n    \"platforms;android-22\" \\\n    \"platforms;android-23\" \\\n    \"platforms;android-25\" \\\n    \"platforms;android-28\" \\\n    \"system-images;android-22;default;armeabi-v7a\" \\\n    \"system-images;android-23;google_apis;armeabi-v7a\" \\\n    \"system-images;android-25;google_apis;armeabi-v7a\" \\\n    \"system-images;android-28;google_apis_playstore;x86_64\" \n\nRUN echo \"no\" | /opt/android-sdk-linux/tools/bin/avdmanager create avd -n \"Android51\" -k \"system-images;android-22;default;armeabi-v7a\"\nRUN echo \"no\" | /opt/android-sdk-linux/tools/bin/avdmanager create avd -n \"Android60\" -k \"system-images;android-23;google_apis;armeabi-v7a\"\nRUN echo \"no\" | /opt/android-sdk-linux/tools/bin/avdmanager create avd -n \"Android711\" -k \"system-images;android-25;google_apis;armeabi-v7a\"\nRUN echo \"no\" | /opt/android-sdk-linux/tools/bin/avdmanager create avd -n \"Android9_x86_64\" -k \"system-images;android-28;google_apis_playstore;x86_64\"\n\n#RUN mkdir ${ANDROID_HOME}/tools/keymaps && touch ${ANDROID_HOME}/tools/keymaps/en-us\nENV LD_LIBRARY_PATH ${ANDROID_HOME}/emulator/lib64/qt/lib:${ANDROID_HOME}/emulator/lib64/gles_swiftshader/\n\n# Cleaning up and final setup -------------------------\nRUN apt-get autoremove -yqq\nRUN apt-get clean\n\nRUN echo \"export PATH=$PATH\" >> /etc/profile\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH\" >> /etc/profile\nRUN echo \"alias emulator='/opt/android-sdk-linux/emulator/emulator64-arm -avd Android51 -no-audio -partition-size 512 -no-boot-anim'\" >> /root/.bashrc\nRUN echo \"alias emulator7='/opt/android-sdk-linux/emulator/emulator64-arm -avd Android711 -no-audio -no-boot-anim'\" >> /root/.bashrc\nRUN echo \"alias emulator9='/opt/android-sdk-linux/tools/emulator -avd Android9_x86_64 -no-audio -no-boot-anim'\" >> /root/.bashrc\nRUN echo \"export LC_ALL=C\" >> /root/.bashrc\n\nRUN mkdir -p /workshop\nWORKDIR /workshop\nVOLUME [\"/data\"] # to be used for instance to pass along samples\n\nCMD [ \"/usr/bin/supervisord\", \"-c\",  \"/etc/supervisor/conf.d/supervisord.conf\" ]\n\nEXPOSE 5554\nEXPOSE 5555\nEXPOSE 5900\nEXPOSE 5037\nEXPOSE 22\n\n\n\n\n"
    },
    {
        "filename": "afe4abc6b1ccfe56d9b94d77bd60727701dd85bb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Maluuba Infrastructure Team <infrastructure@maluuba.com>\n\nEXPOSE 8080\n\n# Required for apt-add-repository\nRUN apt-get -qq update\nRUN apt-get -qq install software-properties-common python-software-properties\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x219BD9C9\nRUN apt-add-repository \"deb http://repos.azulsystems.com/ubuntu stable main\"\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\nRUN apt-get -qq update\nRUN apt-get -qq upgrade\n\nRUN apt-get -qq install g++-4.9 #libstdc++6-4.9\nRUN apt-get -qq install zulu-8\nRUN apt-get -qq install curl\nRUN apt-get -qq install tomcat7\nRUN apt-get -qq install bash\n\nADD start-tomcat.sh /opt/start-tomcat.sh\nRUN chmod +x /opt/start-tomcat.sh\n\nRUN mv /etc/cron.daily/logrotate /etc/cron.hourly/logrotate\n\nADD logrotate /etc/logrotate.d/tomcat7\nRUN chmod 644 /etc/logrotate.d/tomcat7\n\n# Setup UTF * based terminal\nRUN locale-gen en_US.UTF-8  \nENV LANG en_US.UTF-8  \nENV LANGUAGE en_US:en  \nENV LC_ALL en_US.UTF-8  \nENV JAVA_HOME /usr/lib/jvm/zulu-8-amd64/\n\nENTRYPOINT [\"/opt/start-tomcat.sh\"]\n"
    },
    {
        "filename": "b15a0b74b7e9d59fa80ef140fb54a7484ed14b0c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM datmo/python-base:gpu-py35\n\nMAINTAINER Datmo devs <dev@datmo.com>\n\nRUN pip --no-cache-dir install \\\n        Cython \\\n        h5py \\\n        requests \\\n        tabulate \\\n        matplotlib \\\n        numpy==1.14.5 \\\n        pandas \\\n        path.py \\\n        pyyaml \\\n        scipy \\\n        six \\\n        sklearn \\\n        sympy \\\n        Pillow \\\n        zmq \\\n        seaborn \\\n        wheel \\\n        deap \\\n        update_checker \\\n        tqdm \\\n        stopit \\\n        imbalanced-learn \\\n        tpot \\\n        datmo\n\n# Install cmake\nRUN apt-get update && apt-get install -y cmake\n\n# Install lightgbm\nRUN pip install lightgbm\n\n# Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n    && cd xgboost \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DUSE_CUDA=ON \\\n    && make -j$(nproc) \\\n    && cd .. \\\n    && make -j$(nproc) \\\n    && cd python-package \\\n    && python setup.py install \\\n    && cd ../.. \\\n    && rm -rf xgboost\n\n###########\n#\n#      NEW CONTRIBUTORS:\n# Please add new pip/apt installs in this block. Don't forget a \"&& \\\" at the end\n# of all non-final lines. Thanks!\n#\n###########\n\n\n\n##### ^^^^ Add new contributions above here ^^^^ #####\n\n"
    },
    {
        "filename": "b2276b7f9e2633179b9a951c27f491816553ab55.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER aduros <alexandre.duros@canal-plus.com>\n\nWORKDIR /srv\n\nRUN apt-get update && \\\n    apt-get upgrade --quiet --yes\n\nRUN apt-get install --quiet --yes pkg-config\nRUN apt-get install --quiet --yes make\nRUN apt-get install --quiet --yes golang\nRUN apt-get install --quiet --yes gccgo\nRUN apt-get install --quiet --yes libav-tools\nRUN apt-get install --quiet --yes libavformat-dev\nRUN apt-get install --quiet --yes libjpeg-dev\n\nADD src /srv/src\nADD configure Makefile Makefile.inc /srv/\nRUN mkdir -p .obj\nRUN ./configure && make\n\nADD videos /var/videos\nENV VIDEOS /var/videos\n\nADD interface /var/www\nENV UI        /var/www\n\nEXPOSE 3000\n\nCMD ./DashMe -video=$VIDEOS -ui=$UI\n"
    },
    {
        "filename": "b25ffa6c5437d34941bfbf9c30e2ffec65144a00.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "# Dockerfile for MySQL proxy + Pantheon Terminus\n\nFROM pataquets/mysql-proxy\n\n# Add our runtime script and the mysql-proxy lua script.\nADD run /opt/run\nADD terminus_auth.lua /opt/auth.lua\nRUN chmod u+x /opt/run\n\n# Install PHP, terminus, etc.\nRUN apt-get -qq update \\\n  && apt-get -qqy upgrade \\\n  && apt-get -qqy install software-properties-common \\\n  && add-apt-repository ppa:ondrej/php \\\n  && apt-get -qq update \\\n  && apt-get -qqy --force-yes upgrade \\\n  && apt-get -qqy --force-yes install --no-install-recommends \\\n    curl \\\n    openssh-client \\\n    php7.2-cli \\\n    php7.2-common \\\n    php7.2-curl \\\n    php7.2-zip \\\n    php7.2-dom \\\n    php7.2-xml \\\n  && apt-get clean\nRUN mkdir -p $HOME/.terminus/plugins \\\n  && mkdir -p $HOME/terminus \\\n  && curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install --install-version=1.9.0 --install-dir=$HOME/terminus \\\n  && curl https://github.com/terminus-plugin-project/terminus-replica-plugin/archive/1.0.0.tar.gz -L -o $HOME/.terminus/plugins/replica.tar.gz \\\n  && cd $HOME/.terminus/plugins && tar -zxvf replica.tar.gz\n\n# You should customize these at run-time.\nENV PROXY_DB_UN=pantheon_proxy\nENV PROXY_DB_PW=change-me-pw-for-proxy\nENV PROXY_DB_PORT=3306\nENV PANTHEON_EMAIL=test@example.com\nENV PANTHEON_TOKEN=\nENV PANTHEON_SITE=example\nENV PANTHEON_ENV=test\n\n# Override command/entrypoint from upstream image\nENTRYPOINT [\"/opt/run\"]\nCMD []\n"
    },
    {
        "filename": "b2e18424095800e27b0d2aee62c1556923c86dd8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM sih4sing5hong5/tai5-uan5_gian5-gi2_phing5-tai5\nMAINTAINER sih4sing5hong5\n\nRUN apt-get update && \\\n  apt-get install -y locales python3 python3-pip python3-dev zlib1g-dev libffi-dev libxml2-dev libxslt1-dev rabbitmq-server # \u70ba\u4e86\u7de8\u8b6f, \u9023google oauth2, message queue\n\nWORKDIR /opt\nRUN pip3 install gunicorn whitenoise\nRUN pip3 install 'django<2.1'\nCOPY . .\nRUN python3 manage.py collectstatic --no-input\n\n# RUN python3 manage.py migrate\n# RUN echo 'from \u4f73\u6021\u8868\u532f\u5165\u8cc7\u6599\u5eab import \u8d70 ; \u8d70()' | python3 manage.py shell\n# RUN echo 'from \u532f\u5165\u53f0\u83ef import \u8d70\u53f0\u83ef ; \u8d70\u53f0\u83ef()' | python3 manage.py shell\n# RUN echo 'from \u532f\u5165\u5bf6\u5cf6\u53ef\u5922 import \u8d70\u5bf6\u5cf6\u53ef\u5922 ; \u8d70\u5bf6\u5cf6\u53ef\u5922()' | python3 manage.py shell\n# RUN echo 'from \u532f\u5165glll4678\u5916\u4f86\u8a5e import \u8d70\u532f\u5916\u4f86\u8a5e ; \u8d70\u532f\u5916\u4f86\u8a5e()' | python3 manage.py shell\n\nCMD gunicorn itaigi.wsgi:application -c gunicorn.conf.py"
    },
    {
        "filename": "b2f504151aebde3658b3d9acfd2fe0a33d7f562e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# HADOPIBOX\n\nFROM ubuntu:trusty\nMAINTAINER hadopi <hadopibox@gmail.com>\n\n# env\nENV TERM xterm\nENV DEBIAN_FRONTEND noninteractive\nENV RTORRENT_DEFAULT /opt/rtorrent\n\nENV RTORRENT_VERSION 0.9.2-1\nENV RUTORRENT_VERSION 3.6\nENV H5AI_VERSION 0.27.0\nENV CAKEBOX_VERSION v1.8.3\n\n# install tools ===============================================================\n\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 90BD7EACED8E640A \\\n        && echo 'deb http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main' >> /etc/apt/sources.list.d/ffmpeg.list\n\nRUN apt-get -qq --force-yes -y update \nRUN apt-get install -y vim curl \\\n        software-properties-common python-software-properties build-essential \\\n        supervisor nginx php5-cli php5-fpm php5-gd \\\n        zip unzip unrar-free \\\n        mediainfo imagemagick ffmpeg\n\n# install rtorrent ============================================================\n\nRUN apt-get install -y rtorrent=${RTORRENT_VERSION}\n\n# install rutorrent ===========================================================\n\nRUN mkdir -p /var/www \\\n        && curl -sSL https://bintray.com/artifact/download/novik65/generic/rutorrent-${RUTORRENT_VERSION}.tar.gz | tar xz -C /var/www \\\n        && curl -sSL https://bintray.com/artifact/download/novik65/generic/plugins-${RUTORRENT_VERSION}.tar.gz | tar xz -C /var/www/rutorrent\n\n# install cakebox =============================================================\n\n# first the prerequisites (composer + nodejs + bower)\nRUN curl -sSL http://getcomposer.org/installer | php \\\n        && mv /composer.phar /usr/bin/composer \\\n        && chmod +x /usr/bin/composer\n\n# then either install nodejs+npm from package manager (old nodejs version that doesn't include npm)\nRUN apt-get install -y nodejs npm \\\n        && ln -s $(which nodejs) /usr/bin/node \\\n        && npm install -g bower\n# or compile nodejs only (auto include npm)\n#RUN mkdir -p /opt/nodejs && curl -sSL http://nodejs.org/dist/node-latest.tar.gz | tar xzv --strip 1 -C /opt/nodejs && cd /opt/nodejs && ./configure && make && make install\n\n# and finally\nRUN apt-get install -y git \\\n        && git clone https://github.com/cakebox/cakebox-light.git /var/www/cakebox \\\n        && cd /var/www/cakebox \\\n        && git checkout tags/$(git describe --abbrev=0) \\\n        && composer install \\\n        && bower install --config.interactive=false --allow-root \\\n        && cp config/default.php.dist config/default.php \\\n        && sed -i \"/cakebox.root/s,/var/www,${RTORRENT_DEFAULT}/share,\" config/default.php\n\n# install h5ai ================================================================\n\nRUN curl -sSL http://release.larsjung.de/h5ai/h5ai-$H5AI_VERSION.zip -o /tmp/h5ai.zip \\\n        && unzip /tmp/h5ai.zip -d /var/www/ \\\n        && rm -f /tmp/h5ai.zip \\\n        && ln -s ${RTORRENT_DEFAULT}/share /var/www/downloads\n\n# install pure-ftpd ===========================================================\n\n# install dependencies\nRUN apt-get -y build-dep pure-ftpd\n\n# build from source\nRUN mkdir /tmp/pure-ftpd/ \\\n        && cd /tmp/pure-ftpd/ \\\n        && apt-get source pure-ftpd \\\n        && cd pure-ftpd-* \\\n        && sed -i '/^optflags=/ s/$/ --without-capabilities/g' ./debian/rules \\\n        && dpkg-buildpackage -b -uc\n\n# install the new deb files\nRUN dpkg -i /tmp/pure-ftpd/pure-ftpd-common*.deb \\\n        && apt-get -y install openbsd-inetd \\\n        && dpkg -i /tmp/pure-ftpd/pure-ftpd_*.deb\n\n# Prevent pure-ftpd upgrading\nRUN apt-mark hold pure-ftpd pure-ftpd-common\n\n# setup ftpgroup and ftpuser\nRUN groupadd ftpgroup \\\n        && useradd -g ftpgroup -d /dev/null -s /etc ftpuser\n\n# cleanup =====================================================================\n\nRUN apt-get clean \\\n        && rm -rf /tmp/pure-ftpd/ \\\n        && rm -rf /var/lib/apt/lists/*\n\n# setup =======================================================================\n\nADD src /\n\n# nginx\nRUN ln -s /etc/nginx/sites-available/rutorrent.conf /etc/nginx/sites-enabled \\\n        && rm /etc/nginx/sites-enabled/default\n\n# rtorrent\nRUN mkdir -p ${RTORRENT_DEFAULT}/share \\\n        && mkdir -p ${RTORRENT_DEFAULT}/session \\\n        && chown -R www-data:www-data /var/www\n\nEXPOSE 30000-30009\n\nRUN useradd -m -d /home/pibox -m pibox -s \"/bin/bash\" \\\n        && chown -R pibox:pibox /var/log/supervisor\n\nCMD [\"/go.sh\"]\n"
    },
    {
        "filename": "b30f281e8600bb8194e7fb1de6d113be3284492b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\nMAINTAINER Frank Austin Nothaft, fnothaft@berkeley.edu\n\nRUN apt-get update && \\\n  apt-get install -y python libnss3 openjdk-8-jre-headless curl\n\n# Install statically linked version of docker client\nRUN curl https://get.docker.com/builds/Linux/x86_64/docker-1.12.3.tgz \\\n    | tar -xvzf - --transform='s,[^/]*/,,g' -C /usr/local/bin/ \\\n    && chmod u+x /usr/local/bin/docker\n\n# pull down spark jar\nRUN mkdir /opt/apache-spark && \\\n  curl http://apache.osuosl.org/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.6.tgz \\\n  | tar --strip-components=1 -xzC /opt/apache-spark\n\n# put spark on path\nENV PATH /opt/apache-spark/bin:$PATH\n\n# set spark worker port\nENV SPARK_WORKER_PORT 7075\n\n# add worker runner\nADD run-worker.sh .\n\nENTRYPOINT [\"bash\", \"-x\", \"run-worker.sh\"]\n"
    },
    {
        "filename": "b3605a9457421a202699eeba43f86e9e19d8c9ed.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Channel server Docker builder\n#\n# This Dockerfile creates a container which builds Channel Server as found in the\n# current folder, and creates a tarball which can be piped into another Docker\n# container for creating minimal sized Docker containers.\n#\n# First create the builder image:\n#\n#   ```\n#   docker build -t channel-server-builder -f Dockerfile.build .\n#   ```\n# Next run the builder container, piping its output into the creation of the\n# runner container. This creates a minimal size Docker image which can be used\n# to run Channel Server in production.\n#\n#   ```\n#   docker run --rm channel-server-builder | docker build -t channel-server -f Dockerfile.run -\n#   ```\n\n#FROM ubuntu:xenial\nFROM golang:latest\nMAINTAINER edison <52388483@qq.com>\n\n# Set locale.\n#RUN locale-gen --no-purge en_US.UTF-8\n#ENV LC_ALL en_US.UTF-8\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Base build dependencies.\nRUN apt-get update && apt-get install -qy \\\n\tnodejs \\\n\tbuild-essential \\\n\tgit \\\n\tautomake \\\n\tautoconf\n\n# Add and build Channel server.\nADD . /srv/channel-server\nWORKDIR /srv/channel-server\n\nRUN git clone http://github.com/golang/net.git /go/src/golang.org/x/net \\\n    && git clone http://github.com/golang/sys.git /go/src/golang.org/x/sys \\\n\t&& git clone http://github.com/golang/crypto.git /go/src/golang.org/x/crypto\n\nRUN mkdir -p /usr/share/gocode/src\nRUN ./autogen.sh && \\\n\t./configure && \\\n\tmake pristine && \\\n\tmake get && \\\n\tmake tarball\nRUN rm /srv/channel-server/dist_*/*.tar.gz\nRUN mv /srv/channel-server/dist_*/channel-server-* /srv/channel-server/dist\n\n# Add gear required by Dockerfile.run.\nCOPY Dockerfile.run /\nCOPY scripts/docker_entrypoint.sh /\n\n# Running this image produces a tarball suitable to be piped into another Docker build command.\nCMD tar -cf - -C / Dockerfile.run docker_entrypoint.sh /srv/channel-server/dist\n"
    },
    {
        "filename": "b38d3eea5b68ec4c784b633d398f5a3119233bea.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#FROM debian:buster\nFROM ubuntu:16.04\n#LABEL de.dcso.misp-server.version=\"0.0.1-alpha\"\nLABEL vendor=\"DCSO GmbH <www.dcso.de>\"\nLABEL de.dcso.misp-server.release-date=\"2018-01-02\"\nLABEL de.dcso.misp-server.is-production=\"false\"\nLABEL maintainer=\"DCSO MISP <misp@dcso.de>\"\n\n# Variables:\nARG MISP_TAG=v2.4.88\nARG python_cybox_TAG=v2.1.0.12\nARG python_stix_TAG=v1.1.1.4\nARG mixbox_TAG=v1.0.2\nARG cake_resque_TAG=4.1.2\n\n#########################################\n#       Start of MISP Config Part\n\n# Install core components\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update -y && apt-get autoremove -y && apt-get clean -y\nRUN apt-get install -y software-properties-common\nRUN apt-get install -y \\ \nsupervisor \\\nnano \\\nvim \\\ncurl \\\ngcc \\\nmake \\\npython \\\npython-pip \\\npython3 \\\npython3-pip \\\nlocales \\\nzip \\\niputils-ping \\\ncurl \\\ngit \\\nmake \\\nopenssl \\\nvim \\\nzip \\\nnet-tools \\\nsudo\n\n# Install additional dependencies\nRUN apt-get install -y \\ \nmariadb-client \\\npython-mysqldb \\\npython-dev \\\npython-pip \\\npython3-setuptools \\\npython-setuptools \\\nlibxml2-dev \\\nlibxslt1-dev \\\nzlib1g-dev \\\npython-setuptools\n\n# Install Apache\nRUN apt-get install -y \\\napache2 \\\napache2-doc \\\napache2-utils \n\n# ATTENTION the part about a2enmod/a2dismod, a2ensite/a2dissite is moved to step 7.\n\n# Install PHP and depedencies\nRUN apt-get install -y \\\nlibapache2-mod-php \\\nphp \\\nphp-cli \\\nphp-crypt-gpg \\\nphp-dev \\\nphp-json \\\nphp-mysql \\\nphp-opcache \\\nphp-readline \\\nphp-redis \\\nphp-xml\n# Set locals\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# Update PIP\nRUN pip install --upgrade pip\nRUN pip3 install --upgrade pip\n\n##################################\n### Install and configure MISP ###\n##################################\n### 3/ MISP code ###\n# Download MISP using git in the /var/www/ directory.\n# Attention: we replaced the fixed tag with a variable\nRUN mkdir /var/www/MISP; chown www-data:www-data /var/www/MISP;\nRUN git clone https://github.com/MISP/MISP.git /var/www/MISP\nRUN cd /var/www/MISP; git checkout tags/${MISP_TAG};\n\n# Make git ignore filesystem permission differences\nRUN cd /var/www/MISP; git config core.filemode false;\n# install Mitre's STIX and its dependencies by running the following commands:\n# Attention: we replaced the fixed tag with a variable\nRUN apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev python-setuptools\nRUN cd /var/www/MISP/app/files/scripts; git clone https://github.com/CybOXProject/python-cybox.git;\nRUN cd /var/www/MISP/app/files/scripts; git clone https://github.com/STIXProject/python-stix.git;\nRUN cd /var/www/MISP/app/files/scripts/python-cybox; git checkout ${python_cybox_TAG}; sudo python setup.py install;\nRUN cd /var/www/MISP/app/files/scripts/python-stix; git checkout ${python_stix_TAG}; sudo python setup.py install;\n\n# install mixbox to accomodate the new STIX dependencies:\n# Attention: we replaced the fixed tag with a variable\nRUN cd /var/www/MISP/app/files/scripts/; git clone https://github.com/CybOXProject/mixbox.git\nRUN cd /var/www/MISP/app/files/scripts/mixbox; git checkout ${mixbox_TAG}; sudo python setup.py install\n\n# install support for STIX 2.0 (Python 3 is required)\nRUN pip3 install stix2\n\n### 4/ CakePHP ###\n# CakePHP is included as a submodule of MISP, execute the following commands to let git fetch it:\nRUN cd /var/www/MISP; git submodule init; git submodule update;\n# Make git ignore filesystem permission differences for submodules\nRUN cd /var/www/MISP; git submodule foreach git config core.filemode false\n\n# Once done, install CakeResque along with its dependencies if you intend to use the built in background jobs:\nRUN cd /var/www/MISP/app; sudo -u www-data php composer.phar require kamisama/cake-resque:${cake_resque_TAG}; \\\nphp composer.phar config vendor-dir Vendor; \\\nphp composer.phar install;\n\n# Enable CakeResque with php-redis\nRUN sudo phpenmod redis\n\n# To use the scheduler worker for scheduled tasks, do the following:\nRUN cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php\n# If you have multiple MISP instances on the same system, don't forget to have a different Redis per MISP instance for the CakeResque workers\n# The default Redis port can be updated in Plugin/CakeResque/Config/config.php\n\n### 5/ Set the permissions\n# Check if the permissions are set correctly using the following commands:\nRUN chown -R www-data:www-data /var/www/MISP; \\\nchmod -R 750 /var/www/MISP; \\\nchmod -R g+ws /var/www/MISP/app/tmp; \\ \nchmod -R g+ws /var/www/MISP/app/files; \\\nchmod -R g+ws /var/www/MISP/app/files/scripts/tmp;\n\n### 6 Create a database and user\n# At the moment this will be done via misp-robot.\n#RUN mysql -u misp -p`cat /run/secrets/mysql_password` -h misp-db misp < /var/www/MISP/INSTALL/MYSQL.sql\n\n\n### 7 Configure Apache\n# add HTTP MISP Config\nRUN rm /etc/apache2/sites-available/*; rm /etc/apache2/sites-enabled/*;\nCOPY --chown=www-data:www-data files/misp.conf /etc/apache2/sites-available/misp.conf\nCOPY --chown=www-data:www-data files/misp.ssl.conf /etc/apache2/sites-available/misp.ssl.conf\nCOPY --chown=root:root files/ports.conf /etc/apache2/ports.conf\nRUN chmod 644 /etc/apache2/ports.conf\n# add HTTPS MISP Config - THIS SHOULD BE DONE IN ROBOT\n#RUN mkdir /etc/apache2/ssl\n#RUN openssl req -x509 -newkey rsa:4096 -keyout /etc/apache2/ssl/key.pem -out /etc/apache2/ssl/cert.pem -days 3650 -nodes -subj '/CN=misp-server'\n#RUN openssl dhparam -out /etc/apache2/ssl/dhparams.pem 2048\n#RUN chmod -R 644 /etc/apache2/ssl\n\n# Configure Apache\nRUN sudo a2dismod status; \\\nsudo a2enmod ssl; \\\nsudo a2enmod rewrite; \\\nsudo a2enmod headers; \\\n#sudo a2ensite misp.ssl; \\\nsudo a2ensite misp;\n\n### 8/ Log rotation\n# MISP saves the stdout and stderr of its workers in /var/www/MISP/app/tmp/logs\n# To rotate these logs install the supplied logrotate script:\nRUN sudo cp /var/www/MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp\n\n### 9/ MISP configuration\n# There are 4 sample configuration files in /var/www/MISP/app/Config that need to be copied\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/bootstrap.default.php /var/www/MISP/app/Config/bootstrap.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/database.default.php /var/www/MISP/app/Config/database.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/core.default.php /var/www/MISP/app/Config/core.php\nRUN sudo -u www-data cp -a /var/www/MISP/app/Config/config.default.php /var/www/MISP/app/Config/config.php\n\n### 5/ Set the permissions\n# Check if the permissions are set correctly using the following commands:\nRUN chown -R www-data:www-data /var/www/MISP; \\\nchmod -R 750 /var/www/MISP; \\\nchmod -R g+ws /var/www/MISP/app/tmp; \\ \nchmod -R g+ws /var/www/MISP/app/files; \\\nchmod -R g+ws /var/www/MISP/app/files/scripts/tmp;\n\n#       END of MISP Config Part\n#########################################\n\n#########################################\n#       Start of DCSO MISP Config Part\nCOPY files/php.ini /etc/php/7.0/apache2/\n\n# define the WORKDIR if you use docker exec\nWORKDIR /var/www/MISP\n\n# Environment Variable for Proxy\nENV HTTP_PROXY=\"\"\nENV NO_PROXY=\"0.0.0.0\"\n\n# Add Healthcheck Config\nHEALTHCHECK --interval=1m --timeout=15s --retries=3 CMD curl -f http://localhost/ || exit 1\n\n# CMD\nCOPY files/entrypoint.sh /srv/entrypoint.sh\nRUN chmod +x /srv/entrypoint.sh\nENTRYPOINT [ \"/srv/entrypoint.sh\" ] \n# CMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]\n\n#       End of DCSO MISP Config Part\n#########################################\n"
    },
    {
        "filename": "b460da63bfe6d2a897d21208867244fa7e079a86.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Tom Hosking \"code@tomho.sk\"\n\nRUN apt-get update -y\nRUN apt-get install -y python3 python3-pip python3-dev build-essential\n\nCOPY ./requirements.txt /app/requirements.txt\n\nWORKDIR /app\nRUN pip3 install -r requirements.txt\n\nRUN python3 -m nltk.downloader punkt\nRUN python3 -m spacy download en\n\nADD ./src /app/src\nWORKDIR /app\nENV PYTHONPATH \"${PYTHONPATH}:./src\"\nENTRYPOINT [\"python3\"]\nCMD [\"-u\", \"src/demo/app.py\"]\n# CMD [\"bash\", 'demo.sh']"
    },
    {
        "filename": "b47a63e8ca42ac72cf8697813c8a3989f66c8a0d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:wheezy\nMAINTAINER Andrew Huynh <andrew@productbio.com>\n\n# When this Dockerfile was last refreshed\nENV REFRESHED_AT 2014-11-18\n\nENV DEBIAN_FRONTEND noninteractive\nENV TERM linux\n\n# Install system dependencies\n#\n#\tPython dependencies\n#\t\tpython-dev python-pip python-setuptools\n#\n#\tScrapy dependencies\n#\t\tlibffi-dev libxml2-dev libxslt1-dev\n#\n#\tPillow (Python Imaging Library) dependencies\n#\t\tlibtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev\n# \t\tliblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk\n#\nRUN apt-get update && apt-get install -y \\\n\t\t\tpython-dev python-pip python-setuptools \\\n\t\t\tlibffi-dev libxml2-dev libxslt1-dev \\\n\t\t\tlibtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev \\\n\t\t\tliblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk\n\n# Add the dependencies to the container and install the python dependencies\nADD requirements.txt /tmp/requirements.txt\nRUN pip install -r /tmp/requirements.txt && rm /tmp/requirements.txt\nRUN pip install Pillow\n\n# Expose web GUI\nEXPOSE 6800\n\nCMD [ \"scrapyd\" ]\n"
    },
    {
        "filename": "b51d306e28752bf9a2c77e131f30621b919cb46a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM registry.aliyuncs.com/acs-sample/ubuntu:14.04\nMAINTAINER neo1218 <neo1218@yeah.net>\n\nENV DEPLOY_PATH /shadowsocks\n\nRUN mkdir -p $DEPLOY_PATH\nWORKDIR $DEPLOY_PATH\n\nRUN apt-get -y update && apt-get install -y python-pip\nRUN pip install shadowsocks\n\nAdd . .\n"
    },
    {
        "filename": "b52eef84616ab66a5103c5c28afd78dd597ea7d9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM beevelop/java\n\nMAINTAINER Maik Hummel <m@ikhummel.com>\n\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/tools_r25.2.5-linux.zip\" \\\n    ANDROID_BUILD_TOOLS_VERSION=27.0.0 \\\n    ANDROID_APIS=\"android-10,android-15,android-16,android-17,android-18,android-19,android-20,android-21,android-22,android-23,android-24,android-25,android-26\" \\\n    ANT_HOME=\"/usr/share/ant\" \\\n    MAVEN_HOME=\"/usr/share/maven\" \\\n    GRADLE_HOME=\"/usr/share/gradle\" \\\n    ANDROID_HOME=\"/opt/android\"\n\nENV PATH $PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS_VERSION:$ANT_HOME/bin:$MAVEN_HOME/bin:$GRADLE_HOME/bin\n\nWORKDIR /opt\n\nRUN dpkg --add-architecture i386 && \\\n    apt-get -qq update && \\\n    apt-get -qq install -y wget curl maven ant gradle libncurses5:i386 libstdc++6:i386 zlib1g:i386 && \\\n\n    # Installs Android SDK\n    mkdir android && cd android && \\\n    wget -O tools.zip ${ANDROID_SDK_URL} && \\\n    unzip tools.zip && rm tools.zip && \\\n    echo y | android update sdk -a -u -t platform-tools,${ANDROID_APIS},build-tools-${ANDROID_BUILD_TOOLS_VERSION} && \\\n    chmod a+x -R $ANDROID_HOME && \\\n    chown -R root:root $ANDROID_HOME && \\\n\n    # Clean up\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    apt-get autoremove -y && \\\n    apt-get clean\n"
    },
    {
        "filename": "b5db66f5f60fe7b0554202e6a4c53ac8b7de1269.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM r-base\n\n# install R packages\nRUN R -e  \"install.packages(c('dplyr', 'tidyr'), repos = 'http://cran.us.r-project.org', dependencies=TRUE)\"\n\n# install node\nRUN apt-get update\nRUN apt-get install -y nodejs\nRUN apt-get install -y npm\n\nADD . /app\n\n# install node dependencies\nRUN cd /app; npm install\n\nWORKDIR /app\n\nEXPOSE 9191\n\nCMD node connect.js\n"
    },
    {
        "filename": "b649e33cd6cd965f2542d6a3de89a47c52c2cc14.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:8.16\n\nMAINTAINER Ludovic Vannoorenberghe <ludo@datacamp.com>\n\nRUN apt-get update && apt-get install -y python build-essential\n\n# aws env\nRUN curl -o /tmp/aws-env-linux-amd64 -L https://github.com/datacamp/aws-env/releases/download/v0.1-session-fix/aws-env-linux-amd64 && \\\n  chmod +x /tmp/aws-env-linux-amd64 && \\\n  mv /tmp/aws-env-linux-amd64 /bin/aws-env\n\nRUN npm install -g pm2 node-gyp sails grunt bower jake npm-check-updates\n\nENV NODE_ENV production\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nADD package.json /tmp/package.json\nADD package-lock.json /tmp/package-lock.json\nRUN cd /tmp && npm install --unsafe-perm --production\nRUN mkdir -p /opt/app && cp -a /tmp/node_modules /opt/app/\n\n# From here we load our application's code in, therefore the previous docker\n# \"layer\" thats been cached will be used if possible\nWORKDIR /opt/app\nADD . /opt/app\n\n#Expose port\nEXPOSE 1337\n\nCMD bash -c \"eval $(aws-env) && npm start\"\n"
    },
    {
        "filename": "b65d3a9776c63425cec3a13445576889a3e80d0a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM arm64v8/debian\n\nMAINTAINER \"C\u00e9dric Verstraeten\" <hello@cedric.ws>\n\n#################################\n# Surpress Upstart errors/warning\n\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -sf /bin/true /sbin/initctl\n\n#############################################\n# Let the container know that there is no tty\n\nENV DEBIAN_FRONTEND noninteractive\n\n#########################################\n# Update base image\n# Add sources for latest nginx and cmake\n# Install software requirements\n\nRUN apt-get update && \\\napt-get install -y software-properties-common\nRUN apt-get -y install git supervisor curl subversion libcurl4-gnutls-dev cmake dh-autoreconf libav-tools autotools-dev autoconf automake gcc build-essential libtool make nasm zlib1g-dev tar libx264.\nRUN apt-get -y --force-yes install nginx  php7.0-cli php7.0-gd php7.0-mcrypt php7.0-curl php7.0-mbstring php7.0-dom php7.0-zip php7.0-fpm pwgen\n\n########################################\n# fix ownership of sock file for php-fpm\n\nRUN sed -i -e \"s/;listen.mode = 0660/listen.mode = 0750/g\" /etc/php/7.0/fpm/pool.d/www.conf && \\\nfind /etc/php/7.0/cli/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n\n########################################\n# Force both nginx and PHP-FPM to run in the foreground\n# This is a requirement for supervisor\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nRUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php/7.0/fpm/php-fpm.conf\n\n############################\n# Clone and build machinery\n\nRUN git clone https://github.com/FFmpeg/FFmpeg && \\\n\tcd FFmpeg && git checkout remotes/origin/release/3.1 && \\\n\t./configure --target-os=linux --enable-nonfree --enable-libx264 --enable-gpl && make && \\\n    make install && \\\n    cd .. && rm -rf FFmpeg\n"
    },
    {
        "filename": "b67c927b534960e63eb35ddd613f460b59dd3cd1.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/python:2.7\n\nMAINTAINER \"Priya Seth<sethp@us.ibm.com>\"\n\nRUN apt-get update -y && \\\n\tapt-get install -y build-essential && \\\n\tgit clone https://github.com/takluyver/entrypoints && \\\n\tcd entrypoints/ && \\\n\tpip install configparser && pip install -U entrypoints &&  pip install -U pytest && \\\n\tpython tests/test_entrypoints.py && py.test && \\\n\tapt-get purge -y build-essential && \\\n\tapt-get -y autoremove\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "b6865d23ea37425fcac61a981154129e78c345ca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian as compile-lkd\nMAINTAINER Marios Andreopoulos <marios@landoop.com>\n\nRUN apt-get update \\\n    && apt-get install -y \\\n         unzip \\\n         wget \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"progress = dot:giga\" | tee /etc/wgetrc \\\n    && mkdir -p /mnt /opt /data \\\n    && wget https://github.com/andmarios/duphard/releases/download/v1.0/duphard -O /bin/duphard \\\n    && chmod +x /bin/duphard\n\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /\n\n# Login args for development archives\nARG DEVARCH_USER\nARG DEVARCH_PASS\nARG ARCHIVE_SERVER=https://archive.landoop.com\nARG LKD_VERSION=2.0.1\n\n############\n# Add kafka/\n############\n\n# Add Apache Kafka (includes Connect and Zookeeper)\nARG KAFKA_VERSION=2.0.1\nARG KAFKA_LVERSION=\"${KAFKA_VERSION}-L0\"\nARG KAFKA_URL=\"${ARCHIVE_SERVER}/lkd/packages/kafka/kafka-2.12-${KAFKA_LVERSION}-lkd.tar.gz\"\n\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_URL\" -O /opt/kafka.tar.gz \\\n    && tar --no-same-owner -xzf /opt/kafka.tar.gz -C /opt \\\n    && mkdir /opt/landoop/kafka/logs && chmod 1777 /opt/landoop/kafka/logs \\\n    && rm -rf /opt/kafka.tar.gz\n\n# Add Schema Registry and REST Proxy\nARG REGISTRY_VERSION=5.0.1-lkd-r0\nARG REGISTRY_URL=\"${ARCHIVE_SERVER}/lkd/packages/schema-registry/schema-registry-${REGISTRY_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$REGISTRY_URL\" -O /opt/registry.tar.gz \\\n    && tar --no-same-owner -xzf /opt/registry.tar.gz -C /opt/ \\\n    && rm -rf /opt/registry.tar.gz\n\nARG REST_VERSION=5.0.1-lkd-r0\nARG REST_URL=\"${ARCHIVE_SERVER}/lkd/packages/rest-proxy/rest-proxy-${REST_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$REST_URL\" -O /opt/rest.tar.gz \\\n    && tar --no-same-owner -xzf /opt/rest.tar.gz -C /opt/ \\\n    && rm -rf /opt/rest.tar.gz\n\n# Configure Connect and Confluent Components to support CORS\nRUN echo -e 'access.control.allow.methods=GET,POST,PUT,DELETE,OPTIONS\\naccess.control.allow.origin=*' \\\n         | tee -a /opt/landoop/kafka/etc/schema-registry/schema-registry.properties \\\n         | tee -a /opt/landoop/kafka/etc/kafka-rest/kafka-rest.properties \\\n         | tee -a /opt/landoop/kafka/etc/schema-registry/connect-avro-distributed.properties\n\n\n#################\n# Add connectors/\n#################\n\n# Add Stream Reactor and needed components\nARG STREAM_REACTOR_VERSION=1.2.0\nARG KAFKA_VERSION_4SR=2.0.0\nARG STREAM_REACTOR_URL=\"https://archive.landoop.com/lkd/packages/connectors/stream-reactor/stream-reactor-${STREAM_REACTOR_VERSION}_connect${KAFKA_VERSION_4SR}.tar.gz\"\nARG ELASTICSEARCH_2X_VERSION=2.4.6\nARG ACTIVEMQ_VERSION=5.12.3\nARG CALCITE_LINQ4J_VERSION=1.12.0\n\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"${STREAM_REACTOR_URL}\" -O /stream-reactor.tar.gz \\\n    && mkdir -p /opt/landoop/connectors/stream-reactor \\\n    && tar -xf /stream-reactor.tar.gz \\\n           --no-same-owner \\\n           --strip-components=1 \\\n           -C /opt/landoop/connectors/stream-reactor \\\n    && rm /stream-reactor.tar.gz \\\n    && wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/${ELASTICSEARCH_2X_VERSION}/elasticsearch-${ELASTICSEARCH_2X_VERSION}.tar.gz \\\n            -O /elasticsearch.tar.gz \\\n    && mkdir /elasticsearch \\\n    && tar -xf /elasticsearch.tar.gz \\\n           --no-same-owner \\\n           --strip-components=1 \\\n           -C /elasticsearch \\\n    && rm -f /elasticsearch/lib/apache-log4j-extras* \\\n    && mv /elasticsearch/lib/*.jar /opt/landoop/connectors/stream-reactor/kafka-connect-elastic/ \\\n    && rm -rf /elasticsearch* \\\n    && wget http://central.maven.org/maven2/org/apache/activemq/activemq-all/${ACTIVEMQ_VERSION}/activemq-all-${ACTIVEMQ_VERSION}.jar \\\n            -P /opt/landoop/connectors/stream-reactor/kafka-connect-jms \\\n    && wget http://central.maven.org/maven2/org/apache/calcite/calcite-linq4j/${CALCITE_LINQ4J_VERSION}/calcite-linq4j-${CALCITE_LINQ4J_VERSION}.jar \\\n            -O /calcite-linq4j-${CALCITE_LINQ4J_VERSION}.jar \\\n    && for path in /opt/landoop/connectors/stream-reactor/kafka-connect-*; do \\\n          cp /calcite-linq4j-${CALCITE_LINQ4J_VERSION}.jar $path/; \\\n       done \\\n    && rm /calcite-linq4j-${CALCITE_LINQ4J_VERSION}.jar \\\n    && mkdir -p /opt/landoop/kafka/share/java/landoop-common \\\n    && for file in $(find /opt/landoop/connectors/stream-reactor -maxdepth 2 -type f -exec basename {} \\; | grep -Ev \"scala-logging|kafka-connect-common|scala-\" | sort | uniq -c | grep -E \"^\\s+22 \" | awk '{print $2}' ); do \\\n         cp /opt/landoop/connectors/stream-reactor/kafka-connect-elastic/$file /opt/landoop/kafka/share/java/landoop-common/; \\\n         rm -f /opt/landoop/connectors/stream-reactor/kafka-connect-*/$file; \\\n       done \\\n    && for file in $(find /opt/landoop/kafka/share/java/{kafka,landoop-common} -maxdepth 1 -type f -exec basename {} \\; | sort | uniq -c | grep -E \"^\\s+2 \" | awk '{print $2}' ); do \\\n         echo \"Removing duplicate /opt/landoop/kafka/share/java/landoop-common/$file.\"; \\\n         rm -f /opt/landoop/kafka/share/java/landoop-common/$file; \\\n       done \\\n    && rm -f /opt/landoop/connectors/stream-reactor/*/*{javadoc,scaladoc,sources}.jar \\\n    && echo \"plugin.path=/opt/landoop/connectors/stream-reactor,/opt/landoop/connectors/third-party\" \\\n            >> /opt/landoop/kafka/etc/schema-registry/connect-avro-distributed.properties\n# RUN echo \"plugin.path=/opt/landoop/connectors/stream-reactor,/opt/landoop/connectors/third-party\" \\\n#        >> /opt/landoop/kafka/etc/schema-registry/connect-avro-distributed.properties \\\n#     && mkdir -p /opt/landoop/connectors/stream-reactor\n\n\n# Add Third Party Connectors\n\n## Twitter\nARG TWITTER_CONNECTOR_URL=\"https://archive.landoop.com/third-party/kafka-connect-twitter/kafka-connect-twitter-0.1-master-33331ea-connect-1.0.0-jar-with-dependencies.jar\"\nRUN mkdir -p /opt/landoop/connectors/third-party/kafka-connect-twitter \\\n    && wget \"$TWITTER_CONNECTOR_URL\" -P /opt/landoop/connectors/third-party/kafka-connect-twitter\n\n## Kafka Connect JDBC\nARG KAFKA_CONNECT_JDBC_VERSION=5.0.1-lkd-r0\nARG KAFKA_CONNECT_JDBC_URL=\"${ARCHIVE_SERVER}/lkd/packages/connectors/third-party/kafka-connect-jdbc/kafka-connect-jdbc-${KAFKA_CONNECT_JDBC_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_JDBC_URL\" \\\n         -O /opt/kafka-connect-jdbc.tar.gz \\\n    && mkdir -p /opt/landoop/connectors/third-party/ \\\n    && tar --no-same-owner -xf /opt/kafka-connect-jdbc.tar.gz \\\n           -C /opt/landoop/connectors/third-party/ \\\n    && rm -rf /opt/kafka-connect-jdbc.tar.gz\n\n## Kafka Connect ELASTICSEARCH\nARG KAFKA_CONNECT_ELASTICSEARCH_VERSION=5.0.1-lkd-r0\nARG KAFKA_CONNECT_ELASTICSEARCH_URL=\"${ARCHIVE_SERVER}/lkd/packages/connectors/third-party/kafka-connect-elasticsearch/kafka-connect-elasticsearch-${KAFKA_CONNECT_ELASTICSEARCH_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_ELASTICSEARCH_URL\" \\\n         -O /opt/kafka-connect-elasticsearch.tar.gz \\\n    && mkdir -p /opt/landoop/connectors/third-party/ \\\n    && tar --no-same-owner -xf /opt/kafka-connect-elasticsearch.tar.gz \\\n           -C /opt/landoop/connectors/third-party/ \\\n    && rm -rf /opt/kafka-connect-elasticsearch.tar.gz\n\n## Kafka Connect HDFS\nARG KAFKA_CONNECT_HDFS_VERSION=5.0.1-lkd-r0\nARG KAFKA_CONNECT_HDFS_URL=\"${ARCHIVE_SERVER}/lkd/packages/connectors/third-party/kafka-connect-hdfs/kafka-connect-hdfs-${KAFKA_CONNECT_HDFS_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_HDFS_URL\" \\\n         -O /opt/kafka-connect-hdfs.tar.gz \\\n    && mkdir -p /opt/landoop/connectors/third-party/ \\\n    && tar --no-same-owner -xf /opt/kafka-connect-hdfs.tar.gz \\\n           -C /opt/landoop/connectors/third-party/ \\\n    && rm -rf /opt/kafka-connect-hdfs.tar.gz\n\n# Kafka Connect S3\nARG KAFKA_CONNECT_S3_VERSION=5.0.1-lkd-r0\nARG KAFKA_CONNECT_S3_URL=\"${ARCHIVE_SERVER}/lkd/packages/connectors/third-party/kafka-connect-s3/kafka-connect-s3-${KAFKA_CONNECT_S3_VERSION}.tar.gz\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_S3_URL\" \\\n         -O /opt/kafka-connect-s3.tar.gz \\\n    && mkdir -p /opt/landoop/connectors/third-party/ \\\n    && tar --no-same-owner -xf /opt/kafka-connect-s3.tar.gz \\\n           -C /opt/landoop/connectors/third-party/ \\\n    && rm -rf /opt/kafka-connect-s3.tar.gz\n\n# Kafka Connect Couchbase\nARG KAFKA_CONNECT_COUCHBASE_VERSION=3.2.2\nARG KAFKA_CONNECT_COUCHBASE_URL=\"http://packages.couchbase.com/clients/kafka/${KAFKA_CONNECT_COUCHBASE_VERSION}/kafka-connect-couchbase-${KAFKA_CONNECT_COUCHBASE_VERSION}.zip\"\nRUN wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_COUCHBASE_URL\" \\\n         -O /couchbase.zip \\\n    && mkdir -p /couchbase /opt/landoop/connectors/third-party/kafka-connect-couchbase \\\n    && unzip /couchbase.zip -d /couchbase \\\n    && cp -ax /couchbase/kafka-connect-couchbase-${KAFKA_CONNECT_COUCHBASE_VERSION}/* \\\n          /opt/landoop/connectors/third-party/kafka-connect-couchbase \\\n    && chown -R root:root /opt/landoop/connectors/third-party/kafka-connect-couchbase \\\n    && rm -rf /couchbase.zip /couchbase\n\n# Kafka Connect Dbvisit Replicate\nARG KAFKA_CONNECT_DBVISITREPLICATE_VERSION=2.0.0-SNAPSHOT\nARG KAFKA_CONNECT_DBVISITREPLICATE_URL=\"https://www.dropbox.com/s/nhs8v3lwmigpks1/kafka-connect-dbvisitreplicate-${KAFKA_CONNECT_DBVISITREPLICATE_VERSION}.jar?dl=0\"\nRUN mkdir -p /opt/landoop/connectors/third-party/kafka-connect-dbvisitreplicate \\\n    && wget $DEVARCH_USER $DEVARCH_PASS \"$KAFKA_CONNECT_DBVISITREPLICATE_URL\" \\\n            -O /opt/landoop/connectors/third-party/kafka-connect-dbvisitreplicate/kafka-connect-dbvisitreplicate-${KAFKA_CONNECT_DBVISITREPLICATE_VERSION}.jar\n\n# Kafka Connect Debezium MongoDB / MySQL / Postgres\nARG KAFKA_CONNECT_DEBEZIUM_MONGODB_VERSION=0.8.3.Final\nARG KAFKA_CONNECT_DEBEZIUM_MONGODB_URL=\"https://search.maven.org/remotecontent?filepath=io/debezium/debezium-connector-mongodb/${KAFKA_CONNECT_DEBEZIUM_MONGODB_VERSION}/debezium-connector-mongodb-${KAFKA_CONNECT_DEBEZIUM_MONGODB_VERSION}-plugin.tar.gz\"\nARG KAFKA_CONNECT_DEBEZIUM_MYSQL_VERSION=0.8.3.Final\nARG KAFKA_CONNECT_DEBEZIUM_MYSQL_URL=\"https://search.maven.org/remotecontent?filepath=io/debezium/debezium-connector-mysql/${KAFKA_CONNECT_DEBEZIUM_MYSQL_VERSION}/debezium-connector-mysql-${KAFKA_CONNECT_DEBEZIUM_MYSQL_VERSION}-plugin.tar.gz\"\nARG KAFKA_CONNECT_DEBEZIUM_POSTGRES_VERSION=0.8.3.Final\nARG KAFKA_CONNECT_DEBEZIUM_POSTGRES_URL=\"https://search.maven.org/remotecontent?filepath=io/debezium/debezium-connector-postgres/${KAFKA_CONNECT_DEBEZIUM_POSTGRES_VERSION}/debezium-connector-postgres-${KAFKA_CONNECT_DEBEZIUM_POSTGRES_VERSION}-plugin.tar.gz\"\nRUN mkdir -p /opt/landoop/connectors/third-party/kafka-connect-debezium-{mongodb,mysql,postgres} \\\n    && wget \"$KAFKA_CONNECT_DEBEZIUM_MONGODB_URL\" -O /debezium-mongodb.tgz \\\n    && tar -xf /debezium-mongodb.tgz \\\n           --owner=root --group=root --strip-components=1 \\\n           -C  /opt/landoop/connectors/third-party/kafka-connect-debezium-mongodb \\\n    && wget \"$KAFKA_CONNECT_DEBEZIUM_MYSQL_URL\" -O /debezium-mysql.tgz \\\n    && tar -xf /debezium-mysql.tgz \\\n           --owner=root --group=root --strip-components=1 \\\n           -C  /opt/landoop/connectors/third-party/kafka-connect-debezium-mysql \\\n    && wget \"$KAFKA_CONNECT_DEBEZIUM_POSTGRES_URL\" -O /debezium-postgres.tgz \\\n    && tar -xf /debezium-postgres.tgz \\\n           --owner=root --group=root --strip-components=1 \\\n           -C  /opt/landoop/connectors/third-party/kafka-connect-debezium-postgres \\\n    && rm -rf /debezium-{mongodb,mysql,postgres}.tgz\n\n# Kafka Connect Splunk\nARG KAFKA_CONNECT_SPLUNK_VERSION=\"1.1.0\"\nARG KAFKA_CONNECT_SPLUNK_URL=\"https://github.com/splunk/kafka-connect-splunk/releases/download/v${KAFKA_CONNECT_SPLUNK_VERSION}/splunk-kafka-connect-v${KAFKA_CONNECT_SPLUNK_VERSION}.jar\"\nRUN mkdir -p /opt/landoop/connectors/third-party/kafka-connect-splunk \\\n    && wget \"$KAFKA_CONNECT_SPLUNK_URL\" \\\n       -O /opt/landoop/connectors/third-party/kafka-connect-splunk/splunk-kafka-connect-v${KAFKA_CONNECT_SPLUNK_VERSION}.jar\n\n############\n# Add tools/\n############\n\n# Add Coyote\nARG COYOTE_VERSION=1.5\nARG COYOTE_URL=\"https://github.com/Landoop/coyote/releases/download/v${COYOTE_VERSION}/coyote-${COYOTE_VERSION}\"\nRUN mkdir -p /opt/landoop/tools/bin/win \\\n             /opt/landoop/tools/bin/mac \\\n             /opt/landoop/tools/share/coyote/examples \\\n    && wget \"$COYOTE_URL\"-linux-amd64 -O /opt/landoop/tools/bin/coyote \\\n    && wget \"$COYOTE_URL\"-darwin-amd64 -O /opt/landoop/tools/bin/mac/coyote \\\n    && wget \"$COYOTE_URL\"-windows-amd64.exe -O /opt/landoop/tools/bin/win/coyote \\\n    && chmod +x /opt/landoop/tools/bin/coyote \\\n                /opt/landoop/tools/bin/mac/coyote\nADD lkd/simple-integration-tests.yml /opt/landoop/tools/share/coyote/examples/\n\n# Add Kafka Topic UI, Schema Registry UI, Kafka Connect UI\nARG KAFKA_TOPICS_UI_VERSION=0.9.4\nARG KAFKA_TOPICS_UI_URL=\"https://github.com/Landoop/kafka-topics-ui/releases/download/v${KAFKA_TOPICS_UI_VERSION}/kafka-topics-ui-${KAFKA_TOPICS_UI_VERSION}.tar.gz\"\nARG SCHEMA_REGISTRY_UI_VERSION=0.9.5\nARG SCHEMA_REGISTRY_UI_URL=\"https://github.com/Landoop/schema-registry-ui/releases/download/v.${SCHEMA_REGISTRY_UI_VERSION}/schema-registry-ui-${SCHEMA_REGISTRY_UI_VERSION}.tar.gz\"\nARG KAFKA_CONNECT_UI_VERSION=0.9.7\nARG KAFKA_CONNECT_UI_URL=\"https://github.com/Landoop/kafka-connect-ui/releases/download/v.${KAFKA_CONNECT_UI_VERSION}/kafka-connect-ui-${KAFKA_CONNECT_UI_VERSION}.tar.gz\"\nRUN mkdir -p /opt/landoop/tools/share/kafka-topics-ui/ \\\n             /opt/landoop/tools/share/schema-registry-ui/ \\\n             /opt/landoop/tools/share/kafka-connect-ui/ \\\n    && wget \"$KAFKA_TOPICS_UI_URL\" \\\n            -O /opt/landoop/tools/share/kafka-topics-ui/kafka-topics-ui.tar.gz \\\n    && wget \"$SCHEMA_REGISTRY_UI_URL\" \\\n            -O /opt/landoop/tools/share/schema-registry-ui/schema-registry-ui.tar.gz \\\n    && wget \"$KAFKA_CONNECT_UI_URL\" \\\n            -O /opt/landoop/tools/share/kafka-connect-ui/kafka-connect-ui.tar.gz\n\n# Add Kafka Autocomplete\nARG KAFKA_AUTOCOMPLETE_VERSION=0.3\nARG KAFKA_AUTOCOMPLETE_URL=\"https://github.com/Landoop/kafka-autocomplete/releases/download/${KAFKA_AUTOCOMPLETE_VERSION}/kafka\"\nRUN mkdir -p /opt/landoop/tools/share/kafka-autocomplete \\\n             /opt/landoop/tools/share/bash-completion/completions \\\n    && wget \"$KAFKA_AUTOCOMPLETE_URL\" \\\n            -O /opt/landoop/tools/share/kafka-autocomplete/kafka \\\n    && wget \"$KAFKA_AUTOCOMPLETE_URL\" \\\n            -O /opt/landoop/tools/share/bash-completion/completions/kafka\n\n# Enable jline for Zookeeper\nRUN TJLINE=\"$(find /opt/landoop/kafka -name \"jline-0*.jar\" | head -n1)\" \\\n    && if [[ -n $TJLINE ]]; then sed \"s|^exec.*|export CLASSPATH=\\\"\\$CLASSPATH:$TJLINE\\\"\\n&|\" -i /opt/landoop/kafka/bin/zookeeper-shell; fi\n\n# Add normcat\nARG NORMCAT_VERSION=1.1.1\nARG NORMCAT_URL=\"https://github.com/andmarios/normcat/releases/download/${NORMCAT_VERSION}/normcat-${NORMCAT_VERSION}\"\nRUN mkdir -p /opt/landoop/tools/bin/win \\\n             /opt/landoop/tools/bin/mac \\\n    && wget \"$NORMCAT_URL\"-linux-amd64-lowmem.tar.gz -O /normcat-linux.tgz \\\n    && tar -xf /normcat-linux.tgz -C /opt/landoop/tools/bin \\\n    && wget \"$NORMCAT_URL\"-darwin-amd64.zip -O /normcat-mac.zip \\\n    && unzip /normcat-mac.zip -d /opt/landoop/tools/bin/mac \\\n    && wget \"$NORMCAT_URL\"-windows-amd64.zip -O /normcat-win.zip \\\n    && unzip /normcat-win.zip -d /opt/landoop/tools/bin/win \\\n    && chmod +x /opt/landoop/tools/bin/coyote \\\n                /opt/landoop/tools/bin/mac/coyote \\\n    && rm -f /normcat-linux.tg /normcat-mac.zip /normcat-win.zip\n\n\n##########\n# Finalize\n##########\n\nRUN echo    \"LKD_VERSION=${LKD_VERSION}\"                               | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_VERSION=${KAFKA_LVERSION}\"                          | tee -a /opt/landoop/build.info \\\n    && echo \"CONNECT_VERSION=${KAFKA_LVERSION}\"                        | tee -a /opt/landoop/build.info \\\n    && echo \"SCHEMA_REGISTRY_VERSION=${REGISTRY_VERSION}\"              | tee -a /opt/landoop/build.info \\\n    && echo \"REST_PROXY_VERSION=${REST_VERSION}\"                       | tee -a /opt/landoop/build.info \\\n    && echo \"STREAM_REACTOR_VERSION=${STREAM_REACTOR_VERSION}\"         | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_JDBC_VERSION=${KAFKA_CONNECT_JDBC_VERSION}\" | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_ELASTICSEARCH_VERSION=${KAFKA_CONNECT_ELASTICSEARCH_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_HDFS_VERSION=${KAFKA_CONNECT_HDFS_VERSION}\" | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_S3_VERSION=${KAFKA_CONNECT_S3_VERSION}\"     | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_COUCHBASE_VERSION=${KAFKA_CONNECT_COUCHBASE_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_DBVISITREPLICATE_VERSION=${KAFKA_CONNECT_DBVISITREPLICATE_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_DEBEZIUM_MONGODB_VERSION=${KAFKA_CONNECT_DEBEZIUM_MONGODB_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_DEBEZIUM_MYSQL_VERSION=${KAFKA_CONNECT_DEBEZIUM_MYSQL_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_DEBEZIUM_POSTGRES_VERSION=${KAFKA_CONNECT_DEBEZIUM_POSTGRES_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_SPLUNK_VERSION=${KAFKA_CONNECT_SPLUNK_VERSION}\" \\\n                                                                       | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_TOPICS_UI_VERSION=${KAFKA_TOPICS_UI_VERSION}\"       | tee -a /opt/landoop/build.info \\\n    && echo \"SCHEMA_REGISTRY_UI_VERSION=${SCHEMA_REGISTRY_UI_VERSION}\" | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_CONNECT_UI_VERSION=${KAFKA_CONNECT_UI_VERSION}\"     | tee -a /opt/landoop/build.info \\\n    && echo \"COYOTE_VERSION=${COYOTE_VERSION}\"                         | tee -a /opt/landoop/build.info \\\n    && echo \"KAFKA_AUTOCOMPLETE_VERSION=${KAFKA_AUTOCOMPLETE_VERSION}\" | tee -a /opt/landoop/build.info \\\n    && echo \"NORMCAT_VERSION=${NORMCAT_VERSION}\"                       | tee -a /opt/landoop/build.info\n\n# duphard (replace duplicates with hard links) and create archive\n# We run as two separate commands because otherwise the build fails in docker hub (but not locally)\nRUN duphard -d=0 /opt/landoop\nRUN tar -czf /LKD-${LKD_VERSION}.tar.gz \\\n           --owner=root \\\n           --group=root \\\n           -C /opt \\\n           landoop \\\n    && rm -rf /opt/landoop\n# Unfortunately we have to make this a separate step in order for docker to understand the change to hardlinks\n# Good thing: final image that people download is much smaller (~200MB).\nRUN tar xf /LKD-${LKD_VERSION}.tar.gz -C /opt \\\n    && rm /LKD-${LKD_VERSION}.tar.gz\n\nENV LKD_VERSION=${LKD_VERSION}\n# If this stage is run as container and you mount `/mnt`, we will create the LKD archive there.\nCMD [\"bash\", \"-c\", \"tar -czf /mnt/LKD-${LKD_VERSION}.tar.gz -C /opt landoop; chown --reference=/mnt /mnt/LKD-${LKD_VERSION}.tar.gz\"]\n\nFROM alpine\nMAINTAINER Marios Andreopoulos <marios@landoop.com>\nCOPY --from=compile-lkd /opt /opt\n\n# Update, install tooling and some basic setup\nRUN apk add --no-cache \\\n        bash \\\n        bash-completion \\\n        bzip2 \\\n        coreutils \\\n        curl \\\n        dumb-init \\\n        gettext \\\n        gzip \\\n        jq \\\n        libstdc++ \\\n        nss \\\n        openjdk8-jre-base \\\n        openssl \\\n        sqlite \\\n        supervisor \\\n        tar \\\n        tzdata \\\n        wget \\\n    && echo \"progress = dot:giga\" | tee /etc/wgetrc \\\n    && mkdir -p /opt \\\n    && mkdir /extra-connect-jars /connectors \\\n    && mkdir /etc/supervisord.d /etc/supervisord.templates.d\n\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /\n\n# Install external tooling\n# checkport: checks for ports that are already in use, useful when we run with\n#            '--net=host so we have an easy way to detect if our ports are free\n# quickcert: a small tool we use to create a CA and key-cert pairs so we can easily\n#            setup SSL on the brokers with autogenerated keys and certs\n# glibc    : alpine linux has an embedded libc which misses some functions that are\n#            needed by some apps (e.g jvm's rocksdb jni \u2014 HDFS connector, Lenses, etc),\n#            so we add glibc to make them work. Also now we can add en_US.UTF-8 locale.\n#            https://github.com/sgerrand/alpine-pkg-glibc\n# caddy    : an excellent web server we use to serve fast-data-dev UI, proxy various REST\n#            endpoints, etc\n#            https://github.com/mholt/caddy\nARG CHECKPORT_URL=\"https://gitlab.com/andmarios/checkport/uploads/3903dcaeae16cd2d6156213d22f23509/checkport\"\nARG QUICKCERT_URL=\"https://github.com/andmarios/quickcert/releases/download/1.0/quickcert-1.0-linux-amd64-alpine\"\nARG GLIBC_INST_VERSION=\"2.27-r0\"\nARG CADDY_URL=https://github.com/mholt/caddy/releases/download/v0.10.10/caddy_v0.10.10_linux_amd64.tar.gz\nRUN wget \"$CHECKPORT_URL\" -O /usr/local/bin/checkport \\\n    && wget \"$QUICKCERT_URL\" -O /usr/local/bin/quickcert \\\n    && chmod 0755 /usr/local/bin/quickcert /usr/local/bin/checkport \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-${GLIBC_INST_VERSION}.apk \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-bin-${GLIBC_INST_VERSION}.apk \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && apk add --no-cache --allow-untrusted glibc-${GLIBC_INST_VERSION}.apk glibc-bin-${GLIBC_INST_VERSION}.apk glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && rm -f glibc-${GLIBC_INST_VERSION}.apk glibc-bin-${GLIBC_INST_VERSION}.apk glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && wget \"$CADDY_URL\" -O /caddy.tgz \\\n    && mkdir -p /opt/caddy \\\n    && tar xzf /caddy.tgz -C /opt/caddy \\\n    && rm -f /caddy.tgz \\\n    && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\nENV LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8\n\nCOPY /filesystem /\nRUN chmod +x /usr/local/bin/{smoke-tests,logs-to-kafka,nullsink}.sh \\\n             /usr/local/share/landoop/sample-data/*.sh\n\n# Create system symlinks to Kafka binaries\nRUN bash -c 'for i in $(find /opt/landoop/kafka/bin /opt/landoop/tools/bin -maxdepth 1 -type f); do ln -s $i /usr/local/bin/$(echo $i | sed -e \"s>.*/>>\"); done'\n\n# Add kafka ssl principal builder\nRUN wget https://archive.landoop.com/third-party/kafka-custom-principal-builder/kafka-custom-principal-builder-1.0-SNAPSHOT.jar \\\n         -P /opt/landoop/kafka/share/java/kafka \\\n    && mkdir -p /opt/landoop/kafka/share/docs/kafka-custom-principal-builder \\\n    && wget https://archive.landoop.com/third-party/kafka-custom-principal-builder/LICENSE \\\n         -P /opt/landoop/kafka/share/docs/kafka-custom-principal-builder \\\n    && wget https://archive.landoop.com/third-party/kafka-custom-principal-builder/README.md \\\n         -P /opt/landoop/kafka/share/docs/kafka-custom-principal-builder\n\n# Setup Kafka Topics UI, Schema Registry UI, Kafka Connect UI\nRUN mkdir -p \\\n      /var/www/kafka-topics-ui \\\n      /var/www/schema-registry-ui \\\n      /var/www/kafka-connect-ui \\\n    && tar -xf /opt/landoop/tools/share/kafka-topics-ui/kafka-topics-ui.tar.gz \\\n           -C /var/www/kafka-topics-ui \\\n           --exclude=env.js \\\n    && tar -xf /opt/landoop/tools/share/schema-registry-ui/schema-registry-ui.tar.gz \\\n           -C /var/www/schema-registry-ui \\\n           --exclude=env.js \\\n    && tar -xf /opt/landoop/tools/share/kafka-connect-ui/kafka-connect-ui.tar.gz \\\n           -C /var/www/kafka-connect-ui \\\n           --exclude=env.js\n\nRUN ln -s /var/log /var/www/logs\n\n# Add executables, settings and configuration\nADD setup-and-run.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/setup-and-run.sh \\\n    && ln -s /usr/local/share/landoop/etc/bashrc /root/.bashrc\n\nVOLUME [\"/data\"]\n\nARG BUILD_BRANCH\nARG BUILD_COMMIT\nARG BUILD_TIME\nARG DOCKER_REPO=local\nRUN echo \"BUILD_BRANCH=${BUILD_BRANCH}\"    | tee /build.info \\\n    && echo \"BUILD_COMMIT=${BUILD_COMMIT}\" | tee -a /build.info \\\n    && echo \"BUILD_TIME=${BUILD_TIME}\"     | tee -a /build.info \\\n    && echo \"DOCKER_REPO=${DOCKER_REPO}\"   | tee -a /build.info \\\n    && sed -e 's/^/FDD_/' /opt/landoop/build.info | tee -a /build.info\n\nEXPOSE 2181 3030 3031 8081 8082 8083 9092\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/usr/local/bin/setup-and-run.sh\"]\n"
    },
    {
        "filename": "b698718aa5685a925640d5d6bbd64f3e0f4215dc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM crosbymichael/golang\n\nRUN apt-get update && apt-get install -y mercurial make\n\nRUN go get -d github.com/crosbymichael/dockerci && \\\n    go get github.com/bitly/go-nsq && \\\n    go get github.com/drone/go-github/github && \\\n    go get github.com/gorilla/mux\n\nADD . /go/src/github.com/crosbymichael/dockerci\nRUN cd /go/src/github.com/crosbymichael/dockerci && go install . ./...\nENV PATH $PATH:/go/bin\n\n# make git happy\nRUN git config --global user.name dockerci && \\\n    git config --global user.email dockerci@example.com && \\\n    ln -s /.dockerinit /usr/bin/docker\n"
    },
    {
        "filename": "b704c5bcd68c7e6190d634832e0067a02694551a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM fstarlang/fstar\n\nMAINTAINER Daniel Fabian <daniel.fabian@integral-it.ch>; Benjamin Beurdouche <benjamin.beurdouche@inria.fr>\n\n# Install required packages\nRUN sudo apt-get install -y emacs-nox\n\nENV LANG C.UTF-8\nRUN emacs --batch \\\n\t--eval \"(require 'package)\" \\\n\t--eval \"(add-to-list 'package-archives '(\\\"melpa\\\" . \\\"http://melpa.org/packages/\\\") t)\" \\\n\t--eval \"(package-initialize)\" \\\n\t--eval \"(package-refresh-contents)\" \\\n\t--eval \"(package-install 'fstar-mode)\" \\\n\t--eval \"(package-install 'flycheck)\"\n\nADD .emacs .emacs\nRUN sudo chown FStar:FStar .emacs\n"
    },
    {
        "filename": "b7223ac2943d6225b19546f254540b7f7e5bfdfc.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# use the ubuntu base image\nFROM ubuntu:14.04\n\nMAINTAINER Tobias Rausch rausch@embl.de\n\n# install required packages\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    cmake \\\n    g++ \\\n    gfortran \\\n    git \\\n    hdf5-tools \\\n    libboost-date-time-dev \\\n    libboost-program-options-dev \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-iostreams-dev \\\n    libbz2-dev \\\n    libhdf5-dev \\\n    libncurses-dev \\\n    liblzma-dev \\\n    zlib1g-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# set environment\nENV BOOST_ROOT /usr\nENV EBROOTHTSLIB /opt/htslib\n\n# install alfred\nRUN cd /opt \\\n    && git clone https://github.com/samtools/htslib.git \\\n    && cd /opt/htslib \\\n    && make \\\n    && make lib-static \\\n    && make install\nRUN cd /opt \\\n    && git clone https://github.com/tobiasrausch/alfred.git \\\n    && cd /opt/alfred/ \\\n    && make STATIC=1 all \\\n    && make install\n\n# Multi-stage build\nFROM alpine:latest\nRUN mkdir -p /opt/alfred/bin\nWORKDIR /opt/alfred/bin\nCOPY --from=0 /opt/alfred/bin/alfred .\n\n# Workdir\nWORKDIR /root/\n\n# Add Alfred to PATH\nENV PATH=\"/opt/alfred/bin:${PATH}\"\n\n# by default /bin/sh is executed\nCMD [\"/bin/sh\"]\n"
    },
    {
        "filename": "b7803418ac03638751eb3c7299491e964c23da65.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM kalilinux/kali-linux-docker\n# Metadata params\nARG BUILD_DATE\nARG VERSION\nARG VCS_URL\nARG VCS_REF\n\nWORKDIR /var\n\nADD ./requirements.txt /var\n\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.name='Kali Linux' \\\n      org.label-schema.description='Official Kali Linux docker image' \\\n      org.label-schema.usage='https://www.kali.org/news/official-kali-linux-docker-images/' \\\n      org.label-schema.url='https://www.kali.org/' \\\n      org.label-schema.vendor='Offensive Security' \\\n      org.label-schema.schema-version='1.0' \\\n      org.label-schema.docker.cmd='docker run --rm kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.cmd.devel='docker run --rm -ti kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.debug='docker logs $CONTAINER' \\\n      io.github.offensive-security.docker.dockerfile=\"Dockerfile\" \\\n      io.github.offensive-security.license=\"GPLv3\" \\\n      MAINTAINER=\"Steev Klimaszewski <steev@kali.org>\"\nRUN echo \"deb http://http.kali.org/kali kali-rolling main contrib non-free\" > /etc/apt/sources.list && \\\n    echo \"deb-src http://http.kali.org/kali kali-rolling main contrib non-free\" >> /etc/apt/sources.list\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING=utf8\nRUN set -x \\\n    && apt-get -yqq update \\\n    && apt-get clean \\\n    && apt-get install -yqq build-essential python-dev libnetfilter-queue-dev tshark tcpdump python3-pip wireshark \\\n    && apt install -yqq python3-pip \\\n    && pip3 install --process-dependency-links polymorph\n\nRUN apt-get install -yqq linux-image; exit 0\n\nVOLUME [\"/var/develop\"]\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "b78d425ee4af88c2b9697c849e1e514f9eccd516.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Luis Elizondo \"lelizondo@gmail.com\"\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update\nRUN apt-get update --fix-missing\nRUN apt-get update --fix-missing\nRUN apt-get install -y curl\nRUN curl -sL https://deb.nodesource.com/setup | sudo bash -\n\nRUN apt-get install -y supervisor python nodejs imagemagick git openssl make build-essential gcc ca-certificates\nRUN npm install -g npm@latest\nRUN npm install -g express-generator bower mocha sinon should assert grunt-cli gulp node-gyp\nRUN npm update\nRUN apt-get update --fix-missing\nRUN mkdir -p /var/log/supervisor\n\n# Cleanup\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN apt-get autoremove -y\n\nADD ./config/supervisord.conf /etc/supervisor/conf.d/supervisord-nodejs.conf\n\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\n\nRUN node -v > /etc/nodejs-version\n\nEXPOSE 3000\n\nWORKDIR /var/www\n\nCMD [\"/usr/bin/supervisord\", \"-n\"]\n"
    },
    {
        "filename": "b7c9130c58ca09114058628e6c921f4ec6a41d81.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:arm64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.28\n\n# qemu-user-static\nADD qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "cc46694870d4f243ad9eae26625a6a212a79fb66.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/python:2.7\n\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\n\nRUN apt-get update && apt-get install -y build-essential && \\\n\teasy_install pip && \\\n\tpip install --upgrade setuptools virtualenv mock ipython_genutils \\\n\t\tpytest traitlets && \\\n\tgit clone https://github.com/haypo/faulthandler && \\\n\tcd faulthandler/ && \\\n\tpython setup.py install && export TOXENV=py27 && \\\n\tvirtualenv -p python2 --system-site-packages env2 && \\\n\t/bin/bash -c \"source env2/bin/activate\" && \\\n\tpip install tox && tox\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "ccd9489e4a2b6dc2954e337a75435257fe469719.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jcalazan/base\nMAINTAINER Jonathan Calazan \"jonathan@calazan.com\"\n\nRUN locale-gen en_US.UTF-8\n\nRUN add-apt-repository \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\"\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\n\nRUN apt-get update\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y -q \\\n    postgresql-9.6 \\\n    postgresql-contrib-9.6 \\\n    libpq-dev\n\n# /etc/ssl/private can't be accessed from within container for some reason\n# (@andrewgodwin says it's something AUFS related)\nRUN mkdir /etc/ssl/private-copy; \\\n    mv /etc/ssl/private/* /etc/ssl/private-copy/; \\\n    rm -r /etc/ssl/private; \\\n    mv /etc/ssl/private-copy /etc/ssl/private; \\\n    chmod -R 0700 /etc/ssl/private; \\\n    chown -R postgres /etc/ssl/private\n\nADD postgresql.conf /etc/postgresql/9.6/main/postgresql.conf\nADD pg_hba.conf /etc/postgresql/9.6/main/pg_hba.conf\nRUN chown postgres:postgres /etc/postgresql/9.6/main/*.conf\nADD run.sh /usr/local/bin/run.sh\nRUN chmod +x /usr/local/bin/run.sh\n\n# Correct the Error: could not open temporary statistics file \"/var/run/postgresql/9.6-main.pg_stat_tmp/global.tmp\": No such file or directory\nRUN mkdir -p /var/run/postgresql/9.6-main.pg_stat_tmp\nRUN chown postgres:postgres /var/run/postgresql/9.6-main.pg_stat_tmp -R\n\nVOLUME [\"/var/lib/postgresql\"]\nEXPOSE 5432\nCMD [\"/usr/local/bin/run.sh\"]\n"
    },
    {
        "filename": "cd4c9034b41d9a91ba587f89b7862bd9adaf0886.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM openjdk:7-jdk\nMAINTAINER Manuel de la Pe\u00f1a <manuel.delapenya@liferay.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV TOMCAT_MAJOR_VERSION=7\nENV TOMCAT_VERSION=7.0.77\nENV TOMCAT_HOME=/opt/apache-tomcat-$TOMCAT_VERSION\n\n# Prepare the installation of mysql-server and tomcat 7\nRUN apt-get update && apt-get install -y lsb-release && \\\n  wget https://dev.mysql.com/get/mysql-apt-config_0.8.4-1_all.deb && \\\n  dpkg -i mysql-apt-config_0.8.4-1_all.deb && rm -f mysql-apt-config_0.8.4-1_all.deb && \\\n  mkdir -p $TOMCAT_HOME && cd /opt && \\\n  wget http://mirrors.standaloneinstaller.com/apache/tomcat/tomcat-$TOMCAT_MAJOR_VERSION/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz && \\\n  tar -xvf apache-tomcat-$TOMCAT_VERSION.tar.gz && rm -f apache-tomcat-$TOMCAT_VERSION.tar.gz\n\n# Install packages\nRUN apt-get update && \\\n  apt-get -y install mysql-server pwgen supervisor && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Add image configuration and scripts\nADD start-tomcat.sh /start-tomcat.sh\nADD start-mysqld.sh /start-mysqld.sh\nADD run.sh /run.sh\nRUN chmod 755 /*.sh\nADD my.cnf /etc/mysql/conf.d/my.cnf\nRUN chmod 644 /etc/mysql/conf.d/my.cnf\nADD supervisord-tomcat.conf /etc/supervisor/conf.d/supervisord-tomcat.conf\nADD supervisord-mysqld.conf /etc/supervisor/conf.d/supervisord-mysqld.conf\n\n# Remove pre-installed database\nRUN rm -rf /var/lib/mysql/*\n\n# Add MySQL utils\nADD create_mysql_admin_user.sh /create_mysql_admin_user.sh\nADD mysql-setup.sh /mysql-setup.sh\nRUN chmod 755 /*.sh\n\nWORKDIR $TOMCAT_HOME\n\n# Add volumes for MySQL \nVOLUME  [\"/etc/mysql\", \"/var/lib/mysql\"]\n\nEXPOSE 8080 3306\n\nENTRYPOINT [\"/run.sh\"]\n"
    },
    {
        "filename": "cd60fbc27d506c0c5db116433b6c9cfcb63f394e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerized Redmine\n\nFROM ubuntu:14.04\nMAINTAINER Viktor Petersson <vpetersson@wireload.net>\n\n# Install required packages\nRUN apt-get -qq update && \\\n    apt-get -qq install -y wget ruby ruby-dev build-essential imagemagick libmagickwand-dev libmysqlclient-dev apache2 apt-transport-https ca-certificates git-core subversion && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7 && \\\n    echo \"deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main\" > /etc/apt/sources.list.d/passenger.list && \\\n    apt-get -qq update && \\\n    apt-get -qq install -y libapache2-mod-passenger && \\\n    apt-get clean\n\n# Fetch the latest redmine repo (and delete `.git`) to save space)\nENV BRANCH 2.6-stable\nRUN cd /usr/local && \\\n    git clone https://github.com/redmine/redmine.git && \\\n    cd redmine && \\\n    git checkout $BRANCH && \\\n    rm -rf .git\n\nRUN touch /usr/local/redmine/log/production.log\nWORKDIR /usr/local/redmine\n\n# Install dependencies\nRUN gem install -q bundler mysql2 && \\\n    bundle install --without development test\n\n# Add files and clean up unnecessary files\nADD include_files/redmine_apache.conf /etc/apache2/redmine_apache.conf\nADD include_files/start.sh /start.sh\n\nEXPOSE 3000\n\nCMD /start.sh\n"
    },
    {
        "filename": "cd655c9d0ef39bc9695c916e6839401ab6c197f4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/python:2.7\n\nMAINTAINER Snehlata Mohite <smohite@us.ibm.com>\n\nRUN apt-get update && apt-get install -y libhdf5-dev && \\\n    pip install --upgrade pip && \\\n\tpip install numpy numexpr cython nose pytest tables sqlalchemy pandas && \\\n    cd $HOME/ && git clone https://github.com/ContinuumIO/ArrayManagement.git && \\\n\tcd $HOME/ArrayManagement/ && python setup.py build && python setup.py install && \\ \n\tcd $HOME/ && rm -rf ArrayManagement && apt-get purge -y libhdf5-dev && apt-get -y autoremove\n\t\nCMD [\"python\", \"/bin/bash\"]\n\n"
    },
    {
        "filename": "cd6e1443a1c074748504b050bcda1cbee5a78ea2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Docker container for Ubuntu 12.04\n\n# See https://github.com/ceejatec/naked-docker/ for details about the\n# construction of the base image.\n\nFROM ceejatec/naked-ubuntu:12.04\nMAINTAINER ceej@couchbase.com\n\nUSER root\n\n# Install SSH server\nRUN apt-get update && \\\n    apt-get install -y openssh-server && \\\n    rm -f /var/cache/apt/archives/*.deb && \\\n    mkdir /var/run/sshd\n\n# Create buildbot user with password-less sudo privs, and give \n# ownership of /opt/couchbase\nRUN useradd buildbot -G sudo -m -s /bin/bash && \\\n    mkdir -p /opt/couchbase && chown -R buildbot:buildbot /opt/couchbase && \\\n    echo 'buildbot:buildbot' | chpasswd && \\\n    sed -ri 's/ALL\\) ALL/ALL) NOPASSWD:ALL/' /etc/sudoers\nADD .ssh /home/buildbot/.ssh\nRUN chown -R buildbot:buildbot /home/buildbot/.ssh && chmod 700 /home/buildbot/.ssh\n\n# Expose and start SSH daemon\nEXPOSE 22\nCMD [ \"/usr/sbin/sshd\", \"-D\" ]\n\n# Install Couchbase build dependencies\nRUN apt-get install -y g++ git-core tar libssl-dev rubygems rake ncurses-dev python-dev devscripts debhelper ed man curl libc6-i386 && \\\n    rm -f /var/cache/apt/archives/*.deb\nRUN echo 'PATH=\"/usr/lib/ccache:$PATH\"' >> /home/buildbot/.profile\nRUN mkdir /tmp/deploy && \\\n    curl http://www.cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.sh -o /tmp/deploy/cmake.sh && \\\n    (echo y ; echo n) | sh /tmp/deploy/cmake.sh --prefix=/usr/local && \\\n    cd /tmp && rm -rf /tmp/deploy\n\n# Install third-party build dependencies. Note: python-software-properties\n# is only required for add-apt-repository; add-apt-repository is only\n# required to get python2.6; and python2.6 is only required for gyp, which\n# is part of the v8 build. python2.6 is also required for our compiling of\n# pysqlite and pysnappy, and for that we even need python2.6-dev.\nRUN apt-get install -y python-software-properties && \\\n    add-apt-repository ppa:fkrull/deadsnakes && \\\n    apt-get update && \\\n    apt-get install -y m4 python2.6 python2.6-dev && \\\n    rm -f /var/cache/apt/archives/*.deb\nRUN mkdir /tmp/deploy && \\\n    curl -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz -o /tmp/deploy/autoconf-2.69.tar.gz && \\\n    cd /tmp/deploy && tar -xzf autoconf-2.69.tar.gz && \\\n    cd autoconf-2.69 && ./configure --prefix=/usr/local && make && make install && \\\n    curl -L http://ftpmirror.gnu.org/automake/automake-1.11.1.tar.gz -o /tmp/deploy/automake-1.11.1.tar.gz && \\\n    cd /tmp/deploy && tar -xzf automake-1.11.1.tar.gz && \\\n    cd automake-1.11.1 && ./configure --prefix=/usr/local && make && make install && \\\n    curl -L http://ftpmirror.gnu.org/libtool/libtool-2.4.2.tar.gz -o /tmp/deploy/libtool-2.4.2.tar.gz && \\\n    cd /tmp/deploy && tar -xzf libtool-2.4.2.tar.gz && \\\n    cd libtool-2.4.2 && ./configure --prefix=/usr/local && make && make install && \\\n    cd /tmp && rm -rf /tmp/deploy\n\n# Install requirements for buildbot and buildbot tasks\nRUN apt-get install -y python-setuptools python-dateutil libxml-simple-perl libwww-perl && \\\n    rm -f /var/cache/apt/archives/*.deb && \\\n    easy_install buildbot_slave && \\\n    mkdir /home/buildbot/buildbot_slave && \\\n    buildslave create-slave /home/buildbot/buildbot_slave 10.1.1.210:9999 ubuntu-1204-builddocker-01 ubuntu-1204-builddocker-01 && \\\n    echo \"Couchbase Build Team <build-team@couchbase.com>\" > /home/buildbot/buildbot_slave/info/admin && \\\n    echo \"Ubuntu 12.04 x86_64 Couchbase Build Slave running in Docker\" > /home/buildbot/buildbot_slave/info/host && \\\n    chown -R buildbot:buildbot /home/buildbot/buildbot_slave\nRUN mkdir /tmp/deploy && \\\n    curl -L 'http://downloads.sourceforge.net/project/s3tools/s3cmd/1.5.0-rc1/s3cmd-1.5.0-rc1.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fs3tools%2Ffiles%2Fs3cmd%2F1.5.0-rc1%2F&ts=1406252479&use_mirror=superb-dca2' -o /tmp/deploy/s3cmd.tar.gz && \\\n    cd /tmp/deploy && tar -xvf s3cmd.tar.gz && cd s3cmd-1.5.0-rc1 && \\\n    python setup.py build && python setup.py install && \\\n    cd /tmp && rm -rf /tmp/deploy\nADD .s3cfg /home/buildbot/.s3cfg\nRUN chown buildbot:buildbot /home/buildbot/.s3cfg\n\n# Override default command for buildbot purposes\nCMD su - buildbot -c \"buildslave start /home/buildbot/buildbot_slave\"; /usr/sbin/sshd -D\n"
    },
    {
        "filename": "cd814bcbea2f031355dbd25cf1ceeaac936ba66b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## -*- docker-image-name: \"scaleway/elk:latest\" -*-\nFROM scaleway/java:amd64-latest\n# following 'FROM' lines are used dynamically thanks do the image-builder\n# which dynamically update the Dockerfile if needed.\n#FROM scaleway/java:armhf-latest       # arch=armv7l\n#FROM scaleway/java:arm64-latest       # arch=arm64\n#FROM scaleway/java:i386-latest        # arch=i386\n#FROM scaleway/java:mips-latest        # arch=mips\n\n\nMAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)\n\n\n# Prepare rootfs for image-builder\nRUN /usr/local/sbin/scw-builder-enter\n\n\n# Upgrade packages\nRUN apt-get -q update \\\n  && apt-get --force-yes -y -qq upgrade\n\n\nENV ELASTICSEARCH_VERSION=1.7.1 LOGSTASH_VERSION=1.5.4-1 KIBANA_VERSION=4.1.2\nRUN cd /tmp \\\n  && wget -q https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-${ELASTICSEARCH_VERSION}.deb \\\n  && wget -q http://download.elastic.co/logstash/logstash/packages/debian/logstash_${LOGSTASH_VERSION}_all.deb \\\n  && wget -q https://download.elastic.co/kibana/kibana/kibana-${KIBANA_VERSION}-linux-x86.tar.gz\n\n\nRUN cd /tmp \\\n  && dpkg -i elasticsearch-${ELASTICSEARCH_VERSION}.deb \\\n  && dpkg -i logstash_${LOGSTASH_VERSION}_all.deb\n\n\nRUN sed -i 's/#network.host: .*/network.host: localhost/' /etc/elasticsearch/elasticsearch.yml \\\n  && sed -i 's/#LS_OPTS=\"\"/LS_OPTS=\"-w 4\"/' /etc/default/logstash \\\n  && sed -i 's/#LS_HEAP_SIZE=\"500m\"/LS_HEAP_SIZE=\"1024m\"/' /etc/default/logstash\n\n\nRUN curl -sL https://deb.nodesource.com/setup | sudo bash - \\\n  && apt-get install nodejs nginx apache2-utils -y -qq\n\n\nRUN tar -xf /tmp/kibana-${KIBANA_VERSION}-linux-x86.tar.gz -C /opt \\\n  && mv /opt/kibana-${KIBANA_VERSION}-linux-x86 /opt/kibana \\\n  && sed -i 's/host: \".*\"/host: \"localhost\"/' /opt/kibana/config/kibana.yml\n\n\nRUN apt-get install pwgen libc6-dev -y -qq\nCOPY ./overlay/ /\n\n\nRUN update-rc.d kibana4_init defaults 95 10 \\\n  && update-rc.d elasticsearch defaults 95 10 \\\n  && update-rc.d logstash defaults 95 10\n\n\nRUN chmod 1777 /tmp \\\n  && addgroup logstash adm\n\n\nRUN mkdir -p /var/run/elasticsearch\n\n\n# Clean rootfs from image-builder\nRUN /usr/local/sbin/scw-builder-leave\n"
    },
    {
        "filename": "ce28b079659ee19114ba06654650d17d0c193cf5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\n###\n# Much of this is lifted from\n# https://github.com/sequenceiq/hadoop-docker/tree/2.6.0/ and\n# https://github.com/lresende/docker-yarn-cluster/ with modifications that are\n# appropriate for our use case.\n###\nMAINTAINER Frank Austin Nothaft, fnothaft@berkeley.edu\n\nRUN apt-get update && \\\n  apt-get install -y \\\n    python \\\n    libnss3 \\\n    openjdk-8-jre-headless \\\n    openssh-server \\\n    openssh-client\n\n# set java path\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/jre/\nENV PATH $PATH:$JAVA_HOME/bin\n\n# passwordless ssh\n#RUN ssh-keygen -q -N \"\" -t dsa -f /etc/ssh/ssh_host_dsa_key\n#RUN ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key\n#RUN ssh-keygen -q -N \"\" -t rsa -f /root/.ssh/id_rsa\n#RUN cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n\n# pull down hadoop common jar\nRUN mkdir /opt/apache-hadoop\nCOPY apache-hadoop /opt/apache-hadoop\n\n# set up hadoop environment\nENV HADOOP_PREFIX /opt/apache-hadoop\nENV HADOOP_COMMON_HOME $HADOOP_PREFIX\nENV HADOOP_HDFS_HOME $HADOOP_PREFIX\nENV HADOOP_MAPRED_HOME $HADOOP_PREFIX\nENV HADOOP_YARN_HOME $HADOOP_PREFIX\nENV HADOOP_CONF_DIR $HADOOP_PREFIX/etc/hadoop\nENV YARN_CONF_DIR $HADOOP_PREFIX/etc/hadoop\n\n# rewrite some envars in the hadoop-env script\nRUN sed -i '/^export JAVA_HOME/ s:.*:export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/\\nexport HADOOP_PREFIX=/opt/apache-hadoop\\nexport HADOOP_HOME=/opt/apache-hadoop\\n:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh\nRUN sed -i '/^export HADOOP_CONF_DIR/ s:.*:export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop/:' $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh\nRUN rm -f $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh.bak\nRUN chmod +x $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh\n\n# add conf files\nADD hadoop-docker/core-site.xml.template $HADOOP_PREFIX/etc/hadoop/core-site.xml.template\nRUN sed -i s/9000/8020/ $HADOOP_PREFIX/etc/hadoop/core-site.xml.template \nADD hdfs-site.xml $HADOOP_PREFIX/etc/hadoop/hdfs-site.xml\nADD hadoop-docker/mapred-site.xml $HADOOP_PREFIX/etc/hadoop/mapred-site.xml\nADD hadoop-docker/yarn-site.xml $HADOOP_PREFIX/etc/hadoop/yarn-site.xml.template\nADD hadoop-docker/ssh_config /root/.ssh/config\nRUN chmod 600 /root/.ssh/config\nRUN chown root:root /root/.ssh/config\n"
    },
    {
        "filename": "ce4eac5cd9fc883850a992a57edbcd376f26d8aa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nginx:latest  \nMAINTAINER Jonathan Hawk <jonathan@appertly.com>  \n  \nADD mime.types /etc/nginx/mime.types  \nADD nginx.conf /etc/nginx/nginx.conf  \nADD ssl.conf /etc/nginx/conf.d/ssl.conf  \nADD default.conf /etc/nginx/conf.d/default.conf  \nRUN apt-get update \\  \n&& apt-get install -y ca-certificates  \n  \nADD start.sh /scripts/start.sh  \nRUN chmod +x /scripts/start.sh  \n  \nCMD [\"/scripts/start.sh\"]  \n\n"
    },
    {
        "filename": "ce5b1a332b362967983866e4420bbf8812955a12.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\n\nMAINTAINER Dhaval Thakkar <dhaval.thakkar@somaiya.edu>\n\nARG PIP=/root/anaconda3/bin/pip\n\n# Install some dependencies\nRUN sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24\nRUN sudo su -c \"echo 'deb http://ppa.launchpad.net/git-core/ppa/ubuntu trusty main' > /etc/apt/sources.list.d/git.list\"\nRUN apt-get update && apt-get install -y \\\n\t\tgit -y \\\n\t\tqt5-default -y \\\n                build-essential \\\n                cmake \\\n                curl \\\n                g++ \\\n                nano \\\n                pkg-config \\\n                software-properties-common \\\n                unzip \\\n                vim \\\n\t\tgcc \\\n\t\tgraphviz \\\n                wget \\\n                doxygen \\\n                && \\\n        apt-get clean && \\\n        apt-get autoremove && \\\n        rm -rf /var/lib/apt/lists/*\n\n#Anaconda\nRUN wget --quiet https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh && \\\n    bash Anaconda3-4.4.0-Linux-x86_64.sh -b\n\n#Setup .bashrc\nRUN rm -r /root/.bashrc\nCOPY bashrc.txt /root/.bashrc\nRUN alias brc='source ~/.bashrc'\n\n# Installing TensorFlow\nRUN ${PIP} --no-cache-dir install \\\t\n\thttps://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.1-cp36-cp36m-linux_x86_64.whl\n\n# Installing PyTorch\nRUN ${PIP} --no-cache-dir install \\\n\thttp://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp36-cp36m-manylinux1_x86_64.whl && \\\n\t${PIP} --no-cache-dir install \\\n\ttorchvision\n\n# Installing Numpy for the current user (BUGFIX)\nRUN ${PIP} --no-cache-dir install -U numpy\n\n# Installing MXNet\nRUN ${PIP} --no-cache-dir install \\\n\tmxnet-cu80==0.11.0\n\n#Installing Keras\nRUN ${PIP} --no-cache-dir install keras\n\n# Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n\tcd /root/opencv && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n\tmake -j\"$(nproc)\"  && \\\n\tmake install && \\\n\tldconfig && \\\n\techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n\n#Setup notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\n# Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006 8888\n\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "cebcc78f539ef3a9591c135a54d44c22ac04fefa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM rhscl/ruby-25-rhel7:latest as builder\n\nMAINTAINER OpenShift Development <dev@lists.openshift.redhat.com>\n\nENV DATA_VERSION=1.6.0 \\\n    FLUENTD_VERSION=1.5.1 \\\n    HOME=/opt/app-root/src \\\n    PATH=/opt/app-root/src/bin:/opt/app-root/bin:$PATH \\\n    LOGGING_FILE_PATH=/var/log/fluentd/fluentd.log \\\n    LOGGING_FILE_AGE=10 \\\n    LOGGING_FILE_SIZE=1024000 \\\n    container=oci\n\nARG TEST_REPO\n#ADD test.repo /etc/yum.repos.d\n\nUSER 0\nRUN yum-config-manager --enable rhel-7-server-ose-4.1-rpms && \\\n  INSTALL_PKGS=\"make gcc-c++ libffi-devel \\\n      autoconf automake libtool m4 \\\n      redhat-rpm-config\" && \\\n  yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \\\n  rpm -V $INSTALL_PKGS && \\\n  yum clean all\n\n# uncomment if you want to try out test rpm builds\n#ADD *.rpm /tmp/\n#RUN yum -y install /tmp/*.rpm\n\nADD jemalloc/ ${HOME}/jemalloc/\nRUN cd ${HOME}/jemalloc && EXTRA_CFLAGS=\"$( rpm --eval '%{optflags}' )\" ./autogen.sh && \\\n    make install_lib_shared install_bin && cp COPYING ${HOME}/COPYING.jemalloc && \\\n    cd .. && rm -rf jemalloc\n\nADD source.jemalloc /source.jemalloc\nRUN bash -c '. /source.jemalloc; echo jemalloc $JEMALLOC_VER >> /contents'\n\nADD vendored_gem_src/ ${HOME}/vendored_gem_src/\nADD install-gems.sh *.patch.sh *.patch ${HOME}/vendored_gem_src/\n\nRUN cd ${HOME}/vendored_gem_src/ && ./install-gems.sh && cd / && rm -rf ${HOME}/vendored_gem_src/\n\nFROM rhel7:7-released\n\nENV DATA_VERSION=1.6.0 \\\n    FLUENTD_VERSION=1.5.1 \\\n    HOME=/opt/app-root/src \\\n    PATH=/opt/app-root/src/bin:/opt/app-root/bin:$PATH \\\n    LOGGING_FILE_PATH=/var/log/fluentd/fluentd.log \\\n    LOGGING_FILE_AGE=10 \\\n    LOGGING_FILE_SIZE=1024000 \\\n    container=oci\n\n#ADD test.repo /etc/yum.repos.d\nUSER 0\nRUN yum-config-manager --enable rhel-7-server-ose-4.1-rpms \\\n    --enable rhscl-3.2-rh-ruby25-rhel-7> /dev/null && \\\n  INSTALL_PKGS=\"hostname \\\n                bc \\\n                iproute\" && \\\n  SCL_PKGS=\"rh-ruby25 rh-ruby25-runtime rh-ruby25-ruby rh-ruby25-rubygem-openssl \\\n            rh-ruby25-rubygem-json rh-ruby25-ruby-libs rh-ruby25-rubygems \\\n            rh-ruby25-ruby-irb\" && \\\n  yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS $SCL_PKGS && \\\n  rpm -V $INSTALL_PKGS $SCL_PKGS && \\\n  yum clean all\n\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/share/gems/gems/** /opt/rh/rh-ruby25/root/usr/local/share/gems/gems/\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/share/gems/specifications/** /opt/rh/rh-ruby25/root/usr/local/share/gems/specifications/\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/share/gems/extensions/** /opt/rh/rh-ruby25/root/usr/local/share/gems/extensions/\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/lib64/gems/ruby/** /opt/rh/rh-ruby25/root/usr/local/lib64/gems/ruby/\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/lib/** /opt/rh/rh-ruby25/root/usr/local/lib/\nCOPY --from=builder /opt/rh/rh-ruby25/root/usr/local/bin/** /opt/rh/rh-ruby25/root/usr/local/bin/\nCOPY --from=builder /usr/local/lib/** /usr/local/lib/\nCOPY --from=builder /usr/local/bin/** /usr/local/bin/\nCOPY --from=builder /contents /contents\n\nRUN mkdir -p /etc/fluent/plugin\nADD configs.d/ /etc/fluent/configs.d/\nADD out_syslog_buffered.rb out_syslog.rb out_rawtcp.rb /etc/fluent/plugin/\nADD parser_viaq_docker_audit.rb viaq_docker_audit.rb /etc/fluent/plugin/\nADD run.sh generate_syslog_config.rb ${HOME}/\nADD lib/generate_throttle_configs/lib/*.rb ${HOME}/\nADD lib/filter_parse_json_field/lib/*.rb /etc/fluent/plugin/\nADD lib/filter_elasticsearch_genid_ext/lib/filter_elasticsearch_genid_ext.rb /etc/fluent/plugin/\nCOPY utils/** /usr/local/bin/\n\nRUN mkdir -p /etc/fluent/configs.d/{dynamic,user} && \\\n    chmod 777 /etc/fluent/configs.d/dynamic && \\\n    ln -s /etc/fluent/configs.d/user/fluent.conf /etc/fluent/fluent.conf\n\nWORKDIR ${HOME}\nCMD [\"scl\", \"enable\", \"rh-ruby25\", \"--\", \"sh\", \"run.sh\"]\n\nLABEL io.k8s.display-name=Fluentd\n\nLABEL \\\n        io.k8s.description=\"Fluentd container for collecting of container logs\" \\\n        com.redhat.component=\"logging-fluentd-container\" \\\n        vendor=\"Red Hat\" \\\n        name=\"openshift3/logging-fluentd\" \\\n        License=\"GPLv2+\" \\\n        io.k8s.display-name=\"Fluentd\" \\\n        version=\"v4.0.0\" \\\n        architecture=\"x86_64\" \\\n        release=\"0.0.0.0\" \\\n        io.openshift.tags=\"logging,elk,fluentd\"\n"
    },
    {
        "filename": "d04829bfcaa233977618263f8db59a7782a1f80a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for DeepDive users\nFROM jupyter/minimal-notebook\nMAINTAINER deepdive-dev@googlegroups.com\n\n# switch to root to install a few things\nUSER root\n\n# install postgres client\nRUN apt-get update \\\n && apt-get install -qy curl wget ca-certificates software-properties-common \\\n && apt-add-repository -y \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" \\\n && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \\\n && apt-get update -qy \\\n && apt-get upgrade -qy \\\n && apt-get install -qy postgresql-client-9.5 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n ;\n\n# add DeepDive installer to the image\nUSER jovyan\nADD install.sh /deepdive/\nADD install    /deepdive/install\nUSER root\n\n# install DeepDive and its runtime dependencies\nRUN INSTALLER_LOCAL_FIRST=true /deepdive/install.sh _deepdive_runtime_deps \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# NOTE that we're trying to keep as much as possible under the user so they can be freely modified\nUSER jovyan\nENV USER=jovyan\n\n# add DeepDive itself\nADD deepdive-build.tar.gz /deepdive\nUSER root\nRUN for cmd in /deepdive/bin/*; do ln -sfn \"$cmd\" /usr/local/bin/; done\nUSER jovyan\n\n# preinstall CoreNLP\nADD stanford-corenlp /deepdive/lib/stanford-corenlp\nUSER root\nRUN chown jovyan /deepdive/lib/stanford-corenlp\nUSER jovyan\nRUN deepdive corenlp install\n\n# shorten working dir\nWORKDIR /ConfinedWater\n\n# include examples\nADD deepdive-examples.tar.gz deepdive-examples\n\n# override default behavior\nCMD exec start-notebook.sh --ip 0.0.0.0\n"
    },
    {
        "filename": "d0768060643fc253d78f3f5a4877eaef375f8726.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM resin/raspberrypi3-debian:wheezy\n\nRUN apt-get update && \\\n    apt-get install -y build-essential tk-dev libncurses5-dev libncursesw5-dev libreadline6-dev unzip && \\\n    apt-get install -y libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev libbz2-dev wget && \\\n    apt-get install -y libexpat1-dev liblzma-dev zlib1g-dev cmake curl libffi-dev tk-dev libc6-dev\n# TODO:  patchelf\n\n# Build OpenSSL 1.0.2g\nENV OPENSSL_VERSION 1.0.2g\nRUN curl -O https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz && \\\n    tar -xvzf openssl-$OPENSSL_VERSION.tar.gz && \\\n    mv openssl-$OPENSSL_VERSION openssl_armv7l_src && \\\n    cd openssl_armv7l_src && \\\n    ./Configure linux-armv4 no-shared -static --openssldir=/opt/uamqp/openssl --prefix=/opt/uamqp/openssl && \\\n    make && \\\n    make install\n\n# Build Python 3.4\nRUN curl -O https://www.python.org/ftp/python/3.4.1/Python-3.4.1.tar.xz && \\\n    tar xf Python-3.4.1.tar.xz && \\\n    cd Python-3.4.1 && \\\n    ./configure && \\\n    make && \\\n    sudo make altinstall\n\n# Build Python 3.5\nRUN curl -O https://www.python.org/ftp/python/3.5.5/Python-3.5.5.tar.xz && \\\n    tar xf Python-3.5.5.tar.xz && \\\n    cd Python-3.5.5 && \\\n    ./configure && \\\n    make && \\\n    sudo make altinstall\n\n# Build Python 3.6\nRUN curl -O https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz && \\\n    tar xf Python-3.6.6.tar.xz && \\\n    cd Python-3.6.6 && \\\n    ./configure && \\\n    make && \\\n    sudo make altinstall\n\n# Build Python 3.7\nRUN apt-get install -y libffi-dev tk-dev libc6-dev\nRUN curl -O https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz && \\\n    tar xf Python-3.7.0.tar.xz && \\\n    cd Python-3.7.0 && \\\n    ./configure && \\\n    make && \\\n    sudo make altinstall\n\n# Install setup for Python 3.4\nRUN wget https://github.com/pypa/setuptools/archive/v40.0.0.tar.gz && \\\n    tar xf v40.0.0.tar.gz && \\\n    cd setuptools-40.0.0 && \\\n    python3.4 bootstrap.py && \\\n    python3.4 setup.py install\nRUN wget https://files.pythonhosted.org/packages/21/89/ca320e5b45d381ae0df74c4b5694f1471c1b2453c5eb4bac3449f5970481/Cython-0.28.5.tar.gz#sha256=b64575241f64f6ec005a4d4137339fb0ba5e156e826db2fdb5f458060d9979e0 && \\\n    tar xf Cython-0.28.5.tar.gz && \\\n    cd Cython-0.28.5 && \\\n    python3.4 setup.py install\nRUN wget https://files.pythonhosted.org/packages/2a/fb/aefe5d5dbc3f4fe1e815bcdb05cbaab19744d201bbc9b59cfa06ec7fc789/wheel-0.31.1.tar.gz#sha256=0a2e54558a0628f2145d2fc822137e322412115173e8a2ddbe1c9024338ae83c && \\\n    tar xf wheel-0.31.1.tar.gz && \\\n    cd wheel-0.31.1 && \\\n    python3.4 setup.py install\nRUN wget https://files.pythonhosted.org/packages/cf/f7/21e21195874e85718ae2826774023a4601170199ebb32db451e447d19d91/auditwheel-1.9.0.tar.gz#sha256=fe8cbf74d16e7d1a89fd96b689f8e16f196edfb66cc98eb8a345bc03e28fed63 && \\\n    tar xf auditwheel-1.9.0.tar.gz && \\\n    cd auditwheel-1.9.0 && \\\n    python3.4 setup.py install\n\n# Install setup for Python 3.5, 3.6, 3.7\nRUN pip3.5 install cython wheel auditwheel\nRUN pip3.6 install cython wheel auditwheel\n#RUN pip3.7 install cython wheel auditwheel\n\n# Build cmake 2.8.11\nRUN curl -O https://cmake.org/files/v2.8/cmake-2.8.11.tar.gz && \\\n    tar xvf cmake-2.8.11.tar.gz && \\\n    cd cmake-2.8.11 && \\\n    ./bootstrap && \\\n    make && \\\n    make install\n\nENTRYPOINT /bin/bash"
    },
    {
        "filename": "d0cf83d04ba3d7bf0c32213d8b2765d79994daa8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile for a Scrapy development environment\n# Based on Ubuntu Image\n############################################################\n\nFROM ubuntu\nMAINTAINER NeuralFoundry <neuralfoundry.com>\n\nRUN echo deb http://archive.ubuntu.com/ubuntu precise universe >> /etc/apt/sources.list\nRUN apt-get update\n\n## Python Family\nRUN apt-get install -qy python python-dev python-distribute python-pip ipython\n\n## Selenium \nRUN apt-get install -qy firefox xvfb \nRUN pip install selenium pyvirtualdisplay\n\n## AWS Python SDK\nRUN pip install boto3\n\n## Scraping\nRUN pip install beautifulsoup4 requests \nRUN apt-get install -qy libffi-dev libxml2-dev libxslt-dev lib32z1-dev libssl-dev\n\n## Scrapy\nRUN pip install lxml scrapy scrapyjs\n"
    },
    {
        "filename": "d0dd330ac433f94f61cf9b320a1f319c5a9f7b66.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nEXPOSE 6667 27017\n\nRUN apt-get update -qq\nRUN apt-get install -qqy \\\n\tgit \\\n\tmongodb \\\n\tngircd \\\n\topenssl \\\n\tlibssl-dev \\\n\tpython-dev \\\n\tpython-pip \\\n\tpython-setuptools \\\n\tlibffi6 \\\n\tlibffi-dev\n\nADD . /opt/helga\nWORKDIR /opt/helga\n\nRUN sed -i -s 's/^bind_ip = 127.0.0.1/#bind_ip = 127.0.0.1/' /etc/mongodb.conf && service mongodb restart\n\nRUN pip install --upgrade pip\nRUN pip install service_identity\n\nRUN cd /opt/helga && python setup.py install\n\n\nENTRYPOINT [\"/usr/local/bin/helga\"]\n"
    },
    {
        "filename": "d0f0f34cdd6b93fd495cba8ad630d9deb6623e16.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \n  \nMAINTAINER Ding Corporation  \n  \nVOLUME /var/mail /config /output  \n  \nADD save-attachments.crontab /etc/cron.d/save-attachments  \nADD save-attachments.sh /opt/save-attachments.sh  \n  \n# install packages  \nRUN apt-get update \\  \n&& apt-get install -y fetchmail maildrop mpack \\  \n&& apt-get clean && rm -fr /var/lib/apt/lists/*  \n  \nRUN maildirmake /var/mail/working \\  \n&& mkdir /var/mail/working/landing \\  \n&& mkdir /var/mail/working/extracted \\  \n&& echo \"to /var/mail/working\" > /root/.mailfilter \\  \n&& touch /var/mail/save-attachments.log \\  \n&& chmod 0644 /etc/cron.d/save-attachments  \n  \nADD docker-entrypoint.sh /opt/docker-entrypoint.sh  \nENTRYPOINT [\"/opt/docker-entrypoint.sh\"]  \nCMD [\"cron\"]  \n\n"
    },
    {
        "filename": "d0f36c0405973f09fd8532f13b44660c9ff8a4e0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM mysql:5.6\nMAINTAINER @qxip (twitter)\nRUN apt-get update && apt-get install -y git\nRUN git clone https://github.com/sipcapture/homer-api.git /homer-api && cd /homer-api && git checkout 5cc1bac9187e2d6413cbf8f28b37747ce364b373 && cd /\nADD bootstrap.sh /bootstrap.sh"
    },
    {
        "filename": "d1441b30b728ccbdec24f95adfc467ec02ba908b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Alexander Drummer <drummerroma@gmail.com>  \n  \nENV DEBIAN_FRONTEND noninteractive  \n  \nENV MYSQL_HOST mysql  \nENV MYSQL_PORT 3306  \nENV MYSQL_USER pureftpd  \nENV MYSQL_PASSWORD ftpdpass  \nENV MYSQL_DATABASE pureftpd  \n  \nRUN apt-get update && apt-get -y dist-upgrade && \\  \napt-get -y --force-yes install openssl dpkg-dev debhelper && \\  \napt-get -y build-dep pure-ftpd-mysql && \\  \nmkdir /ftpdata && \\  \nmkdir /tmp/pure-ftpd-mysql && \\  \ncd /tmp/pure-ftpd-mysql && \\  \napt-get source pure-ftpd-mysql && \\  \ncd pure-ftpd-* && \\  \nsed -i '/^optflags=/ s/$/ --without-capabilities/g' ./debian/rules && \\  \ndpkg-buildpackage -b -uc && \\  \ndpkg -i /tmp/pure-ftpd-mysql/pure-ftpd-common*.deb && \\  \napt-get -y install openbsd-inetd \\  \nmysql-client && \\  \ndpkg -i /tmp/pure-ftpd-mysql/pure-ftpd-mysql*.deb && \\  \napt-mark hold pure-ftpd pure-ftpd-mysql pure-ftpd-common  \n  \nRUN groupadd ftpgroup && \\  \nuseradd -g ftpgroup -d /dev/null -s /etc ftpuser && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/* && \\  \nrm -rf /tmp/*  \n  \nEXPOSE 20 21 30000-30009  \nADD run.sh /run.sh  \nRUN chmod 755 /*.sh  \nRUN chown -R ftpuser:ftpgroup /ftpdata  \n  \nENTRYPOINT [\"/run.sh\"]\n\n"
    },
    {
        "filename": "d191c9f882fe3d998dd76fdd53f526e05d2ae93d.dockerfile",
        "riskid_list": "DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM continuumio/miniconda2:latest\nMAINTAINER elaina, egraham147@gmail.com\n\n# update\nRUN apt-get -qq update && \\\n    apt-get install -y --no-install-recommends gcc make build-essential libtool zlib1g-dev ncbi-blast+ hmmer prodigal mummer && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# install pplacer\nRUN conda install --yes -c bioconda pplacer subread bedtools bowtie2 samtools && \\\n    conda clean -ya\n\n# install python packages\nRUN pip install numpy scipy pandas scikit-learn matplotlib biopython pysam dendropy BinSanity\n\n# install checkM\nENV checkM_DIR /checkM\nRUN mkdir -p $checkM_DIR\nWORKDIR $checkM_DIR\nRUN apt-get install -y --no-install-recommends git && \\\n    git clone https://github.com/Ecogenomics/CheckM.git && \\\n    cd CheckM && python setup.py install && \\\n    apt-get remove -y --auto-remove git && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# configure checkM database\nENV checkM_db /db/CheckM\nRUN mkdir -p $checkM_db\nRUN echo -e \"\\n/db/CheckM\\n\" | checkm data setRoot\nWORKDIR $checkM_db\nRUN apt-get install -y --no-install-recommends wget && \\\n    wget https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz && \\\n    tar zxfv checkm_data_2015_01_16.tar.gz && rm checkm_data_2015_01_16.tar.gz && \\\n    apt-get remove -y --auto-remove wget && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# update PATH\nENV PATH $PATH:/opt/conda/bin\n\n# Entry\nWORKDIR /mnt\nCMD [ \"/bin/bash\" ]\n\n"
    },
    {
        "filename": "d24284d8a39b14b8c80a097696c5448a470c206c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG tag=latest\nFROM debian:${tag}\n\nMAINTAINER Quaternion Risk Management\nLABEL Description=\"Provide a base environment for building in C++ with Boost\"\n\nRUN apt-get update \\\n && apt-get install -y build-essential wget libbz2-dev autoconf libtool dos2unix cmake\\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nARG boost_version\nARG boost_dir\nENV boost_version ${boost_version}\n\nRUN wget http://downloads.sourceforge.net/project/boost/boost/${boost_version}/${boost_dir}.tar.gz \\\n    && tar xfz ${boost_dir}.tar.gz \\\n    && rm ${boost_dir}.tar.gz \\\n    && cd ${boost_dir} \\\n    && ./bootstrap.sh \\\n    && ./b2 --without-python -j 4 link=shared runtime-link=shared install \\\n    && cd .. && rm -rf ${boost_dir} && ldconfig\n\nCMD bash\n"
    },
    {
        "filename": "d3aa95a03ce0dac56315ce69ccbe84c8a710cc30.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:trusty\n\nENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\nRUN \\\n  apt-get update && \\\n  apt-get install -y python python-pip python-dev curl jq python-boto wget libboost-all-dev libxml2-dev libxslt-dev gfortran mysql-server libmysqlclient-dev\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install build-essential automake autoconf libxmu-dev gcc libpthread-stubs0-dev libtool libboost-program-options-dev libboost-python-dev zlib1g-dev libc6 libgcc1 libstdc++6 libblas-dev liblapack-dev git\n\nRUN pip install nltk unidecode numpy pandas scipy patsy gensim docx pyth pymongo mysql-python zk_shell awscli\n\nRUN wget -q -O rosetta-0.2.5.tar.gz https://github.com/columbia-applied-data-science/rosetta/archive/0.2.5.tar.gz && \\\n    pip install rosetta-0.2.5.tar.gz\n\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/lib\n\n# Install and make vw (Vowpal Wabbit) \nRUN cd /usr/local/src;git clone https://github.com/JohnLangford/vowpal_wabbit.git;cd vowpal_wabbit;git checkout 7.10;./autogen.sh;./configure;make;make test;make install\n# perf\nRUN cd /usr/local/src;wget http://osmot.cs.cornell.edu/kddcup/perf/perf.src.tar.gz;tar xvf perf.src.tar.gz;rm perf.src.tar.gz;mv perf.src perf;cd perf;make -B perf;make install\n\nRUN pip install wabbit_wappa filechunkio\n\nRUN git clone https://github.com/seldonio/seldon-server /seldon-server\n\nENV PYTHONPATH $PYTHONPATH:/seldon-server/external/predictor/python\n\nADD ./scripts /scripts\n\n# Define default command.\nCMD [\"bash\"]\n"
    },
    {
        "filename": "d40d1349ba75f5a750ef6c212b88934e20f4c506.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.15\nMAINTAINER Cyrill Schumacher <cyrill@zookal.com>\nENV HOME /root\nRUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\nRUN \\\n  sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get install -y build-essential && \\\n  apt-get install -y software-properties-common\n\n# Install Redis.\nRUN \\\n  cd /tmp && \\\n  curl -LO http://download.redis.io/redis-stable.tar.gz && \\\n  tar xvzf redis-stable.tar.gz && \\\n  cd redis-stable && \\\n  make && \\\n  make install && \\\n  cp -f src/redis-sentinel /usr/local/bin && \\\n  mkdir -p /etc/redis && \\\n  rm -rf /tmp/redis-stable*\n\nADD redis-base.conf /etc/redis/\nADD redis-ses.conf /etc/redis/\n\nRUN mkdir /etc/service/redis\nADD redis.sh /etc/service/redis/run\nRUN chmod 700 /etc/service/redis/run\nRUN useradd -s /usr/sbin/nologin -r -M -d /nonexistent -g users redis\n\n# Define mountable directories.\nVOLUME [\"/data\"]\n\n# Define working directory.\nWORKDIR /data\n\n# Expose ports.\nEXPOSE 6380\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "d416759080016f4cf1728cefab66d79a457e7c21.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos:latest\n\n\nMAINTAINER Oleg Strizhechenko version: 0.1\n\nRUN yum -y install epel-release && yum -y update\nRUN yum -y install ruby-devel gcc make rpm-build rubygems python-pip\nRUN gem install --no-ri --no-rdoc fpm\nADD netutils.sh /root/netutils.sh\nRUN pip install setuptools\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "d42b09c89f881c3e328b3f6dfbb11e5c520b7dcf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Dan Liew <daniel.liew@imperial.ac.uk>\n\n# FIXME: Docker doesn't currently offer a way to\n# squash the layers from within a Dockerfile so\n# the resulting image is unnecessarily large!\n\nENV LLVM_VERSION=3.4 \\\n    SOLVERS=STP:Z3 \\\n    STP_VERSION=2.1.2 \\\n    DISABLE_ASSERTIONS=0 \\\n    ENABLE_OPTIMIZED=1 \\\n    KLEE_UCLIBC=klee_uclibc_v1.0.0 \\\n    KLEE_SRC=/home/klee/klee_src \\\n    COVERAGE=0 \\\n    BUILD_DIR=/home/klee/klee_build \\\n    USE_CMAKE=1 \\\n    ASAN_BUILD=0 \\\n    UBSAN_BUILD=0\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n        clang-${LLVM_VERSION} \\\n        llvm-${LLVM_VERSION} \\\n        llvm-${LLVM_VERSION}-dev \\\n        llvm-${LLVM_VERSION}-runtime \\\n        llvm \\\n        libcap-dev \\\n        git \\\n        subversion \\\n        cmake \\\n        make \\\n        libboost-program-options-dev \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        perl \\\n        flex \\\n        bison \\\n        libncurses-dev \\\n        zlib1g-dev \\\n        patch \\\n        wget \\\n        unzip \\\n        binutils && \\\n    pip3 install -U lit tabulate && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 50 && \\\n    ( wget -O - http://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - ) && \\\n    echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/z3.list && \\\n    apt-get update\n\n# Create ``klee`` user for container with password ``klee``.\n# and give it password-less sudo access (temporarily so we can use the TravisCI scripts)\nRUN useradd -m klee && \\\n    echo klee:klee | chpasswd && \\\n    cp /etc/sudoers /etc/sudoers.bak && \\\n    echo 'klee  ALL=(root) NOPASSWD: ALL' >> /etc/sudoers\nUSER klee\nWORKDIR /home/klee\n\n# Copy across source files needed for build\nRUN mkdir ${KLEE_SRC}\nADD / ${KLEE_SRC}\n\n# Set klee user to be owner\nRUN sudo chown --recursive klee: ${KLEE_SRC}\n\n# Create build directory\nRUN mkdir -p ${BUILD_DIR}\n\n# Build/Install SMT solvers (use TravisCI script)\nRUN cd ${BUILD_DIR} && ${KLEE_SRC}/.travis/solvers.sh\n\n# Install testing utils (use TravisCI script)\nRUN cd ${BUILD_DIR} && mkdir test-utils && cd test-utils && \\\n    ${KLEE_SRC}/.travis/testing-utils.sh\n\n# FIXME: All these hacks need to be removed. Once we no longer\n# need to support KLEE's old build system they can be removed.\n\n# FIXME: This is a nasty hack so KLEE's configure and build finds\n# LLVM's headers file, libraries and tools\nRUN sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin && \\\n    sudo ln -s /usr/bin/llvm-config /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-config && \\\n    sudo ln -s /usr/bin/llvm-dis /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-dis && \\\n    sudo ln -s /usr/bin/llvm-as /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-as && \\\n    sudo ln -s /usr/bin/llvm-link /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-link && \\\n    sudo ln -s /usr/bin/llvm-ar /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-ar && \\\n    sudo ln -s /usr/bin/opt /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/opt && \\\n    sudo ln -s /usr/bin/lli /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/lli && \\\n    sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/include && \\\n    sudo ln -s /usr/include/llvm-${LLVM_VERSION}/llvm /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm && \\\n    sudo ln -s /usr/include/llvm-c-${LLVM_VERSION}/llvm-c /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm-c && \\\n    for static_lib in /usr/lib/llvm-${LLVM_VERSION}/lib/*.a ; do sudo ln -s ${static_lib} /usr/lib/`basename ${static_lib}`; done\n\n# FIXME: This is **really gross**. The Official Ubuntu LLVM packages don't ship\n# with ``FileCheck`` or the ``not`` tools so we have to hack building these\n# into KLEE's build system in order for the tests to pass\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] && ( cd ${KLEE_SRC}/tools && \\\n    for tool in FileCheck not; do \\\n        svn export \\\n        http://llvm.org/svn/llvm-project/llvm/branches/release_34/utils/${tool} ${tool} ; \\\n        sed -i 's/^USEDLIBS.*$/LINK_COMPONENTS = support/' ${tool}/Makefile; \\\n    done && \\\n    sed -i '0,/^PARALLEL_DIRS/a PARALLEL_DIRS += FileCheck not' Makefile ) || echo \"Skipping hack\"\n\n# FIXME: The current TravisCI script expects clang-${LLVM_VERSION} to exist\nRUN sudo ln -s /usr/bin/clang /usr/bin/clang-${LLVM_VERSION} && \\\n    sudo ln -s /usr/bin/clang++ /usr/bin/clang++-${LLVM_VERSION}\n\n# Build KLEE (use TravisCI script)\nRUN cd ${BUILD_DIR} && ${KLEE_SRC}/.travis/klee.sh\n\n# Revoke password-less sudo and Set up sudo access for the ``klee`` user so it\n# requires a password\nUSER root\nRUN mv /etc/sudoers.bak /etc/sudoers && \\\n    echo 'klee  ALL=(root) ALL' >> /etc/sudoers\nUSER klee\n\n# Add KLEE binary directory to PATH\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] && \\\n  (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/Release+Asserts/bin' >> /home/klee/.bashrc) || \\\n  (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/bin' >> /home/klee/.bashrc)\n\n# Link klee to /usr/bin so that it can be used by docker run\nUSER root\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] && \\\n  (for executable in ${BUILD_DIR}/klee/Release+Asserts/bin/* ; do ln -s ${executable} /usr/bin/`basename ${executable}`; done) || \\\n  (for executable in ${BUILD_DIR}/klee/bin/* ; do ln -s ${executable} /usr/bin/`basename ${executable}`; done)\n\n# Link klee to the libkleeRuntest library needed by docker run\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] && (ln -s ${BUILD_DIR}/klee/Release+Asserts/lib/libkleeRuntest.so /usr/lib/libkleeRuntest.so.1.0) || echo \"Skipping hack\"\nUSER klee\n"
    },
    {
        "filename": "d549c549d3e45b091b3e60191af898ab1983fd5f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG BUILD_FROM\nFROM $BUILD_FROM\n\n# File Author / Maintainer\nMAINTAINER Michael Hansen\n\nARG MAKE_THREADS=8\n\nCOPY etc/qemu-arm-static /usr/bin/\nCOPY etc/qemu-aarch64-static /usr/bin/\n\nCOPY download/openfst-1.6.2.tar.gz /\nCOPY download/opengrm-ngram-1.3.3.tar.gz /\nCOPY download/phonetisaurus-2019.tar.gz /\n\nRUN apt-get update &&  \\\n    apt-get install -y build-essential python3-dev checkinstall\n\nRUN cd / && tar -xf openfst-1.6.2.tar.gz && cd openfst-1.6.2/ && \\\n    ./configure --prefix=/build --enable-far --enable-static --enable-shared --enable-ngram-fsts && \\\n    make -j $MAKE_THREADS && \\\n    make install\n\nENV CPPFLAGS=-I/build/include\nENV LDFLAGS=-L/build/lib\n\nRUN cd / && tar -xf opengrm-ngram-1.3.3.tar.gz && cd opengrm-ngram-1.3.3/ && \\\n   ./configure --prefix=/build \\\n       --with-openfst-includes=/build/include \\\n       --with-openfst-libs=/build/lib && \\\n   make -j $MAKE_THREADS && \\\n   make install\n\nRUN cd / && tar -xf phonetisaurus-2019.tar.gz && cd phonetisaurus/ && \\\n    ./configure --prefix=/build \\\n       --with-openfst-includes=/build/include \\\n       --with-openfst-libs=/build/lib && \\\n    make -j $MAKE_THREADS && \\\n    make install"
    },
    {
        "filename": "d670d09320ca1790de4607842e785167976d148b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Start with Theano base image\nFROM kaixhin/theano\nMAINTAINER Kai Arulkumaran <design@kaixhin.com>\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n  libhdf5-dev \\\n  python-h5py \\\n  python-yaml\n\n# Clone Keras repo and move into it\nRUN cd /root && git clone https://github.com/fchollet/keras.git && cd keras && \\\n  # Install\n  python setup.py install\n\n# Set ~/keras as working directory\nWORKDIR /root/keras\n"
    },
    {
        "filename": "854a8f67e4612dcd8907282c99cbd53ca3fb3bbc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#markmandel/leinshell\n#\n# Shell for Clojure development, with Leiningen\n\nFROM java:jdk\nMAINTAINER Mark Mandel <mark.mandel@gmail.com>\n\nRUN apt-get update && \\\n    apt-get install -y zsh openssh-server\n\n#sshd setup - https://docs.docker.com/examples/running_ssh_service/\nRUN mkdir /var/run/sshd\nRUN echo 'root:pw' | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\nEXPOSE 22\n\n#lein installation\nENV LEIN_ROOT=1\nRUN cd /usr/local/bin/ && wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein && chmod +x ./lein\n\nRUN lein\n\nADD startup.sh /root/startup.sh\nRUN chmod +x /root/startup.sh\n\nRUN mkdir /project\nWORKDIR /project\n\n#port for web apps\nEXPOSE 8080"
    },
    {
        "filename": "855d34ca64c437841893d1ba0702677823254d4c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ocaml/opam:debian-stable_ocaml-4.03.0\nMAINTAINER canopy\nENV OPAMYES 1\nRUN sudo apt-get update\nRUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nRUN sudo apt-get install -yy nodejs\nRUN sudo npm install -g less browserify\nRUN cd /home/opam/opam-repository && git pull && opam update\nADD package.json README.md config.ml /src/\nWORKDIR /src\nADD tls /src/tls\nRUN sudo chown -R opam:opam /src; sudo chmod -R 700 /src\nENV TMP /tmp\nRUN opam install -y -j2 mirage\nCOPY . /src\nADD assets /src/assets\nRUN sudo chown -R opam:opam /src; sudo chmod -R 700 /src\nRUN opam config exec -- mirage configure\nRUN opam config exec -- make depend\nRUN opam config exec -- make\nRUN sudo mkdir /tmp/assets ; sudo chown opam:opam /tmp/assets ; ./populate.sh /tmp/assets\nEXPOSE 8080\nENTRYPOINT [\"opam\", \"config\", \"exec\", \"--\", \"./canopy\"]\n"
    },
    {
        "filename": "85f7b25da6ca1822695741fbf930a0a8c6f90cba.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#FROM ubuntu:16.04  \nFROM ubuntu:xenial  \n  \nMAINTAINER Christian Riedl <riedlc@gmail.com>  \n  \nRUN apt-get update && apt-get -y install openssl supervisor cron git  \nRUN cd /opt; git clone https://github.com/diafygi/acme-tiny.git  \n  \nADD usr/local/sbin /usr/local/sbin  \n  \nCMD run.sh  \n\n"
    },
    {
        "filename": "86314dfd1c57d2b4a2613448c731370de45e84de.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER Milo\u0161 Koz\u00e1k <milos.kozak@lejmr.com>\n\n# Suporting software versions\nARG IREDMAIL_VERSION=0.9.8\n\n# Default values changable at startup\nARG DOMAIN=DOMAIN\nARG HOSTNAME=HOSTNAME\n\n### Installation\n#\u00a0Prerequisites\nENV DEBIAN_FRONTEND noninteractive\nRUN echo \"APT::Install-Recommends 0;\" >> /etc/apt/apt.conf.d/01-no-recommends \\\n    && echo \"APT::Install-Suggests 0;\" >> /etc/apt/apt.conf.d/01-no-recommends \\\n    && apt-get -q update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y -q \\\n       apt-utils \\\n    && apt-get install -y -q \\\n       wget \\\n       bzip2 \\\n       iptables \\\n       openssl \\\n       mysql-server \\\n       netcat \\\n       memcached \\\n       tmpreaper \\\n    && apt-get autoremove -y -q \\\n    && apt-get clean -y -q\n\n# Install of iRedMail from sources\nWORKDIR /opt/iredmail\nRUN wget -O - https://bitbucket.org/zhb/iredmail/downloads/iRedMail-\"${IREDMAIL_VERSION}\".tar.bz2 | \\\n    tar xvj --strip-components=1\n\n# Generate configuration file\nCOPY ./config-gen /opt/iredmail/config-gen\nRUN sh ./config-gen HOSTNAME DOMAIN > ./config\nRUN mkdir /var/run/mysql && chown mysql:mysql /var/run/mysql \n\n# Initiate automatic installation process\nRUN sed s/$(hostname)/$HOSTNAME.$DOMAIN/ /etc/hosts > /tmp/hosts_ \\\n    && cat /tmp/hosts_ > /etc/hosts \\\n    && rm /tmp/hosts_ \\\n    && echo $HOSTNAME > /etc/hostname \\\n    && chown mysql:mysql -R /var/lib/mysql \\\n    && service mysql start \\\n    && IREDMAIL_DEBUG='NO' \\\n       IREDMAIL_HOSTNAME=\"HOSTNAME.DOMAIN\" \\\n       CHECK_NEW_IREDMAIL='NO' \\\n       AUTO_USE_EXISTING_CONFIG_FILE=y \\\n       AUTO_INSTALL_WITHOUT_CONFIRM=y \\\n       AUTO_CLEANUP_REMOVE_SENDMAIL=y \\\n       AUTO_CLEANUP_REMOVE_MOD_PYTHON=y \\\n       AUTO_CLEANUP_REPLACE_FIREWALL_RULES=n \\\n       AUTO_CLEANUP_RESTART_IPTABLES=n \\\n       AUTO_CLEANUP_REPLACE_MYSQL_CONFIG=y \\\n       AUTO_CLEANUP_RESTART_POSTFIX=n \\\n       bash iRedMail.sh \\\n    && apt-get autoremove -y -q \\\n    && apt-get clean -y -q\n\n### Final configuration\nRUN sed -i '/^Foreground /c Foreground true' /etc/clamav/clamd.conf \\\n    && sed -i '/init.d/c pkill -sighup clamd' /etc/logrotate.d/clamav-daemon \\\n    && sed -i '/^Foreground /c Foreground true' /etc/clamav/freshclam.conf \\\n    && sed -i 's/^bind-address/#bind-address/' /etc/mysql/mysql.conf.d/mysqld.cnf \\\n    && sed -i 's/SHOWWARNING[ \\t]*=.*/SHOWWARNING=false/g' /etc/tmpreaper.conf \\\n    && install -o amavis -g amavis -m 750 -d /var/lib/amavis/.spamassassin \\\n    && install -o amavis -g amavis -m 640 -T /usr/share/spamassassin/user_prefs.template /var/lib/amavis/.spamassassin/user_prefs \\\n    && rm -f /etc/ssl/private/iRedMail.key \\\n    && rm -f /etc/ssl/certs/iRedMail.crt \\\n    && rm -f /var/lib/dkim/DOMAIN.pem\n\n# Prepare for the first run\nRUN tar jcf /root/mysql.tar.bz2 /var/lib/mysql && rm -rf /var/lib/mysql \\\n    && tar jcf /root/vmail.tar.bz2 /var/vmail && rm -rf /var/vmail \\\n    && rm -rf /var/lib/clamav/*\n\nADD update.sh /sbin/update-iredmail\n\n\n###\u00a0Startup services\n# Core Services\nADD rc.local /etc/rc.local\nADD services/mysql.sh /etc/service/mysql/run\nADD services/postfix.sh /etc/service/postfix/run\nADD services/amavis.sh /etc/service/amavis/run\nADD services/iredapd.sh /etc/service/iredapd/run\nADD services/dovecot.sh /etc/service/dovecot/run\n\n# Frontend\nADD services/memcached.sh /etc/service/memcached/run\nADD services/sogo.sh /etc/service/sogo/run\nADD services/iredadmin.sh /etc/service/iredadmin/run\nADD services/php7-fpm.sh /etc/service/php7-fpm/run\nADD services/nginx.sh /etc/service/httpd/run\n\n# Enhancement\nADD services/fail2ban.sh /etc/service/fail2ban/run\nADD services/clamav-daemon.sh /etc/service/clamav-daemon/run\nADD services/clamav-freshclam.sh /etc/service/clamav-freshclam/run\nADD services/netdata.sh /etc/service/netdata/run\nADD services/mlmmjadmin.sh /etc/service/mlmmjadmin/run\n\n\n### Purge some packets and save disk space\nRUN apt-get purge -y -q dialog apt-utils augeas-tools \\\n    && apt-get autoremove -y -q \\\n    && apt-get clean -y -q \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Open Ports:\n# Apache: 80/tcp, 443/tcp Postfix: 25/tcp, 587/tcp\n# Dovecot: 110/tcp, 143/tcp, 993/tcp, 995/tcp\nEXPOSE 80 443 25 587 110 143 993 995\n\n# Default values changable at startup\nENV SOGO_WORKERS=2\nENV TZ=Etc/UTC\n"
    },
    {
        "filename": "864b0391729fd49a457b6f91cf145f48572b25dc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nENV DEBIAN_FRONTEND noninteractive\n\n#update\nRUN apt-get update --fix-missing && apt-get -y upgrade\n\n#system deps\nRUN apt-get install -y lib32z1 xinetd python python-pip libgmp3-dev\n\nRUN pip install numpy gmpy\n\n#create ctf-user\nRUN groupadd -r ctf && useradd -r -g ctf ctf\n\n#add chall items\nADD ctf.xinetd /etc/xinetd.d/ctf\nADD chall_init.sh /etc/chall_init.sh\nADD chall /home/ctf/chall\nADD redir.sh /home/ctf/redir.sh\nADD flag.py /home/ctf/flag.py\n\n#set some proper permissions\nRUN chown -R root:ctf /home/ctf\nRUN chmod 750 /home/ctf/chall\nRUN chmod 750 /home/ctf/redir.sh\nRUN chmod 750 /home/ctf/flag.py\nRUN chmod 700 /etc/chall_init.sh\n\nRUN service xinetd restart\n"
    },
    {
        "filename": "8651805850e344683867f1286839db48b5b93bd2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.19\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "867712ccc52d9c762bb45ad2806762fe59370eb7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for local Travis build test\n\nFROM ubuntu\nMAINTAINER Ian Blenke <ian@blenke.com>\n\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y cmake curl git ruby bundler wget unzip\nRUN gem install bundler travis --no-ri --no-rdoc\nRUN git clone --depth 1 https://github.com/travis-ci/travis-build ~/.travis/travis-build\nRUN bundle install --gemfile ~/.travis/travis-build/Gemfile\n\nADD . /tesseract\nWORKDIR /tesseract\n\nRUN travis compile | sed -e \"s/--branch\\\\\\=\\\\\\'\\\\\\'/--branch=master/g\" | bash\n"
    },
    {
        "filename": "868d0a2005fd84ac07ff74f792d0f581e05655a5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build Nginx Amplify Agent with N+ container\n# Based on Ubuntu 14.04\n############################################################\n\n# Set the base image to Ubuntu\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Mike Belov\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN apt-get update && apt-get install -y -q wget apt-transport-https \\\n && apt-get install -y -qq curl libcurl3 libcurl3-dev php5-curl && apt-get install -y -qq ca-certificates\n\n# Download certificate and key from the customer portal (https://cs.nginx.com)\n# and copy to the build context\nADD docker/test-plus/nginx-repo.crt /etc/ssl/nginx/\nADD docker/test-plus/nginx-repo.key /etc/ssl/nginx/\n\n# Get other files required for installation\nRUN wget -q -O - http://nginx.org/keys/nginx_signing.key | apt-key add -\nRUN wget -q -O /etc/apt/apt.conf.d/90nginx https://cs.nginx.com/static/files/90nginx\n\n# Install NGINX Plus and  basic applications\nRUN printf \"deb https://plus-pkgs.nginx.com/ubuntu `lsb_release -cs` nginx-plus\\n\" >/etc/apt/sources.list.d/nginx-plus.list \\\n && apt-get update \\\n && apt-get install -y nginx-plus \\\n && apt-get install -y --fix-missing tar curl nano wget dialog net-tools build-essential \\\n && cp /usr/sbin/nginx /usr/sbin/nginx2\n\n# Instal mysql and prepare init file\nRUN groupadd -r mysql && useradd -r -g mysql mysql\nRUN apt-get update && apt-get install -y mysql-server-5.5\nRUN echo \"SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');\" > /mysql.init\nRUN echo \"CREATE USER 'amplify-agent'@'localhost' IDENTIFIED BY 'amplify-agent';\" >> /mysql.init\n\n# Install php-fpm and configure\nRUN rm -rf /run \\\n && mkdir /run \\\n && apt-get update \\\n && apt-get install -y php5-fpm \\\n && mkdir /run/php/\n\n# add fastcgi_params and php-fpm.conf for nginx\nADD docker/test-plus/fastcgi_params /etc/nginx/fastcgi_params\nADD docker/test-plus/php-fpm.conf /etc/nginx/conf.d/php-fpm.conf\n# overwrite default www.conf for php5.0-fpm and add second one\nADD docker/test-plus/php-fpm-www.conf /etc/php5/fpm/pool.d/www.conf\nADD docker/test-plus/php-fpm-www2.conf /etc/php5/fpm/pool.d/www2.conf\n# add test .php file to /var/www/php-fpm root\nADD docker/test-plus/test.php /var/www/php-fpm/test.php\n\n# Install Python and Basic Python Tools\nRUN apt-get update \\\n && apt-get install -y python python-dev python-distribute \\\n && curl https://bootstrap.pypa.io/get-pip.py | python - 'pip==18.1.0' \\\n && pip install supervisor\n\n# Copy the application folder inside the container\n#ADD . /amplify\nADD docker/test-plus/requirements.txt /etc/naas/requirements.txt\n\n# Install agent requirements:\nRUN pip install -I -r /etc/naas/requirements.txt\n\n# Install test requirements\nRUN pip install \\\n    pytest \\\n    pytest-xdist \\\n    pyhamcrest \\\n    requests_mock \\\n    timeout-decorator \\\n    freezegun \\\n    mock\n\nENV AMPLIFY_ENVIRONMENT testing\nENV PYTHONPATH /amplify\nENV PYTEST_ADDOPTS \"--ignore=test/unit/ext/controller\"\n\n# Set the default directory where CMD will execute\nWORKDIR /amplify\n\n# add config\nADD docker/test-plus/nginx.conf /etc/nginx/nginx.conf\nADD docker/test-plus/nginx2.conf /etc/nginx/nginx2.conf\nADD docker/test-plus/nginx_bad_status.conf /etc/nginx/nginx_bad_status.conf\nADD docker/test-plus/nginx_syslog.conf /etc/nginx/nginx_syslog.conf\nADD docker/test-plus/supervisord.conf /etc/supervisord.conf\nADD docker/test-plus/nginx_no_logs.conf /etc/nginx/nginx_no_logs.conf\n\n# add ssl\nADD docker/test-plus/amplify-agent-test.crt /etc/nginx/certs.d/amplify-agent-test.crt\nADD docker/test-plus/amplify-agent-test.key /etc/nginx/certs.d/amplify-agent-test.key\n\nRUN usermod -d /var/lib/mysql/ mysql\n\nCMD bash\n"
    },
    {
        "filename": "86dc6c8a7c0eb1f102e8ff0e4b833a3ce5e9e22b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM digitalrebar/deploy-service-wrapper\nMAINTAINER Victor Lowther <victor@rackn.com>\n\nENV SERVICE_NAME provisioner\nENV TFTPROOT /tftpboot\nENV WEBPORT 8091\nENV APIPORT 8092\nENV TFTPPORT 69\n\nARG DR_TAG\n# Get packages\nADD http://localhost:28569/${DR_TAG}/linux/amd64/provisioner-mgmt /usr/local/bin/\nADD http://localhost:28569/${DR_TAG}/linux/amd64/sign-it /usr/local/bin/\nADD https://s3-us-west-2.amazonaws.com/rackn-busybox/busybox /tmp/busybox\nADD http://boot.ipxe.org/ipxe.efi /tmp/ipxe.efi\nADD http://boot.ipxe.org/ipxe.pxe /tmp/ipxe.pxe\nADD https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 /tmp/jq\nRUN cd /tmp \\\n    && curl -fgL http://downloads.sourceforge.net/project/elilo/elilo/elilo-3.16/elilo-3.16-all.tar.gz -o /tmp/elilo.tar.gz \\\n    && curl -fgL https://s3.amazonaws.com/rackn-sledgehammer/provisioner/syslinux-6.03.tar.xz -o /tmp/syslinux-6.03.tar.xz \\\n    && curl -fgL https://s3.amazonaws.com/rackn-sledgehammer/provisioner/syslinux-3.86.tar.xz -o /tmp/syslinux-3.86.tar.xz \\\n    && curl -fgL https://git.ipxe.org/releases/wimboot/wimboot-2.5.2.tar.bz2 -o /tmp/wimboot-2.5.2.tar.bz2 \\\n    && curl -fgL https://rubygems.org/downloads/cstruct-1.0.1.gem -o /tmp/cstruct-1.0.1.gem\nCOPY entrypoint.d/*.sh /usr/local/entrypoint.d/\nCOPY start-up.sh udhcpc_config stage1_init /tmp/\nCOPY explode_iso.sh /\n\nRUN mkdir -p /opt/provisioner-mgmt\n\nRUN chmod 755 /usr/local/bin/*\n\n# Set our command\nENTRYPOINT [\"/sbin/docker-entrypoint.sh\"]\n\nRUN apt-get -y update \\\n    && apt-get -y install bsdtar createrepo xz-utils unzip bsdmainutils p7zip-full samba \\\n    && apt-get -y purge make build-essential\n\nCOPY smb.conf /etc/samba/smb.conf\n"
    },
    {
        "filename": "87542416a5575354f4bed6f4221d1ec141093b0b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\n    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,\n    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346\n\nRUN sed -i \"s/httpredir.debian.org/debian.uchicago.edu/\" /etc/apt/sources.list && \\\n    apt-get update && apt-get install -y build-essential python-pip apt-utils git cmake && \\\n    pip install pandas numpy scipy && \\\n    cd /usr/local/src && \\\n    pip install tensorflow && \\\n\n    cd /usr/local/src && mkdir xgboost && cd xgboost && \\\n    git clone --depth 1 --recursive https://github.com/dmlc/xgboost.git && cd xgboost && \\\n    make && cd python-package && python setup.py install && \\\n\n    apt-get autoremove -y && apt-get clean\n\nRUN pip install --upgrade pip\nRUN pip install --upgrade numpy dill h5py scikit-learn scipy python-dateutil pandas pathos keras coveralls nose lightgbm tabulate imblearn sklearn-deap2 catboost\n\n# To update this image and upload it:\n# Build the image (docker build .), and give it two separate tags (latest, and a version number)\n# docker build --no-cache -t climbsrocks/auto_ml_tests:0.0.10 -t climbsrocks/auto_ml_tests:latest .\n# docker push climbsrocks/auto_ml_tests:latest\n# docker push climbsrocks/auto_ml_tests:0.0.10\n"
    },
    {
        "filename": "879d1165fcc1a32cccc52439420e9d79c8c94ce6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# https://github.com/yeasy/docker-hyperledger-fabric\n#\n# Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * chaintools\n# * gotools\n\n# If you only need quickly deploy a fabric network, please see\n# * yeasy/hyperledger-fabric-peer\n# * yeasy/hyperledger-fabric-orderer\n# * yeasy/hyperledger-fabric-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/db and /var/hyperledger/production\n\nFROM golang:1.10\nLABEL maintainer \"Baohua Yang <yangbaohua@gmail.com>\"\n\n# fabric-orderer\nEXPOSE 7050\n# fabric-peers\nEXPOSE 7051 7052 7053\n# fabric-ca-server RESTful\nEXPOSE 7054\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\nENV CHAINTOOL_VERSION=1.1.1\n\n# Architecture of the node\nENV ARCH=amd64\n# version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=0.4.10\n\n# BASE_VERSION is required in makefile as the base release number\nENV BASE_VERSION=1.2.0\n\n# version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n# PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=1.2.0\n\n# generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=hyperledger\n\n# for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE} \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n              -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger \\\n              -X github.com/hyperledger/fabric/common/metadata.Experimental=true \\\n\t\t\t\t\t\t\t-linkmode external -extldflags '-static -lpthread'\"\n\n# peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\n\n# peer env\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    CORE_LOGGING_LEVEL=DEBUG\n\n# orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=/root/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/db \\\n        /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n\t/chaincode/input \\\n        /chaincode/output \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install -y apt-utils python-dev \\\n        && apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install -y python-pip \\\n        && apt-get install -y vim tree jq unzip \\\n        && pip install --upgrade pip==9.0.1 \\\n        && pip install behave nose docker-compose \\\n        && pip install pyinotify \\\n        && rm -rf /var/cache/apt\n\n# Install chaintool\n#RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_VERSION}/hyperledger-fabric-chaintool-${CHAINTOOL_VERSION}.jar > /usr/local/bin/chaintool \\\n        && chmod a+x /usr/local/bin/chaintool\n\n# install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/kardianos/govendor \\\n        && go get github.com/golang/lint/golint \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get github.com/onsi/ginkgo/ginkgo \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/AlekSi/gocov-xml\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n        && unzip v${PROJECT_VERSION}.zip \\\n        && rm v${PROJECT_VERSION}.zip \\\n        && mv fabric-${PROJECT_VERSION} fabric \\\n        && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n\n# Install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n\n# Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n        && go install \\\n        && go clean\n\n# Install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n        && go clean\n\n# Install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n        && go clean\n\n#ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n    && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n    && unzip v${PROJECT_VERSION}.zip \\\n    && rm v${PROJECT_VERSION}.zip \\\n    && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n    # This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n    && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n    # Copy example ca and key files\n    && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n    && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/ /tmp/\n\n# Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n\n# Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION} \\\n      org.hyperledger.fabric.base.version=${BASEIMAGE_RELEASE}\n"
    },
    {
        "filename": "87d599cc716609d9b83f8bf4f2732ac9c8170714.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# w3af.org\n# https://github.com/andresriancho/w3af/tree/master/extras\n\nFROM ubuntu:12.04\nMAINTAINER Andres Riancho <andres.riancho@gmail.com>\n\n# Initial setup\nRUN mkdir /home/w3af\nWORKDIR /home/w3af\nENV HOME /home/w3af\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LOGNAME w3af\n# Squash errors about \"Falling back to ...\" during package installation\nENV TERM linux\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Update before installing any package\nRUN apt-get update -y\nRUN apt-get upgrade -y\nRUN apt-get dist-upgrade -y\n\n# Install basic and GUI requirements, python-lxml because it doesn't compile correctly from pip\nRUN apt-get install -y python-pip build-essential libxslt1-dev libxml2-dev libsqlite3-dev \\\n                       libyaml-dev openssh-server python-dev git python-lxml wget libssl-dev \\\n                       xdot python-gtk2 python-gtksourceview2 ubuntu-artwork dmz-cursor-theme \\\n                       ca-certificates libffi-dev\n\n# Add the w3af user\n# TODO - actually use the w3af user instead of running everything as root\nRUN useradd w3af\n\n# Get ssh package ready\nRUN mkdir /var/run/sshd\nRUN echo 'root:w3af' | chpasswd\nRUN mkdir /home/w3af/.ssh/\nRUN echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDjXxcHjyVkwHT+dSYwS3vxhQxZAit6uZAFhuzA/dQ2vFu6jmPk1ewMGIYVO5D7xV3fo7/RXeCARzqHl6drw18gaxDoBG3ERI6LxVspIQYjDt5Vsqd1Lv++Jzyp/wkXDdAdioLTJyOerw7SOmznxqDj1QMPCQni4yhrE+pYH4XKxNx5SwxZTPgQWnQS7dasY23bv55OPgztI6KJzZidMEzzJVKBXHy1Ru/jjhmWBghiXYU5RBDLDYyT8gAoWedYgzVDmMZelLR6Y6ggNLOtMGiGYfPWDUz9Z6iDAUsOQBtCJy8Sj8RwSQNpmOgSzBanqnhed14hLwdYhnKWcPNMry71 w3af@w3af-docker.org' > /home/w3af/.ssh/w3af-docker.pub\nRUN mkdir -p /root/.ssh/\nRUN cat /home/w3af/.ssh/w3af-docker.pub >> /root/.ssh/authorized_keys\n\n# Get and install pip\nRUN pip install --upgrade pip\n\n#\n# We install some pip packages before adding the code in order to better leverage\n# the docker cache\n#\n# Leave one library without install, so w3af_dependency_install is actually\n# created and we can run the next commands without if statements\n#\n#tblib==0.2.0\n#\nRUN pip install clamd==1.0.1 PyGithub==1.21.0 GitPython==0.3.2.RC1 pybloomfiltermmap==0.3.14 \\\n        esmre==0.3.1 phply==0.9.1 nltk==3.0.1 chardet==2.1.1 pdfminer==20140328 \\\n        futures==2.1.5 pyOpenSSL==0.15.1 scapy-real==2.2.0-dev guess-language==0.2 cluster==1.1.1b3 \\\n        msgpack-python==0.4.4 python-ntlm==1.0.1 halberd==0.2.4 darts.util.lru==0.5 \\\n        ndg-httpsclient==0.3.3 pyasn1==0.1.7 Jinja2==2.7.3 \\\n        vulndb==0.0.17 markdown==2.6.1 psutil==2.2.1 mitmproxy==0.12.1 \\\n        ruamel.ordereddict==0.4.8 Flask==0.10.1 PyYAML==3.11\n\n# Install w3af\nADD . /home/w3af/w3af\nWORKDIR /home/w3af/w3af\nRUN ./w3af_console ; true\n\n# Change the install script to add the -y and not require input\nRUN sed 's/sudo //g' -i /tmp/w3af_dependency_install.sh\nRUN sed 's/apt-get/apt-get -y/g' -i /tmp/w3af_dependency_install.sh\nRUN sed 's/pip install/pip install --upgrade/g' -i /tmp/w3af_dependency_install.sh\n\n# Run the dependency installer\nRUN /tmp/w3af_dependency_install.sh\n\n# Run the dependency installer\nRUN ./w3af_gui ; true\nRUN sed 's/sudo //g' -i /tmp/w3af_dependency_install.sh\nRUN sed 's/apt-get/apt-get -y/g' -i /tmp/w3af_dependency_install.sh\nRUN sed 's/pip install/pip install --upgrade/g' -i /tmp/w3af_dependency_install.sh\nRUN /tmp/w3af_dependency_install.sh\n\n# Compile the py files into pyc in order to speed-up w3af's start\nRUN python -m compileall -q .\n\n# Cleanup to make the image smaller\nRUN rm /tmp/w3af_dependency_install.sh\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/*\nRUN rm -rf /tmp/pip-build-root\n\nEXPOSE 22 44444\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n"
    },
    {
        "filename": "87d88dffd658b5b9f6ecd4f57d567c6596417082.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for RNASeQC\nFROM ubuntu:16.04\nMAINTAINER Aaron Graubert\n\nRUN apt-get update && apt-get install -y software-properties-common && \\\n    apt-get update && apt-get install -y \\\n        build-essential \\\n        cmake \\\n        git \\\n        python3 \\\n        python3-pip \\\n        libboost-filesystem-dev \\\n        libboost-regex-dev \\\n        libboost-system-dev \\\n        libbz2-dev \\\n        libcurl3-dev \\\n        liblzma-dev \\\n        libpthread-stubs0-dev \\\n        wget \\\n        zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# SeqLib\nCOPY Makefile /opt/rnaseqc/Makefile\nRUN cd /opt/rnaseqc && git clone --recursive https://github.com/walaj/SeqLib.git && \\\n    cd SeqLib && git checkout 7e1f98267b5057f9505dbff119308137a0e006db && cd .. && \\\n    make SeqLib/lib/libseqlib.a\n\n# python\nRUN cd /opt && git clone https://github.com/francois-a/rnaseq-utils rnaseq && cd rnaseq && \\\n  git checkout f1c6a5677bbca465ea1edd06c2293a5d1078a18b && python3 -m pip install --upgrade pip setuptools && \\\n  python3 -m pip install numpy && python3 -m pip install pandas matplotlib scipy pyBigWig bx-python \\\n  agutil nbformat seaborn sklearn && mkdir -p /root/.config/matplotlib && echo \"backend\t:\tAgg\" > /root/.config/matplotlib/matplotlibrc\nENV PYTHONPATH $PYTHONPATH:/opt/\n\n#RNASeQC\nCOPY src /opt/rnaseqc/src\nCOPY python /scripts\nCOPY args.hxx /opt/rnaseqc\nCOPY bioio.hpp /opt/rnaseqc\nRUN cd /opt/rnaseqc && make && ln -s /opt/rnaseqc/rnaseqc /usr/local/bin/rnaseqc && make clean\n\n# clean up\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    apt-get autoclean && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/{apt,dpkg,cache,log}/\n"
    },
    {
        "filename": "87fc7384550a9c615bef124623f1b18bb4ed6787.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\nMAINTAINER Shalin Patel \"<spatel@apigee.com>\"\n\n\n# Install InfluxDB\nENV INFLUXDB_VERSION 0.10.0-1\n\nRUN apt-get update && apt-get install -y curl && mkdir /app && curl -s -o /app/influxdb_latest_amd64.deb https://s3.amazonaws.com/influxdb/influxdb_${INFLUXDB_VERSION}_amd64.deb && \\\n  dpkg -i /app/influxdb_latest_amd64.deb && \\\n  rm /app/influxdb_latest_amd64.deb\n\nENV PATH=/opt/influxdb:$PATH\n\nADD config.toml /etc/influxdb.toml\n\nCOPY influxconfig /app/influxconfig\nCOPY run.sh /app/run.sh\n\n# admin, http, udp, cluster, graphite, opentsdb, collectd\nEXPOSE 8083 8086 8086/udp 8088 8091 2003 4242 25826\n\nVOLUME [\"/data\"]\n\n#ENTRYPOINT [\"influxd\", \"--config\", \"/etc/influxdb.toml\"]\nRUN chmod 755 /app/run.sh\nENTRYPOINT [\"/app/run.sh\"]"
    },
    {
        "filename": "880c2b454139a732647796ea25d4077256f3d2c8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG IMAGE=arm32v7/debian:stretch-slim\n\nFROM $IMAGE as builder\n\nMAINTAINER datarhei <info@datarhei.org>\n\nARG LAME_VERSION=3.100\nARG X264_VERSION=20190409-2245-stable\nARG X265_VERSION=3.0\nARG FFMPEG_VERSION=4.1.3\nARG NGINX_VERSION=1.14.2\nARG NGINXRTMP_VERSION=1.2.1\nARG NODE_VERSION=10.15.3\n\nENV SRC=\"/usr/local/\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\"\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        pkg-config \\\n        curl \\\n        libpcre3-dev \\\n        libtool \\\n        libssl-dev \\\n        zlib1g-dev \\\n        libasound2-dev \\\n        build-essential\n\n# x264\nRUN mkdir -p /dist && cd /dist && \\\n    curl -OL \"http://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2\" && \\\n    tar -xvj -f x264-snapshot-${X264_VERSION}.tar.bz2 && \\\n    cd x264-snapshot-${X264_VERSION} && \\\n    ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared && \\\n    make -j$(nproc) && \\\n    make install\n\n# libmp3lame\nRUN mkdir -p /dist && cd /dist && \\\n    curl -OL \"https://kent.dl.sourceforge.net/project/lame/lame/${LAME_VERSION}/lame-${LAME_VERSION}.tar.gz\" && \\\n    tar -xvz -f lame-${LAME_VERSION}.tar.gz && \\\n    cd lame-${LAME_VERSION} && \\\n    ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static && \\\n    make -j$(nproc) && \\\n    make install\n\n# ffmpeg && patch\nCOPY ./contrib/ffmpeg /dist/restreamer/contrib/ffmpeg\n\nRUN mkdir -p /dist && cd /dist && \\\n    curl -OL \"https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz\" && \\\n    tar -xvz -f ffmpeg-${FFMPEG_VERSION}.tar.gz && \\\n    cd ffmpeg-${FFMPEG_VERSION} && \\\n    patch -p1 < /dist/restreamer/contrib/ffmpeg/bitrate.patch && \\\n    ./configure \\\n        --bindir=\"${SRC}/bin\" \\\n        --extra-cflags=\"-I${SRC}/include\" \\\n        --extra-ldflags=\"-L${SRC}/lib\" \\\n        --prefix=\"${SRC}\" \\\n        --enable-nonfree \\\n        --enable-gpl \\\n        --enable-version3 \\\n        --enable-libmp3lame \\\n        --enable-libx264 \\\n        --enable-openssl \\\n        --enable-postproc \\\n        --enable-small \\\n        --enable-static \\\n        --disable-debug \\\n        --disable-doc \\\n        --disable-shared && \\\n    make -j$(nproc) && \\\n    make install\n\n# nginx-rtmp\nRUN mkdir -p /dist && cd /dist && \\\n    curl -OL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" && \\\n    tar -xvz -f \"nginx-${NGINX_VERSION}.tar.gz\" && \\\n    curl -OL \"https://github.com/arut/nginx-rtmp-module/archive/v${NGINXRTMP_VERSION}.tar.gz\" && \\\n    tar -xvz -f \"v${NGINXRTMP_VERSION}.tar.gz\" && \\\n    cd nginx-${NGINX_VERSION} && \\\n    ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --add-module=/dist/nginx-rtmp-module-${NGINXRTMP_VERSION} && \\\n    make -j$(nproc) && \\\n    make install\n\n# node.js\nRUN mkdir -p /dist && cd /dist && \\\n    curl -OL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-armv7l.tar.xz\" && \\\n    tar -xvJ -f \"node-v${NODE_VERSION}-linux-armv7l.tar.xz\" && \\\n    cd node-v${NODE_VERSION}-linux-armv7l && \\\n    cp -R bin /usr/local && \\\n    cp -R lib /usr/local\n\nRUN rm -r /dist && \\\n    apt-get remove -y \\\n        pkg-config \\\n        curl \\\n        libpcre3-dev \\\n        libtool \\\n        libssl-dev \\\n        zlib1g-dev \\\n        build-essential && \\\n    apt autoremove -y\n\nFROM $IMAGE\n\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /usr/local/nginx /usr/local/nginx\nCOPY --from=builder /usr/local/lib /usr/local/lib\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        ca-certificates \\\n        git \\\n        procps \\\n        libpcre3 \\\n        openssl \\\n        libssl1.1 \\\n        zlib1g \\\n        v4l-utils \\\n        libv4l-0 \\\n        alsa-utils\n\nCOPY . /restreamer\nWORKDIR /restreamer\n\nRUN cd /restreamer && \\\n    npm install -g grunt-cli nodemon eslint && \\\n    npm install && \\\n    grunt build && \\\n    npm prune --production && \\\n    npm cache verify && \\\n    npm uninstall -g grunt-cli nodemon eslint && \\\n    npm prune --production && \\\n    apt-get remove -y \\\n        git \\\n        curl && \\\n    apt autoremove -y\n\nEXPOSE 8080\nEXPOSE 8181\n\nVOLUME [\"/restreamer/db\"]\n\nCMD [\"./run.sh\"]\n"
    },
    {
        "filename": "8811cf6c6adfa3d431b5d4a0f5716d64ff97c14b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# in production this should probably be busybox, but let's use ubuntu for a\n# fair comparison \nFROM tutum/ubuntu-saucy\n\nMAINTAINER Wes Felter, wmf@us.ibm.com\n\nRUN apt-get -qq install -y fio\n\nADD test.fio /\n\nVOLUME [\"/ferrari\"]\nENTRYPOINT [\"fio\"]\n# CMD [] works around a bug in old versions of Docker\nCMD []\n"
    },
    {
        "filename": "886510d98717b72f3e9ea476a7961acfe5dfe651.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM coinvault/client-base:latest\n\nMAINTAINER Dan Gershony - CoinVault <dan@coinvault.io>\n\n# dependencies required to run the daemon\nRUN apt-get update \\\n\t&& apt-get install -y git \\\n\t&& apt-get install -y build-essential libtool autotools-dev automake \\ \n\t&& apt-get install -y pkg-config libssl-dev libevent-dev bsdmainutils \\\n\t&& apt-get install -y libboost-all-dev \n\t#&& apt-get install -y libcurl3-dev \\\n\t#&& apt-get install -y libzip-dev\n\n# get\nRUN apt-get update \\\n    && cd ~ \\\n\t&& git clone https://github.com/argentumproject/argentum.git\n\n# build\nRUN\tcd ~/argentum \\\n\t&& ./autogen.sh \\\n\t&& ./configure --disable-wallet --without-gui --without-miniupnpc \\\n\t&& make\n\n# install\nRUN cd ~/argentum/src \\\n    && strip argentumd \\\n\t&& install -m 755 argentumd /usr/local/bin  \n\n# clean\nRUN apt-get purge -y --auto-remove git \\\n  && rm -r ~/argentum"
    },
    {
        "filename": "88a44d068ba1d407be9848c0f920550afd2224da.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# MySQL Server\n#\n# VERSION               0.0.1\n\nFROM     base\nMAINTAINER Prabhat Khera \"prabhat.khera@gmail.com\"\n\n\n# Keep upstart from complaining\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -s /bin/true /sbin/initctl\n\nRUN apt-get update\n\n# Bundle everything\nADD . /src\n\n# Install MySQL server\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Fix configuration\nRUN sed -i -e\"s/^bind-address\\s*=\\s*127.0.0.1/bind-address = 0.0.0.0/\" /etc/mysql/my.cnf\n\n# Setup admin user\nRUN /src/mysql-setup.sh\n\nEXPOSE 3306\nCMD [\"/src/start.sh\"]\n"
    },
    {
        "filename": "88a7c7d73156682cf558a988b694f83343e6fcb0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM rounds/10m-python\nMAINTAINER Aviv Laufer\n\n\nRUN apt-get update && \\\n  apt-get install -y  git\n\n\nRUN cd /root/ && git clone https://github.com/rounds/py-ssj.git\nRUN cd /root/py-ssj && pip install -r requirements.txt\n\nCMD cd /root/py-ssj && python py-ssj.py\n"
    },
    {
        "filename": "88b2a8ed81015f141f939986d9aec7be445d661f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian\n\nMAINTAINER alan.zimm@gmail.com\n\nENV DEBIAN_FRONTEND noninteractive\n\n####### GHC 7.6.3 ######################\nRUN apt-get update\nRUN apt-get install -y wget\nRUN apt-get install -y bzip2\nRUN apt-get install -y libgmp-dev\n\nRUN wget http://www.haskell.org/ghc/dist/7.6.3/ghc-7.6.3-x86_64-unknown-linux.tar.bz2\n\nRUN tar xvfj ghc-7.6.3-x86_64-unknown-linux.tar.bz2\n\nRUN ln -s /usr/lib/x86_64-linux-gnu/libgmp.so /usr/lib/x86_64-linux-gnu/libgmp.so.3\n\nRUN apt-get install -y libncursesw5 gcc apt-utils\nRUN apt-get install -y make\n\nRUN cd ghc-7.6.3 && ./configure\nRUN cd ghc-7.6.3 && make install\n\n##### haskell platform 2013.2.0.0 #################\n\nRUN wget http://www.haskell.org/platform/download/2013.2.0.0/haskell-platform-2013.2.0.0.tar.gz\n\nRUN tar xvfz haskell-platform-2013.2.0.0.tar.gz\n\nRUN apt-get install -y zlib1g-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev\n\nRUN apt-get install -y libglc-dev libedit-dev libglw1-mesa libglw1-mesa-dev\n# RUN apt-get install -y zlib1g-dev\n\n\nRUN cd haskell-platform-2013.2.0.0 && ./configure\nRUN cd haskell-platform-2013.2.0.0 && make\nRUN cd haskell-platform-2013.2.0.0 && make install\n\n\n# Note: to debug the partial build do the following\n# docker run -i -t alanz/haskell-platform-2013.2.0.0-64 /bin/bash\n"
    },
    {
        "filename": "88f8587e0e2cba79fe6b05c564e16d5b1a87e2c0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM therealwardo/python-2.7-pip\nMAINTAINER \"David Jay <davidgljay@gmail.com>\"\n\nRUN apt-get update\nRUN pip install mkdocs\nRUN pip install mkdocs-cinder\nRUN pip install mkdocs-material\nRUN apt-get install wget\nWORKDIR /s3cmd\nRUN wget http://ufpr.dl.sourceforge.net/project/s3tools/s3cmd/1.6.1/s3cmd-1.6.1.tar.gz\nRUN tar xzf s3cmd-1.6.1.tar.gz\nWORKDIR /s3cmd/s3cmd-1.6.1\nRUN python setup.py install\nRUN apt-get install git -y\nWORKDIR /usr/docs\n\n\nCMD bash\n"
    },
    {
        "filename": "8952f02a3248e29fed27ce00f645cc13f294a043.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com, yihao.peng@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.9.22\nMAINTAINER YihaoPeng <yihao.peng@bitmain.com>\n\nENV HOME /root\nENV TERM xterm\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\nADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update\nRUN apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils yasm\nRUN apt-get install -y libboost-all-dev libzmq3-dev curl wget unzip git\n\n# build bitcoind\nRUN mkdir ~/source\nRUN cd ~/source && git clone -b v0.18.4-reorgsafe --depth 1 https://github.com/btccom/bitcoin-abc-1.git\nRUN cd ~/source \\\n  && cd bitcoin-abc-1 \\\n  && ./autogen.sh \\\n  && ./configure --disable-wallet --disable-tests \\\n  #&& make && make install\n  && make -j$(nproc) && make install\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n\n#service for testnet\n#RUN mkdir        /etc/service/bitcoind_testnet\n#ADD run_testnet /etc/service/bitcoind_testnet/run\n#RUN chmod +x     /etc/service/bitcoind_testnet/run\n"
    },
    {
        "filename": "89c27ad39b14d3ef9444fad072d7b50b33f73025.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\n# General Installation\nRUN apt-get update && apt-get install -y python-pip python-dev git wget libmysqlclient-dev build-essential libssl-dev libffi-dev python-dev rsyslog mysql-client\nRUN pip install virtualenv\n\n# Configure Rsyslog and Provision DB\nRUN echo 'local0.*    @@docker-kibana:514' > /etc/rsyslog.d/60-neutron.conf\nRUN echo \"service rsyslog restart\" > ~/entrypoint.sh\nRUN echo 'mysql -h docker-mysql -u root -e \"CREATE DATABASE neutron\"'  >> ~/entrypoint.sh\n\n# Update setuptools\nRUN wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n\n# Make our directories\nRUN mkdir /opt/configs /opt/neutron /opt/quark /opt/venv /opt/wafflehaus /opt/wafflehaus.neutron /var/log/neutron\nRUN cd /opt/venv && virtualenv . --distribute\n\n# Clone Neutron & Wafflehaus\n# NOTE(alexm): enable this after quark is up to date with upstream neutron\n# RUN git clone https://github.com/openstack/neutron /opt/neutron\nRUN git clone https://github.com/roaet/wafflehaus.git /opt/wafflehaus\nRUN git clone https://github.com/roaet/wafflehaus.neutron /opt/wafflehaus.neutron\n\n# NOTE(alexm): enable this when quark is caught up to upstream neutron\n# Pull Neutron and Install\n# RUN echo \"cd /opt/neutron && git pull\" >> ~/entrypoint.sh\n# RUN echo \"source /opt/venv/bin/activate && pip install -U -r /opt/neutron/requirements.txt\" >> ~/entrypoint.sh\n# RUN echo \"cd /opt/neutron && source /opt/venv/bin/activate && python setup.py develop\" >> ~/entrypoint.sh\n\n# NOTE(alexm): remove this when quark is caught up to upstream neutron\n# Install Neutron\nRUN echo \"source /opt/venv/bin/activate && pip install -U http://tarballs.openstack.org/neutron/neutron-10.0.1.tar.gz#egg=neutron\" >> ~/entrypoint.sh\n\n# Install Quark\nRUN echo \"source /opt/venv/bin/activate && pip install -U -r /opt/quark/requirements.txt\" >> ~/entrypoint.sh\nRUN echo \"cd /opt/quark && source /opt/venv/bin/activate && python setup.py develop\" >> ~/entrypoint.sh\n\n# Install Wafflehaus\nRUN echo \"cd /opt/wafflehaus && git pull\" >> ~/entrypoint.sh\nRUN echo \"source /opt/venv/bin/activate && pip install -U -r /opt/wafflehaus/requirements.txt\" >> ~/entrypoint.sh\nRUN echo \"cd /opt/wafflehaus && source /opt/venv/bin/activate && python setup.py develop\" >> ~/entrypoint.sh\n\n# Install Wafflehaus.Neutron\nRUN echo \"cd /opt/wafflehaus.neutron && git pull\" >> ~/entrypoint.sh\nRUN echo \"source /opt/venv/bin/activate && pip install -U -r /opt/wafflehaus.neutron/requirements.txt\" >> ~/entrypoint.sh\nRUN echo \"cd /opt/wafflehaus.neutron && source /opt/venv/bin/activate && python setup.py develop\" >> ~/entrypoint.sh\n\n# Install debug tools\nRUN echo \"source /opt/venv/bin/activate && pip install -U ipdb\" >> ~/entrypoint.sh\n\n# Put configuration files in place and start Neutron\nRUN echo \"cp /opt/quark/docker.neutron.conf ~/neutron.conf\" >> ~/entrypoint.sh\nRUN echo \"cp /opt/quark/docker.apipaste.ini ~/api-paste.ini\" >> ~/entrypoint.sh\nRUN echo \"cp /opt/quark/docker.policy.json ~/policy.json\" >> ~/entrypoint.sh\n# NOTE(alexm): enable this after quark is up to date with upstream neutron\n# RUN echo \"cp /opt/configs/* ~/\" >> ~/entrypoint.sh\n\nRUN echo \"source /opt/venv/bin/activate && quark-db-manage --config-file ~/neutron.conf upgrade head\"  >> ~/entrypoint.sh\nRUN echo \"source /opt/venv/bin/activate && neutron-server --config-file ~/neutron.conf\"  >> ~/entrypoint.sh\n\nRUN chmod +x ~/entrypoint.sh\n\nEXPOSE 9696\n\nENTRYPOINT [\"/bin/bash\", \"-c\", \"~/entrypoint.sh\"]\n"
    },
    {
        "filename": "89d1632e0da93c77f47d28b39761a1c0b06f8904.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \n  \n#Autor  \nMAINTAINER Cesar Albusac Jorge <cesypozo@gmail.com>  \n  \n#Actualizar Sistema Base  \nRUN apt-get -y update  \n  \n#Descargar aplicacion  \nRUN apt-get install -y git  \nRUN git clone https://github.com/cesar2/Tripbot.git  \n  \n#Instalar Python y mongodb  \nRUN apt-get -y install mongodb  \n  \nRUN apt-get install -y python-setuptools  \nRUN apt-get -y install python-dev  \nRUN apt-get -y install build-essential  \nRUN apt-get -y install python-psycopg2  \nRUN apt-get -y install libpq-dev  \nRUN easy_install pip  \nRUN pip install --upgrade pip  \n  \n\n"
    },
    {
        "filename": "8a9794583aeb2cd8f1246208770b3f44aa994dae.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER tobilg <tobilg@gmail.com>\n\n# Add R list\nRUN echo 'deb http://cran.rstudio.com/bin/linux/ubuntu trusty/' | sudo tee -a /etc/apt/sources.list.d/r.list && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\n\n# packages\nRUN apt-get update && apt-get install -yq --no-install-recommends --force-yes \\\n    wget \\\n    git \\\n    openjdk-7-jdk \\\n    maven \\\n    libjansi-java \\\n    libsvn1 \\\n    libcurl3 \\\n    libsasl2-modules && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Overall ENV vars\nENV SPARK_VERSION 1.6.1\nENV MESOS_BUILD_VERSION 0.28.0-2.0.16\nENV LIVY_BUILD_VERSION livy-server-0.3.0-SNAPSHOT\n\n# Set install path for Livy\nENV LIVY_APP_PATH /apps/$LIVY_BUILD_VERSION\n\n# Set build path for Livy\nENV LIVY_BUILD_PATH /apps/build/livy\n\n# Set Hadoop config directory\nENV HADOOP_CONF_DIR /etc/hadoop/conf\n\n# Set Spark home directory\nENV SPARK_HOME /usr/local/spark\n\n# Set native Mesos library path\nENV MESOS_NATIVE_JAVA_LIBRARY /usr/local/lib/libmesos.so\n\n# Mesos install\nRUN wget http://repos.mesosphere.com/ubuntu/pool/main/m/mesos/mesos_$MESOS_BUILD_VERSION.ubuntu1404_amd64.deb && \\\n    dpkg -i mesos_$MESOS_BUILD_VERSION.ubuntu1404_amd64.deb && \\\n    rm mesos_$MESOS_BUILD_VERSION.ubuntu1404_amd64.deb\n\n# Spark ENV vars\nENV SPARK_VERSION_STRING spark-$SPARK_VERSION-bin-hadoop2.6\nENV SPARK_DOWNLOAD_URL http://d3kbcqa49mib13.cloudfront.net/$SPARK_VERSION_STRING.tgz\n\n# Download and unzip Spark\nRUN wget $SPARK_DOWNLOAD_URL && \\\n    mkdir -p $SPARK_HOME && \\\n    tar xvf $SPARK_VERSION_STRING.tgz -C /tmp && \\\n    cp -rf /tmp/$SPARK_VERSION_STRING/* $SPARK_HOME && \\\n    rm -rf -- /tmp/$SPARK_VERSION_STRING && \\\n    rm spark-$SPARK_VERSION-bin-hadoop2.6.tgz\n\n# Clone Livy repository\nRUN mkdir -p /apps/build && \\\n    cd /apps/build && \\\n\tgit clone https://github.com/cloudera/livy.git && \\\n\tcd $LIVY_BUILD_PATH && \\\n    mvn -DskipTests -Dspark.version=$SPARK_VERSION clean package && \\\n    unzip $LIVY_BUILD_PATH/assembly/target/$LIVY_BUILD_VERSION.zip -d /apps && \\\n    rm -rf $LIVY_BUILD_PATH && \\\n\tmkdir -p $LIVY_APP_PATH/upload\n\t\n# Add custom files, set permissions\nADD entrypoint.sh .\n\nRUN chmod +x entrypoint.sh\n\n# Expose port\nEXPOSE 8998\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "8aafcf146aa1514f2a86c1e3ea18eb9e41d3d013.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# We're using Ubuntu 14:04 because ProxySQL compilation needs one of the latest\n# g++ compilers. Also, it's a long term release.\nFROM ubuntu:14.04\nMAINTAINER Andrei Ismail <iandrei@gmail.com>\nRUN apt-get update && apt-get install -y\\\n\tautomake\\\n\tcmake\\\n\tmake\\\n\tg++\\\n\tgcc\\\n\tgdb\\\n\tgdbserver\\\n\tgit\\\n\tlibmysqlclient-dev\\\n\tlibssl-dev\\\n\tlibtool\n\nRUN cd /opt; git clone https://github.com/akopytov/sysbench.git\nRUN cd /opt/sysbench; ./autogen.sh; ./configure --bindir=/usr/bin; make; make install\n\nADD ./proxysql.cnf /etc/\nRUN mkdir -p /var/lib/proxysql\nADD ./compile_and_start_proxysql.sh /tmp/\nRUN chmod +x /tmp/compile_and_start_proxysql.sh\n\nCMD [\"/tmp/compile_and_start_proxysql.sh\"]\n"
    },
    {
        "filename": "8adb7c27f766bab34676d85c5e414e47498e64dd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER mmoroz@chromium.org\nADD bionic.list /etc/apt/sources.list.d/bionic.list\nADD nasm_apt.pin /etc/apt/preferences\nRUN apt-get update && apt-get install -y make autoconf automake libtool build-essential \\\n    libass-dev libfreetype6-dev libsdl1.2-dev \\\n    libvdpau-dev libxcb1-dev libxcb-shm0-dev \\\n    pkg-config texinfo libbz2-dev zlib1g-dev yasm cmake mercurial wget \\\n    xutils-dev libpciaccess-dev nasm\n\nRUN git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg\n\nRUN wget https://www.alsa-project.org/files/pub/lib/alsa-lib-1.1.0.tar.bz2\nRUN git clone --depth 1 git://anongit.freedesktop.org/mesa/drm\nRUN git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git\nADD https://sourceforge.net/projects/lame/files/latest/download lame.tar.gz\nRUN git clone --depth 1 git://anongit.freedesktop.org/xorg/lib/libXext\nRUN git clone --depth 1 git://anongit.freedesktop.org/git/xorg/lib/libXfixes\nRUN git clone --depth 1 https://github.com/01org/libva\nRUN git clone --depth 1 -b libvdpau-1.2 git://people.freedesktop.org/~aplattner/libvdpau\nRUN git clone --depth 1 https://chromium.googlesource.com/webm/libvpx\nRUN git clone --depth 1 git://git.xiph.org/ogg.git\nRUN git clone --depth 1 git://git.xiph.org/opus.git\nRUN git clone --depth 1 git://git.xiph.org/theora.git\nRUN git clone --depth 1 git://git.xiph.org/vorbis.git\nRUN git clone --depth 1 git://git.videolan.org/git/x264.git\nRUN hg clone https://bitbucket.org/multicoreware/x265\n\nCOPY build.sh group_seed_corpus.py $SRC/\n"
    },
    {
        "filename": "8b61d31a204568a28d149a17a42e8fe11c944b35.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM ubuntu:14.04\n\n# install Python \nRUN \\\n  apt-get update && \\\n  apt-get install -y software-properties-common python-software-properties && \\\n  apt-get -y install python3-dev python3-pip python-virtualenv && \\ \n  rm -rf /var/lib/apt/lists/* \n\n# install Python libraries\nRUN pip3 install numpy pandas\n\n# install r and dependencies\n# see https://www.digitalocean.com/community/tutorials/how-to-set-up-r-on-ubuntu-14-04\nRUN \\\n  sh -c 'echo \"deb http://cran.rstudio.com/bin/linux/ubuntu trusty/\" >> /etc/apt/sources.list' && \\\n  gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-key E084DAB9 && \\\n  gpg -a --export E084DAB9 | apt-key add - && \\\n  apt-get update && \\\n  apt-get -y install r-base && \\\n  R -e \"install.packages('getopt', repos = c('http://cran.rstudio.com/','http://cran.us.r-project.org'), dependencies = c('Depends'))\" && \\\n  R -e \"install.packages('optparse', repos = c('http://cran.rstudio.com/','http://cran.us.r-project.org'), dependencies = c('Depends'))\"\n\n\n# install MySQL and add configurations\nRUN echo \"mysql-server-5.6 mysql-server/root_password password root\" | sudo debconf-set-selections && \\\n  echo \"mysql-server-5.6 mysql-server/root_password_again password root\" | sudo debconf-set-selections && \\\n  apt-get -y install mysql-server-5.6 && \\\n  echo \"secure-file-priv = \\\"\\\"\" >> /etc/mysql/conf.d/my5.6.cnf\n\n# add scripts\nADD morf_test_all.py morf_test_all.py\nADD feature_extraction feature_extraction\nADD modeling modeling\n# start mysql\nRUN service mysql start\n\n# define entrypoint\nENTRYPOINT [\"python3\", \"morf_test_all.py\"]\n\n\n\n\n\n"
    },
    {
        "filename": "8b830d93a1c913b0eb92786b04fcd37d2a17642e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.17\nMAINTAINER Damien Garros <dgarros@gmail.com>\n\nRUN     apt-get -y update && \\\n        apt-get -y upgrade\n\n# INstall dependencies\nRUN     apt-get -y --force-yes install \\\n        wget curl build-essential git python-dev \\\n        libxml2-dev libxslt-dev python-pip isc-dhcp-server zlib1g-dev\n\nRUN     pip install pyyaml jinja2 pydot bottle junos-eznc futures pysnmp \\\n        netifaces paste nose coverage webtest flexmock\n\n## Copy project into the container\nRUN     mkdir /root/openclos\nADD     jnpr  /root/openclos/jnpr\nADD     requirements.txt /root/openclos/requirements.txt\nADD     setup.py /root/openclos/setup.py\nADD     MANIFEST.in /root/openclos/MANIFEST.in\n\n## Install Openclos from source\nWORKDIR /root/openclos\nRUN     python setup.py install\n\n## Cleanup container\nRUN     apt-get clean && \\\n        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV HOME /root\nRUN chmod -R 777 /var/log/\n\nVOLUME [\"/data\"]\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "8bab5c0bfa33d7d6ed8053bf3698844469ac9760.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ecoron/python36-sklearn  \nMAINTAINER ecoron  \n  \nENV DEBIAN_FRONTEND noninteractive  \n  \nRUN apt-get update  \nRUN apt-get -y install git wget curl sudo  \nRUN apt-get autoremove  \nRUN apt-get autoclean  \n  \nRUN mkdir serpscrap  \nCOPY install_chrome.sh .install_chrome.sh  \nRUN sh .install_chrome.sh  \n  \nRUN pip install SerpScrap  \n  \n# ENTRYPOINT python  \n\n"
    },
    {
        "filename": "8bef3702bcc2633f11e122bd5c10dd5ddf571941.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM cfinfrastructure/golang\nMAINTAINER https://github.com/cloudfoundry/mega-ci\n\nRUN \\\n      apt-get update && \\\n      apt-get -qqy install --fix-missing \\\n            awscli \\\n            openssl \\\n            unzip \\\n      && \\\n      apt-get clean\n\n# Install ruby-install\nRUN curl https://codeload.github.com/postmodern/ruby-install/tar.gz/v0.5.0 | tar xvz -C /tmp/ && \\\n          cd /tmp/ruby-install-0.5.0 && \\\n          make install\n\n# Install Ruby\nRUN ruby-install ruby 2.2.4 -- --disable-install-rdoc\n\n# Add ruby to PATH\nENV PATH $PATH:/home/root/.gem/ruby/2.2.4/bin:/opt/rubies/ruby-2.2.4/lib/ruby/gems/2.2.4/bin:/opt/rubies/ruby-2.2.4/bin\n\n# Set permissions on ruby directory\nRUN chmod -R 777 /opt/rubies/\n\n# Install bundler\nRUN /opt/rubies/ruby-2.2.4/bin/gem install bundler --no-rdoc --no-ri\n\n# Install bosh_cli\nRUN /opt/rubies/ruby-2.2.4/bin/gem install bosh_cli --no-rdoc --no-ri\n\n# Install terraform\nRUN wget https://releases.hashicorp.com/terraform/0.8.4/terraform_0.8.4_linux_amd64.zip && \\\n  unzip terraform_0.8.4_linux_amd64.zip && \\\n  rm terraform_0.8.4_linux_amd64.zip && \\\n  mv terraform /usr/local/bin/terraform\n\n# Install jq\nRUN wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && \\\n  mv jq-linux64 /usr/local/bin/jq && \\\n  chmod +x /usr/local/bin/jq\n\n# Install spiff\nRUN wget https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0.7/spiff_linux_amd64 && \\\n  mv spiff_linux_amd64 /usr/local/bin/spiff && \\\n  chmod +x /usr/local/bin/spiff\n\n# Install bosh-init\nRUN wget https://s3.amazonaws.com/bosh-init-artifacts/bosh-init-0.0.98-linux-amd64 && \\\n  mv bosh-init-0.0.98-linux-amd64 /usr/local/bin/bosh-init && \\\n  chmod +x /usr/local/bin/bosh-init\n\nRUN curl -L \"https://cli.run.pivotal.io/stable?release=linux64-binary&source=github\" | tar -zx && \\\n  chmod +x cf && \\\n  mv cf /usr/local/bin/cf\n"
    },
    {
        "filename": "8c076ce2a8ec46c58733f5a8a00d769cab31f4cc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM kerberos/base:linux-armv7\n\nARG APP_ENV=master\nENV APP_ENV ${APP_ENV}\n\nMAINTAINER \"C\u00e9dric Verstraeten\" <hello@cedric.ws>\n\n#################################\n# Surpress Upstart errors/warning\n\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -sf /bin/true /sbin/initctl\n\n#############################################\n# Let the container know that there is no tty\n\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install -y libcurl4-openssl-dev libssl-dev pkg-config\n\n############################\n# Clone and build machinery\n\nRUN\tgit clone https://github.com/kerberos-io/machinery /tmp/machinery && \\\n    cd /tmp/machinery && git checkout ${APP_ENV} && \\\n    mkdir build && cd build && \\\n    cmake .. && make && make check && make install && \\\n    rm -rf /tmp/machinery && \\\n    chown -Rf www-data.www-data /etc/opt/kerberosio && \\\n    chmod -Rf 777 /etc/opt/kerberosio/config\n\n#####################\n# Clone and build web\n\nRUN curl -sL https://deb.nodesource.com/setup_9.x | bash - && apt-get install -y nodejs\nRUN git clone https://github.com/kerberos-io/web /var/www/web && cd /var/www/web && git checkout ${APP_ENV} && \\\nchown -Rf www-data.www-data /var/www/web && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\ncd /var/www/web && \\\ncomposer install --prefer-source && \\\nnpm install -g bower && \\\ncd public && \\\nnodejs /usr/lib/node_modules/bower/bin/bower --allow-root install\n\nRUN rm /var/www/web/public/capture && \\\nln -s /etc/opt/kerberosio/capture/ /var/www/web/public/capture\n\n# Fixes, because we are now combining the two docker images.\n# Docker is aware of both web and machinery.\nRUN sed -i -e \"s/'insideDocker'/'insideDocker' => false,\\/\\//\" /var/www/web/app/Http/Controllers/SystemController.php\n# RUN sed -i -e \"s/\\$output \\=/\\$output \\= '';\\/\\//\" /var/www/web/app/Http/Controllers/SettingsController.php\nRUN sed -i -e \"s/service kerberosio status/supervisorctl status machinery \\| grep \\\"RUNNING\\\"';\\/\\//\" /var/www/web/app/Http/Repositories/System/OSSystem.php\n\n###################\n# nginx site conf\n\nRUN rm -Rf /etc/nginx/conf.d/* && rm -Rf /etc/nginx/sites-available/default && mkdir -p /etc/nginx/ssl\nADD ./web.conf /etc/nginx/sites-available/default.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n\n##################################\n# Fix PHP-FPM environment variables\n\nRUN sed -i 's/\"GPCS\"/\"EGPCS\"/g' /etc/php/7.0/fpm/php.ini\nRUN sed -i 's/\"--daemonize/\"--daemonize --allow-to-run-as-root/g' /etc/init.d/php7.0-fpm\nRUN sed -i 's/www-data/root/g' /etc/php/7.0/fpm/pool.d/www.conf\nRUN sed -i 's/www-data/root/g' /etc/nginx/nginx.conf\n\n# Merged supervisord config of both web and machinery\nADD ./supervisord.conf /etc/supervisord.conf\n\n# Merge the two run files.\nADD ./run.sh /runny.sh\nRUN chmod 755 /runny.sh\nRUN chmod +x /runny.sh\nRUN sed -i -e 's/\\r$//' /runny.sh\n\n# Exposing web on port 80 and livestreaming on port 8889\nEXPOSE 8889\nEXPOSE 80\n\n# Make capture and config directory visible\nVOLUME [\"/etc/opt/kerberosio/capture\"]\nVOLUME [\"/etc/opt/kerberosio/config\"]\nVOLUME [\"/etc/opt/kerberosio/logs\"]\n\n# Make web config directory visible\nVOLUME [\"/var/www/web/config\"]\n\n# Start runner script when booting container\nCMD [\"/bin/bash\", \"/runny.sh\"]\n"
    },
    {
        "filename": "8c39f6b6d938841cea02ca50d4a8a38a5459b014.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Nitin Reddy \"redknitin@gmail.com\"\nEXPOSE 8000\nRUN apt-get update\nRUN apt-get install -y build-essential ruby-dev git mongodb rubygems rerun\n#export PATH=$PATH:/opt/vagrant_ruby/bin/\nRUN gem update --system\nRUN gem install bundler\nADD ./ /code/\nWORKDIR /code/\nRUN bundle install\n#bundle exec ruby app.rb\nCMD rackup --host 0.0.0.0 -p 8000\n"
    },
    {
        "filename": "8c6d01f57e9df8a8a480be243158a15acdf8ae86.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Version sistema operativo  \nFROM ubuntu:17.10  \n# Autor  \nMAINTAINER Carlos Toledano Delgado <carliyostole@gmail.com>  \n  \n#Actualizar Repositorio  \nRUN apt-get -y update  \n  \n#Instalamos python y pip por medio de nuestro Makefile  \nRUN apt-get install -y python-dev  \nRUN apt-get install -y libpq-dev  \nRUN apt-get install -y python-pip  \nRUN pip install --upgrade pip  \n  \n#Instalamos git y descargamos el repositorio  \nRUN apt-get install -y git  \nRUN git clone https://github.com/carlillostole/proyectoIV17-18  \n  \n# Instalacion de las dependencias del proyecto  \nRUN cd proyectoIV17-18/ && make install  \n  \nEXPOSE 8000  \nWORKDIR proyectoIV17-18/  \nCMD gunicorn app:app --log-file=- --bind 0.0.0.0:8000  \n\n"
    },
    {
        "filename": "8c7f773839bad4521e4a2fb08242a74babb12e7d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Start with base image.\nFROM ubuntu:latest\nMAINTAINER David Harper \"david@pandastrike.com\"\n\n# Add the necessary technologies to assemble this app.\nRUN apt-get update\nRUN apt-get -y install git\nRUN apt-get -y install nodejs\nRUN apt-get -y install npm\n\n# Pull the app from its git repository and place it in this image.\nRUN cd /var;git clone https://github.com/pandastrike/panda-panopticon.git\nRUN cd /var/panda-panopticon;npm install\n\n# Expose ports needed by the app.\nEXPOSE 3000\nEXPOSE 3001\n\n# The app is ready to go.  Start it up.\nCMD [\"/usr/bin/nodejs\", \"/var/panda-panopticon/server.js\"]\n"
    },
    {
        "filename": "8cb31a64761cd41fe0299581efbfceb772551627.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Cabot Dockerfile\n#\n# https://github.com/shoonoise/cabot-docker\n#\n# VERSION 1.1\n\nFROM ubuntu:16.04\nMAINTAINER Alexander Kushnarev <avkushnarev@gmail.com>\n\n# Prepare\nRUN apt-get update\nRUN apt-get install -y build-essential nodejs libpq-dev python-dev npm git curl libldap2-dev libsasl2-dev iputils-ping\n\nRUN curl -OL https://bootstrap.pypa.io/get-pip.py\nRUN python get-pip.py\n\n# Deploy cabot\nRUN git clone https://github.com/arachnys/cabot.git /cabot\nADD fixture.json /cabot/\nADD run.sh /cabot/\nADD gunicorn.conf /cabot/gunicorn.conf\n\n# Install dependencies\nRUN pip install -e /cabot/\nRUN npm install --no-color -g coffee-script less@1.3 --registry http://registry.npmjs.org/\nRUN pip install --upgrade pip\n\n# Set env var\nENV PATH $PATH:/cabot/\nENV PYTHONPATH $PYTHONPATH:/cabot/\n\n# Cabot settings\nENV DJANGO_SETTINGS_MODULE cabot.settings\nENV HIPCHAT_URL https://api.hipchat.com/v1/rooms/message\nENV LOG_FILE /var/log/cabot\nENV PORT 5000\nENV ADMIN_EMAIL you@example.com\nENV CABOT_FROM_EMAIL noreply@example.com\nENV DEBUG t\nENV DB_HOST db\nENV DB_PORT 5432\nENV DB_USER docker\nENV DB_PASS docker\n\nENV DJANGO_SECRET_KEY 2FL6ORhHwr5eX34pP9mMugnIOd3jzVuT45f7w430Mt5PnEwbcJgma0q8zUXNZ68A\n\n# Used for pointing links back in alerts etc.\nENV WWW_HTTP_HOST cabot.example.com\nENV WWW_SCHEME http\n\nRUN [\"ln\",\"-s\",\"/usr/bin/nodejs\",\"/usr/bin/node\"]\n\nEXPOSE 5000\n\nWORKDIR /cabot/\nCMD . /cabot/run.sh\n"
    },
    {
        "filename": "8cb3b8a91e9bcad1dafaf44b0a3d37303663f970.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Dockerfile for Hyperledger fabric all-in-one development, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * chaintools\n# * gotools\n\n# If you need a pure peer node to run, please see the \n# * yeasy/hyperledger-peer\n# * yeasy/hyperledger-orderer\n# * yeasy/hyperledger-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/db and /var/hyperledger/production\n\nFROM golang:1.8\nLABEL maintainer \"Baohua Yang <yangbaohua@gmail.com>\"\n\n# fabric-peers\nEXPOSE 7050 7051\n# fabric-ca-server RESTful\nEXPOSE 7054\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\n\nENV ARCH x86_64\n\n# version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE 0.3.1\n# BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION 1.0.1\n# version for the peer/orderer binaries, the community version tracks the hash value like 1.0.1-snapshot-51b7e85\nENV PROJECT_VERSION 1.0.1\n# generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS hyperledger\n# for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n             -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n\n# peer env \nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    CORE_LOGGING_LEVEL=DEBUG\n\n# orderer env \nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=$HOME/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/db \\\n        /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        /chaincode/input \\\n        /chaincode/output \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install -y apt-utils python-dev \\\n        && apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install -y python-pip \\\n        && apt-get install -y vim tree jq unzip \\\n        && pip install --upgrade pip \\\n        && pip install behave nose docker-compose \\\n        && rm -rf /var/cache/apt\n\n# Install chaintool\nRUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n        && chmod a+x /usr/local/bin/chaintool\n\n# Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/kardianos/govendor \\\n        && go get github.com/golang/lint/golint \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get github.com/onsi/ginkgo/ginkgo \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/AlekSi/gocov-xml\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n#&& git clone --single-branch -b master http://gerrit.hyperledger.org/r/fabric \\\n#&& git clone --single-branch -b master https://github.com/hyperledger/fabric.git \\\n#&& cd fabric && git checkout v${PRJECT_VERSION} \\\n        && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip && unzip v${PROJECT_VERSION}.zip && rm v${PROJECT_VERSION}.zip && mv fabric-${PROJECT_VERSION} fabric \\\n        && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n\n# install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n        && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx//tool/configtxgen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\"         -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\"         -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n\n# Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n        && go build \\\n        && mv block-listener $GOPATH/bin\n\n# install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\n# install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\nADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n#&& git clone --single-branch -b master https://github.com/hyperledger/fabric-ca \\\n#&& git clone --single-branch -b master https://github.com/hyperledger/fabric-ca.git \\\n#&& cd fabric-ca && git checkout v{PROJECT_VERSION} \\\n    && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip && unzip v${PROJECT_VERSION}.zip && rm v${PROJECT_VERSION}.zip && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n    # This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n    && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n    # Copy example ca and key files\n    && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n    && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/*.sh /tmp/\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\n# temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION} \\\n      org.hyperledger.fabric.base.version=${BASEIMAGE_RELEASE}\n"
    },
    {
        "filename": "8ccb908b97f851b492a89118327675c03d872ba7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build DNAscan pipeline\n############################################################\n\n\nFROM ubuntu:latest\nMAINTAINER Alfredo Iacoangeli \"alfredo.iacoangeli@kcl.ac.uk\"\n\nRUN apt-get update\nRUN apt-get install -y git\nRUN cd /home/\nRUN git clone https://github.com/snewhouse/DNA-NGS_scan.git\nRUN cd DNA-NGS_scan\nRUN bash scripts/install_dependencies_hg19_docker.sh /home/DNA-NGS_scan/local/ /home/DNA-NGS_scan/ \nRUN source ~/.bashrc\n\nEXPOSE 8080\n\nWORKDIR /home/DNA-NGS_scan/\n\nENTRYPOINT cat /home/DNA-NGS_scan/docker/welcome_message.txt\n"
    },
    {
        "filename": "8d6cb0a340268c75236838fc717003edf0306900.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.16\nMAINTAINER Philipz <philipzheng@gmail.com>\n\n# Pre config Nginx Repo\nRUN curl -o nginx.key http://nginx.org/packages/keys/nginx_signing.key && \\\n    cat nginx.key | apt-key add -\nRUN echo deb http://nginx.org/packages/ubuntu/ trusty nginx | tee /etc/apt/sources.list.d/nginx.list && \\\n    echo deb-src http://nginx.org/packages/ubuntu/ trusty nginx >> /etc/apt/sources.list.d/nginx.list\nRUN apt-get update\nRUN apt-get -y upgrade\n\n# Basic Requirements\nRUN apt-get -y install nginx php5-mysql php-apc unzip\n\n# Wordpress Requirements\nRUN apt-get -y install php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-sqlite php5-tidy php5-xmlrpc php5-xsl\n\n# nginx config\nRUN sed -i -e\"s/keepalive_timeout\\s*65/keepalive_timeout 2/\" /etc/nginx/nginx.conf\nRUN sed -i -e\"s/keepalive_timeout 2/keepalive_timeout 2;\\n\\tclient_max_body_size 100m/\" /etc/nginx/nginx.conf\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\n# HHVM install\nRUN curl http://dl.hhvm.com/conf/hhvm.gpg.key | sudo apt-key add -\nRUN echo deb http://dl.hhvm.com/ubuntu trusty main | sudo tee /etc/apt/sources.list.d/hhvm.list\nRUN apt-get update && apt-get install -y hhvm\n\n# nginx site conf\nADD ./nginx-site.conf /etc/nginx/conf.d/default.conf\nRUN mkdir /usr/share/nginx/www\nRUN chown -R www-data:www-data /usr/share/nginx/www\n\nRUN mkdir /etc/service/nginx\nADD nginx.sh /etc/service/nginx/run\n\nRUN mkdir /etc/service/hhvm\nADD hhvm.sh /etc/service/hhvm/run\n\nRUN sudo /usr/share/hhvm/install_fastcgi.sh\n\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Define mountable directories.\nVOLUME [\"/usr/share/nginx/www\",\"/var/log/nginx/\"]\n\n# private expose\nEXPOSE 80\nEXPOSE 443\n\nCMD [\"/sbin/my_init\"]\n"
    },
    {
        "filename": "8d99d2510da76da460a97a7540a95f05aa0fa8c8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nRUN apt-get update -y\nRUN apt-get install -y python-pip\n#RUN apt-get install -y openjdk-7-jre wget python-pip\n#RUN wget -qO- get.nextflow.io | bash\n#ADD nextflow.config /\n\nRUN apt-get install -y curl\nRUN curl -sSL https://get.docker.com | sudo sh\n\nADD requirements.txt /requirements.txt\nRUN pip install -r /requirements.txt\n\n# supply a default config\nADD endofday.conf /endofday.conf\n\nADD core /core\nADD tests /tests\n\nENV STAGING /staging\nENV STAGING_DIR /staging\n# WORKDIR /staging\n\nENTRYPOINT [\"/core/endofday.sh\"]\n"
    },
    {
        "filename": "8d9ebc69bf9dc52b8a22a62179216e64f2894d1d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Start with cuDNN base image\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu14.04\nMAINTAINER Kai Arulkumaran <design@kaixhin.com>\n\n# Install git, wget, python-dev, pip, BLAS + LAPACK and other dependencies\nRUN apt-get update && apt-get install -y \\\n  gfortran \\\n  git \\\n  wget \\\n  liblapack-dev \\\n  libopenblas-dev \\\n  python-dev \\\n  python-pip \\\n  python-nose \\\n  python-numpy \\\n  python-scipy\n\n# Remove OS-installed six\nRUN rm /usr/lib/python2.7/dist-packages/six*\n\n# Set CUDA_ROOT\nENV CUDA_ROOT /usr/local/cuda/bin\n\n# Install CMake 3\nRUN cd /root && wget http://www.cmake.org/files/v3.8/cmake-3.8.1.tar.gz && \\\n  tar -xf cmake-3.8.1.tar.gz && cd cmake-3.8.1 && \\\n  ./configure && \\\n  make -j \"$(nproc)\" && \\\n  make install\n\n# Install Cython\nRUN pip install Cython\n\n# Clone libgpuarray repo and move into it\nRUN cd /root && git clone https://github.com/Theano/libgpuarray.git && cd libgpuarray && \\\n# Make and move into build directory\n  mkdir Build && cd Build && \\\n# CMake\n  cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr && \\\n# Make\n  make -j\"$(nproc)\" && \\\n  make install\n# Install pygpu\nRUN cd /root/libgpuarray && \\\n  python setup.py build_ext -L /usr/lib -I /usr/include && \\\n  python setup.py install\n\n# Install bleeding-edge Theano\nRUN pip install --upgrade pip\nRUN pip install --upgrade six\nRUN pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git\n# Set up .theanorc for CUDA\nRUN echo \"[global]\\ndevice=cuda\\nfloatX=float32\\noptimizer_including=cudnn\\n[lib]\\ncnmem=0.1\\n[nvcc]\\nfastmath=True\\n[dnn]\\nenabled=True\\ninclude_path=/usr/local/cuda/include\\nlibrary_path=/usr/local/cuda/lib64\" > /root/.theanorc\n"
    },
    {
        "filename": "8e341913ffc4757a6d9bf3f2566672cb85bfcbc0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM rocker/geospatial  \nMAINTAINER Christian Panse <Christian.Panse@gmail.com>  \nRUN install2.r --error \\  \nGA \\  \ncolorspace \\  \ndoParallel \\  \nknitr \\  \nmaps \\  \nnoncensus \\  \nshiny \\  \ntestthat  \nRUN apt-get install curl && cd /tmp \\  \n&& curl -s https://codeload.github.com/cpanse/recmap/zip/master \\  \n> recmap.zip && unzip recmap.zip \\  \n&& R CMD build recmap-master --no-build-vignettes \\  \n&& R CMD INSTALL recmap*.gz  \n\n"
    },
    {
        "filename": "8e415ec539d56e1e0cec6496ead87d1d2e48b7df.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Nicolas Fiorini \"nicolas.fiorini@nih.gov\"\n\nRUN apt-get update && apt-get -y upgrade && apt-get -y install cron python python3\nRUN apt-get install -y python3-pip\nRUN apt-get -y install r-base\nRUN apt-get -y install libcurl4-gnutls-dev\nRUN apt-get -y install libssl-dev\n\n# Add crontab file in the cron directory\nADD crontab /etc/cron.d/pubrunner\nADD . /app\n\n# Give execution rights on the cron job\nRUN chmod 0644 /etc/cron.d/pubrunner\n\n# Create the log file to be able to run tail\nRUN touch /var/log/cron.log\n\n# Run the command on container startup\nCMD cron && tail -f /var/log/cron.log\n"
    },
    {
        "filename": "8e48bd2484cedd56223e4cf88f5b2566e76c039a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'php-fpm' base Image, visit its repository on Github\n#    https://github.com/Laradock/php-fpm\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/php-fpm:2.0-70\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n# are installed on the base image 'laradock/php-fpm' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/php-fpm).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_ZIP_ARCHIVE=true\n#\n\n#####################################\n# SOAP:\n#####################################\n\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n    # Install the soap extension\n    apt-get update -yqq && \\\n    apt-get -y install libxml2-dev php-soap && \\\n    docker-php-ext-install soap \\\n;fi\n\n#####################################\n# pgsql\n#####################################\n\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ]; then \\\n    # Install the pgsql extension\n    apt-get update -yqq && \\\n    docker-php-ext-install pgsql \\\n;fi\n\n#####################################\n# pgsql client\n#####################################\n\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ]; then \\\n    # Install the pgsql client\n    apt-get update -yqq && \\\n    apt-get install -y postgresql-client \\\n;fi\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    # Install the xdebug extension\n    pecl install xdebug && \\\n    docker-php-ext-enable xdebug \\\n;fi\n\n# Copy xdebug configration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\") \\\n    && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n    && mv /tmp/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so \\\n    && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n;fi\n\n#####################################\n# PHP REDIS EXTENSION FOR PHP 7\n#####################################\n\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ]; then \\\n    # Install Php Redis Extension\n    printf \"\\n\" | pecl install -o -f redis \\\n    &&  rm -rf /tmp/pear \\\n    &&  docker-php-ext-enable redis \\\n;fi\n\n#####################################\n# Swoole EXTENSION FOR PHP 7\n#####################################\n\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n    # Install Php Swoole Extension\n    pecl install swoole \\\n    &&  docker-php-ext-enable swoole \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    docker-php-ext-enable mongodb \\\n;fi\n\n#####################################\n# AMQP:\n#####################################\n\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ]; then \\\n    apt-get update && \\\n    apt-get install librabbitmq-dev -y && \\\n    # Install the amqp extension\n    pecl install amqp && \\\n    docker-php-ext-enable amqp \\\n;fi\n\n#####################################\n# ZipArchive:\n#####################################\n\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \\\n    # Install the zip extension\n    docker-php-ext-install zip \\\n;fi\n\n#####################################\n# bcmath:\n#####################################\n\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ]; then \\\n    # Install the bcmath extension\n    docker-php-ext-install bcmath \\\n;fi\n\n#####################################\n# GMP (GNU Multiple Precision):\n#####################################\n\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ]; then \\\n    # Install the GMP extension\n\tapt-get update -yqq && \\\n\tapt-get install -y libgmp-dev && \\ \n    docker-php-ext-install gmp \\\n;fi\n\n#####################################\n# PHP Memcached:\n#####################################\n\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ]; then \\\n    # Install the php memcached extension\n    curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" \\\n    && mkdir -p memcached \\\n    && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n    && ( \\\n        cd memcached \\\n        && phpize \\\n        && ./configure \\\n        && make -j$(nproc) \\\n        && make install \\\n    ) \\\n    && rm -r memcached \\\n    && rm /tmp/memcached.tar.gz \\\n    && docker-php-ext-enable memcached \\\n;fi\n\n#####################################\n# Exif:\n#####################################\n\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ]; then \\\n    # Enable Exif PHP extentions requirements\n    docker-php-ext-install exif \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\n\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    # Install the php aerospike extension\n    curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz\" \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src \\\n        && phpize \\\n        && ./build.sh \\\n        && make install \\\n    ) \\\n    && rm /tmp/aerospike-client-php.tar.gz \\\n    && docker-php-ext-enable aerospike \\\n;fi\n\n#####################################\n# Opcache:\n#####################################\n\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ]; then \\\n    docker-php-ext-install opcache \\\n;fi\n\n# Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n\n#####################################\n# Mysqli Modifications:\n#####################################\n\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ]; then \\\n    docker-php-ext-install mysqli \\\n;fi\n\n#####################################\n# Tokenizer Modifications:\n#####################################\n\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ]; then \\\n    docker-php-ext-install tokenizer \\\n;fi\n\n#####################################\n# Human Language and Character Encoding Support:\n#####################################\n\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ]; then \\\n    # Install intl and requirements\n    apt-get update -yqq && \\\n    apt-get install -y zlib1g-dev libicu-dev g++ && \\\n    docker-php-ext-configure intl && \\\n    docker-php-ext-install intl \\\n;fi\n\n#####################################\n# GHOSTSCRIPT:\n#####################################\n\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \\\n    # Install the ghostscript extension\n    # for PDF editing\n    apt-get update -yqq \\\n    && apt-get install -y \\\n    poppler-utils \\\n    ghostscript \\\n;fi\n\n#####################################\n# LDAP:\n#####################################\n\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install -y libldap2-dev && \\\n    docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \\\n    docker-php-ext-install ldap \\\n;fi\n\n#####################################\n# SQL SERVER:\n#####################################\n\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n    #####################################\n    # Ref from https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-adding-pdo_sqlsrv-and-sqlsrv-to-official-php-image\n    #####################################\n    # Add Microsoft repo for Microsoft ODBC Driver 13 for Linux\n    apt-get update -yqq \\\n        && apt-get install -y apt-transport-https \\\n        && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n        && curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n        && apt-get update -yqq \\\n\n    # Install Dependencies\n        && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n        && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n        && locale-gen \\\n\n    # Install pdo_sqlsrv and sqlsrv from PECL. Replace pdo_sqlsrv-4.1.8preview with preferred version.\n        && pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview \\\n        && docker-php-ext-enable pdo_sqlsrv sqlsrv \\\n;fi\n\n#####################################\n# Image optimizers:\n#####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS ${INSTALL_IMAGE_OPTIMIZERS}\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install -y --force-yes jpegoptim optipng pngquant gifsicle \\\n;fi\n\n#####################################\n# ImageMagick:\n#####################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nENV INSTALL_IMAGEMAGICK ${INSTALL_IMAGEMAGICK}\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ]; then \\\n    apt-get update -y && \\\n    apt-get install -y libmagickwand-dev imagemagick && \\ \n    pecl install imagick && \\\n    docker-php-ext-enable imagick \\\n;fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\nADD ./laravel.ini /usr/local/etc/php/conf.d/\nADD ./yii.ini /usr/local/etc/php/conf.d/\n\nADD ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\n\n#RUN rm -r /var/lib/apt/lists/*\n\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nCMD [\"php-fpm\"]\n\nEXPOSE 9000\n"
    },
    {
        "filename": "8eb855fd58fbf0e9aa288964a38f0f24b28cca95.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\n\nMAINTAINER Pywikibot Team <pywikibot@lists.wikimedia.org>\n\nRUN apt-get update\nRUN apt-get install --yes python3.4 python3-pip git libjpeg62-turbo libjpeg62-turbo-dev zlib1g zlib1g-dev locales\n\n# Setup the C.UTF-8 Locale, since otherwise it defaults to an ASCII one\nRUN locale-gen C.UTF-8\nENV LC_ALL C.UTF-8\n\n# TODO: Add this to the default PYTHONPATH and PATH?\nADD . /srv/pwb\n\n# pip version in jessie is too old :(\nRUN pip3 install -U pip\n\nRUN pip3 install -r /srv/pwb/requirements.txt\nRUN pip3 install -r /srv/pwb/dev-requirements.txt\nRUN pip3 install /srv/pwb/\n\nCMD /bin/bash\n"
    },
    {
        "filename": "8ef9b13b7d5ddd1a3f6be15b6f2941c5a199ab51.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Kimbro Staken\n\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN apt-get update\n\nRUN apt-get install -y wget sudo supervisor\n\nRUN apt-get install -y python-software-properties \nRUN add-apt-repository ppa:saltstack/salt\nRUN apt-get update\n\n# Keep upstart from complaining\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -s /bin/true /sbin/initctl\n\nRUN apt-get install -y salt-master openssh-server \n\nRUN echo \"root:salt-master\" | chpasswd\nRUN mkdir -p -m0755 /var/run/sshd\n\nADD ./supervisor-salt.conf /etc/supervisor/conf.d/\n\nEXPOSE 4505 4506\n\nCMD [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisor/supervisord.conf\"]  \n"
    },
    {
        "filename": "51b6681a7a8e720897abcef8f16a3368d7d52c15.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Use the official Docker Hub Ubuntu 18.04 base image\nFROM ubuntu:18.04\n\n# Update the base image\nRUN apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade\n\n# Setup install environment and Timesketch dependencies\nRUN apt-get -y install apt-transport-https \\\n                       curl \\\n                       git \\\n                       libffi-dev \\\n                       lsb-release \\\n                       python3-dev \\\n                       python3-pip \\\n                       python3-psycopg2\n\nRUN curl -sS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\nRUN VERSION=node_8.x && \\\n    DISTRO=\"$(lsb_release -s -c)\" && \\\n    echo \"deb https://deb.nodesource.com/$VERSION $DISTRO main\" > /etc/apt/sources.list.d/nodesource.list\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list\n\n# Install Plaso, nodejs and yarn.\nRUN apt-get -y install software-properties-common\nRUN add-apt-repository ppa:gift/stable && apt-get update\nRUN apt-get update && apt-get -y install plaso-tools nodejs yarn\n\n# Use Python 3 pip (pip3) to install Timesketch\nRUN pip3 install --upgrade pip\nADD . /tmp/timesketch\nRUN cd /tmp/timesketch && yarn install && yarn run build\n# Remove pyyaml from requirements.txt to avoid conflits with python-yaml Ubuntu package\nRUN sed -i -e '/pyyaml/d' /tmp/timesketch/requirements.txt\nRUN pip3 install /tmp/timesketch/\n\n# Copy the Timesketch configuration file into /etc\nRUN cp /tmp/timesketch/data/timesketch.conf /etc\n# Copy Timesketch config files into /etc/timesketch\nRUN mkdir /etc/timesketch\nRUN cp -r /tmp/timesketch/data/* /etc/timesketch/\n\n# Copy the entrypoint script into the container\nCOPY docker/docker-entrypoint.sh /\nRUN chmod a+x /docker-entrypoint.sh\n\n# Expose the port used by Timesketch\nEXPOSE 5000\n\n# Load the entrypoint script to be run later\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n# Invoke the entrypoint script\nCMD [\"timesketch\"]\n"
    },
    {
        "filename": "51e55940b0193984f5ad5477657ba812f51351ca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.19\n\nENV LANG=en_US.UTF-8\n\nRUN \\\n    apt-get update && \\\n    apt-get install -y \\\n        autoconf \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        git \\\n        ccache\\\n        libboost-all-dev \\\n        libreadline-dev \\\n        libssl-dev \\\n        libtool \\\n        ncurses-dev \\\n        pbzip2 \\\n        pkg-config \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    pip3 install gcovr\n\n# installing mongo drivers\nRUN \\\n    echo \"Installing mongo-c-driver\" && \\\n    apt-get -qq update && \\\n    apt-get install -y \\\n        pkg-config \\\n        libssl-dev \\\n        libsasl2-dev \\\n        wget \\\n    && \\\n    wget https://github.com/mongodb/mongo-c-driver/releases/download/1.9.5/mongo-c-driver-1.9.5.tar.gz && \\\n    tar xzf mongo-c-driver-1.9.5.tar.gz && \\\n    cd mongo-c-driver-1.9.5 && \\\n    ./configure --disable-automatic-init-and-cleanup --enable-static && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf mongo-c-driver-1.9.5 && \\\n    echo \"Installing mongo-cxx-driver\" && \\\n    git clone https://github.com/mongodb/mongo-cxx-driver.git --branch releases/v3.2 --depth 1 && \\\n    cd mongo-cxx-driver/build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n    make EP_mnmlstc_core && \\\n    make && \\\n    make install && \\\n    cd ../.. && \\\n    rm -rf mongo-cxx-driver\n# end\n\nADD . /usr/local/src/golos\n\nRUN \\\n    cd /usr/local/src/golos && \\\n    git submodule deinit -f . && \\\n    git submodule update --init --recursive -f && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_GOLOS_TESTNET=FALSE \\\n        -DBUILD_SHARED_LIBRARIES=FALSE \\\n        -DCHAINBASE_CHECK_LOCKING=FALSE \\\n        -DENABLE_MONGO_PLUGIN=TRUE \\\n        .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n    rm -rf /usr/local/src/golos\n\nRUN \\\n    apt-get remove -y \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        dpkg-dev \\\n        git \\\n        libboost-all-dev \\\n        libc6-dev \\\n        libexpat1-dev \\\n        libgcc-5-dev \\\n        libhwloc-dev \\\n        libibverbs-dev \\\n        libicu-dev \\\n        libltdl-dev \\\n        libncurses5-dev \\\n        libnuma-dev \\\n        libopenmpi-dev \\\n        libpython-dev \\\n        libpython2.7-dev \\\n        libreadline-dev \\\n        libreadline6-dev \\\n        libssl-dev \\\n        libstdc++-5-dev \\\n        libtinfo-dev \\\n        libtool \\\n        linux-libc-dev \\\n        m4 \\\n        make \\\n        manpages \\\n        manpages-dev \\\n        mpi-default-dev \\\n        python-dev \\\n        python2.7-dev \\\n        python3-dev \\\n    && \\\n    apt-get autoremove -y && \\\n    rm -rf \\\n        /var/lib/apt/lists/* \\\n        /tmp/* \\\n        /var/tmp/* \\\n        /var/cache/* \\\n        /usr/include \\\n        /usr/local/include\n\nADD share/golosd/golosdctl /usr/local/bin/golosdctl\nRUN chmod +x /usr/local/bin/golosdctl\n\nRUN useradd -s /bin/bash -m -d /var/lib/golosd golosd\n\nRUN mkdir /var/cache/golosd && \\\n    chown golosd:golosd -R /var/cache/golosd\n\n# add blockchain cache to image\n#ADD $STEEMD_BLOCKCHAIN /var/cache/golosd/blocks.tbz2\n\nENV HOME /var/lib/golosd\nRUN chown golosd:golosd -R /var/lib/golosd\n\nADD share/golosd/snapshot5392323.json /var/lib/golosd\n\n# rpc service:\n# http\nEXPOSE 8090\n# ws\nEXPOSE 8091\n# p2p service:\nEXPOSE 4243\n\nRUN mkdir -p /etc/service/golosd\nADD share/golosd/golosd.sh /etc/service/golosd/run\nRUN chmod +x /etc/service/golosd/run\n\n# add seednodes from documentation to image\nADD share/golosd/seednodes /etc/golosd/seednodes\n\n# the following adds lots of logging info to stdout\nADD share/golosd/config/config_mongo.ini /etc/golosd/config.ini\n"
    },
    {
        "filename": "5325b9174726c5464e8e2b7f0bce186778593606.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM andrewgodwin/base\n\nMAINTAINER Andrew Godwin <andrew@aeracode.org>\n\nRUN apt-get update -qq && apt-get install -y samba python3-jinja2\n\nADD smb.conf /etc/samba/smb.conf.jinja\n\nADD generate-config.py /usr/bin/generate-config.py\nRUN chmod +x /usr/bin/generate-config.py\n\nEXPOSE 137\nEXPOSE 138\nEXPOSE 139\nEXPOSE 445\n\nCMD [\"generate-config.py && script --return -c 'smbd -FS' /dev/null\"]\n"
    },
    {
        "filename": "535e1e03955d7d1dd19dd59c0d5169db38d56b90.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM openstf/armv7hf-stf\n\nMAINTAINER Michael J. Mitchell <michael@mitchtech.net>\n\nUSER root\n\nRUN apt-get update && apt-get install -y -q \\\n\tandroid-tools* \\\n\tca-certificates \\\n\tcurl \\\n\tusbutils \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# Set up insecure default key\nRUN mkdir -m 0750 /.android\n\nADD insecure_shared_adbkey /.android/adbkey\nADD insecure_shared_adbkey.pub /.android/adbkey.pub\n\nWORKDIR /data\n\nENTRYPOINT [ \"bash\" ]\n\nCMD [\"stf\", \"local\"]\n"
    },
    {
        "filename": "551683247c5cd86734b2854379652eac0e408698.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\n\nMAINTAINER Philipp Rescheneder <philipp.rescheneder@gmail.com>\n\nARG VERSION_ARG\n\n# Get most recent NextGenMap version from github\nRUN buildDeps='git wget gcc g++ libc6-dev make cmake zlib1g-dev ca-certificates' && \\\n    apt-get update && apt-get install -y $buildDeps --no-install-recommends && \\\n    update-ca-certificates && \\\n    git clone https://github.com/Cibiv/NextGenMap.git && cd NextGenMap && git checkout $VERSION_ARG && mkdir -p build && cd build && cmake .. && make && cp -r ../bin/ngm-*/* /usr/bin/ && cd .. && rm -rf NextGenMap && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get purge -y --auto-remove $buildDeps\n"
    },
    {
        "filename": "55c134ae42aca79ef9cda7270018f9cfa0bae33f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#This Dockerfile uses the ubuntu image\n#Author: Rokas_Urbelis\n#Email : Rokas.Yang@gmail.com\n#Blog  : https://blog.linux-code.com\nFROM ubuntu:latest\nMAINTAINER RokasUrbelis(Based on github deepin-wine-ubuntu project)\n\nADD deepin-wine-ubuntu /root/deepin-wine-ubuntu\nCOPY link.sh /root/\nCOPY deb/ /root/deepin-wine-ubuntu/\n#COPY sources.list /etc/apt/\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get update\n\nRUN apt-get install wget git locales ttf-wqy-zenhei sudo -y\nRUN apt-get clean && apt-get autoclean\nENV LC_CTYPE=zh_CN.UTF-8 \\\n    XMODIFIERS=\"@im=fcitx\"\n\nRUN \\\n  locale-gen en_US.UTF-8 zh_CN.UTF-8 \\\n  zh_CN.GBK && \\\n  update-locale LANG=zh_CN.UTF-8\n\n# Define default command.\n\nRUN yes|bash /root/deepin-wine-ubuntu/install.sh\n#RUN cd && ln -s /opt/deepin-wine-ubuntu/app/* .\nRUN /bin/bash /root/link.sh && rm -f /root/link.sh\nRUN rm -rf /root/deepin-wine-ubuntu\nWORKDIR /root\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "55c5062fdefa86a0c5094f1752a4e92ed961e750.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM adite/apache_php  \nMAINTAINER tescom <tescom@atdt01410.com>  \n  \nENV DEBIAN_FRONTEND noninteractive  \nRUN apt-get update && \\  \napt-get -yq install phpmyadmin  \n  \nADD default-vhost.conf /etc/apache2/sites-available/000-default.conf  \nADD config-db.php /etc/phpmyadmin/config-db.php  \n#ADD run.sh /run.sh  \n#RUN chmod +x /run.sh  \n#VOLUME [\"/data\"]  \n#ENTRYPOINT [\"/run.sh\"]  \n\n"
    },
    {
        "filename": "56a73d5d379828beec1a3823231ba3410ab128fd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:wheezy\nMAINTAINER Benjamin Chodoroff <bc@thermitic.net>\n\nRUN apt-get update\nRUN apt-get -y install wget\nRUN wget -O - \"http://nginx.org/keys/nginx_signing.key\" | apt-key add -\nRUN wget -O - \"http://www.dotdeb.org/dotdeb.gpg\" | apt-key add -\n\n# Ensure UTF-8\nRUN apt-get -y install locales\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen\nRUN locale-gen\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# nginx and php5\nRUN echo \"deb http://nginx.org/packages/debian/ wheezy nginx\" > /etc/apt/sources.list.d/nginx.list\nRUN echo \"deb http://packages.dotdeb.org wheezy all\\ndeb-src http://packages.dotdeb.org wheezy all\\ndeb http://packages.dotdeb.org wheezy-php55 all\\ndeb-src http://packages.dotdeb.org wheezy-php55 all\" > /etc/apt/sources.list.d/dotdeb.list\n\nRUN apt-get update\nRUN apt-get -y install openssh-server supervisor nginx-extras openssl ca-certificates php5-fpm php5-cli php5-curl php5-mcrypt php5-gd php5-common php5-mysql php5-xmlrpc php5-xsl php5-dev php-pear mysql-client curl git\nRUN pear channel-discover pear.drush.org && pear install drush/drush\n\n# openssh\nRUN mkdir /var/run/sshd\n\n# supervisor\nRUN mkdir -p /var/log/supervisor\nADD config/etc/supervisor/conf.d/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# nginx\nRUN rm -rf /etc/nginx\nRUN rm -rf /srv/www/*\nRUN mkdir -p /var/cache/nginx/microcache\nRUN mkdir -p /var/lib/nginx/speed\nRUN mkdir -p /var/lib/nginx/body\nRUN git clone https://github.com/perusio/drupal-with-nginx /etc/nginx\nADD perusio-customconf.patch /tmp/perusio-customconf.patch\nRUN cd /etc/nginx && cat /tmp/perusio-customconf.patch | git apply\nADD config/etc/nginx/sites-available/site.conf /etc/nginx/sites-available/site.conf\nRUN mkdir -p /etc/nginx/sites-enabled\n\n# php55\nRUN adduser --system --group --home /srv/www www55 && usermod -aG www-data www55\nRUN mkdir -p /etc/php5/fpm/pool.d\nRUN mkdir /var/log/php\nADD config/etc/php5/fpm/php-fpm.conf /etc/php5/fpm/php-fpm.conf\nADD config/etc/php5/fpm/fpm-pool-common.conf /etc/php5/fpm/fpm-pool-common.conf\nADD config/etc/php5/fpm/php.ini /etc/php5/fpm/php.ini\nADD config/etc/php5/fpm/pool.d/www55.conf /etc/php5/fpm/pool.d/www55.conf\nADD config/etc/php5/cli/php.ini /etc/php5/cli/php.ini\n\n# www\nRUN mkdir -p /srv/www/nginx-default\nRUN chmod 755 /srv/www\nADD config/srv/www/nginx-default/index.html /srv/www/nginx-default/index.html\n\nVOLUME [\"/srv/www\", \"/etc/nginx/sites-enabled\"]\n\n# identities\nRUN mkdir /root/.ssh\nRUN chown -R root:root /root/.ssh\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh\nRUN sed -e 's/^PermitRootLogin.*$/PermitRootLogin without-password/g' /etc/ssh/sshd_config > /tmp/sshd_config && mv /tmp/sshd_config /etc/ssh/sshd_config\n\n# store env vars + start supervisord\nADD config/usr/local/sbin/start-with-env.sh /usr/local/sbin/start-with-env.sh\n\nEXPOSE 22\nEXPOSE 80\nEXPOSE 443\n\nCMD [\"/usr/local/sbin/start-with-env.sh\"]\n"
    },
    {
        "filename": "56ae4df8dd444ac04a3b60147c99914272c08876.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Docker container for Ubuntu 14.04\n\n# See https://github.com/ceejatec/naked-docker/ for details about the\n# construction of the base image.\n\nFROM ceejatec/naked-ubuntu:14.04\nMAINTAINER build-team@couchbase.com\n\nUSER root\n\n# Install SSH server\nRUN apt-get update && \\\n    apt-get install -y openssh-server && \\\n    rm -f /var/cache/apt/archives/*.deb && \\\n    mkdir /var/run/sshd # update\n\n# Create couchbase user with password-less sudo privs, and give\n# ownership of /opt/couchbase\nRUN useradd couchbase -G sudo -m -s /bin/bash && \\\n    mkdir -p /opt/couchbase && chown -R couchbase:couchbase /opt/couchbase && \\\n    echo 'couchbase:couchbase' | chpasswd && \\\n    sed -ri 's/ALL\\) ALL/ALL) NOPASSWD:ALL/' /etc/sudoers\n\nRUN apt-get update\n\n# Install Couchbase build dependencies\nRUN apt-get update && apt-get install -y ccache g++ git-core tar libssl-dev ruby rake ncurses-dev python-dev python-pip devscripts debhelper ed man curl libc6-i386 libc-bin binutils && \\\n    rm -f /var/cache/apt/archives/*.deb\nRUN ln -s /usr/bin/nodejs /usr/bin/node\nRUN ln -s /usr/bin/nodejs /usr/sbin/node\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\nRUN echo 'PATH=\"/usr/lib/ccache:$PATH\"' >> /home/couchbase/.profile\nRUN curl https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo && \\\n    chmod a+x /usr/local/bin/repo && \\\n    cd /tmp && rm -rf /tmp/deploy\n\n# PyInstaller is required by sgcollect_info\nRUN pip install -Iv PyInstaller==3.1\n\n# golang\nRUN mkdir -p /usr/local/go/1.4.1 && cd /usr/local/go/1.4.1 && \\\n    curl https://storage.googleapis.com/golang/go1.4.1.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.5.2 && cd /usr/local/go/1.5.2 && \\\n    curl https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.5.3 && cd /usr/local/go/1.5.3 && \\\n    curl https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.7.1 && cd /usr/local/go/1.7.1 && \\\n    curl https://storage.googleapis.com/golang/go1.7.1.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.7.4 && cd /usr/local/go/1.7.4 && \\\n    curl https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.8.5 && cd /usr/local/go/1.8.5 && \\\n    curl https://storage.googleapis.com/golang/go1.8.5.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    mkdir /usr/local/go/1.9 && cd /usr/local/go/1.9 && \\\n    curl https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz -o go.tar.gz && \\\n    tar xzf go.tar.gz && \\\n    rm go.tar.gz\n\n# Install third-party build dependencies. Note: software-properties-common\n# is only required for add-apt-repository; add-apt-repository is only\n# required to get python2.6; and python2.6 is only required for gyp, which\n# is part of the v8 build. python2.6 is also required for our compiling of\n# pysqlite and pysnappy, and for that we even need python2.6-dev.\nRUN apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install -y m4 python2.7 python2.7-dev && \\\n    rm -f /var/cache/apt/archives/*.deb\n\n# JDK for Jenkins.\nRUN apt-get install -y openjdk-7-jre-headless && \\\n    rm -f /var/cache/apt/archives/*.deb\n\n# Force UTF-8 support, since it seems to fail to update properly at times\nRUN locale-gen en_US en_US.UTF-8 hu_HU hu_HU.UTF-8 && dpkg-reconfigure locales\n\n# Expose SSH daemon and run our builder startup script\nEXPOSE 22\nADD .ssh /home/couchbase/.ssh\nCOPY build/couchbuilder_start.sh /usr/sbin/\nENTRYPOINT [ \"/usr/sbin/couchbuilder_start.sh\" ]\nCMD [ \"default\" ]\n\n"
    },
    {
        "filename": "56b036ce4a0351de3bb60abd326013b2ceff2848.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG tag=latest\nFROM lballabio/boost:${tag}\nMAINTAINER Luigi Ballabio <luigi.ballabio@gmail.com>\nLABEL Description=\"A development environment for building QuantLib and its SWIG bindings\"\n\nRUN apt-get update && apt-get install -y autoconf automake libtool ccache \\\n                                         git cmake libpcre3-dev python-dev \\\n                                         flex bison graphviz\n\nRUN mv /usr/lib/ccache/* /usr/local/bin\n\nENV swig_version=3.0.12\n\nRUN wget http://downloads.sourceforge.net/project/swig/swig/swig-${swig_version}/swig-${swig_version}.tar.gz \\\n    && tar xfz swig-${swig_version}.tar.gz \\\n    && rm swig-${swig_version}.tar.gz \\\n    && cd swig-${swig_version} \\\n    && ./configure --prefix=/usr \\\n    && make -j 4 && make install \\\n    && cd .. && rm -rf swig-${swig_version}\n\nENV doxygen_version=1.8.13\n\nRUN wget http://ftp.stack.nl/pub/users/dimitri/doxygen-${doxygen_version}.src.tar.gz \\\n    && tar xfz doxygen-${doxygen_version}.src.tar.gz \\\n    && rm doxygen-${doxygen_version}.src.tar.gz \\\n    && cd doxygen-${doxygen_version} \\\n    && mkdir build && cd build \\\n    && cmake -G \"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX:PATH=/usr .. \\\n    && make -j 4 && make install \\\n    && cd ../.. && rm -rf doxygen-${doxygen_version}\n\nCMD bash\n\n"
    },
    {
        "filename": "575b69723998f8a792e20f1afe49d0664e707059.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:xenial\n\nMAINTAINER dorukozturk <dorukozturk@kitware.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV LANG C.UTF-8\n\nRUN apt-get -y update -qq && \\\n    apt-get -y install locales && \\\n    locale-gen en_US.UTF-8 && \\\n    update-locale LANG=en_US.UTF-8 && \\\n    apt-get install -y build-essential cmake g++ libboost-dev libboost-system-dev \\\n    libboost-filesystem-dev libexpat1-dev zlib1g-dev libxml2-dev\\\n    libbz2-dev libpq-dev libgeos-dev libgeos++-dev libproj-dev \\\n    postgresql-server-dev-9.5 postgresql-9.5-postgis-2.2 postgresql-contrib-9.5 \\\n    apache2 php php-pgsql libapache2-mod-php php-pear php-db \\\n    php-intl git curl sudo \\\n    python-pip libboost-python-dev \\\n    osmosis && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /app\n\n# Configure postgres\nRUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.5/main/pg_hba.conf && \\\n    echo \"listen_addresses='*'\" >> /etc/postgresql/9.5/main/postgresql.conf\n\n# Nominatim install\nENV NOMINATIM_VERSION v3.1.0\nRUN git clone --recursive https://github.com/openstreetmap/Nominatim ./src\nRUN cd ./src && git checkout tags/$NOMINATIM_VERSION && git submodule update --recursive --init && \\\n    mkdir build && cd build && cmake .. && make\n\n# Osmium install to run continuous updates\nRUN pip install osmium\n\n# Apache configure\nCOPY local.php /app/src/build/settings/local.php\nCOPY nominatim.conf /etc/apache2/sites-enabled/000-default.conf\n\n# Load initial data\nRUN curl http://www.nominatim.org/data/country_grid.sql.gz > /app/src/data/country_osm_grid.sql.gz\n\nEXPOSE 5432\nEXPOSE 8080\n\nCOPY start.sh /app/start.sh\nCOPY startapache.sh /app/startapache.sh\nCOPY startpostgres.sh /app/startpostgres.sh\nCOPY init.sh /app/init.sh\n\n\n"
    },
    {
        "filename": "57eabaf23733045dfa88624cd0485aa73d189e12.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#  \n# doomkin/nodejs Dockerfile  \n#  \n# https://github.com/doomkin/nodejs  \n#  \n# Based on:  \n# https://github.com/doomkin/ubuntu-ssh  \n# https://github.com/dockerfile/nodejs  \n#  \n# Pull base image.  \nFROM doomkin/ubuntu-ssh  \nMAINTAINER Pavel Nikitin <p.doomkin@ya.ru>  \n# Set the noninteractive frontend  \nENV DEBIAN_FRONTEND noninteractive  \n  \n# Build Node.JS  \nRUN apt-get update && apt-get upgrade -y; \\  \napt-get install -y python python-dev python-pip python-virtualenv; \\  \ncd /tmp; \\  \nwget http://nodejs.org/dist/node-latest.tar.gz; \\  \ntar xvzf node-latest.tar.gz; \\  \nrm -f node-latest.tar.gz; \\  \ncd node-v*; \\  \n./configure; \\  \nCXX=\"g++ -Wno-unused-local-typedefs\" make; \\  \nCXX=\"g++ -Wno-unused-local-typedefs\" make install; \\  \ncd /tmp; \\  \nrm -rf /tmp/node-v*; \\  \nnpm install -g npm; \\  \nnpm install -g forever; \\  \necho '\\n# Node.js\\nexport PATH=\"node_modules/.bin:$PATH\"' >> /root/.bashrc; \\  \napt-get clean; \\  \nsed -i 's/^exit 0/service nginx start\\nexit 0/' /etc/rc.local  \n  \nEXPOSE 22 80 443  \n# Startup  \nCMD /etc/rc.local; bash  \n\n"
    },
    {
        "filename": "5818397ba59661366e39fa632cf2e161f7d23b8f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#: vim: set ft=dockerfile :\n\nfrom debian:jessie-slim\n\nrun set -x; \\\n\tmkdir -p /usr/src/bin2llvm/ \\\n\t&& apt-get update \\\n\t&& echo 'ca-certificates build-essential git liblua5.1-0-dev libsdl1.2-dev libsigc++-2.0-dev binutils-dev libiberty-dev libc6-dev-i386' > /usr/src/bin2llvm/deps \\\n\t&& apt-get install -y $(cat /usr/src/bin2llvm/deps) --no-install-recommends\n\nrun set -x; \\\n\tapt-get install -y --no-install-recommends gcc-multilib g++-multilib nasm subversion flex bison\nrun set -x; \\\n\tapt-get install -y --no-install-recommends wget cmake libgettextpo-dev\n\nrun set -x; \\\n\tapt-get install -y --no-install-recommends python-llvm python-pip\n\nrun pip install pyelftools\n\n# testing dependencies\nrun set -x; \\\n\tapt-get install -y --no-install-recommends rubygems ruby-dev gcc-arm-none-eabi\n\nrun set -x; \\\n\tgem install aruba --version 0.6.0 && \\\n\tgem install cucumber --version 1.3.18\n\nadd patches /usr/src/bin2llvm/patches\n\nrun mkdir -p /usr/src/bin2llvm/scripts\n\nadd scripts/setup.sh /usr/src/bin2llvm/scripts/setup.sh\nadd scripts/build_stage0.sh /usr/src/bin2llvm/scripts/build_stage0.sh\n\n# do the setup\nrun cd /usr/src/bin2llvm \\\n\t&& rm -rf third_party \\\n\t&& ./scripts/setup.sh\n\n# build stage 0\nrun cd /usr/src/bin2llvm \\\n\t&& ./scripts/build_stage0.sh /usr/src/bin2llvm /usr/src/bin2llvm-build\n\n"
    },
    {
        "filename": "58917bb83ae113fa2a4448faa5baeabbfaabd947.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:15.04\nMAINTAINER Shaked KleinO Orbach <klein.shaked+whatsapp@gmail.com>\n\n#Updates apt repository\nRUN apt-get update -y\n\n#Installs PHP5.6, some extensions and apcu.\nRUN apt-get install -y software-properties-common\nRUN add-apt-repository ppa:ondrej/php\nRUN apt-get install -y vim\nRUN apt-get install -y php5  php5-dev\n\n#Installs curl, pear, wget, git, memcached and mysql-server\nRUN apt-get install -y curl php-pear wget git memcached\n\n\n#Installs PHPUnit\nRUN wget https://phar.phpunit.de/phpunit.phar\nRUN chmod +x phpunit.phar\nRUN mv phpunit.phar /usr/local/bin/phpunit\n\n#Installs Composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n#Installs PHP CodeSniffer\nRUN pear install PHP_CodeSniffer\n\n#Fetches a sample php.ini file with most configurations already good-to-go.\nRUN wget https://raw.githubusercontent.com/naroga/docker-php56/master/php.ini\nRUN rm -r /etc/php5/cli/php.ini\nRUN rm -r /etc/php5/apache2/php.ini\nRUN cp php.ini /etc/php5/cli/php.ini\nRUN cp php.ini /etc/php5/apache2/php.ini\n\n# Whatsapp dependencies\nADD ./start.sh /tmp/start.sh\nRUN chmod +x /tmp/start.sh\nRUN /tmp/start.sh\nRUN apt-get install -y ffmpeg\nRUN apt-get install -y php5-gd\nRUN apt-get install -y php5-curl\nRUN apt-get install -y libapache2-mod-php5  #php5-sockets\nRUN apt-get install -y php5-sqlite\nRUN apt-get install -y php5-mcrypt\nRUN php5enmod mcrypt\nRUN mkdir /whatsapp\nRUN cd /whatsapp && composer require whatsapp/chat-api\n\n#Tests build\nRUN php -v\nRUN phpunit --version\nRUN composer --version\nRUN phpcs --version\nRUN php -i | grep timezone\nRUN php -r \"echo json_encode(get_loaded_extensions());\"\nRUN php -m | grep -w --color 'curve25519\\|protobuf\\|crypto'\n"
    },
    {
        "filename": "58aac1292c1a661cb766dc5dddf25439ad11b4a2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n# Inspired by:\n# https://hub.docker.com/r/runmymind/docker-android-sdk/~/dockerfile/\n\nFROM ubuntu:17.10\n\nMAINTAINER Sebastian Kaspari \"skaspari@mozilla.com\"\n\n# -- System -----------------------------------------------------------------------------\n\nRUN apt-get update -qq\n\nRUN apt-get install -y openjdk-8-jdk \\\n\t\t\t\t\t   wget \\\n\t\t\t\t\t   expect \\\n\t\t\t\t\t   git \\\n\t\t\t\t\t   curl \\\n\t\t\t\t\t   ruby \\\n\t\t\t\t\t   ruby-dev \\\n\t\t\t\t\t   ruby-build \\\n\t\t\t\t\t   python \\\n\t\t\t\t\t   python-pip \\\n\t\t\t\t\t   optipng \\\n\t\t\t\t\t   imagemagick \\\n\t\t\t\t\t   locales\nRUN gem install fastlane\n\nRUN locale-gen en_US.UTF-8\n\n# -- Android SDK ------------------------------------------------------------------------\n\nRUN cd /opt && wget -q https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz -O android-sdk.tgz\nRUN cd /opt && tar -xvzf android-sdk.tgz\nRUN cd /opt && rm -f android-sdk.tgz\n\nENV ANDROID_SDK_HOME /opt/android-sdk-linux\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH ${PATH}:${ANDROID_SDK_HOME}/tools:${ANDROID_SDK_HOME}/platform-tools:/opt/tools:${ANDROID_SDK_HOME}/build-tools/28.0.3\n\n# Platform tools\nRUN echo y | android update sdk --no-ui --all --filter platform-tools | grep 'package installed'\n\n# Android 8.0 / SDK 26\nRUN echo y | android update sdk --no-ui --all --filter android-26 | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter android-27 | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter android-28 | grep 'package installed'\n\n# Build tools 26.0.1\nRUN echo y | android update sdk --no-ui --all --filter build-tools-26.0.1 | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter build-tools-27.0.3 | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter build-tools-28.0.2 | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter build-tools-28.0.3 | grep 'package installed'\n\n# Extras\nRUN echo y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'\nRUN echo y | android update sdk --no-ui --all --filter extra-google-google_play_services | grep 'package installed'\n\n# Copy tools from our repository into the docker image\nCOPY tools /opt/tools\n\n# Accept licenses\nCOPY licenses ${ANDROID_SDK_HOME}/licenses\n\n# -- Emulator ---------------------------------------------------------------------------\n\n# Android 5.0 / SDK 21\nRUN echo y | android update sdk --no-ui --all --filter android-21 | grep 'package installed'\n\n# Emulator image\nRUN echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-21 | grep 'package installed'\n\n# Create emulator AVD\nRUN echo no | android create avd -f -n test -t android-21 --abi default/armeabi-v7a --skin 480x800\n\n# Create fake keymap file (Otherwise the emulator won't start up)\nRUN mkdir /opt/android-sdk-linux/tools/keymaps && \\\n    touch /opt/android-sdk-linux/tools/keymaps/en-us\n\n# -- Update SDK -------------------------------------------------------------------------\n\n# Update SDK\nRUN /opt/tools/android-accept-licenses.sh android update sdk --no-ui --obsolete --force\n\n# -- Project setup ----------------------------------------------------------------------\n\nWORKDIR /opt\n\n# Checkout source code\nRUN git clone https://github.com/mozilla-mobile/focus-android.git\n\n# Build project and run gradle tasks once to pull all dependencies\nWORKDIR /opt/focus-android\nRUN ./gradlew --no-daemon assemble testFocusX86DebugUnitTest lint pmd checkstyle spotbugs detektCheck ktlint\n\n# -- Post setup -------------------------------------------------------------------------\n\n# Install dependencies needed to run Android2Po\nRUN pip install -r tools/l10n/android2po/requirements.txt\n\n# Install taskcluster python library (used by decision tasks)\n# 5.0.0 is still incompatible with taskclusterProxy, meaning no decision task is able\n# to schedule the rest of the Taskcluster tasks. Please upgrade to taskcluster>=5 once\n# https://bugzilla.mozilla.org/show_bug.cgi?id=1460015 is fixed\nRUN pip install 'taskcluster>=4,<5'\nRUN pip install arrow\n\n# Install Google Cloud SDK for using Firebase Device Lab\nRUN curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-184.0.0-linux-x86_64.tar.gz --output /gcloud.tar.gz\nRUN tar -xvf /gcloud.tar.gz -C /\nRUN /google-cloud-sdk/install.sh --quiet\nRUN /google-cloud-sdk/bin/gcloud --quiet components update\n\n# Needed for verifying cyclic redundancy check (CRC) headers (Google Cloud SDK)\nRUN apt-get install gcc python-dev python-setuptools\nRUN easy_install -U pip\nRUN pip install -U crcmod\n\n# -- Cleanup ----------------------------------------------------------------------------\n\nRUN apt-get clean\n"
    },
    {
        "filename": "590114829b25a29ceb46e78553af669453b09012.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Docker container for building openpaas Debian Stretch package\n#\n\nFROM linagora/fpm-debian-stretch\nMAINTAINER Linagora Folks <openpaas@linagora.com>\n\nARG DEBIAN_FRONTEND=noninteractive\nARG VERSION=0.0.0\nARG ITERATION=1\nARG TREEISH=master\n\nRUN apt-get update && apt-get install -y wget && \\\n    wget -q -O - http://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -; \\\n    echo \"deb http://deb.nodesource.com/node_10.x jessie main\" > /etc/apt/sources.list.d/node.list && \\\n    apt-get update && \\\n    apt-get -y install git build-essential python-setuptools graphicsmagick g++ nodejs \\\n    graphicsmagick-imagemagick-compat libjpeg-dev libcairo2-dev libjpeg62-turbo-dev libpango1.0-dev libgif-dev\n\nRUN git clone --no-single-branch --depth=1 https://ci.linagora.com/linagora/lgs/openpaas/esn.git /package/usr/share/openpaas\n\nADD common/openpaas/package /package\nADD debian/common/openpaas/package /package\n\nADD common/openpaas/openpaas.preinst /root/\nADD common/openpaas/openpaas.postinst /root/\nADD common/openpaas/openpaas.postrm /root/\nADD common/openpaas/openpaas.prerm /root/\n\nWORKDIR /package/usr/share/openpaas\nRUN git checkout $TREEISH && npm i --production && ./node_modules/bower/bin/bower install --allow-root && \\\n    find . -name .git -type d -exec rm -rf {} +\n\nWORKDIR /package\nRUN fpm \\\n  -s dir \\\n  -t deb \\\n  --name openpaas \\\n  --version $VERSION \\\n  --iteration \"$ITERATION+stretch\" \\\n  --license AGPLv3 \\\n  --vendor Linagora \\\n  --maintainer \"Linagora Folks <lgs-openpaas-dev@linagora.com>\" \\\n  --description \"OpenPaas Enterprise Social Network - Application Server\" \\\n  --url \"http://open-paas.org\" \\\n  --architecture x86_64 \\\n  --directories /etc/openpaas \\\n  --directories /var/log/openpaas \\\n  --directories /usr/share/openpaas \\\n  --deb-user openpaas \\\n  --deb-group openpaas \\\n  --depends nginx \\\n  --depends elasticsearch \\\n  --depends mongodb \\\n  --depends redis-server \\\n  --depends rabbitmq-server \\\n  --depends openjdk-8-jdk \\\n  --depends nodejs \\\n  --depends graphicsmagick \\\n  --depends graphicsmagick-imagemagick-compat \\\n  --depends libcairo2 \\\n  --depends libjpeg62-turbo \\\n  --depends libpango1.0-0 \\\n  --depends libgif7 \\\n  --before-install /root/openpaas.preinst \\\n  --after-install /root/openpaas.postinst \\\n  --before-remove /root/openpaas.prerm \\\n  --after-remove /root/openpaas.postrm \\\n  .\n\nVOLUME /result\n\nENTRYPOINT cp /package/openpaas*.deb /result/\n"
    },
    {
        "filename": "59c5804a510da9b73422edbbe8b3d43ec75380ae.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#\n# Cartodb container\n#\nFROM ubuntu:18.04\nLABEL maintainer=\"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>\"\n\n# Configuring locales\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install -y -q apt-utils software-properties-common locales && dpkg-reconfigure locales && \\\n      locale-gen en_US.UTF-8 && \\\n      update-locale LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n#ENV CARTODB_VERSION=v4.11.152\n#ENV CARTODB_VERSION=v4.12.9\n#ENV CARTODB_VERSION=v4.12.26\n#ENV CARTODB_VERSION=v4.12.30\nENV CARTODB_VERSION=master\n#ENV SQLAPI_VERSION=1.47.2\nENV SQLAPI_VERSION=master\n#ENV CRANKSHAFT_VERSION=0.8.1\nENV CRANKSHAFT_VERSION=master\n#ENV WINDSHAFT_VERSION=5.4.0\nENV WINDSHAFT_VERSION=master\n#ENV DATASERVICES_VERSION=0.0.2\nENV DATASERVICES_VERSION=master\n#ENV DATAERVICESAPI_VERSION=0.30.5-server\nENV DATAERVICESAPI_VERSION=master\n#ENV OBSERVATORY_VERSION=1.9.0\nENV OBSERVATORY_VERSION=master\n\nRUN useradd -m -d /home/cartodb -s /bin/bash cartodb && \\\n  apt-get install -y -q \\\n    build-essential \\\n    autoconf \\\n    automake \\\n    libtool \\\n    checkinstall \\\n    unp \\\n    zip \\\n    unzip \\\n    git-core \\\n    git \\\n    subversion \\\n    curl \\\n    libgeos-c1v5 \\\n    libgeos-dev \\\n    libjson-c-dev \\\n    python-simplejson \\\n    proj-bin \\\n    proj-data \\\n    libproj-dev \\\n    gdal-bin \\\n    libgdal-dev \\\n    postgresql-10 \\\n    postgresql-client-10 \\\n    postgresql-contrib-10 \\\n    postgresql-server-dev-10 \\\n    postgresql-plpython-10 \\\n    postgresql-10-plproxy \\\n    postgresql-10-postgis-2.4 \\\n    postgresql-10-postgis-scripts \\\n    postgis \\\n    liblwgeom-2.4-0 \\\n    ca-certificates \\\n    redis-server \\\n    python2.7-dev \\\n    python-setuptools \\\n    imagemagick \\\n    libmapnik-dev \\\n    mapnik-utils \\\n    python-mapnik \\\n    python-argparse \\\n    python-gdal \\\n    python-chardet \\\n    python-all-dev \\\n    python-docutils \\\n    openssl \\\n    libreadline7 \\\n    zlib1g \\\n    zlib1g-dev \\\n    libssl-dev \\\n    libyaml-dev \\\n    libsqlite3-dev \\\n    sqlite3 \\\n    libxml2-dev \\\n    libxslt-dev \\\n    libc6-dev \\\n    ncurses-dev \\\n    bison \\\n    pkg-config \\\n    libpq5 \\\n    libpq-dev \\\n    libcurl4-gnutls-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    gnupg \\\n    libreadline6-dev \\\n    libcairo2-dev \\\n    libjpeg8-dev \\\n    libpango1.0-dev \\\n    libgif-dev \\\n    libgmp-dev \\\n    libicu-dev \\\n    wget \\\n    nginx-light \\\n    net-tools \\\n    ruby2.5-dev \\\n    xz-utils \\\n  --no-install-recommends && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN git config --global user.email you@example.com\nRUN git config --global user.name \"Your Name\"\n\n# Varnish 3, Ubuntu:18.04 comes with Varnish 5.1 which can't be run with anonymous admin telnet\nRUN cd /opt && \\\n    wget http://varnish-cache.org/_downloads/varnish-3.0.7.tgz && \\\n    tar -zxf varnish-3.0.7.tgz && \\\n    cd varnish-3.0.7 && \\\n    ./configure --prefix=/opt/varnish && \\\n    make && \\\n    make install && \\\n    cd /opt && \\\n    rm -rf varnish-3.0.7 varnish-3.0.7.tgz\n\n# Install NodeJS\nRUN curl https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz |tar -Jxf - --strip-components=1 -C /usr && \\\n  npm install -g grunt-cli && \\\n  npm install -g npm@6 && \\\n  rm -r /tmp/npm-* /root/.npm\n\n# Setting PostgreSQL\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/10/main/pg_hba.conf && \\\n    service postgresql start && \\\n    createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres && \\\n    createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres && \\\n    service postgresql stop\n\n# Crankshaft: CARTO Spatial Analysis extension for PostgreSQL\nRUN cd / && \\\n    curl https://bootstrap.pypa.io/get-pip.py | python && \\\n    git clone https://github.com/CartoDB/crankshaft.git && \\\n    cd /crankshaft && \\\n    git checkout $CRANKSHAFT_VERSION && \\\n    make install && \\\n    # Numpy gets upgraded after scikit-learn is installed\n    # make sure scikit-learn is compatible with currently installed numpy, by reinstalling\n    pip install --force-reinstall --no-cache-dir scikit-learn==0.17.0 && \\\n    cd ..\n\n# Initialize template postgis db\nADD ./template_postgis.sh /tmp/template_postgis.sh\nRUN service postgresql start && /bin/su postgres -c \\\n      /tmp/template_postgis.sh && service postgresql stop\n\nADD ./cartodb_pgsql.sh /tmp/cartodb_pgsql.sh\n\n# Install CartoDB API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git && \\\n    cd CartoDB-SQL-API && \\\n    git checkout $SQLAPI_VERSION && \\\n    npm install\n\n# Install Windshaft\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git && \\\n    cd Windshaft-cartodb && \\\n    git checkout $WINDSHAFT_VERSION && \\\n    npm install && \\\n    mkdir logs\n\n# Install CartoDB\nRUN git clone --recursive git://github.com/CartoDB/cartodb.git && \\\n    cd cartodb && \\\n    git checkout $CARTODB_VERSION && \\\n    # Install cartodb extension\n    cd lib/sql && \\\n    PGUSER=postgres make install && \\\n    service postgresql start && /bin/su postgres -c \\\n      /tmp/cartodb_pgsql.sh && service postgresql stop && \\\n    cd - && \\\n    npm install && \\\n    rm -r /tmp/npm-* /root/.npm && \\\n    perl -pi -e 's/gdal==1\\.10\\.0/gdal==2.2.2/' python_requirements.txt && \\\n    pip install --no-binary :all: -r python_requirements.txt && \\\n    gem install bundler --version=1.17.3 && gem install compass archive-tar-minitar rack && \\\n    bundle update thin && \\\n    /bin/bash -l -c 'bundle install' && \\\n    cp config/grunt_development.json ./config/grunt_true.json && \\\n    /bin/bash -l -c 'bundle exec grunt'\n    # && \\\n    #rm -rf .git /root/.cache/pip node_modules\n\n# Geocoder SQL client + server\nRUN git clone https://github.com/CartoDB/data-services.git && \\\n  cd /data-services/geocoder/extension && \\\n  git checkout $DATASERVICES_VERSION && \\\n  PGUSER=postgres make all install && cd / && \\\n  git clone https://github.com/CartoDB/dataservices-api.git && \\\n  cd /dataservices-api/server/extension && \\\n  git checkout $DATAERVICESAPI_VERSION && \\\n  PGUSER=postgres make install && \\\n  cd ../lib/python/cartodb_services && \\\n  pip install -r requirements.txt && pip install . && \\\n  cd ../../../../client && PGUSER=postgres make install\n\n# Observatory extension\nRUN cd / && git clone --recursive https://github.com/CartoDB/observatory-extension.git && \\\n  cd observatory-extension && \\\n  git checkout $OBSERVATORY_VERSION && \\\n  PGUSER=postgres make deploy\n\n# Copy confs\nADD ./config/CartoDB-dev.js \\\n      /CartoDB-SQL-API/config/environments/development.js\nADD ./config/WS-dev.js \\\n      /Windshaft-cartodb/config/environments/development.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./create_dev_user /cartodb/script/create_dev_user\nADD ./setup_organization.sh /cartodb/script/setup_organization.sh\nADD ./config/cartodb.nginx.proxy.conf /etc/nginx/sites-enabled/default\nADD ./config/varnish.vcl /etc/varnish.vcl\nADD ./geocoder.sh /cartodb/script/geocoder.sh\nADD ./geocoder_server.sql /cartodb/script/geocoder_server.sql\nADD ./fill_geocoder.sh /cartodb/script/fill_geocoder.sh\nADD ./sync_tables_trigger.sh /cartodb/script/sync_tables_trigger.sh\nENV PATH /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN mkdir -p /cartodb/log && touch /cartodb/log/users_modifications && \\\n    /opt/varnish/sbin/varnishd -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl && \\\n    perl -pi.bak -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf && \\\n    service postgresql start && service redis-server start && \\\n    perl -pi -e 's/0\\.22\\.0/0.22.2/' /cartodb/app/models/user/db_service.rb && \\\n\tbash -l -c \"cd /cartodb && bash script/create_dev_user && \\\n    bash script/setup_organization.sh && bash script/geocoder.sh\" && \\\n\tservice postgresql stop && service redis-server stop && \\\n    chmod +x /cartodb/script/fill_geocoder.sh && \\\n    chmod +x /cartodb/script/sync_tables_trigger.sh\n\nEXPOSE 80\n\nENV GDAL_DATA /usr/share/gdal/2.2\n\n# Number of seconds between a sync tables task is run\n# Default interval is an hour, use `docker run -e SYNC_TABLES_INTERVAL=60 ...` to change it\nENV SYNC_TABLES_INTERVAL 3600\n\nADD ./startup.sh /opt/startup.sh\n\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nHEALTHCHECK CMD curl -f http://localhost || exit 1\n"
    },
    {
        "filename": "59d743e8e2227016bef2325112baac9dcfa96e0e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM hypriot/rpi-python\n\nWORKDIR /app\nADD . /app\nRUN apt-get update && apt-get install -y \\\n  python-dev \\\n  python-pip \\\n  python-smbus \\\n  libfreetype6-dev \\\n  libjpeg-dev \\\n  ttf-dejavu-core \\\n  build-essential \\\n  gcc \\\n  vim \\\n  iputils-ping \\\n  python-imaging && pip install --index-url=https://pypi.python.org/simple/ --upgrade pip && apt-get purge -y python-pip\nRUN pip install -r requirements.txt\nCMD /bin/bash\n"
    },
    {
        "filename": "5a4c7eba12e3a461b9b3b42e51fcb8379bf88ace.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM java7\n\nMAINTAINER Atos\nEXPOSE 4502\nENTRYPOINT [\"/conf_2_run.sh\"]\nENV CQ_RUNMODE author\nENV CQ_PORT 4502\nVOLUME [\"/pkgs\"]\n\nRUN yum update -y && yum install -y unix2dos && \\\n\tyum clean all && \\\n\tmkdir -p /pkgs /opt/aem /hotfixes\n\nADD files/cq-author /etc/default/\nRUN mkdir -m 770 /var/run/aem\n\nADD files/license.properties /opt/aem/author/\nADD files/AEM_6.0_Quickstart.jar /opt/aem/author/cq-author-p4502.jar\nRUN cd /opt/aem/author/ && \\\n\tjava -jar cq-author-p4502.jar -unpack -v && \\\n\tmkdir /opt/aem/author/crx-quickstart/install\nADD files/AEM_6.0_Service_Pack_1-1.0.zip /opt/aem/author/crx-quickstart/install/\n\nADD files/jaas.conf /opt/aem/author/crx-quickstart/conf/\n\nADD hotfixes/* /hotfixes/\nADD aem_first_run.sh examine_log.sh /\nRUN /aem_first_run.sh && \\\n\trm -rv /hotfixes && \\\n\tmkdir -p /segmentstore && \\\n\tmv /opt/aem/author/crx-quickstart/repository/segmentstore/* /segmentstore\n\nADD conf_2_run.sh web_conf.sh /\n"
    },
    {
        "filename": "5a7284664befaeb496b6f6589695e27bef8552e5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Largely taken from http://blog.stefanxo.com/2014/01/breaking-down-a-dockerfile/\nFROM ubuntu:latest\nMAINTAINER Ming Chow <mchow@cs.tufts.edu>\nRUN apt-get update\nRUN apt-get -y upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-client mysql-server apache2 libapache2-mod-php5 python-setuptools vim-tiny php5-mysql sudo\nRUN easy_install supervisor\nCOPY ./database /database\nADD ./scripts/start.sh /start.sh\nADD ./scripts/foreground.sh /etc/apache2/foreground.sh\nADD ./configs/supervisord.conf /etc/supervisord.conf\nADD ./configs/000-default.conf /etc/apache2/sites-available/000-default.conf\nRUN rm -rf /var/www/\nCOPY ./www /var/www\nRUN chown -R www-data:www-data /var/www/\nRUN chmod 755 /start.sh\nRUN chmod 755 /etc/apache2/foreground.sh\nRUN mkdir /var/log/supervisor/\nRUN mkdir /var/run/sshd\nEXPOSE 80\nCMD [\"/bin/bash\", \"/start.sh\"]\n"
    },
    {
        "filename": "5b2b80b1a0c2175cff3a657b5529495bcc57fd51.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM perl:5.20\n\nMAINTAINER MacArthur Lab\n\n# install commmon utilities\nRUN apt-get update && apt-get install -y --fix-missing \\\n    apt-utils \\\n    bzip2 \\\n    cmake \\\n    curl \\\n    emacs \\\n    g++ \\\n    git \\\n    htop \\\n    less \\\n    nano \\\n    wget \\\n    xterm\n\n# install jdk-8 for running hail locally\nRUN echo deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main >> /etc/apt/sources.list.d/java-8-debian.list\nRUN echo deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main >> /etc/apt/sources.list.d/java-8-debian.list\nRUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\nRUN echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n    && apt-get update \\\n    && apt-get install -y oracle-java8-installer \\\n    && apt-get install -y oracle-java8-set-default\n\n# install python and gcloud utils\nRUN apt-get install -y python-dev \\\n    && wget https://bootstrap.pypa.io/get-pip.py \\\n    && python get-pip.py \\\n    && pip install --upgrade setuptools\n\nRUN CLOUDSDK_CORE_DISABLE_PROMPTS=1 \\\n    && curl https://sdk.cloud.google.com | bash \\\n    && apt-get install -y lsb gcc python-dev python-setuptools libffi-dev libssl-dev \\\n    && pip install gsutil\n\nRUN CLOUDSDK_CORE_DISABLE_PROMPTS=1 \\\n    && CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" \\\n    && echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n    && apt-get update&& apt-get install -y google-cloud-sdk\n\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n    && chmod +x ./kubectl \\\n    && mv ./kubectl /usr/local/bin/kubectl\n\n# install google storage connector which allows hail to access vds in google buckets without downloading them first\nRUN cd /usr/local \\\n    && wget -nv https://archive.apache.org/dist/spark/spark-2.0.2/spark-2.0.2-bin-hadoop2.7.tgz \\\n    && tar xzf /usr/local/spark-2.0.2-bin-hadoop2.7.tgz\n\n# fix http://discuss.hail.is/t/importerror-cannot-import-name-getargspec/468\nRUN pip install decorator==4.2.1\n\n# install jupyter\nRUN pip install --upgrade pip jupyter\n\n#RUN git clone --branch 0.1 https://github.com/broadinstitute/hail.git \\\n#    && cd /hail \\\n#    && ./gradlew -Dspark.version=2.0.2 shadowJar archiveZip\n\n\n# install picard\n#RUN mkdir /picard \\\n#    && cd /picard \\\n#    && wget https://github.com/broadinstitute/picard/releases/download/2.15.0/picard.jar\n\n# download LiftoverChain files\n#RUN mkdir -p /reference-data \\\n#    && cd /reference-data \\\n#    && wget http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz \\\n#    && wget http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz\n\n# download and install VEP - steps based on gs://hail-common/vep/vep/GRCh37/vep85-GRCh37-init.sh and gs://hail-common/vep/vep/GRCh38/vep85-GRCh38-init.sh\nRUN gsutil -m cp gs://hail-common/vep/htslib/* /usr/bin/ \\\n    && gsutil -m cp gs://hail-common/vep/samtools /usr/bin/ \\\n    && chmod a+rx  /usr/bin/tabix /usr/bin/bgzip /usr/bin/htsfile /usr/bin/samtools\n\nRUN wget https://raw.github.com/miyagawa/cpanminus/master/cpanm -O /usr/bin/cpanm && chmod +x /usr/bin/cpanm\n# VEP dependencies\nRUN /usr/bin/cpanm --notest Set::IntervalTree\nRUN /usr/bin/cpanm --notest PerlIO::gzip\nRUN /usr/bin/cpanm --notest DBI\nRUN /usr/bin/cpanm --notest CGI\nRUN /usr/bin/cpanm --notest JSON\n# LoFTEE dependencies\nRUN /usr/bin/cpanm --notest DBD::SQLite\nRUN /usr/bin/cpanm --notest  List::MoreUtils\n\n# DISABLE_CACHE work-around to force git pull on every docker build, based on https://github.com/docker/docker/issues/1996\nARG DISABLE_CACHE=1\n\n# clone hail-elasticsearch-pipelines\nRUN git clone https://github.com/macarthur-lab/hail-elasticsearch-pipelines.git /hail-elasticsearch-pipelines\n\n# copy hail build\nRUN mkdir -p /hail/build/libs /hail/build/distributions \\\n    && cp /hail-elasticsearch-pipelines/hail_builds/v01/hail-v01-10-8-2018-90c855449.zip /hail/build/distributions/hail-python.zip \\\n    && cp /hail-elasticsearch-pipelines/hail_builds/v01/hail-v01-10-8-2018-90c855449.jar /hail/build/libs/hail-all-spark.jar \\\n    && cp /hail-elasticsearch-pipelines/hail_builds/v01/gcs-connector-1.6.10-hadoop2.jar /usr/local/spark-2.0.2-bin-hadoop2.7/jars/\n\nENV TERM=xterm\nENV PYTHONPATH=\"$PYTHONPATH:/seqr:/seqr_settings:/hail-elasticsearch-pipelines\"\n\nCOPY config/gitconfig /root/.gitconfig\nCOPY bashrc /root/.bashrc\nCOPY config/run_hail_locally.sh /hail-elasticsearch-pipelines\nCOPY config/run_hail_on_dataproc.sh /hail-elasticsearch-pipelines\nCOPY config/core-site.xml /usr/local/spark-2.0.2-bin-hadoop2.7/conf/\nCOPY entrypoint.sh /\n\n\nWORKDIR /hail-elasticsearch-pipelines\n\nCMD [ \"/entrypoint.sh\" ]\n"
    },
    {
        "filename": "5be080d4b847ec62169a84bd6ba06345a40aedfe.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\n# make sure apt is up to date\nRUN apt-get update\n\n# install nodejs and npm\nRUN apt-get install -y nodejs npm #git git-core\n\nADD . /api/\n\n#RUN chmod +x /api/server.js\n\nRUN cd /api/; npm install\n\nEXPOSE 8000\nCMD /usr/bin/nodejs /api $ADDRESS 8000"
    },
    {
        "filename": "5bf6a56eb8e71a0e3025bac28c8c2c153d9d107d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "###############\n# inbox/inbox #\n###############\n\nFROM debian:wheezy\n\nMAINTAINER inboxapp\nRUN apt-get -q update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get -qy install \\\n        anacron \\\n        build-essential \\\n        cron \\\n        curl \\\n        g++ \\\n        gcc \\\n        git \\\n        lib32z1-dev \\\n        libffi-dev \\\n        libmysqlclient-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        libzmq-dev \\\n        mysql-client \\\n        net-tools \\\n        procps \\\n        python \\\n        python-dev \\\n        python-lxml \\\n        python-pip \\\n        python-setuptools \\\n        python-software-properties\\\n        runit \\\n        sudo \\\n        supervisor \\\n        tnef \\\n        wget \\\n    && \\\n    pip install 'setuptools>=5.3' subprocess32 tox\n\nRUN useradd -ms /bin/sh admin && \\\n    install -d -m0775 -o root -g admin /srv/inbox\nWORKDIR /srv/inbox\n\nADD requirements.txt /srv/inbox/requirements.txt\nRUN pip install -r /srv/inbox/requirements.txt\n\n# XXX: This is to work around some problem with installing the deps from tox.ini\nRUN pip install \\\n        pytest \\\n        pytest-flask \\\n        pytest-instafail \\\n        pytest-timeout \\\n        pytest-xdist \\\n        requests\n\nRUN install -d -m0775 -o root -g admin /etc/inboxapp && \\\n    install -d -m0775 -o root -g admin /etc/mysql/conf.d && \\\n    install -d -m0775 -o root -g admin /run/inboxapp && \\\n    install -d -m0775 -o root -g admin /run/supervisor && \\\n    ln -s /srv/inbox/docker /srv/docker && \\\n    chown -R admin /usr/local/lib/python2.7\n\n#@DYNAMIC base\nADD . /srv/inbox\nRUN /srv/inbox/docker/postinstall-src /srv/inbox && \\\n    install -m0755 docker/inbox-cron-hourly /etc/cron.hourly/inbox-cron-hourly && \\\n    install -m0755 docker/inbox-cron-daily /etc/cron.daily/inbox-cron-daily && \\\n    install -m0755 docker/inbox-cron-weekly /etc/cron.weekly/inbox-cron-weekly && \\\n    install -m0755 docker/inbox-cron-monthly /etc/cron.monthly/inbox-cron-monthly\n\nENTRYPOINT [\"/srv/docker/entrypoint\"]\nENV INBOX_CFG_PATH /etc/inboxapp/secrets.yml:/etc/inboxapp/config.json:/run/inboxapp/secrets.yml:/run/inboxapp/config.json\nEXPOSE 5555\n\n# Permissions for some of these are set in docker/entrypoint.\nVOLUME [\"/etc/inboxapp\", \"/var/lib/inboxapp\", \"/var/log/inboxapp\", \"/var/log/supervisor\"]\n"
    },
    {
        "filename": "5c40787414a90aa7d909f3e4b0f862a00d089ba6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM andrewgodwin/base\n\nMAINTAINER Andrew Godwin <andrew@aeracode.org>\n\nRUN apt-get update -qq && apt-get install -y varnish\n\n# Nginx setup\nADD *.vcl /etc/varnish/\nADD run-varnish.py /usr/local/bin/run-varnish\nRUN chmod +x /usr/local/bin/run-varnish\n\nEXPOSE 80\n\nCMD [\"/usr/local/bin/run-varnish\"]\n"
    },
    {
        "filename": "47df088e823b59456ae9b22fc14ac71c48d70539.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Generated by Porcupine\n# Modelled after Neurodocker v0.2.0-dev. https://github.com/kaczmarj/neurodocker\n\nFROM timvanmourik/porcupine\n\n#----------------------------------------------------------\n# Install common dependencies and create default entrypoint\n#----------------------------------------------------------\nARG DEBIAN_FRONTEND=noninteractive\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C\" \\\n    ND_ENTRYPOINT=\"/porcupine/startup.sh\"\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends  \\\n    \tbzip2 ca-certificates curl unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir /porcupine \\\n    && echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \\\n    && echo 'set +x' >> $ND_ENTRYPOINT \\\n    && echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT \\\n    && chmod -R 777 /porcupine && chmod a+s /porcupine\nENTRYPOINT [\"/porcupine/startup.sh\"]\n\n#---------------\n# Install Nipype\n#---------------\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.3.11-Linux-x86_64.sh && \\\n    bash Miniconda3-4.3.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.3.11-Linux-x86_64.sh\n\nENV PATH=/usr/local/miniconda/bin:$PATH \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8\n\n# Installing precomputed python packages\nRUN conda install -y mkl=2017.0.1 mkl-service &&  \\\n    conda install -y numpy=1.12.0 \\\n                     scipy=0.18.1 \\\n                     scikit-learn=0.18.1 \\\n                     matplotlib=2.0.0 \\\n                     pandas=0.19.2 \\\n                     libxml2=2.9.4 \\\n                     libxslt=1.1.29\\\n                     traits=4.6.0 \\\n                     boto\n\nRUN chmod +x /usr/local/miniconda/bin/* && conda clean --all -y\nRUN echo 'export PATH=/usr/local/miniconda/bin:$PATH' >> /etc/profile\nRUN pip install nipype\nRUN apt-get update && apt-get install -y graphviz\n#-------------------\n# Install ANTs 2.2.0\n#-------------------\nRUN echo \"Downloading ANTs ...\" \\\n    && curl -sSL --retry 5 https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz \\\n    | tar zx -C /opt\nENV ANTSPATH=/opt/ants \\\n    PATH=/opt/ants:$PATH\n\n#--------------------\n# Install AFNI latest\n#--------------------\nENV PATH=/opt/afni:$PATH\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends ed gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa \\\n    libgomp1 libjpeg62 libxm4 netpbm tcsh xfonts-base xvfb \\\n    && libs_path=/usr/lib/x86_64-linux-gnu \\\n    && if [ -f $libs_path/libgsl.so.19 ]; then \\\n           ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0; \\\n       fi \\\n    # Install libxp (not in all ubuntu/debian repositories) \\\n    && apt-get install -yq --no-install-recommends libxp6 \\\n    || /bin/bash -c \" \\\n       curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n       && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb\" \\\n    # Install libpng12 (not in all ubuntu/debian repositories) \\\n    && apt-get install -yq --no-install-recommends libpng12-0 \\\n    || /bin/bash -c \" \\\n       curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n       && dpkg -i /tmp/libpng12.deb && rm -f /tmp/libpng12.deb\" \\\n    # Install R \\\n    && apt-get install -yq --no-install-recommends \\\n    \tr-base-dev r-cran-rmpi \\\n     || /bin/bash -c \" \\\n        curl -o /tmp/install_R.sh -sSL https://gist.githubusercontent.com/kaczmarj/8e3792ae1af70b03788163c44f453b43/raw/0577c62e4771236adf0191c826a25249eb69a130/R_installer_debian_ubuntu.sh \\\n        && /bin/bash /tmp/install_R.sh\" \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && echo \"Downloading AFNI ...\" \\\n    && mkdir -p /opt/afni \\\n    && curl -sSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n    | tar zx -C /opt/afni --strip-components=1 \\\n    && /opt/afni/rPkgsInstall -pkgs ALL \\\n    && rm -rf /tmp/*\n\n#-----------------------------------------------------------\n# Install FSL v5.0.10\n# FSL is non-free. If you are considering commerical use\n# of this Docker image, please consult the relevant license:\n# https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence\n#-----------------------------------------------------------\nRUN echo \"Downloading FSL ...\" \\\n    && curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz \\\n    | tar zx -C /opt \\\n    && /bin/bash /opt/fsl/etc/fslconf/fslpython_install.sh -q -f /opt/fsl \\\n    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT\nENV FSLDIR=/opt/fsl \\\n    PATH=/opt/fsl/bin:$PATH\n\n#--------------------------------\n# Add custom analysis file as CMD\n#--------------------------------\nADD ./porcupine_generated_pipeline.py /run.py\nCMD [\"python\", \"/run.py\"]\n"
    },
    {
        "filename": "48267c18bebbec4ed5941e60636abf09e89c7509.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM bbvainnotech/ubuntu-base:latest\nMAINTAINER BBVA Innovation <eurocloud-oneteam.group@bbva.com>\n\n# add our user and group first to make sure their IDs get assigned\n# consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\nENV PERCONA_XTRADB_VERSION 5.6\nENV MYSQL_VERSION 5.6\nENV TERM linux\n\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y perl --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\nRUN apt-key adv --keyserver keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A\n\nRUN echo \"deb http://repo.percona.com/apt trusty main\" > /etc/apt/sources.list.d/percona.list\nRUN echo \"deb-src http://repo.percona.com/apt trusty main\" >> /etc/apt/sources.list.d/percona.list\n\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server\n# postinst doesn't have an explicit way to disable the\n# mysql_install_db codepath besides having a database already\n# \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN { \\\n                echo percona-server-server-5.6 percona-server-server/data-dir select ''; \\\n                echo percona-server-server-5.6 percona-server-server/root_password password ''; \\\n        } | debconf-set-selections \\\n        && apt-get update && DEBIAN_FRONTEND=nointeractive apt-get install -y --force-yes percona-xtradb-cluster-client-\"${MYSQL_VERSION}\" \\\n           percona-xtradb-cluster-common-\"${MYSQL_VERSION}\" percona-xtradb-cluster-server-\"${MYSQL_VERSION}\" \\\n        && rm -rf /var/lib/apt/lists/* \\\n        && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql && chown -R mysql:mysql /var/lib/mysql\n\nVOLUME /var/lib/mysql\n\nADD     data /\n\nCOPY my.cnf /etc/mysql/my.cnf\nCOPY cluster.cnf /etc/mysql/conf.d/cluster.cnf\n\nRUN     chown root:root /bootstrap/*.sh && chmod a+x /bootstrap/*.sh\n\nENTRYPOINT  [\"/bootstrap/bootstrap.sh\"]\n\nEXPOSE 3306 4444 4567 4568\nCMD [\"mysqld\"]"
    },
    {
        "filename": "496baf598e846a745d4ff03956a54a3917d84278.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM osmtw/modtile:v3.0.9\nMAINTAINER Rex Tsai <rex.cc.tsai@gmail.com>\n\nRUN apt-get update \\\n && apt-get dist-upgrade -y\n\n# Install the Mapnik stylesheet and the coastline data\nRUN apt-get install -y subversion unzip wget \\\n && svn co http://svn.openstreetmap.org/applications/rendering/mapnik /usr/local/src/mapnik-style \\\n && bash -e /usr/local/src/mapnik-style/get-coastlines.sh /usr/local/share \\\n && cd -\n\n## Configure mapnik style-sheets\nADD settings.sed /tmp/\nADD fontset-settings.xml.inc /usr/local/src/mapnik-style/inc/fontset-settings.xml.inc\nADD datasource-settings.sh /usr/local/bin/datasource-settings.sh\nRUN cd /usr/local/src/mapnik-style/inc \\\n && sed --file /tmp/settings.sed  settings.xml.inc.template > settings.xml.inc \\\n && chmod 755 /usr/local/bin/datasource-settings.sh \\\n && chown -R www-data /usr/local/src/mapnik-style/inc \\\n && cd -\n\n# Install openstreetmap-carto\nENV OSM_CARTO_VERSION=v2.39.0\nRUN git clone --depth 1 --branch ${OSM_CARTO_VERSION} https://github.com/gravitystorm/openstreetmap-carto.git /usr/local/src/openstreetmap-carto \\\n && cd /usr/local/src/openstreetmap-carto \\\n && ./get-shapefiles.sh \\\n && cd -\n\n# Install osm-bright\nENV OSM_BRIGHT_VERSION=master\nRUN git clone --depth 1 --branch ${OSM_BRIGHT_VERSION} https://github.com/mapbox/osm-bright.git /usr/local/src/osm-bright \\\n && sed -e s%unifont%Unifont% -i /usr/local/src/osm-bright/osm-bright/palette.mss \\\n && ln -s /usr/local/src/openstreetmap-carto/data /usr/local/src/osm-bright/shp\nRUN chown -R www-data.www-data /usr/local/src/\n\n# Setup web pages\nRUN rm -rf /var/www/html\nADD leafletjs-localmap /var/www/html\n\n# Configure renderd\nADD renderd.conf /usr/local/etc/renderd.conf\nRUN install --owner=www-data --group=www-data -d /var/run/renderd\n\n# Setup supervisord\nENV SUPERVISOR_VERSION=3.2.0-2\nADD supervisord.conf /etc/supervisord.conf\nRUN apt-get install -y supervisor=${SUPERVISOR_VERSION}\n\n# Clean up APT when done\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 80\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\", \"--configuration=/etc/supervisord.conf\"]\n"
    },
    {
        "filename": "49c1c7ee4e5b3ed6f28dc172e890b04e2f849507.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile for lapis on fedora\nFROM fedora\nMAINTAINER http://fedoraproject.org/wiki/Cloud\n\nRUN yum -y update && yum clean all\nRUN yum -y install unzip tar wget vim git make gcc readline-devel pcre-devel openssl-devel && yum clean all\n\n#install openresty\nENV OPENRESTY_VERSION 1.7.7.1\nRUN cd /usr/src/ \\\n&& wget http://openresty.org/download/ngx_openresty-$OPENRESTY_VERSION.tar.gz \\\n&& tar xvfz ngx_openresty-$OPENRESTY_VERSION.tar.gz \\\n&& cd ngx_openresty-$OPENRESTY_VERSION \\\n&& ./configure \\\n&& make \\\n&& make install\n\n#install luarocks\nENV LUAROCKS_VERSION 2.2.0\nRUN cd /usr/src/ \\\n&& wget http://luarocks.org/releases/luarocks-$LUAROCKS_VERSION.tar.gz \\\n&& tar xvfz luarocks-$LUAROCKS_VERSION.tar.gz \\\n&& cd luarocks-$LUAROCKS_VERSION \\\n&& ./configure --prefix=/usr/local/openresty/luajit \\\n        --with-lua=/usr/local/openresty/luajit/ \\\n        --lua-suffix=jit-2.1.0-alpha \\\n        --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1 \\\n&& make build \\\n&& make install\n\nENV PATH=/usr/local/openresty/luajit/bin/:$PATH\n\n#install lapis\nRUN luarocks install lapis\n\n# Bundle app source\n#COPY . /lapisappa\nADD . /opt/webapp\nWORKDIR /opt/webapp\n\nEXPOSE 8080\n# start lapis server\nCMD [\"lapis\", \"server\"]\n"
    },
    {
        "filename": "49f75cf87707c9a6248dbda8aa101a344371e96c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM continuumio/anaconda3:latest\n\nMAINTAINER Prasad Chodavarapu <chprasad@gmail.com>\n\nRUN apt-get update --fix-missing && \\\n    apt-get install -y python3-dev g++ libopenblas-dev && \\\n    conda update -y conda numpy scipy pip nose pillow && \\\n    conda install Theano\n\nRUN git clone https://github.com/rakeshvar/theanet.git && \\\n    git clone https://github.com/TeluguOCR/banti_telugu_ocr.git && \\\n    cd theanet && python3 setup.py install && \\\n    apt-get install -y ghostscript imagemagick\n    \nENV THEANO_FLAGS 'floatX=float32'\n\nWORKDIR /banti_telugu_ocr\n\n"
    },
    {
        "filename": "4a3c7865c57251ea091d36d1a29c099fcb40d210.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM php:7.2-cli\nMAINTAINER Tomas Gerulaitis <tomas.gerulaitis@meanbee.com>\n\nENV PHP_EXT_APCU_VERSION \"5.1.12\"\nENV PHP_EXT_MEMCACHED_VERSION \"3.0.4\"\nENV PHP_EXT_XDEBUG_VERSION \"2.6.1\"\n\n\nRUN build_packages=\"libpng-dev libfreetype6-dev libjpeg62-turbo-dev libxml2-dev libxslt1-dev libmemcached-dev sendmail-bin sendmail libicu-dev\" \\\n    && apt-get update && apt-get install -y $build_packages \\\n    && yes \"\" | pecl install apcu-$PHP_EXT_APCU_VERSION && docker-php-ext-enable apcu \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install gd \\\n    && docker-php-ext-install mbstring \\\n    && echo \"no\" | pecl install memcached-$PHP_EXT_MEMCACHED_VERSION && docker-php-ext-enable memcached \\\n    && docker-php-ext-install pcntl \\\n    && docker-php-ext-install pdo_mysql \\\n    && docker-php-ext-install soap \\\n    && yes | pecl install xdebug-$PHP_EXT_XDEBUG_VERSION && docker-php-ext-enable xdebug \\\n    && docker-php-ext-install xsl \\\n    && docker-php-ext-install zip \\\n    && docker-php-ext-install intl \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV ION_CUBE_PHP_VERSION \"7.2\"\nRUN PHP_EXTENSION_DIR=\"$(php-config --extension-dir)\" bash -c 'curl http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz -o /ioncube_loaders_lin_x86-64.tar.gz && \\\n    tar -xzvf /ioncube_loaders_lin_x86-64.tar.gz -C / && \\\n    cp \"/ioncube/ioncube_loader_lin_${ION_CUBE_PHP_VERSION}.so\" $PHP_EXTENSION_DIR && \\\n    echo \"zend_extension=${PHP_EXTENSION_DIR}/ioncube_loader_lin_${ION_CUBE_PHP_VERSION}.so\" > /usr/local/etc/php/conf.d/00-ioncube.ini && \\\n    rm -rf /ioncube /ioncube_loaders_lin_x86-64.tar.gz'\n\nCOPY php.ini /usr/local/etc/php/conf.d/zz-magento.ini\n\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\nENV BIN_DIR \"/usr/local/bin\"\nRUN apt-get update \\\n    && apt-get install -y cron git groff mysql-client python-pip rsyslog sudo \\\n    && pip install awscli \\\n    && curl --retry 10 --retry-delay 3 https://getcomposer.org/installer | php -- --install-dir=$BIN_DIR --filename=composer \\\n    && curl --retry 10 --retry-delay 3 -L https://github.com/punkstar/mageconfigsync/releases/download/0.4.0/mageconfigsync-0.4.0.phar -o $BIN_DIR/mageconfigsync && chmod +x $BIN_DIR/mageconfigsync \\\n    && curl --retry 10 --retry-delay 3 -L https://github.com/meanbee/magedbm/releases/download/v1.6.0/magedbm.phar -o $BIN_DIR/magedbm.phar && chmod +x $BIN_DIR/magedbm.phar \\\n    && curl --retry 10 --retry-delay 3 https://files.magerun.net/n98-magerun.phar -o $BIN_DIR/n98-magerun.phar && chmod +x $BIN_DIR/n98-magerun.phar \\\n    && curl --retry 10 --retry-delay 3 https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o $BIN_DIR/modman && chmod +x $BIN_DIR/modman \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY bin/* $BIN_DIR/\nADD run-cron.sh /run-cron.sh\n\nCMD [\"php\", \"-a\"]\n"
    },
    {
        "filename": "4a7c31fe9fa8ae6918baaeea63c07de97bdd2737.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:xenial AS btc-build\n\nMAINTAINER Guo Yukun\n\nRUN sed -i \"s/archive.ubuntu./mirrors.aliyun./g\" /etc/apt/sources.list\n\nRUN apt-get update &&\\\n    apt-get install -y wget vim psmisc &&\\\n\t# \u4f9d\u8d56\u5305\n\tapt-get -y install libev-dev libssl-dev libmpdec-dev libjansson-dev   libmysqlclient-dev &&\\\n \t# \u5b89\u88c5\u6784\u5efa\u5de5\u5177\n\tapt-get install -y  build-essential autoconf libtool python &&\\\n\t# \u6e05\u7406\n\trm -rf /var/lib/apt/lists/* &&\\\n\t# \u5efa\u7acb\u5de5\u4f5c\u76ee\u5f55\n\tmkdir /src/ &&\\\n\tcd /src\n\nWORKDIR /src/\n\n# \u5b89\u88c5kafka\nRUN wget https://codeload.github.com/edenhill/librdkafka/tar.gz/v0.11.3 -O  /src/librdkafka.tar.gz &&\\\n\ttar xzvf /src/librdkafka.tar.gz &&\\\n\trm -rf /src/librdkafka.tar.gz\n#\tmv librdkafka-* librdkafka &&\\\nRUN ls /src/\nRUN\tcd /src/librdkafka-* &&\\\n  \t./configure --prefix=/usr/local &&\\\n  \tsed -i \"s/WITH_LDS=/#WITH_LDS=/g\" Makefile.config &&\\\n  \tmake &&\\\n  \tmake install\n\n# \u5b89\u88c5 curl\nRUN wget https://codeload.github.com/curl/curl/tar.gz/curl-7_57_0 -O /src/curl-7.57.0.tar.gz &&\\\n\ttar xzvf /src/curl-7.57.0.tar.gz &&\\\n\trm -rf /src/curl-7.57.0.tar.gz &&\\\n\tmv curl-* curl &&\\\n\tcd /src/curl &&\\\n\t./buildconf &&\\\n\t./configure --prefix=/usr/local --disable-shared --enable-static --without-libidn --without-ssl --without-librtmp --without-gnutls --without-nss --without-libssh2 --without-zlib --without-winidn --disable-rtsp --disable-ldap --disable-ldaps --disable-ipv6 &&\\\n\tmake &&\\\n\tmake install\n\nRUN  apt-get update &&\\ \n\tapt-get -y install liblz4-dev\n\nADD build.sh /src/build.sh\n\n# \u7f16\u8bd1viabtc\nRUN wget https://codeload.github.com/viabtc/viabtc_exchange_server/tar.gz/master -O /src/viabtc.tar.gz &&\\\n \ttar xzvf /src/viabtc.tar.gz  &&\\\n \trm -rf /src/viabtc.tar.gz &&\\\n \tmv viabtc_exchange_server-* viabtc &&\\\n    cd /src/viabtc/network &&\\\n    make clean && make &&\\\n    cd /src/viabtc/depends/hiredis &&\\\n    make && make install &&\\\n    cd /src/viabtc/utils/ &&\\\n    make &&\\\n    /bin/bash /src/build.sh\n\nWORKDIR /btc/\n\nCMD /bin/bash\n\nFROM btc-build\n\nCOPY /btc/ /btc/\n\nRUN mkdir -p /var/log/trade &&\\\n\tmv /src/viabtc/matchengine/matchengine.exe  /btc/matchengine/ &&\\\n\tmv /src/viabtc/accesshttp/accesshttp.exe  /btc/accesshttp/ &&\\\n\tmv /src/viabtc/marketprice/marketprice.exe  /btc/marketprice/ &&\\\n\tmv /src/viabtc/accessws/accessws.exe  /btc/accessws/ &&\\\n\tmv /src/viabtc/alertcenter/alertcenter.exe  /btc/alertcenter/ &&\\\n\tmv /src/viabtc/readhistory/readhistory.exe  /btc/readhistory/ &&\\\n\tchmod +x /btc/*.sh &&\\\n\tchmod +x /btc/*/*.exe\n\n# marketprice\nEXPOSE 7416\n# matchengine\nEXPOSE 7316\n# matchengine cli\nEXPOSE 7317\n# readhistory\nEXPOSE 7424\n# alertcenter\nEXPOSE 4444\n# accesshttp\nEXPOSE 8080\n\n# monitor\nEXPOSE 8081\n\n# monitor\nEXPOSE 8091\n\nCMD [\"/btc/start.sh\"]\n"
    },
    {
        "filename": "4aad89072fc8aeb65650cc43683a8f64946072dd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM rubybench/ruby:2.6.3\nMAINTAINER Guo Xiang\n\n# To avoid invalid byte sequence in benchmark_driver's source handling\nENV LANG C.UTF-8\n\nRUN apt-get install time\n\nARG RUBY_COMMIT_HASH\nENV RUBY_COMMIT_HASH=$RUBY_COMMIT_HASH\n\nRUN git clone --verbose --branch trunk --single-branch https://github.com/ruby/ruby.git\n\nADD config.sub /ruby/tool/config.sub\nADD config.guess /ruby/tool/config.guess\n\nRUN cd /ruby && \\\n    git reset --hard $RUBY_COMMIT_HASH && \\\n    /bin/bash -l -c \"autoconf && \\\n      ./configure --quiet --disable-install-doc && \\\n      make --quiet -j && \\\n      make install --quiet -j && \\\n      rbenv global system\"\n"
    },
    {
        "filename": "4ab5e39967ef597b794a7eefc21acbfb7afb7a68.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM    ubuntu\nMAINTAINER      ilya@weave.works\n\nRUN     apt-get -y update \nRUN     apt-get -y install nodejs\nRUN     apt-get -y install npm \n\n# add our app\nRUN \tmkdir -p /opt/app\nCOPY\tapp/. /opt/app\nRUN\tcd /opt/app && npm install\n\n# and run our offer-service\n\nCMD\t[\"nodejs\", \"/opt/app/services/web-app.js\" ]\n"
    },
    {
        "filename": "4aeb730c5ec4de98aafe48c81932b13bc7b1088c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# # Build command\n# # \tdocker build -t arm-tool-interactive:latest .\n#\n# # Run VPN Server\n# # \tdocker run -p 5901:5901 --entrypoint /opt/vnc_server.sh arm-tool-interactive:latest\n#\n# # NoMachine Server\n# #\t    docker run -p 4000:4000 --cap-add=SYS_PTRACE --entrypoint /opt/nx_server.sh arm-tool-interactive:latest\n\nFROM arm-tool-base:latest\n\nMAINTAINER Zach\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update -y\n\n\n### \tSystem Functionality \t###\n\n# # install desktop\nRUN apt-get install -y xubuntu-core\t\n# RUN apt-get install -y lubuntu-core\t\n# RUN apt-get install -y ubuntu-mate-core\n\n# # install base system apps \nRUN apt-get update &&\\\n \tapt-get install -y apt-utils curl nano\n\n\n\n\n### \tVNC & RDP Server \t###\n\n# # install vncserver and RDP functionality via xrdp\nRUN apt-get update &&\\\n    apt-get install -y tightvncserver xrdp\n\n# # set XRDP to use TightVNC port\nRUN sed -i '0,/port=-1/{s/port=-1/port=5901/}' /etc/xrdp/xrdp.ini\n\n# # set environment varialbe USER, used by VNC server\nENV USER root\n\n\n\n\n### \tNoMachine \t###\n\n# # go to https://www.nomachine.com/download/download&id=10 to update latest\n# # NOMACHINE_PACKAGE_NAME and NOMACHINE_MD5 sum:\nENV NOMACHINE_PACKAGE_NAME nomachine_6.4.6_1_amd64.deb\nENV NOMACHINE_BUILD 6.4\nENV NOMACHINE_MD5 6623e37e88b4f5ab7c39fa4a6533abf4\n\n# # create ssh server to connect to NoMachine over a browser\n# # comment it out if using NoMachine free\n# RUN apt-get install -y ssh \t&&\\\n# \t  service ssh start \n\n# # download & install nomachine with correct permissions\nRUN curl -fSL \"http://download.nomachine.com/download/${NOMACHINE_BUILD}/Linux/${NOMACHINE_PACKAGE_NAME}\" -o nomachine.deb &&\\\n    echo \"${NOMACHINE_MD5} *nomachine.deb\" | md5sum -c - &&\\\n    dpkg -i nomachine.deb &&\\\n    groupadd -r nomachine -g 433 &&\\\n    useradd -u 431 -r -g nomachine -d /home/nomachine -s /bin/bash -c \"NoMachine\" nomachine &&\\\n    mkdir /home/nomachine &&\\\n    chown -R nomachine:nomachine /home/nomachine &&\\\n    echo 'nomachine:nomachine' | chpasswd\n\n\n# # edit Nomachine configuration to start desktop\n# # replace the default desktop command (DefaultDesktopCommand) used by NoMachine with the preferred desktop\nRUN sed -i '/DefaultDesktopCommand/c\\DefaultDesktopCommand \"/usr/bin/startxfce4\"' /usr/NX/etc/node.cfg    &&\\\n    sed -i '/DefaultDesktopCommand/c\\DefaultDesktopCommand \"/usr/bin/startxfce4\"' /usr/NX/etc/server.cfg\n\n\n\n### \tProtocol Initialization \t###\n\n# # copy scripts that will start dameon when run\nCOPY vnc_server.sh /opt/\nCOPY nx_server.sh /opt/\n\n# # set password\n# # set for all protocols. Change the password in 'password.txt' to be as secure as possible.\nADD password.txt .\nRUN cat password.txt password.txt | passwd \t&&\\\n    cat password.txt password.txt | vncpasswd && \\\n\trm password.txt\n\n# # listen to NX port for NoMachine connection (4000 by default)\n# # listen to VNC port for VNC/RDP connection (5901 by default)\nEXPOSE 4000\nEXPOSE 5901\n\n\n#ENTRYPOINT [\"/opt/nx_server.sh\"]\n#ENTRYPOINT [\"/opt/vnc_server.sh\"]\n"
    },
    {
        "filename": "4b1833ee4e10f1dec7d26fe3b1104cc5b6785847.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:i386-16.04.2\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.30\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "4c1275caf8fa6d4bef5628c639118a78fe2923b4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Damian Soriano <ds@ingadhoc.com>\n\nRUN apt-get clean\nRUN apt-get update\nRUN apt-get upgrade -y\n\nRUN apt-get -y install postgresql\n\nRUN apt-get -y install python\nRUN apt-get -y install python-pip\n\nRUN apt-get -y install rsync\n\nRUN apt-get -y install postgresql-server-dev-all\n\nRUN apt-get -y install libpq-dev python-dev\n\nRUN pip install argcomplete\nRUN pip install argh\nRUN pip install psycopg2\nRUN pip install python-dateutil\nRUN pip install distribute\n\nRUN apt-get -y install barman\n\nRUN apt-get -y install vim\nRUN apt-get -y install man\n\n# Add backup public key and authorized_key\nADD backup_id_rsa.pub /var/lib/postgresql/.ssh/backup_id_rsa.pub\nADD authorized_keys /var/lib/postgresql/.ssh/authorized_keys\n\nRUN chown -R postgres.postgres /var/lib/postgresql/.ssh\n\n# Add barman keys and change permisions\nADD id_rsa /var/lib/postgresql/.ssh/id_rsa\nADD id_rsa.pub /var/lib/postgresql/.ssh/id_rsa.pub\nADD ssh_config /var/lib/postgresql/.ssh/config\nRUN chown -R postgres.postgres /var/lib/postgresql/.ssh\nRUN chmod 700 /var/lib/postgresql/.ssh/id_rsa\n\n# From http://stackoverflow.com/questions/18173889/cannot-access-centos-sshd-on-docker\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nRUN sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config\n\n# Configure PostgreSQL to receive TPC/IP connections\nADD postgresql.conf /etc/postgresql/9.3/main/postgresql.conf\nADD pg_hba.conf /etc/postgresql/9.3/main/pg_hba.conf\n\nRUN service postgresql restart\n\nEXPOSE 22\n\nRUN /etc/init.d/ssh start\n\n#RUN service postgresql start\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "4c7bdb33b9c770d6a72a0fc5511bfb1ae11f606f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM codingtony/java\n\nMAINTAINER tony.bussieres@ticksmith.com\n\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get install unzip -y\n# this bitly link is the one on the Artifactory Download page http://www.jfrog.com/home/v_artifactory_opensource_download\nRUN wget --content-disposition http://bit.ly/Hqv9aj \nRUN cd /opt && unzip ~/artifactory-3.3.0.zip\nRUN mv /opt/artifactory-3.3.0 /opt/artifactory\nRUN rm ~/artifactory-3.3.0.zip\nRUN mkdir /opt/artifactory/data\n\nEXPOSE 8081\n\nCMD [ \"/opt/artifactory/bin/artifactory.sh\" ]\n\n"
    },
    {
        "filename": "4c99767eae6df87bdcbd73fe3ad1e28cce3b817a.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:latest\n\nMAINTAINER \"anonymous2018\" <anonymous_submission@hotmail.com>\n\nRUN apt-get -y update ; \\\n    apt-get install -y build-essential wget vim; \\\n    cd /root/; \\\n    wget https://github.com/anonymous2018sub/anonymous2018sub.github.io/raw/master/CVE-2004-2167/latex2rtf-1.9.15.tar.gz; \\\n    wget https://raw.githubusercontent.com/anonymous2018sub/anonymous2018sub.github.io/master/CVE-2004-2167/latex2rtf.c; \\\n    tar -xvf latex2rtf-1.9.15.tar.gz; cd latex2rtf-1.9.15/; make; make install; \\\n    cd ..; gcc -o exploit latex2rtf.c; ./exploit > poc.tex; \\\n    rm -rf /var/lib/apt/lists/*;\n\nCMD /root/latex2rtf-1.9.15/latex2rtf /root/poc.tex\n"
    },
    {
        "filename": "4cbd1352f8ad09e33280eb70ada26b29fc781e3d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Dmitry Veselov <d.a.veselov@yandex.ru>\n\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y libffi-dev libmagic-dev libmagickwand-dev\nRUN apt-get install -y libreoffice libreofficekit-dev\nRUN apt-get install -y python3-dev python3-pip git\n\nRUN apt-get clean && apt-get -y update && apt-get install -y locales && locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nADD . /home/docsbox\nWORKDIR /home/\nRUN pip3 install --upgrade pip\nRUN pip3 install -r docsbox/requirements.txt\n"
    },
    {
        "filename": "4cd93a9616c4aa5847c6152a9587e125132291b4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "#\u4f7f\u7528 python:3.6-slim \u505a\u57fa\u7840\u955c\u50cf\u51cf\u5c11\u5927\u5c0f\u3002\u5176\u4e2dtensorflow\u518d\u7528\u53e6\u5916\u7684\u955c\u50cf\u8dd1\u6570\u636e\u3002\nFROM docker.io/python:3.6-slim\n\n# https://opsx.alibaba.com/mirror\n# \u4f7f\u7528\u963f\u91cc\u4e91\u955c\u50cf\u5730\u5740\u3002\u4fee\u6539debian apt \u66f4\u65b0\u5730\u5740\uff0cpip \u5730\u5740\uff0c\u8bbe\u7f6e\u65f6\u533a\u3002\nRUN echo  \"deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib\\n\\\ndeb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib\\n\\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main\\n\\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main\\n\\\ndeb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib\\n\\\ndeb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib\\n\\\ndeb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib\\n\\\ndeb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib\" > /etc/apt/sources.list && \\\necho  \"[global]\\n\\\ntrusted-host=mirrors.aliyun.com\\n\\\nindex-url=http://mirrors.aliyun.com/pypi/simple\" > /etc/pip.conf && \\\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\n\n#\u5b89\u88c5 mysqlclient tushare (pandas ,numpy) tornado bokeh\n# apt-get autoremove -y \u5220\u9664\u6ca1\u6709\u7528\u7684\u4f9d\u8d56lib\u3002\u51cf\u5c11\u955c\u50cf\u5927\u5c0f\u30021MB \u4e5f\u8981\u8282\u7701\u3002\n# apt-get --purge remove \u8f6f\u4ef6\u5305\u540d\u79f0 , \u5220\u9664\u5df2\u5b89\u88c5\u5305\uff08\u4e0d\u4fdd\u7559\u914d\u7f6e\u6587\u4ef6)\u3002\nRUN apt-get update && apt-get install -y gcc make axel python3-dev default-libmysqlclient-dev libxml2-dev cron supervisor && \\\n    pip3 install mysqlclient sqlalchemy && \\\n    pip3 install requests && \\\n    pip3 install lxml bs4 && \\\n    pip3 install numpy pandas  && \\\n    pip3 install tushare && \\\n    pip3 install tornado torndb && \\\n    pip3 install bokeh stockstats && \\\n    cd /tmp && axel https://nchc.dl.sourceforge.net/project/ta-lib/ta-lib/0.4.0/ta-lib-0.4.0-src.tar.gz && \\\n    tar xvfz ta-lib-0.4.0-src.tar.gz && \\\n    cd ta-lib && ./configure && make && make install  && cd /tmp && rm -rf * && \\\n    pip3 install TA-Lib  && \\\n    apt-get --purge remove -y gcc make axel python3-dev default-libmysqlclient-dev libxml2-dev && \\\n    rm -rf /root/.cache/* && apt-get clean && apt-get autoremove -y\n\n# /usr/local/lib/python3.6/site-packages/pandas/\n#1.\u89e3\u51b3 pandas \u6570\u636e\u63d2\u5165\u95ee\u9898\u3002\u76f4\u63a5\u4fee\u6539\u6570\u636e\u5e93\u9a71\u52a8 sqlalchemy\n# \u4fee\u6539\uff1astatement.replace(\"INSERT INTO\",\"INSERT IGNORE INTO\")\n# /usr/local/lib/python3.6/site-packages/sqlalchemy/dialects/mysql/mysqldb.py\n# \u589e\u52a0\u4e86\u4e00\u4e2a IGNORE \u53c2\u6570\u3002\n#2.\u89e3\u51b3torndb\u5728python3\u4e0b\u9762\u7684\u95ee\u9898\uff1a\n#http://blog.csdn.net/littlethunder/article/details/8917378\nRUN echo `date +%Y-%m-%d:%H:%M:%S` >> /etc/docker.build && \\\n    sed -i -e 's/executemany(statement/executemany(statement.replace\\(\"INSERT INTO\",\"INSERT IGNORE INTO\")/g' \\\n        /usr/local/lib/python3.6/site-packages/sqlalchemy/dialects/mysql/mysqldb.py && \\\n    rm -f /etc/cron.daily/apt-compat /etc/cron.daily/dpkg /etc/cron.daily/passwd && \\\n    sed -i -e 's/itertools\\.izip/zip/g' \\\n    /usr/local/lib/python3.6/site-packages/torndb.py\n\n#\u589e\u52a0\u8bed\u8a00utf-8\nENV LANG=zh_CN.UTF-8\nENV LC_CTYPE=zh_CN.UTF-8\nENV LC_ALL=C\nENV PYTHONPATH=/data/stock\n\nWORKDIR /data\n\n#add cron sesrvice.\n#\u6bcf\u5206\u949f\uff0c\u6bcf\u5c0f\u65f61\u5206\u949f\uff0c\u6bcf\u59291\u70b91\u5206\uff0c\u6bcf\u67081\u53f7\u6267\u884c\nRUN mkdir -p /etc/cron.minutely && mkdir -p /etc/cron.hourly && mkdir -p /etc/cron.monthly && \\\n    echo \"SHELL=/bin/sh \\n\\\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin \\n\\\n# min   hour    day     month   weekday command \\n\\\n*/1     *       *       *       *       /bin/run-parts /etc/cron.minutely \\n\\\n10       *       *       *       *       /bin/run-parts /etc/cron.hourly \\n\\\n30       16       *       *       *       /bin/run-parts /etc/cron.daily \\n\\\n30       17       1,10,20       *       *       /bin/run-parts /etc/cron.monthly \\n\" > /var/spool/cron/crontabs/root && \\\n    chmod 600 /var/spool/cron/crontabs/root\n\n\n#\u589e\u52a0\u670d\u52a1\u7aef\u53e3\nEXPOSE 8888 9999 6006 8500 9001\n\n#\u7ecf\u5e38\u4fee\u6539\u653e\u5230\u6700\u540e\uff1a\nADD jobs /data/stock/jobs\nADD libs /data/stock/libs\nADD web /data/stock/web\nADD supervisor /etc/supervisor\n\nADD jobs/cron.minutely /etc/cron.minutely\nADD jobs/cron.hourly /etc/cron.hourly\nADD jobs/cron.daily /etc/cron.daily\nADD jobs/cron.monthly /etc/cron.monthly\n\nRUN mkdir -p /data/logs && ls /data/stock/ && chmod 755 /data/stock/jobs/run_* &&  \\\n    chmod 755 /etc/cron.minutely/* && chmod 755 /etc/cron.hourly/* && \\\n    chmod 755 /etc/cron.daily/* && chmod 755 /etc/cron.monthly/*\n\nENTRYPOINT [\"supervisord\",\"-n\",\"-c\",\"/etc/supervisor/supervisord.conf\"]"
    },
    {
        "filename": "4d2e625b63fd9a68d9bb55f52a4321f1e425ac30.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM fedora\nMAINTAINER \"Jason Clark\" <jclark@redhat.com>\n\nRUN yum -y update; yum clean all\nRUN yum -y install npm; yum clean all\n\nADD . /src\n\nRUN cd /src; npm install\n\nEXPOSE 8080\n\nCMD [\"node\", \"/src/index.js\"]\n"
    },
    {
        "filename": "4d9a056f6138995d37ad539c37df7f8851c587dd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Dion Whitehead Amago\n\n# Haxe environment variables\nENV HAXE_STD_PATH /root/haxe/std/\nENV PATH /root/haxe/:$PATH\n# Neko environment variables\nENV NEKOPATH /root/neko/\nENV LD_LIBRARY_PATH /root/neko/\nENV PATH /root/neko/:$PATH\n\nENV HAXE_DOWNLOAD_URL http://haxe.org/website-content/downloads/3.3.0-rc.1/downloads/haxe-3.3.0-rc.1-linux64.tar.gz\n\n# Dependencies\nRUN apt-get update && \\\n\tapt-get install -y wget curl g++ g++-multilib libgc-dev git python build-essential && \\\n\tcurl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash - && \\\n\tsudo apt-get -y install nodejs && \\\n\tapt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n\tmkdir /root/haxe && \\\n\twget -O - $HAXE_DOWNLOAD_URL | tar xzf - --strip=1 -C \"/root/haxe\" && \\\n\tmkdir /root/neko && \\\n\twget -O - http://nekovm.org/_media/neko-2.0.0-linux64.tar.gz | tar xzf - --strip=1 -C \"/root/neko\"\n\nENV APP /app\nRUN mkdir -p $APP\nWORKDIR $APP\n\nRUN haxelib newrepo\n\n#Only install npm packages if the package.json changes\nADD ./package.json $APP/package.json\nRUN npm install\nRUN npm install -g forever nodemon bunyan\n\n#Only install haxe packages if the package.json changes\nADD ./etc/hxml/base.hxml $APP/etc/hxml/base.hxml\nADD ./etc/hxml/base-nodejs.hxml $APP/etc/hxml/base-nodejs.hxml\nRUN npm run install-dependencies\n\nCOPY ./ $APP/\n\nRUN\thaxe etc/hxml/build-all.hxml\n\nENV PORT 9000\nEXPOSE $PORT\nEXPOSE 9001\nEXPOSE 9002\n\nWORKDIR $APP/build\n\n#Do not watch the entire tree, just that file. Limit retries to 5\nCMD forever -m 5 --watchDirectory server server/cloud-compute-cannon-server.js\n\n\n"
    },
    {
        "filename": "4db52c4be532576628fa92281569dbbd0aa9547d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM\t\tphusion/baseimage\nMAINTAINER\tJens Erat <email@jenserat.de>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Seafile dependencies and system configuration\nRUN apt-get update && \\\n    apt-get install -y python2.7 python-setuptools python-simplejson python-imaging sqlite3 python-mysqldb python-memcache python-urllib3 wget socat\nRUN ulimit -n 30000\n\n# Interface the environment\nRUN mkdir /opt/seafile\nVOLUME /opt/seafile\nEXPOSE 10001 12001 8000 8080 8082\n\n# Baseimage init process\nENTRYPOINT [\"/sbin/my_init\"]\n\n# Seafile daemons\nRUN mkdir /etc/service/seafile /etc/service/seahub\nADD seafile.sh /etc/service/seafile/run\nADD seahub.sh /etc/service/seahub/run\n\nADD download-seafile.sh /usr/local/sbin/download-seafile\n\n# Clean up for smaller image\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "4e349c77368a1552a4116a86c8336ab90072b536.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM shadowrobot/ros-tensorflow:latest\n\n# Installing simplecv\nRUN apt-get update && \\\n    apt-get install -y ipython python-opencv python-scipy python-numpy python-pygame python-setuptools python-pip && \\\n    pip install svgwrite && \\\n    pip install https://github.com/sightmachine/SimpleCV/zipball/develop\n\nRUN mkdir /{code,data,results}\n\n# Building image retraining from tensorflow\nRUN cd /tensorflow && \\\n    bazel build tensorflow/examples/image_retraining:retrain\n\nENTRYPOINT bash\n"
    },
    {
        "filename": "4e3fecc364a25bbfd13a633cbea07ea899cb3316.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# \u00a9 Copyright IBM Corporation 2017, 2019.\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n################### Dockerfile for Salt version 2019.2.0 ##################################\n#\n# This Dockerfile builds a basic installation of Salt.\n#\n# SaltStack makes software for complex systems management at scale. \n# SaltStack is the company that created and maintains the Salt Open project and develops and sells SaltStack Enterprise software, services and support.\n# Salt is a new approach to infrastructure management built on a dynamic communication bus. \n# Salt can be used for data-driven orchestration, remote execution for any infrastructure, configuration management for any app stack, and much more.\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n#\n# To start container from image & start an application in production mode\n# docker run -v <host_path>:/etc/salt -v <host_dir>:/data -d <image>\n# \n# The official website\n# https://saltstack.com/\n#\n##################################################################################\n\n# Base Image\nFROM s390x/ubuntu:16.04\n\n# The author\nMAINTAINER  LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\n\nENV SOURCE_DIR=/\nWORKDIR $SOURCE_DIR\n\nARG SALT_VER=v2019.2.0\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n        g++ \\\t\t\n        gcc \\\n\t\tgit \\\n\t\tlibffi-dev \\\n        libsasl2-dev \\\n\t\tlibssl-dev \\\n        libxml2-dev \\\n\t\tlibxslt1-dev \\\n\t\tlibzmq3-dev \\\n\t\tmake \\\n        man \\\n\t\tpython3-dev \\\n\t\tpython3-pip \\\n\t\ttar \\\n\t\twget \\\n\n# Install required packages using pip3\n\t&&\tpip3 install \\\n\t\t\tpyzmq \\\n\t\t\t'PyYAML<5.1' \\\n\t\t\tpycrypto \\\n\t\t\tmsgpack-python \\\n\t\t\tjinja2 \\\n\t\t\tpsutil \\\n\t\t\tfutures \\\n\t\t\ttornado \\\n\n# Clone the repository and install SaltStack\n&& \tgit clone git://github.com/saltstack/salt \\\n&& \tcd salt \\\n&& \tgit checkout $SALT_VER \\\n&& \tpip3 install -e . \\\n\n# Configure SaltStack to run self-contained version\n&& \tcd $SOURCE_DIR \\\n&&\tmkdir -p etc/salt/pki/master \\\n&&\tmkdir -p etc/salt/pki/minion \\\n&& \tcp ./salt/conf/master ./salt/conf/minion etc/salt/ \\\n&& \tcd etc/salt/ \\\n\n# Edit config file master\n&&\tsed -i 's/#user: root/user: root/g' master \\\n&& \tsed -i 's,#root_dir: /,'\"root_dir: $SOURCE_DIR\"',' master \\\n\n# Edit config file minion\n&&\tsed -i 's/#master: salt/master: localhost/g' minion \\\n&&\tsed -i 's/#user: root/user: root/g' minion \\\n&&\tsed -i 's,#root_dir: /,'\"root_dir: $SOURCE_DIR\"',' minion \\\n\n# Clean up cache data and remove dependencies which are not required\n&&\tapt-get remove -y \\\n\t\t\tgcc \\\n\t\t\tgit \\\n\t\t\tg++ \\\n\t\t\tmake \\\n\t\t\twget \\\n&& apt autoremove -y && apt-get clean \\\n&& rm -rf salt/ && rm -rf /var/lib/apt/lists/*\n\nVOLUME /etc/salt\n\nVOLUME /data\n\nCMD  salt-master -c ./etc/salt & salt-minion -c ./etc/salt\n\n# End of Dockerfile\n"
    },
    {
        "filename": "4e80757ac7c98a2bf37915efc68c6c5f12429722.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Copyright \u00a9 2017 Logistimo.\n#\n# This file is part of Logistimo.\n#\n# Logistimo software is a mobile & web platform for supply chain management and remote temperature monitoring in\n# low-resource settings, made available under the terms of the GNU Affero General Public License (AGPL).\n#\n# This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General\n# Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any\n# later version.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License\n# for more details.\n# \n# You should have received a copy of the GNU Affero General Public License along with this program.  If not, see\n# <http://www.gnu.org/licenses/>.\n#\n# You can be released from the requirements of the license by purchasing a commercial license. To know more about\n# the commercial license, please contact us at opensource@logistimo.com\n#\n\n\nFROM tomcat:7-jre8\nMAINTAINER dockers@logistimo.com\n\nARG warname\n\nENV TOMCAT_HOME /usr/local/tomcat\n\nRUN rm -rf $TOMCAT_HOME/webapps/* \\\n\t&& apt-get update \\\n        && apt-get install -y gettext-base\n\nADD modules/web/target/$warname $TOMCAT_HOME/webapps/\n\nRUN  wget -P $TOMCAT_HOME/lib/ http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar \\\n        && wget -P $TOMCAT_HOME/lib/ http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar \\\n        && wget -P $TOMCAT_HOME/lib/ http://central.maven.org/maven2/com/bluejeans/tomcat-redis-session-manager/2.0.0/tomcat-redis-session-manager-2.0.0.jar\n\nADD dockerfiles/context.xml $TOMCAT_HOME/conf/\n\nRUN unzip -o $TOMCAT_HOME/webapps/$warname \\\n        -d $TOMCAT_HOME/webapps/ROOT/ \\\n        && rm -rf $TOMCAT_HOME/webapps/$warname\n\nENV MYSQL_HOST_URL=\"jdbc:mariadb://localhost/logistimo?useUnicode=true&amp;characterEncoding=UTF-8\" \\\n        MYSQL_RO_HOST_URL=\"jdbc:mariadb://localhost/logistimo?useUnicode=true&amp;characterEncoding=UTF-8\" \\\n        MYSQL_USER=logistimo \\\n        MYSQL_PASS=logistimo \\\n        MYSQL_DATABASE=logistimo \\\n        REDIS_HOST=localhost \\\n        SENTINEL_HOST= \\\n        SENTINEL_MASTER= \\\n        HADOOP_HOST=localhost \\\n        MEDIA_HOST_URL=http://localhost:50070/webhdfs/v1 \\\n        ZKR_HOST=localhost:2181 \\\n        LOGI_HOST=localhost \\\n        ACTIVEMQ_HOST=tcp://localhost:61616 \\\n        TASK_SERVER=true \\\n        TASK_URL=http://localhost:8080 \\\n        TASK_QUEUE_TYPE=simple \\\n        TASK_EXPORT=true \\\n        EMAIL_HOST=localhost \\\n        EMAIL_PORT=25 \\\n        EMAIL_FROMADDRESS=service@logistimo.com \\\n        EMAIL_FROMNAME=Logistimo\\ Service \\\n        TASK_PORT=8080 \\\n        CALLISTO_HOST_URL=http://localhost:8090 \\\n        LOCAL_ENV=true \\\n        LOC_URL=http://localhost:9090 \\\n        APPROVAL_URL=http://localhost:6400 \\\n        STOCKREBALANCING_URL=http://localhost:8700 \\\n        COLLABORATION_URL=http://localhost:9070/v1/collaboration/likes \\\n        CON_MAX_IDLE=50 \\\n        CON_MIX_IDLE=20 \\\n        CON_MAX_ACTIVE=150 \\\n        CON_MAX_WAIT=1000 \\\n        CACHE_TYPE=none \\\n        STATUS_FILE= \\\n        JMX_AGENT_PORT=8088 \\\n        ORIGINS=*.logistimo.com,localhost \\\n        MAPI_URL=http://localhost:8080 \\\n        CAPTCHA_ENABLE=true \\\n        GOOGLE_ANALYTICS_CLIENT_ID= \\\n        JAVA_OPTS=\"-Xms1024m -Xmx1024m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\" \\\n        EVENTSUMMARYSERVICE_URL=http://logi-es:9010/v1/event-summaries\n\nENV WEB_APP_VER $WEB_APP_VER\n\nRUN cd $TOMCAT_HOME && wget http://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.7/jmx_prometheus_javaagent-0.7.jar\n\nADD dockerfiles/jmx_exporter.json $TOMCAT_HOME/jmx_exporter.json\n\nCOPY dockerfiles/docker-entrypoint.sh /docker-entrypoint.sh\n\nRUN chmod +x /docker-entrypoint.sh\n\nEXPOSE 8080-8090\n\nCMD [\"/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "4e8c6748f144adca0f7ebad0422168a066f3c05c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty\nENV DEBIAN_FRONTEND noninteractive\n\nMAINTAINER Larry Cai <larry.caiyu@gmail.com>\n\nENV REFREST_AT 20150115\n\n# nginx\nRUN apt-get update -q \\\n    && apt-get install -yf build-essential python-software-properties software-properties-common \\\n    && add-apt-repository ppa:nginx/stable \\\n    && apt-get update -q \\\n    && apt-get -y install -y curl\n\nENV NGINX_VERSION 1.7.9\n# build nginx from source with http auth module enabled\nRUN apt-get -y install libpcre3-dev zlib1g-dev libssl-dev bsdtar libldap2-dev\n\n# use bsdtar for zip file\nRUN curl -Ls https://github.com/kvspb/nginx-auth-ldap/archive/master.zip | bsdtar -xf- -C /tmp \\\n    && curl -s http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar -xz -C /tmp \\\n\t&& cd /tmp/nginx-${NGINX_VERSION} \\\n\t&& ./configure --add-module=../nginx-auth-ldap-master --with-http_ssl_module --with-http_auth_request_module && make && make install \n\n# put self signed ssl key (generated by htpasswd\nRUN apt-get -y install apache2-utils\n\nADD . /app\nRUN chmod +x /app/start.sh && mkdir /data\n\nVOLUME [\"/data\"]\n\nEXPOSE 80 443 3443\nCMD /app/start.sh\n"
    },
    {
        "filename": "4ebafbe220d763a2d6d1a795fc57b3e020d2f237.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Home.Pi Dockerfile\n#\n# Pull base image.\nFROM dockerfile/ubuntu\n\nMAINTAINER Dennis Schulte \"mail@dennis-schulte.de\"\n\n# Install Nginx.\nRUN apt-get install -y software-properties-common\nRUN add-apt-repository -y ppa:nginx/stable\nRUN apt-get update\nRUN apt-get install -y nginx\nRUN echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf\n\nADD default_nginx.conf /etc/nginx/sites-available/default\nADD www/ /var/www\n\n# Attach volumes.\nVOLUME /etc/nginx/sites-enabled\nVOLUME /var/log/nginx\n\n# Set working directory.\nWORKDIR /etc/nginx\n\n# Expose ports.\nEXPOSE 80\n\n# Define default command.\nCMD [\"nginx\"]\n\n"
    },
    {
        "filename": "4f05924010b772e111f8e25a35966fccf8f17d24.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM resin/rpi-raspbian\n\n# less priviledge user, the id should map the user the downloaded files belongs to\nRUN groupadd -r aria && useradd -r -g aria aria -u 1000\n\n# webui + aria2\nRUN apt-get update \\\n        && apt-get install -y busybox curl \\\n        git \\\n        make g++ libssl-dev nettle-dev libgmp-dev libssh2-1-dev libc-ares-dev libxml2-dev zlib1g-dev libsqlite3-dev pkg-config libxml2-dev libcppunit-dev autoconf automake autotools-dev autopoint libtool \\\n        && ARIA2_VERSION=\"1.31.0\" \\\n        && mkdir aria_build && cd aria_build \\\n        && curl -L https://github.com/aria2/aria2/releases/download/release-\"$ARIA2_VERSION\"/aria2-\"$ARIA2_VERSION\".tar.gz > aria2.tar.gz \\\n        && tar -xzf aria2.tar.gz \\\n        && cd aria2-$ARIA2_VERSION \\\n        && autoreconf -i  && ./configure && make \\\n        && mv src/aria2c /usr/bin/ \\\n        && cd ../.. \\\n        && rm -rf aria_build \\\n        && apt-get remove --purge --auto-remove make g++ libssl-dev nettle-dev libgmp-dev libssh2-1-dev libc-ares-dev libxml2-dev zlib1g-dev libsqlite3-dev pkg-config libxml2-dev libcppunit-dev autoconf automake autotools-dev autopoint libtool \\\n        && apt-get install -y libxml2 libsqlite3-0 libc-ares2 zlib1g \\\n        && rm -rf /var/lib/apt/lists/*\n\nADD . /webui-aria2\n\n# gosu install latest\nRUN GITHUB_REPO=\"https://github.com/tianon/gosu\" \\\n  && LATEST=`curl -s  $GITHUB_REPO\"/releases/latest\" | grep -Eo \"[0-9].[0-9]*\"` \\\n  && curl -L $GITHUB_REPO\"/releases/download/\"$LATEST\"/gosu-armhf\" > /usr/local/bin/gosu \\\n  && chmod +x /usr/local/bin/gosu\n\n# goland install (compile source code for ARM since no version are currently available)\nRUN curl -L \"https://storage.googleapis.com/golang/go1.8.linux-armv6l.tar.gz\" > go.tar.gz \\\n  && tar -xzf go.tar.gz -C /usr/local \\\n  && export GOROOT=\"/usr/local/go\" && export GOPATH=`pwd` \\\n  && $GOROOT/bin/go get github.com/mattn/goreman && $GOROOT/bin/go build -o /usr/local/bin/goreman github.com/mattn/goreman \\\n  && apt-get remove --purge --auto-remove git \\\n  && rm go.tar.gz && rm -rf $GOROOT && rm -rf $GOPATH/src && rm -rf $GOPATH/pkg \\\n  && unset GOROOT && unset GOPATH\n\n# goreman setup\nRUN echo \"web: gosu aria /bin/busybox httpd -f -p 8080 -h /webui-aria2\\nbackend: gosu aria /usr/bin/aria2c --conf-path=/data/.aria2/aria2.conf\" > Procfile\n\n# aria2 downloads directory\nVOLUME /data\n\n# aria2 RPC port, map as-is or reconfigure webui\nEXPOSE 6800/tcp\n\n# webui static content web server, map wherever is convenient\nEXPOSE 8080/tcp\n\nCMD [\"start\"]\nENTRYPOINT [\"/usr/local/bin/goreman\"]\n"
    },
    {
        "filename": "4f05cc94ee52c7be9d88930d7241ea8a0847b5ca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile to create Applatix tomcat postgres image\n#\n# https://github.com/Applatix/docker-images/tree/master/postgres\n#\n\n# Pull base image.\nFROM ubuntu:14.04\nMAINTAINER Jarvis <jarvis@jarviswang.me>\n\nRUN locale-gen en_GB.UTF-8\nENV LANG en_GB.UTF-8\nENV LC_CTYPE en_GB.UTF-8\n\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n#  There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n# Install required packages\nRUN \\\n\tsed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n\tapt-get update && \\\n\tapt-get install -y wget curl build-essential software-properties-common python-software-properties nano \n\n\n\n# Install ``python-software-properties``, ``software-properties-common``\n#  There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n# Install JDK 8.\nRUN \\\n\tsed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n\tapt-get update && \\\n\tapt-get install -y wget curl build-essential software-properties-common python-software-properties nano && \\\n\tadd-apt-repository ppa:openjdk-r/ppa && \\\n\tapt-get update && \\ \n\tapt-get -y install openjdk-8-jdk && \\  \n\tupdate-alternatives --config java && \\\n\texport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre && \\\n\texport JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \n\n# Fix certificate issues\nRUN apt-get update && \\\n\tapt-get install -y ca-certificates-java && \\\n\tapt-get clean && \\\n\tupdate-ca-certificates -f && \\\n\trm -rf /var/lib/apt/lists/* && \\\n\trm -rf /var/cache/oracle-jdk8-installer;\n\n# Define commonly used JAVA_HOME variable\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/jre\n\n#install TOMCAT\n\nRUN \\\t\t\n\tgroupadd tomcat && \\\n\tuseradd -s /bin/false -g tomcat -d /opt/tomcat tomcat && \\\n\tcd /tmp && \\\n\tcurl -O -L http://dn.jarvisoj.com/misc/apache-tomcat-8.5.34.tar.gz && \\\n\tmkdir /opt/tomcat && \\\n\ttar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1 && \\\n\tcd /opt/tomcat && \\\n\tchgrp -R tomcat /opt/tomcat && \\\n\tchmod -R g+r conf && \\\n\tchmod g+x conf && \\\n\tchown -R tomcat webapps/ work/ temp/ logs/ \n\t\n\t \n# Add admin/admin user\n# ADD tomcat-users.xml /opt/tomcat/conf/\n\n\nENV CATALINA_HOME /opt/tomcat\nENV PATH $PATH:$CATALINA_HOME/bin\n\nEXPOSE 8080\nEXPOSE 8009\n\n#ADD tomcat.service /etc/systemd/system/\nVOLUME \"/opt/tomcat/webapps\"\nWORKDIR /opt/tomcat\n\n\n\nCOPY ./phrackCTF/ /opt/tomcat/webapps/phrackCTF/\nCOPY ./config/mail.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-mail.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-shiro.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/system.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nRUN chown -R tomcat:tomcat /opt/tomcat/webapps/phrackCTF/\n\n#install postgres\n\n# Add the PostgreSQL PGP key to verify their Debian packages.\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n\n# Add PostgreSQL's repository. It contains the most recent stable release of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n\nRUN apt-get update && apt-get install -y postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6\n\n# Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\n\nUSER root\n\nADD phrackCTF-team.sql /tmp/phrackCTF-team.sql \nRUN chmod 755 /tmp/phrackCTF-team.sql\nADD countries.sql /tmp/countries.sql \nRUN chmod 755 /tmp/countries.sql\n\nUSER postgres\n\n# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n# then create a database `docker` owned by the ``docker`` role.\n# Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#       allows the RUN command to span multiple lines.\n\nRUN    /etc/init.d/postgresql start &&\\\n    psql --command \"ALTER USER postgres WITH PASSWORD 'ZUBkij7Z';\" &&\\\n    createdb -O postgres phrackCTF -E 'UTF8' &&\\\n    psql phrackCTF postgres -f /tmp/phrackCTF-team.sql &&\\\n    psql phrackCTF postgres -f /tmp/countries.sql\n\n\nUSER root\n\nRUN mkdir /etc/ssl/private-copy\nRUN mv /etc/ssl/private/* /etc/ssl/private-copy/\nRUN rm -r /etc/ssl/private\nRUN mv /etc/ssl/private-copy /etc/ssl/private\nRUN chmod -R 0700 /etc/ssl/private\nRUN chown -R postgres /etc/ssl/private\n\nADD run.sh /bin\nRUN chmod +x /bin/run.sh\nRUN chmod 755 /bin/run.sh\n\n# Adjust PostgreSQL configuration so that remote connections to the database are possible.\n\nadd pg_hba.conf /etc/postgresql/9.6/main/\n\n#RUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n\n# And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n\n# Expose the PostgreSQL port\nEXPOSE 5432\n\n# Add VOLUMEs to allow backup of config, logs and databases\nVOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql/data\"]\n\n# Define default command.\n\nCMD [\"/bin/run.sh\"]\n\n"
    },
    {
        "filename": "4f68eb06f0c029fcfc998d6632018005c4af1fa7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/xenial-amd64:2.29.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV UBUNTUIMAGE_VERSION=1.0+16.04ubuntu1\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git\n\nWORKDIR /tmp\nADD disable-sparse-check.patch /tmp\nRUN git clone --depth 1 --branch ${UBUNTUIMAGE_VERSION} https://github.com/CanonicalLtd/ubuntu-image \\\n && cd ubuntu-image \\\n && patch -p1 < /tmp/disable-sparse-check.patch \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && mkdir -p /snap/bin \\\n && ln -s /usr/bin/ubuntu-image /snap/bin/ubuntu-image\n\nRUN mknod /dev/loop0 b 7 0\nRUN echo \"ALL ALL=NOPASSWD: /snap/bin/ubuntu-image, /bin/mount, /bin/umount, /bin/cp\" >> /etc/sudoers.d/ubuntu-image \\\n && chmod 0440 /etc/sudoers.d/ubuntu-image\n\n# Install toolchins\nRUN apt-get install -y build-essential u-boot-tools lzop debootstrap \\\n    gcc-4.8 \\\n    gcc-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf \\\n    device-tree-compiler\n\n# change the default gcc to 4.8, since old kernel need old gcc.\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-5 50 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-5 50\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-4.8 100 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100\n\n# multiarch.\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y libc6:i386\n\nRUN apt-get remove --purge -y devscripts equivs\nRUN apt-get autoremove -y\nRUN apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /build\n"
    },
    {
        "filename": "4fe01ac438be29363440052aae52c55ab119f6f3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04.1  \nMAINTAINER Denis Arh <denis.arh@gmail.com>  \n  \nENV DEBIAN_FRONTEND noninteractive  \n  \n# PHP binary & extensions  \nRUN apt-get update  \nRUN apt-get install -y -q php5-cli=5.5.*  \nRUN apt-get install -y -q php5-curl php5-xdebug php5-readline php5-sqlite  \nRUN apt-get install -y -q php-pear  \n  \n# Additional tools  \nADD https://getcomposer.org/composer.phar /usr/local/bin/composer  \nADD https://phar.phpunit.de/phpunit.phar /usr/local/bin/phpunit  \nADD https://phar.phpunit.de/phpcpd.phar /usr/local/bin/phpcpd  \nADD https://phar.phpunit.de/phpdcd.phar /usr/local/bin/phpdcd  \nADD https://phar.phpunit.de/phploc.phar /usr/local/bin/phploc  \n  \n# Make the tools executable  \nRUN cd /usr/local/bin && \\  \nchmod +x composer phpunit phpcpd phpdcd phploc  \n  \nRUN /usr/local/bin/composer global require \\  \n'squizlabs/php_codesniffer=1.5.*' \\  \n'pdepend/pdepend=1.1.*' \\  \n'phpmd/phpmd=1.4.*' \\  \n'behat/behat=2.4.*@stable'  \n  \n# Add path to composed tools  \nENV PATH /root/.composer/vendor/bin:$PATH  \n  \n# Custom configuration  \nADD essentials.ini /etc/php5/cli/conf.d/99-essentials.ini  \n  \nCMD [\"/usr/bin/php\" , \"-a\"]  \n\n"
    },
    {
        "filename": "4ff6ad5a9b7ee6fa5478eb5c7b9578d8602a00f6.dockerfile",
        "riskid_list": "DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM fedora\nMAINTAINER \\\n[Bertrand256 <bertrand256gh@protonmail.com>]\nRUN yum update -y \\\n && yum group install -y \"Development Tools\" \"Development Libraries\" \\\n && yum install -y redhat-rpm-config python3-devel libusbx-devel libudev-devel cmake gcc-c++ \\\n && yum remove -y gmp-devel \\\n && pip3 install virtualenv \\\n && cd ~ \\\n && mkdir dmt \\\n && cd dmt \\\n && virtualenv -p python3 venv \\\n && . venv/bin/activate \\\n && pip install --upgrade setuptools \\\n && git clone https://github.com/Bertrand256/dash-masternode-tool \\\n && cd dash-masternode-tool/ \\\n && pip install -r requirements.txt \\\n && cd ~/dmt \\\n && set +H \\\n && echo \"#!/bin/sh\" | tee build-dmt.sh \\\n && echo \"cd ~/dmt\" | tee -a build-dmt.sh \\\n && echo \". venv/bin/activate\" | tee -a build-dmt.sh \\\n && echo \"cd dash-masternode-tool\" | tee -a build-dmt.sh \\\n && echo \"git fetch --all\" | tee -a build-dmt.sh \\\n && echo \"git reset --hard origin/master\" | tee -a build-dmt.sh \\\n && echo \"pip install -r requirements.txt\" | tee -a build-dmt.sh \\\n && echo \"pyinstaller --distpath=../dist/linux --workpath=../dist/linux/build dash_masternode_tool.spec\" | tee -a build-dmt.sh \\\n && echo \"cd ..\" | tee -a build-dmt.sh \\\n && chmod +x build-dmt.sh\n\nCMD ~/dmt/build-dmt.sh\n"
    },
    {
        "filename": "500532d2eeda9a54f95459121c6b8fa3f8145727.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node  \nMAINTAINER AnyBucket Project <info@builtdock.com>  \n  \nADD . /app  \nWORKDIR /app  \nRUN npm install  \nRUN apt-get update  \nRUN apt-get install -y vim  \nRUN useradd -d /home/term -m -s /bin/bash term  \nRUN echo 'term:term' | chpasswd  \n  \nEXPOSE 3000  \nENTRYPOINT [\"node\"]  \nCMD [\"app.js\", \"-p\", \"3000\"]  \n\n"
    },
    {
        "filename": "506f0a2e12482f86c1302ba1230b36d8b137fb8d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nRUN apt-get update\nRUN apt-get install -y git postgresql-client python-pip python-dev python-psycopg2 libffi-dev libssl-dev libsqlite3-dev libxml2-dev libxslt-dev\nRUN pip install uwsgi\n\nADD scripts /opt/dockerstack/scripts\nADD source/barbican /opt/dockerstack/source/barbican\n\nRUN cp -r /opt/dockerstack/source/barbican/etc/barbican /etc/barbican\n\nRUN pip install /opt/dockerstack/source/barbican\n\nEXPOSE 9311\n\nCMD [\"/opt/dockerstack/scripts/run.sh\"]\n"
    },
    {
        "filename": "50de522a5541d188acaf3d2b70133486b80012e3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM      ubuntu:14.04\nMAINTAINER Antonin Bas <antonin@barefootnetworks.com>\n\nRUN apt-get update\nRUN apt-get install -y \\\n    automake \\\n    bridge-utils \\\n    build-essential \\\n    ethtool \\\n    git \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-program-options-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libboost-thread-dev \\\n    libedit-dev \\\n    libevent-dev \\\n    libglib2.0-dev \\\n    libhiredis-dev \\\n    libjudy-dev \\\n    libnl-route-3-dev \\\n    libpcap0.8 \\\n    libpcap0.8-dev \\\n    libtool \\\n    libssl-dev \\\n    openssh-server \\\n    packit \\\n    pkg-config \\\n    python-dev \\\n    python-pygraph \\\n    python-pygraphviz \\\n    python-setuptools \\\n    python-thrift \\\n    python-yaml \\\n    redis-server \\\n    redis-tools \\\n    libgmp-dev \\\n    python-pip\n\nADD p4factory /p4factory\n\n# install thrift\nRUN bash /p4factory/submodules/bm/build/travis/install-thrift.sh\n\n# install nanomsg\nRUN bash /p4factory/submodules/bm/build/travis/install-nanomsg.sh\n\n# install scapy\nRUN mkdir -p /tmp/scapy ; \\\n    cd /tmp/scapy ; \\\n    git clone https://github.com/p4lang/scapy-vxlan.git ; \\\n    cd scapy-vxlan ; \\\n    python setup.py install ; \\\n    rm -fr /tmp/scapy\n\n# install p4-hlir\nRUN mkdir -p /tmp/p4-hlir ; \\\n    cd /tmp/p4-hlir ; \\\n    git clone https://github.com/p4lang/p4-hlir.git ; \\\n    cd p4-hlir ; \\\n    python setup.py install ; \\\n    rm -fr /tmp/p4-hlir\n\nRUN pip install -r /p4factory/submodules/p4c-bm/requirements.txt\n"
    },
    {
        "filename": "512a25b04cf482be22b0d7777df069947f866565.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Set the base image to use to armhf\nFROM resin/rpi-raspbian:jessie\n\nRUN apt-get update -y\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y git unzip python-gevent python-pip python-dev gcc && pip install psutil && DEBIAN_FRONTEND=noninteractive apt-get remove -y gcc python-pip python-dev && DEBIAN_FRONTEND=noninteractive apt-get autoremove && DEBIAN_FRONTEND=noninteractive apt-get clean\nRUN cd / && git clone https://github.com/AndreyPavlenko/aceproxy.git\nRUN adduser --disabled-password --gecos \"\" aceproxy\nEXPOSE 8000 8081 \nVOLUME /aceproxy/ \nADD aceconfig.py /aceproxy/aceconfig.py\n\nCMD [\"/aceproxy/acehttp.py\"]\n"
    },
    {
        "filename": "7ae7ea61f53a106a803d4b3a94872496da84da23.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#  \n# doomkin/nginx Dockerfile  \n#  \n# https://github.com/doomkin/nginx  \n#  \n# Based on:  \n# https://github.com/doomkin/ubuntu-ssh  \n#  \nFROM doomkin/ubuntu-ssh  \nMAINTAINER Pavel Nikitin <p.doomkin@ya.ru>  \n  \n# Set the noninteractive frontend  \nENV DEBIAN_FRONTEND noninteractive  \n  \n# Add self signed certificate and insecure key  \nADD certs/nginx.crt /etc/nginx/certs/nginx.crt  \nADD certs/nginx.key /etc/nginx/certs/nginx.key  \n  \n# Add default redirection to SSL for localhost  \nADD sites-available/default /etc/nginx/sites-available/default  \n  \n# Build image  \nRUN echo \"Updating packages...\"; \\  \napt-get update && apt-get upgrade -y; \\  \necho \"Installing Nginx...\"; \\  \napt-get install -y nginx; \\  \nchown -R www-data:www-data /var/lib/nginx; \\  \necho \"Cleaning...\"; \\  \nrm -rf /var/lib/apt/lists/*  \n  \n# Expose http(s) ports  \nEXPOSE 22 80 443  \n# Startup  \nCMD service nginx start && \\  \n/usr/sbin/sshd -D  \n\n"
    },
    {
        "filename": "7b60f3e6ef85f049e6a719bd487698df1ec76af7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n# Inspired by:\n# https://hub.docker.com/r/runmymind/docker-android-sdk/~/dockerfile/\n\nFROM ubuntu:17.10\n\nMAINTAINER Randall Barker \"rbarker@mozilla.com\"\n\n# -- System -----------------------------------------------------------------------------\n\nRUN apt-get update -qq\n\nRUN apt-get install -y openjdk-8-jdk \\\n\t\t\t\t\t   wget \\\n\t\t\t\t\t   expect \\\n\t\t\t\t\t   git \\\n\t\t\t\t\t   curl \\\n\t\t\t\t\t   ruby \\\n\t\t\t\t\t   ruby-dev \\\n\t\t\t\t\t   ruby-build \\\n\t\t\t\t\t   python \\\n\t\t\t\t\t   python-pip \\\n\t\t\t\t\t   optipng \\\n\t\t\t\t\t   imagemagick \\\n\t\t\t\t\t   locales\nRUN gem install fastlane\nRUN pip install taskcluster\n\nRUN locale-gen en_US.UTF-8\n\n# -- Android SDK ------------------------------------------------------------------------\n\nRUN cd /opt && wget -q https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -O android-sdk.zip\nRUN cd /opt && unzip android-sdk.zip\nRUN cd /opt && rm -f android-sdk.zip\n\nENV ANDROID_BUILD_TOOLS_VERSION \"28.0.3\"\nENV ANDROID_SDK_HOME /opt\nENV ANDROID_HOME /opt\nENV PATH ${PATH}:${ANDROID_SDK_HOME}/tools/bin:${ANDROID_SDK_HOME}/platform-tools:/opt/tools:${ANDROID_SDK_HOME}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}\n\nRUN echo y | sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\"\nRUN echo y | sdkmanager \"ndk-bundle\"\nRUN echo y | sdkmanager \"cmake;3.10.2.4988404\"\nRUN echo y | sdkmanager \"platforms;android-28\"\n\nWORKDIR /opt\n\n# Checkout source code\nRUN git clone https://github.com/MozillaReality/FirefoxReality.git\n\n# Build project and run gradle tasks once to pull all dependencies\nWORKDIR /opt/FirefoxReality\nRUN git submodule init\nRUN git submodule update\nRUN ./gradlew --no-daemon assembleNoapi\nRUN ./gradlew --no-daemon clean\n\n# -- Cleanup ----------------------------------------------------------------------------\n\nRUN apt-get clean\n"
    },
    {
        "filename": "7c156b684c11db45705299428da7eec71c7b1ce4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM docker.io/phusion/baseimage:0.9.21\nMAINTAINER Li Meng Jun <lmjubuntu@gmail.com>\n\nRUN apt-get update && apt-get install -y python3-pip git python-pip python\n\nRUN pip3 install pyyaml\n\nADD bootstrap.py /usr/local/bin/bootstrap.py\n\nWORKDIR /tmp\n\nCMD /usr/local/bin/bootstrap.py\n"
    },
    {
        "filename": "7c33c101a8efebe47680eab1c349e5540593ced2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nLABEL maintainer=\"feiskyer@gmail.com\"\n\nENV STRESS_VERSION=1.0.4\nRUN apt-get update && \\\n    apt-get install -y g++ make curl && \\\n    curl -o /tmp/stress-${STRESS_VERSION}.tgz https://people.seas.harvard.edu/~apw/stress/stress-${STRESS_VERSION}.tar.gz && \\\n    cd /tmp && tar xvf stress-${STRESS_VERSION}.tgz && \\\n    cd /tmp/stress-${STRESS_VERSION} && \\\n    ./configure && make && make install && \\\n    rm -rf /tmp/* && apt-get clean\n\nADD app /app\nADD app.c /app.c\n\nCMD [\"/app\"]\n"
    },
    {
        "filename": "7c5f94f6a274aaf49fde37278455b1c18ef69668.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\n# install curl and php\nRUN apt-get install -y curl php5 php5-cli\n\n# install composer\nRUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/bin/composer\n\n# Install phpunit\nRUN mkdir /var/www/phpunit && cd /var/www/phpunit && composer require phpunit/phpunit=3.7.14\n\n# install silex\nRUN mkdir /var/www/silex && cd /var/www/silex && composer require silex/silex:~1.3\n\n# install videlalvaro/php-amqplib\nRUN mkdir /var/www/videlalvaro && cd /var/www/videlalvaro && composer require videlalvaro/php-amqplib:*\n\n# add application source file\nADD index.php /var/www/silex/\n\n# run PHP server\nCMD php -S 0.0.0.0:80 -t /var/www/silex\n"
    },
    {
        "filename": "7d0b694a5c4f5c47e0600ab7caa1b9cf871bd9fe.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Vaultier Dockerfile for building a Vaultier image\n\n# Base this on Ubuntu LTS\nFROM ubuntu:14.04\nMAINTAINER info@rclick.cz\n\n# Set locales\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales && \\\n    locale-gen en_US.UTF-8 && \\\n    /usr/sbin/update-locale LANG=en_US.UTF-8\n\n\nENV LC_ALL en_US.UTF-8\n\n# Install Postgres, Htop, Uwsgi, Nginx & Supervisor\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3 \\\n    python-virtualenv python-dev \\\n    nginx \\\n    uwsgi uwsgi-plugin-python \\\n    supervisor && \\\n    apt-get clean -y && \\\n    apt-get autoclean -y\n\n# Postgres configuration\nRUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf && \\\n    echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n\nRUN /etc/init.d/postgresql start && \\\n    sudo -u postgres psql --command \"CREATE USER vaultier WITH SUPERUSER PASSWORD 'vaultier';\" && \\\n    sudo -u postgres createdb -O vaultier vaultier\n\n\n# Vaultier installation\nRUN mkdir -p /opt/vaultier/logs && mkdir -p /var/run/uwsgi/app/vaultier\nWORKDIR /opt/vaultier\nRUN useradd -d /opt/vaultier -s /bin/bash vaultier && \\\n    chown vaultier:www-data /var/run/uwsgi/app/vaultier\nCOPY Vaultier-latest.tar.gz /opt/vaultier/Vaultier-latest.tar.gz\nRUN virtualenv venv && /opt/vaultier/venv/bin/pip install Vaultier-latest.tar.gz && rm /opt/vaultier/Vaultier-latest.tar.gz\nENV PYTHONPATH /opt/vaultier/venv/lib/python2.7/site-packages/vaultier\nRUN /etc/init.d/postgresql start && /opt/vaultier/venv/bin/vaultier init --managed && \\\n    /opt/vaultier/venv/bin/vaultier setup --no_statistics && \\\n    chown -R vaultier:vaultier /opt/vaultier\n\n# Setup configuration for services\nADD supervisord.conf /etc/supervisor/supervisord.conf\nADD nginx.conf /etc/nginx/nginx.conf\nADD nginx-vaultier /etc/nginx/sites-available/vaultier\nADD uwsgi.ini /etc/uwsgi/apps-available/vaultier.ini\nRUN rm /etc/nginx/sites-enabled/default && \\\n    ln -s /etc/nginx/sites-available/vaultier /etc/nginx/sites-enabled && \\\n    ln -s /etc/uwsgi/apps-available/vaultier.ini /etc/uwsgi/apps-enabled\n\n# We don't want SSH\nRUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh\n\n# Volumes\nVOLUME [\"/var/log\", \"/var/lib/postgresql\", \"/opt/vaultier/logs\", \"/opt/vaultier/data\"]\n\n# Run supervisord on startup. Do not run with sh -c, so that SIGTERM works\n# on docker stop <conatiner>\nENTRYPOINT [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "7d61ad6343054241229ac64c04d7a79fbfeeefb5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM debian:jessie\n\n## Add APT 'contrib' repository\nRUN  sed -i 's/main/main contrib/' /etc/apt/sources.list\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.back\n\n## Add Debian testing repository\nRUN echo 'deb http://ftp.fr.debian.org/debian/ stretch main contrib' >> /etc/apt/sources.list\nRUN echo 'deb-src http://ftp.fr.debian.org/debian/ stretch main contrib' >> /etc/apt/sources.list\n\n## Tools\nRUN apt-get update && apt-get install -y emacs24-nox wget \\\nlibboost-serialization-dev libboost-regex-dev \\\nlibboost-system-dev libboost-filesystem-dev libboost-date-time-dev \\\nbuild-essential git libtool-bin \\\nlibtclap-dev cmake -y \\\nautotools-dev automake pkg-config libsodium-dev \\\nlibgtest-dev python valgrind python-pip libpython2.7-dev \\\nlibcurl4-openssl-dev\n\n# Database runtime libraries. Required by ODB.\nRUN apt-get update && apt-get install -y libsqlite3-dev libmysqlclient-dev libpq-dev -y\n\nRUN pip install pyzmq\n\nRUN apt-get update && apt-get install python3 python3-pip -y\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\nRUN pip3 install pyzmq\n\nRUN apt-get update && apt-get install -y libscrypt-dev libssl-dev\n\nRUN git clone git://github.com/zeromq/libzmq.git; \\\ncd libzmq; \\\ngit checkout v4.2.1; \\\n./autogen.sh; \\\n./configure --with-libsodium; \\\nmake check || echo ${Red}\"Warning: ZeroMQ tests failed. The build will continue but may fail.\"${RCol}; \\\nmake install; \\\nldconfig;\n\n# Container config\nCMD [\"\"]\nENTRYPOINT [\"/docker_scripts/entry.sh\"]\nEXPOSE 8888\n\n## we mount leosac source dir in read only\nVOLUME /leosac_src\nVOLUME /docker_scripts\n\nADD docker_scripts /docker_scripts\nRUN /docker_scripts/odb_install.sh\nRUN /docker_scripts/gtest_install.sh\n\nRUN apt-get update && apt-get install postgresql-client-9.6 -y\nRUN apt-get update && apt-get install libboost-coroutine-dev -y\n\n## This is way too verbose, but we don't have a choice...\n## We want the necessary files to build, not the tests scripts and all.\n## Otherwise, just editing a test-script would cause full rebuild ...\nRUN mkdir -p /leosac_src/{cmake,cfg,docker_scripts,libmcp23s17,libpifacedigital,libzmq,scripts,spdlog,src,test,tools,zmqpp,test_helper}\n\nADD cfg /leosac_src/cfg/\nADD docker_scripts /leosac_src/docker_scripts/\nADD scripts /leosac_src/scripts/\nADD test /leosac_src/test/\nADD deps /leosac_src/deps/\nADD cmake /leosac_src/cmake/\nADD src /leosac_src/src/\nADD CMakeLists.txt /leosac_src/\n\nRUN /docker_scripts/build_leosac.sh\nADD test_helper /leosac_src/test_helper\n\n"
    },
    {
        "filename": "7d882e49783a5445fbe25ab813f8073036c89464.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Container running Event Store\n#\n# VERSION               0.1\nFROM ubuntu\nMAINTAINER Alexander \"iam.asm89@gmail.com\"\n\n# make sure the package repository is up to date\nRUN apt-get update\n\n# install packages required to build mono and the eventstore\nRUN apt-get install -y git subversion\nRUN apt-get install -y autoconf automake libtool gettext libglib2.0-dev libfontconfig1-dev mono-gmcs\nRUN apt-get install -y build-essential\n\n# download mono 3.1.2\nRUN (cd /var/local; curl -O http://download.mono-project.com/sources/mono/mono-3.1.2.tar.bz2)\nRUN (cd /var/local; tar -xjvf mono-3.1.2.tar.bz2)\n\n# build and install mono\nRUN (cd /var/local/mono-3.1.2; ./configure --prefix=/usr/local; make; make install)\n\n# get eventstore and build it\nRUN git clone https://github.com/EventStore/EventStore.git /var/local/EventStore --depth=1\nRUN (cd /var/local/EventStore; ./build.sh full configuration=release)\n\n# setup directory structure\nENV EVENTSTORE_OUT /var/local/EventStore/bin/eventstore/release/anycpu\nENV EVENTSTORE_BIN /var/local/EventStore/bin/eventstore/release/anycpu\nENV EVENTSTORE_DB /opt/eventstore/db\nENV EVENTSTORE_LOG /opt/eventstore/logs\n\n# make directories\nRUN mkdir -p $EVENTSTORE_BIN\nRUN mkdir -p $EVENTSTORE_LOG\nRUN mkdir -p $EVENTSTORE_DB\n\n# expose LD library path\nENV LD_LIBRARY_PATH $EVENTSTORE_BIN\n\n# export the http and tcp port\nEXPOSE 2113\nEXPOSE 1113\n\n# set entry point to eventstore executable\nENTRYPOINT [\"mono-sgen\", \"/var/local/EventStore/bin/eventstore/release/anycpu/EventStore.SingleNode.exe\", \"--log=/opt/eventstore/logs\", \"--db=/opt/eventstore/db\"]\n\n# bind it to all interfaces by default\nCMD [\"--ip=0.0.0.0\", \"--http-prefix=http://*:2113/\"]\n"
    },
    {
        "filename": "7dd5a35825df7766fd60f160da2d7f80b4761d83.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM nginx\n\nRUN apt-get update -y && apt-get upgrade -y\nRUN apt-get install curl -y\nRUN apt-get install sudo -y\nRUN curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - && apt-get install nodejs -y\n\n# bootstraps arranger dependencies \nWORKDIR /app\nCOPY . /app\nRUN npm i\nRUN npm run bootstrap\n\n# builds admin ui and storybook\nRUN cd modules/admin-ui && REACT_APP_ARRANGER_ADMIN_ROOT=/admin/graphql npm run build\nRUN cd modules/components && STORYBOOK_ES_HOST=http://elasticsearch:9200 STORYBOOK_ARRANGER_API=/ npm run build-storybook\n\n# copies build-bundles out\nRUN cp -r modules/admin-ui/build ./arranger-admin\nRUN cp -r modules/components/storybook-static ./arranger-storybook\n\nCOPY nginx.conf /etc/nginx/nginx.conf\n\nCMD nginx -g \"daemon off;\"\n"
    },
    {
        "filename": "7de278576b07cad0a750b7367047628c10d134e6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# docker-xbmc-server\n#\n# Setup: Clone repo then checkout appropriate version\n#   For stable (Helix)\n#     $ git checkout master\n#   For experimental (master development)\n#     $ git checkout experimental\n#\n# Create your own Build:\n# \t$ docker build --rm=true -t $(whoami)/docker-xbmc-server .\n#\n# Run your build:\n# There are two choices   \n#   - UPnP server and webserver in the background: (replace ip and xbmc data location)\n#\t  $ docker run -d --net=host --privileged -v /directory/with/xbmcdata:/opt/xbmc-server/portable_data $(whoami)/docker-xbmc-server\n#\n#   - Run only the libraryscan and quit: \n#\t  $ docker run -v /directory/with/xbmcdata:/opt/xbmc-server/portable_data --entrypoint=/opt/xbmc-server/xbmcVideoLibraryScan $(whoami)/docker-xbmc-server --no-test --nolirc -p\n#\n# See README.md.\n# Source: https://github.com/wernerb/docker-xbmc-server\n\nfrom ubuntu:14.04\nmaintainer Werner Buck \"email@wernerbuck.nl\"\n\n# Set locale to UTF8\nRUN locale-gen --no-purge en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\nRUN dpkg-reconfigure locales\nENV LANGUAGE en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Set Terminal to non interactive\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Install java, git wget and supervisor\nRUN apt-get update && \\\n\tapt-get -y install git openjdk-7-jre-headless supervisor\n\n# Download XBMC, pick version from github\nRUN git clone --depth 1 --branch \"14.0-Helix\" https://github.com/xbmc/xbmc.git \n\n# Add patches and xbmc-server files\nADD src/fixcrash.diff xbmc/fixcrash.diff\nADD src/5071.patch xbmc/5071.patch\nADD src/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# Apply patches:\n#\tfixrash.diff : Fixes crashing in UPnP \nRUN cd xbmc && \\\n git apply fixcrash.diff && \\\n git apply 5071.patch\n\n# Installs xbmc dependencies, configure, make, clean.\n# Taken out of the list of dependencies: libbluetooth3. Put in the list: libssh-4 libtag1c2a libcurl3-gnutls libnfs1\nRUN apt-get install -y build-essential gawk pmount libtool nasm yasm automake cmake gperf zip unzip bison libsdl-dev libsdl-image1.2-dev libsdl-gfx1.2-dev libsdl-mixer1.2-dev libfribidi-dev liblzo2-dev libfreetype6-dev libsqlite3-dev libogg-dev libasound2-dev python-sqlite libglew-dev libcurl3 libcurl4-gnutls-dev libxrandr-dev libxrender-dev libmad0-dev libogg-dev libvorbisenc2 libsmbclient-dev libmysqlclient-dev libpcre3-dev libdbus-1-dev libjasper-dev libfontconfig-dev libbz2-dev libboost-dev libenca-dev libxt-dev libxmu-dev libpng-dev libjpeg-dev libpulse-dev mesa-utils libcdio-dev libsamplerate-dev libmpeg3-dev libflac-dev libiso9660-dev libass-dev libssl-dev fp-compiler gdc libmpeg2-4-dev libmicrohttpd-dev libmodplug-dev libssh-dev gettext cvs python-dev libyajl-dev libboost-thread-dev libplist-dev libusb-dev libudev-dev libtinyxml-dev libcap-dev autopoint libltdl-dev swig libgtk2.0-bin libtag1-dev libtiff-dev libnfs1 libnfs-dev libxslt-dev libbluray-dev && \\\n\tcd xbmc && \\\n\t./bootstrap && \\\n\t./configure \\\n\t\t--enable-nfs \\\n\t\t--enable-upnp \\\n\t\t--enable-ssh \\\n\t\t--disable-libbluray \\\n\t\t--disable-debug \\\n\t\t--disable-vdpau \\\n\t\t--disable-vaapi \\\n\t\t--disable-crystalhd \\ \n\t\t--disable-vdadecoder \\\n\t\t--disable-vtbdecoder \\\n\t\t--disable-openmax \\\n\t\t--disable-joystick \\\n\t\t--disable-rsxs \\\n\t\t--disable-projectm \\\n\t\t--disable-rtmp \\\n\t\t--disable-airplay \\\n\t\t--disable-airtunes \\\n\t\t--disable-dvdcss \\\n\t\t--disable-optical-drive \\\n\t\t--disable-libusb \\\n\t\t--disable-libcec \\\n\t\t--disable-libmp3lame \\\n\t\t--disable-libcap \\\n\t\t--disable-udev \\\n\t\t--disable-libvorbisenc \\\n\t\t--disable-asap-codec \\\n\t\t--disable-afpclient \\\n\t\t--disable-goom \\\n\t\t--disable-fishbmc \\\n\t\t--disable-spectrum \\\n\t\t--disable-waveform \\\n\t\t--disable-avahi \\\n\t\t--disable-non-free \\\n\t\t--disable-texturepacker \\\n\t\t--disable-pulse \\\n\t\t--disable-dbus \\\n\t\t--disable-alsa \\\n\t\t--disable-hal \\\n        --prefix=/opt/kodi-server && \\\n\tmake -j2 && \\\n    make install && \\\n    mkdir -p /opt/kodi-server/share/kodi/portable_data/ && \\\n\tcd / && \\\n\trm -rf /xbmc && \\\n    apt-get purge -y --auto-remove git openjdk* build-essential gcc gawk pmount libtool nasm yasm automake cmake gperf zip unzip bison libsdl-dev libsdl-image1.2-dev libsdl-gfx1.2-dev libsdl-mixer1.2-dev libfribidi-dev liblzo2-dev libfreetype6-dev libsqlite3-dev libogg-dev libasound2-dev python-sqlite libglew-dev libcurl3 libcurl4-gnutls-dev libxrandr-dev libxrender-dev libmad0-dev libogg-dev libvorbisenc2 libsmbclient-dev libmysqlclient-dev libpcre3-dev libdbus-1-dev libjasper-dev libfontconfig-dev libbz2-dev libboost-dev libenca-dev libxt-dev libxmu-dev libpng-dev libjpeg-dev libpulse-dev mesa-utils libcdio-dev libsamplerate-dev libmpeg3-dev libflac-dev libiso9660-dev libass-dev libssl-dev fp-compiler gdc libmpeg2-4-dev libmicrohttpd-dev libmodplug-dev libssh-dev gettext cvs python-dev libyajl-dev libboost-thread-dev libplist-dev libusb-dev libudev-dev libtinyxml-dev libcap-dev autopoint libltdl-dev swig libgtk2.0-bin libtag1-dev libtiff-dev libnfs-dev libbluray-dev && \\\n\tapt-get -y autoremove && \\\n    apt-get install -y fonts-liberation libaacs0 libbluray1 libasound2 libass4 libasyncns0 libavcodec54 libavfilter3 libavformat54 libavutil52 libcaca0 libcap2 libcdio13 libcec2 libcrystalhd3 libdrm-nouveau2 libenca0 libflac8 libfontenc1 libgl1-mesa-dri libgl1-mesa-glx libglapi-mesa libglew1.10 libglu1-mesa libgsm1 libice6 libjson0 liblcms1 libllvm3.5 liblzo2-2 libmad0 libmicrohttpd10 libmikmod2 libmodplug1 libmp3lame0 libmpeg2-4 libmysqlclient18 liborc-0.4-0 libpcrecpp0 libplist1 libpostproc52 libpulse0 libpython2.7 libschroedinger-1.0-0 libsdl-mixer1.2 libsdl1.2debian libshairport1 libsm6 libsmbclient libsndfile1 libspeex1 libswscale2 libtalloc2 libtdb1 libtheora0 libtinyxml2.6.2 libtxc-dxtn-s2tc0 libva-glx1 libva-x11-1 libva1 libvdpau1 libvorbisfile3 libvpx1 libwbclient0 libwrap0 libx11-xcb1 libxaw7 libxcb-glx0 libxcb-shape0 libxmu6 libxpm4 libxt6 libxtst6 libxv1 libxxf86dga1 libxxf86vm1 libyajl2 mesa-utils mysql-common python-cairo python-gobject-2 python-gtk2 python-imaging python-support tcpd ttf-liberation libssh-4 libtag1c2a libcurl3-gnutls libnfs1 && \\\n\tapt-get -y autoremove && \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists /usr/share/man /usr/share/doc\n\n#Eventserver and webserver respectively.\nEXPOSE 9777/udp 8089/tcp\n\nENTRYPOINT [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "7e0f408eaf37ae3bf445d002f7e54490a9d64dc0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#if try to change the available cuda and cudnn version\n#https://hub.docker.com/r/nvidia/cuda/\nFROM nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\nMAINTAINER Moch. Ainun Najib <ec2ainun@gmail.com>\n\n#if try to change the available version\n#https://www.tensorflow.org/install/install_linux#the_url_of_the_tensorflow_python_package\nARG TENSORFLOW_VERSION=1.4.0\nARG TENSORFLOW_ARCH=gpu\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tyasm \\\n\t\tpython3-dev \\\n\t\tpython3-tk \\\n\t\tpython3-numpy \\\n        python3-pip \\\n\t\tant \\\n\t\tdefault-jdk \\\n\t\tdoxygen \\\n\t\tffmpeg \\\n\t\tqtbase5-dev \\\n\t\tqt5-default \\\n\t\tlibssl-dev \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tliblcms2-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tlibgtk-3-dev \\ \n\t\tlibdc1394-22 \\\n\t\tlibdc1394-22-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibopenjpeg5 \\\n\t\tlibpng12-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibxine2-dev \\\n\t\tlibgstreamer0.10-dev \\\n\t\tlibgstreamer-plugins-base0.10-dev \\\n\t\tlibv4l-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tlibfaac-dev \\\n\t\tlibmp3lame-dev \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tv4l-utils \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibx264-dev \\\n\t\tliblapacke-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tcheckinstall \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --upgrade pip\n\n# Add SNI support to Python\nRUN pip3 --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1 \n\n# Install other useful Python packages using pip3\nRUN pip3 --no-cache-dir install --upgrade ipython && \\\n\tpip3 --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\th5py \\\n\t\tpygments \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\tmatplotlib \\\n        numpy \\\n        pandas \\\n\t\tscipy \\\n\t\tscikit-learn \\\n\t\t&& \\\n\tpython3 -m ipykernel.kernelspec\n\nRUN apt-get update && apt-get install -y \\\n\t\tpython3-nose \\\n\t\tpython3-skimage \\\n\t\tpython3-sympy \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Install TensorFlow\nRUN pip3 --no-cache-dir install \\\n\thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_gpu-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n\nADD *.sh /\n# Install Opencv\nRUN bash Opencv.sh\n\n# Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\nCOPY jalankan.sh /root/\nEXPOSE 6006 8888\nADD *.ipynb /notebooks/\nWORKDIR /notebooks\nRUN chmod +x /root/jalankan.sh\n\nCMD [\"/root/jalankan.sh\"]\n"
    },
    {
        "filename": "7f538b22e39f957f424fc5392f88332a28ddc5fd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM hub.opshub.sh/containerops/bazel:latest\nMAINTAINER Quanyi Ma <genedna@gmail.com>\n\nUSER root\n\nRUN apt-get update && apt-get install -y git make python python-dev python-pip python-virtualenv\n\nRUN curl -sSL https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz -o /tmp/go.tar.gz && \\\n  echo \"1862f4c3d3907e59b04a757cfda0ea7aa9ef39274af99a784f5be843c80c6772  /tmp/go.tar.gz\" | sha256sum -c - && \\\n  tar -C /var/opt -xzf /tmp/go.tar.gz && \\\n  rm /tmp/go.tar.gz && \\\n  mkdir -p /var/opt/gopath && \\\n  chmod -R 777 /var/opt/gopath\n\nENV GOROOT /var/opt/go\nENV GOPATH /var/opt/gopath\nENV PATH $PATH:$GOROOT/bin:$GOPATH:/bin:$GOPATH/src/github.com/Huawei/containerops\n\nRUN mkdir -p $GOPATH/src/github.com/Huawei/containerops\nADD codes/*.go $GOPATH/src/github.com/Huawei/containerops/\n\nWORKDIR $GOPATH/src/github.com/Huawei/containerops\n\nRUN go build k8s.go\n\nWORKDIR $GOPATH/src/github.com/kubernetes/kubernetes\n\nCMD k8s\n"
    },
    {
        "filename": "7f86a5294e81a14cd116270e84a23ac38d86d244.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:18.04\n\n# Supresses unwanted user interaction (like \"Please select the geographic area\" when installing tzdata)\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update packages (use us.archive.ubuntu.com instead of archive.ubuntu.com \u2014 solves the painfully slow apt-get update)\nRUN sed -i 's/archive\\.ubuntu\\.com/us\\.archive\\.ubuntu\\.com/' /etc/apt/sources.list\nRUN apt-get update\n\n# Miscellaneous deps\nRUN apt-get -y install curl gnupg git pandoc\n\n# PHP\nRUN apt-get install -y php php-curl php-iconv php-mbstring php-bcmath\n\n# Node\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get -y install nodejs\n\n# Python 2\nRUN apt-get install -y python-pip\nRUN pip2 install --upgrade setuptools requests[security]\n\n# Python 3\nRUN apt-get install -y python3 python3-pip\nRUN pip3 install --upgrade six setuptools wheel pyopenssl tox twine\n\n# Copy files to workdir to run install scripts against it (will be replaced with a live-mounted volume at startup)\nRUN mkdir -p /ccxt\nWORKDIR /ccxt\nADD . /ccxt\nRUN rm -rf /ccxt/node_modules\n\n# Installs as a local Node & Python module, so that `require ('ccxt')` and `import ccxt` should work after that\nRUN npm install\nRUN ln -s /ccxt /usr/lib/node_modules/\nRUN echo \"export NODE_PATH=/usr/lib/node_modules\" >> $HOME/.bashrc\nRUN cd python && python3 setup.py install && python setup.py install && cd ..\n"
    },
    {
        "filename": "7ffd19dd2d53e67cb39587c5b349cfb258ba88d9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "\n###########################################\n## Hadoop 2.6 and Jupyter\n\nFROM sequenceiq/hadoop-ubuntu:2.6.0\nMAINTAINER \"Paolo D'Onorio De Meo <p.donoriodemeo@gmail.com>\"\n\n#\u00a0Let hadoop be in the path\nENV PATH $HADOOP_PREFIX/bin:$PATH\n\n###########################################\n# Install all OS dependencies for fully functional notebook server\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    git vim wget build-essential python-dev bzip2 unzip libsm6 \\\n    libxml2-dev libxslt1-dev \\\n    #ca-certificates \\\n    #pandoc texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended \\\n    #supervisor sudo \\\n    && apt-get clean\n\n###########################################\n# Install conda\nENV CONDA_DIR /opt/conda\nRUN echo 'export PATH=$CONDA_DIR/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet \\\n    https://repo.continuum.io/miniconda/Miniconda3-3.9.1-Linux-x86_64.sh && \\\n    /bin/bash /Miniconda3-3.9.1-Linux-x86_64.sh -b -p $CONDA_DIR && \\\n    rm Miniconda3-3.9.1-Linux-x86_64.sh && \\\n    $CONDA_DIR/bin/conda install --yes conda==3.14.1\nENV PATH $CONDA_DIR/bin:$PATH\n\n###########################################\n# Install Python 3 packages\nRUN conda install --yes \\\n    numpy scipy pandas matplotlib seaborn scikit-learn bokeh \\\n    && conda clean -yt\n\n# Install Jupyter notebook\nRUN conda install --yes \\\n    ipython-notebook terminado \\\n    && conda clean -yt\n\n# Configure Jupyter\nRUN ipython profile create\n\n###########################################\n#\u00a0install some other pip libs\nRUN pip install plumbum howdoi\n\n###############################\n#\u00a0Add mrjob from Yelp\nWORKDIR /opt\n#\u00a0Install and not remove from installation!\nRUN git clone https://github.com/Yelp/mrjob \\\n    && cd mrjob && pip install -e .\n\n###############################\n# Add offline use of mathjax\nRUN python -m IPython.external.mathjax\n\n###############################\n# Live slideshows\nRUN mkdir -p /root/.jupyter/nbconfig && \\\n    wget https://github.com/pdonorio/RISE/archive/master.tar.gz \\\n    && tar xvzf *.gz && cd *master && \\\n    python setup.py install\n\n###############################\n#\u00a0Last fixes\n\n# languages and UTF-8\nRUN apt-get update && apt-get install -y language-pack-en\nENV LANG en_US.UTF-8\nRUN locale-gen en_US.UTF-8\nRUN dpkg-reconfigure locales\n\n# startup script\nENV HADOOP_HOME $HADOOP_PREFIX\nENV STARTUPSCRIPT /bootme.sh\nRUN echo \"#!/bin/bash\" > $STARTUPSCRIPT && \\\n    echo \"/etc/bootstrap.sh &\\njupyter notebook --no-browser --ip=0.0.0.0\\n\" \\\n    >> $STARTUPSCRIPT && \\\n    chmod +x $STARTUPSCRIPT\n\n# Other usefull variables\nENV TERM xterm\n#ENV HADOOP_VERSION `hadoop version | grep Hadoop | awk '{print $2}'`\nENV HADOOP_VERSION 2.6.0\nENV HADOOP_JARS $HADOOP_PREFIX/share/hadoop/tools/lib\nENV HADOOP_EXAMPLES $HADOOP_PREFIX/share/hadoop/mapreduce/hadoop-mapreduce-examples-${HADOOP_VERSION}.jar\nENV HADOOP_STREAMING $HADOOP_JARS/hadoop-streaming-${HADOOP_VERSION}.jar\n\nCMD [ \"/bootme.sh\" ]\n\n#\u00a0A data directory\nWORKDIR /data\n"
    },
    {
        "filename": "80265a6d268f844bb3e9cfd42a76fd5f709207ad.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM mxnet/python\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get -y update\nRUN apt-get -y install git \\\n  python-opencv \\\n  build-essential \\\n  python-dev \\\n  python-tk\n\nRUN pip install dumb-init\nRUN pip install awscli\nRUN pip install matplotlib\n\nENV WORKSHOPDIR /root/ecs-deep-learning-workshop\nRUN mkdir ${WORKSHOPDIR}\n\nRUN cd ${WORKSHOPDIR} \\\n  && git clone --recursive https://github.com/apache/incubator-mxnet.git mxnet \\\n  && git clone https://github.com/dmlc/mxnet-notebooks.git\n\nCOPY predict_imagenet.py /usr/local/bin/\n\nRUN pip install jupyter\n\nRUN jupyter-notebook --generate-config --allow-root \\\n  && sed -i \"s/#c.NotebookApp.ip = 'localhost'/c.NotebookApp.ip = '*'/g\" /root/.jupyter/jupyter_notebook_config.py \\\n  && sed -i \"s/#c.NotebookApp.allow_remote_access = False/c.NotebookApp.allow_remote_access = True/g\" /root/.jupyter/jupyter_notebook_config.py\n\nARG PASSWORD\n\nRUN python -c \"from notebook.auth import passwd;print(passwd('${PASSWORD}') if '${PASSWORD}' != '' else 'sha1:c6bd96fb0824:6654e9eabfc54d0b3d0715ddf9561bed18e09b82')\" > ${WORKSHOPDIR}/password_temp\n\nRUN sed -i \"s/#c.NotebookApp.password = u''/c.NotebookApp.password = u'$(cat ${WORKSHOPDIR}/password_temp)'/g\" /root/.jupyter/jupyter_notebook_config.py\n\nRUN rm ${WORKSHOPDIR}/password_temp\n\nWORKDIR ${WORKSHOPDIR}\nEXPOSE 8888\nCMD [\"/usr/local/bin/dumb-init\", \"/usr/local/bin/jupyter-notebook\", \"--no-browser\", \"--allow-root\"]\n"
    },
    {
        "filename": "806da6eb16b7dcbe219fbc399eac8a69f0b447f6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/xenial-amd64:2.37\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV UBUNTUIMAGE_VERSION=1.0+16.04ubuntu1\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git\n\nWORKDIR /tmp\nADD disable-sparse-check.patch /tmp\nRUN git clone --depth 1 --branch ${UBUNTUIMAGE_VERSION} https://github.com/CanonicalLtd/ubuntu-image \\\n && cd ubuntu-image \\\n && patch -p1 < /tmp/disable-sparse-check.patch \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && mkdir -p /snap/bin \\\n && ln -s /usr/bin/ubuntu-image /snap/bin/ubuntu-image\n\nRUN mknod /dev/loop0 b 7 0\nRUN echo \"ALL ALL=NOPASSWD: /snap/bin/ubuntu-image, /bin/mount, /bin/umount, /bin/cp\" >> /etc/sudoers.d/ubuntu-image \\\n && chmod 0440 /etc/sudoers.d/ubuntu-image\n\n# Install toolchins\nRUN apt-get install -y build-essential u-boot-tools lzop debootstrap \\\n    gcc-aarch64-linux-gnu \\\n    gcc-arm-linux-gnueabihf \\\n    gcc-4.8 \\\n    gcc-4.8-arm-linux-gnueabihf \\\n    device-tree-compiler \\\n    bc\n\n# change the default gcc to 4.8, since old kernel need old gcc.\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-5 50 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-5 50\nRUN update-alternatives --install /usr/bin/gcc gcc  /usr/bin/gcc-4.8 100 \\\n && update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100\n\n# multiarch.\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y libc6:i386\n\nRUN apt-get remove --purge -y devscripts equivs\nRUN apt-get autoremove -y\nRUN apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\nWORKDIR /build\n"
    },
    {
        "filename": "80801a09c55ab626f5cbf39ccee37f0788ac2a59.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM stackbrew/ubuntu:13.10\nMAINTAINER  Meaglith Ma <genedna@gmail.com> (@genedna)\n\n#aliyun#RUN echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy main restricted\" > /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-updates main restricted\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy universe\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-updates universe\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy multiverse\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-updates multiverse\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-backports main restricted universe multiverse\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-security main restricted\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-security universe\" >> /etc/apt/sources.list && echo \"deb http://mirrors.aliyun.com/ubuntu/ saucy-security multiverse\" >> /etc/apt/sources.list\n\n#nchc#RUN echo \"deb http://free.nchc.org.tw/ubuntu/ saucy main restricted\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy main restricted\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-updates main restricted\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-updates main restricted\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy universe\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy universe\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-updates universe\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-updates universe\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy multiverse\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy multiverse\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-updates multiverse\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-updates multiverse\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-backports main restricted universe multiverse\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-backports main restricted universe multiverse\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-security main restricted\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-security main restricted\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-security universe\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-security universe\" >> /etc/apt/source.list && echo \"deb http://free.nchc.org.tw/ubuntu/ saucy-security multiverse\" >> /etc/apt/source.list && echo \"deb-src http://free.nchc.org.tw/ubuntu/ saucy-security multiverse\" >> /etc/apt/source.list && echo \"deb http://extras.ubuntu.com/ubuntu saucy main\" >> /etc/apt/source.list && echo \"deb-src http://extras.ubuntu.com/ubuntu saucy main\" >> /etc/apt/source.list \n\nRUN mkdir -p /go\nENV PATH /usr/local/go/bin:/go/bin:$PATH\nENV GOROOT /usr/local/go\nENV GOPATH /go\n\nRUN apt-get update && apt-get install --yes --force-yes curl git mercurial zip wget ca-certificates build-essential\nRUN apt-get install -yq vim sudo\n\nRUN curl -s http://docker.u.qiniudn.com/go1.2.1.src.tar.gz | tar -v -C /usr/local -xz\nRUN cd /usr/local/go/src && ./make.bash --no-clean 2>&1\n\nRUN go get -u -d github.com/gogits/gogs \nRUN cd $GOPATH/src/github.com/gogits/gogs && git checkout dev && git pull origin dev && go install && go build -tags redis\n\n\n# Add the deploy script to the docker image and assign execution permission to it.\nADD ./deploy.sh /\nRUN chmod +x deploy.sh\n\nEXPOSE 3000\n\nCMD /deploy.sh\n"
    },
    {
        "filename": "80889d8d53d1527398d1bc322ff1538d2ebbd1fa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Kimbro Staken\n\nRUN apt-get install -y python-software-properties python\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n#RUN apt-get install -y nodejs=0.6.12~dfsg1-1ubuntu1\nRUN mkdir /var/www\n\nADD app.js /var/www/app.js\n\nCMD [\"/usr/bin/node\", \"/var/www/app.js\"] "
    },
    {
        "filename": "80ab108865417a3137956b1084e5f656ac0946c3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# DOCKER-VERSION 0.3.4\nFROM ubuntu\nMAINTAINER Sandro Munda <sandro@munda.me>\n\nRUN apt-get install -y python-software-properties git make g++\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n\nRUN npm install -g supervisor\n\nADD . /var/www\n\nCMD cd /var/www; npm link; supervisor -i public/ app.js\n"
    },
    {
        "filename": "8140580a8437360ebe634aab4a0960d2635d9d20.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM gitlab/dind  \n  \nMAINTAINER Shawn Seymour <shawn@devshawn.com>  \n  \nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -  \nRUN apt-get install -y nodejs  \n  \nRUN mkdir /opt/yarn  \nRUN wget https://yarnpkg.com/latest.tar.gz -O /tmp/yarn.tar.gz && \\  \ntar zvxf /tmp/yarn.tar.gz --strip-components=1 -C /opt/yarn && \\  \nln -s /opt/yarn/bin/yarn /usr/local/bin/yarn  \n\n"
    },
    {
        "filename": "817131a30a366b11bf5fe2ca45fd7ff945dd647b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base \n\nMAINTAINER \"Yugandha Deshpande <yugandha@us.ibm.com>\"\n\nRUN apt-get update \\\n\t&& apt-get install git -y \\\n\t&& git clone https://github.com/cran/boot.git \\\n\t&& cd boot && git checkout 1.3-20 \\\n\t&& R -e 'install.packages(\"boot\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& R CMD check boot --no-manual \\\n\t&& apt-get purge --auto-remove git -y \\\n\t&& cd .. && rm -rf boot\n\nCMD [ \"/bin/bash\" ]\n"
    },
    {
        "filename": "81a2037f62e439b5f5ef3e1185990abeb384433e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:armhf-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.18\n\n# qemu-user-static\nADD qemu-arm-static /usr/bin/qemu-arm-static\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \n\nRUN cd snapcraft \\\n && echo \"override_dh_auto_test:\" >> debian/rules \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \n\nRUN apt-get install -y ./*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "81e1f35f577a1a12feee32d88b1bad563292c75b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty\n\nMAINTAINER Frode Egeland <egeland@gmail.com>\n\n# Base\nENV LANG en_US.UTF-8\nENV DEBIAN_FRONTEND noninteractive\n\nRUN locale-gen en_US en_US.UTF-8\nRUN dpkg-reconfigure locales\nRUN apt-get update\nRUN apt-get install -y python3-pip postgresql-server-dev-all postgresql-common supervisor\n\n# Supervisor\nRUN update-rc.d -f supervisor disable\n\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# Start Script\nADD startup /usr/local/bin/startup\nRUN chmod +x /usr/local/bin/startup\n\nCMD [\"/usr/local/bin/startup\"]\n\n# Install global dependencies\nRUN pip3 install gunicorn setproctitle flask psycopg2 SQLAlchemy coverage nose Mako Flask-Script Flask-Migrate Flask-HTTPAuth Flask-SQLAlchemy\n\n# Install gunicorn running script\nADD run /usr/local/bin/run\nRUN chmod +x /usr/local/bin/run\n\n# Volumes\nVOLUME [\"/root/app/logs\"]\n\n# Ports\nEXPOSE 80\n"
    },
    {
        "filename": "82b5fe1a566aefad35dadcfb0c62f9041554935c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Adam Ewing <adam.ewing@gmail.com>\n\nENV PATH=$PATH:$HOME/bin\n\nWORKDIR ~/\nRUN apt-get update && apt-get install -y software-properties-common\n\nRUN add-apt-repository -y ppa:scipy/ppa\n\nRUN apt-get install -y \\\n    python \\\n    python-numpy \\\n    python-scipy \\\n    python-pip \\\n    zlib1g-dev \\\n    git \\\n    wget \\\n    libncurses5-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    pkg-config \\\n    automake \\\n    autoconf \\\n    glib-2.0-dev \\\n    unzip\n\nRUN pip install cython\nRUN pip install pysam\n\nRUN mkdir $HOME/bin\n\nRUN wget https://www.ebi.ac.uk/~zerbino/velvet/velvet_1.2.10.tgz\nRUN tar xvzf velvet_1.2.10.tgz\nRUN make -C velvet_1.2.10\nRUN cp velvet_1.2.10/velvetg $HOME/bin\nRUN cp velvet_1.2.10/velveth $HOME/bin\n\nRUN git clone https://github.com/lh3/bwa.git\nRUN make -C bwa\nRUN cp bwa/bwa $HOME/bin\n\nRUN git clone https://github.com/samtools/htslib.git\nRUN make -C htslib\n\nRUN git clone https://github.com/samtools/samtools.git\nRUN make -C samtools\nRUN cp samtools/samtools $HOME/bin\nRUN cp samtools/misc/wgsim $HOME/bin\n\nRUN git clone https://github.com/samtools/bcftools.git\nRUN make -C bcftools\nRUN cp bcftools/bcftools $HOME/bin\n\nRUN wget https://github.com/broadinstitute/picard/releases/download/1.131/picard-tools-1.131.zip\nRUN unzip picard-tools-1.131.zip\n\nRUN git clone https://github.com/adamewing/exonerate.git\nRUN cd exonerate && autoreconf -fi && ./configure && make && make install\n\nRUN git clone https://github.com/adamewing/bamsurgeon.git\nRUN export PATH=$PATH:$HOME/bin && cd bamsurgeon && python setup.py install\n\nCMD []\n"
    },
    {
        "filename": "82ea38a8b461959bba4ec8afc0d422fec0f0c95f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "####################################################################\n# Working config file building an \"all-in one\" (and heavy..)\n# image of the app and making it accessible on port 9999\n# (but it should be splited in multiple containers).\n# Configured in order to avoid using cache when fetching the code of the\n# application.\n####################################################################\n# Can be build like this :\n#\n# $ docker build -t \"magrit_app:latest\" --build-arg CACHEBUST=$(date +%s) .\n#\n#\n# App can be started like this (exposing port 9999 in the host):\n#\n# $ docker run --publish \"9999:9999\" -it \"magrit_app:latest\"\n#\n#\n# Access to a shell in the container can be obtained with a command like :\n#\n# $ docker run -it --entrypoint=/bin/bash \"magrit_app:latest\"\n#\n\n\nFROM ubuntu:18.04\nMAINTAINER mth\n\nRUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa \\\n\t\t&& apt-get update \\\n\t\t&& apt-get install -y gcc libpython3.6-dev libopenblas-dev libopenblas-base \\\n        python3.6 python3.6-dev libgeos-dev \\\n        libfreetype6-dev libfreetype6 libproj-dev libspatialindex-dev libv8-3.14-dev libffi-dev \\\n        nodejs nodejs-dev npm redis-server libuv1-dev git wget \\\n        libxslt1-dev libxml2 libxml2-dev libkml-dev locales \\\n    && npm -g install topojson \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && locale-gen fr_FR.UTF-8\n\nENV LANG='fr_FR.UTF-8' LANGUAGE='fr_FR' LC_ALL='fr_FR.UTF-8'\n\nWORKDIR /home\n\nENV GDALINST /home/gdalinstall\nENV GDALBUILD /home/gdalbuild\nENV GDALOPTS=\"  --with-geos \\\n\t\t        --with-expat \\\n\t\t        --without-libtool \\\n\t\t        --without-gif \\\n\t\t        --without-pg \\\n\t\t        --without-grass \\\n\t\t        --without-libgrass \\\n\t\t        --without-cfitsio \\\n\t\t        --without-pcraster \\\n\t\t        --without-netcdf \\\n\t\t        --without-gif \\\n\t\t        --without-ogdi \\\n\t\t        --without-fme \\\n\t\t        --without-hdf4 \\\n\t\t        --with-spatialite \\\n\t\t        --with-static-proj4=/usr/lib\"\n\nRUN mkdir $GDALBUILD && mkdir $GDALINST && cd $GDALBUILD && wget http://download.osgeo.org/gdal/2.2.3/gdal-2.2.3.tar.gz \\\n    && tar -xzf gdal-2.2.3.tar.gz && cd gdal-2.2.3 && ./configure --prefix=$GDALINST/gdal-2.2.3 $GDALOPTS \\\n\t&& make -s -j 2 && make install\n\nENV PATH=\"${GDALINST}/gdal-2.2.3/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${GDALINST}/gdal-2.2.3/lib:${LD_LIBRARY_PATH}\"\n\nRUN cd /tmp && wget https://bootstrap.pypa.io/get-pip.py && python3.6 get-pip.py\n\nARG CACHEBUST=1\n\nRUN mkdir /home/app && cd /home/app && mkdir magrit\nCOPY magrit /home/app/magrit\nCOPY redis.conf /etc/redis/redis.conf\n\nRUN cd /home/app/magrit/ \\\n    && pip3.6 install -U setuptools numpy \\\n    && pip3.6 install https://github.com/mthh/smoomapy-magrit/archive/master.zip \\\n    && pip3.6 install -U -r requirements/prod.txt \\\n    && python3.6 setup.py build_ext --inplace\n\nEXPOSE 9999\n\nCMD redis-server /etc/redis/redis.conf \\\n    & gunicorn \"magrit_app.app:create_app()\" --bind 0.0.0.0:9999 --worker-class aiohttp.worker.GunicornUVLoopWebWorker --max-requests 450 --max-requests-jitter 50 --workers 3 --chdir /home/app/magrit/\n"
    },
    {
        "filename": "8353a10e09ac8bfdd5623eafe98b5a8b70293f9f.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Walter Moreira <wmoreira@tacc.utexas.edu>  \n  \nRUN apt-get update -y && \\  \napt-get install -y python python-dev python-pip supervisor git curl  \nRUN apt-get install -y libzmq-dev  \nRUN pip install serf_master fig jinja2 ipython logbook ansible psutil  \nWORKDIR /tmp  \nRUN git clone https://github.com/waltermoreira/mischief.git  \nWORKDIR /tmp/mischief  \nRUN python setup.py install  \nRUN curl -sSL https://get.docker.com/ubuntu/ | sudo sh  \nRUN apt-get install -y sshpass  \nRUN echo \"[defaults]\\nhost_key_checking = False\" > /root/.ansible.cfg  \n  \nWORKDIR /  \nCOPY serf /usr/bin/  \nCOPY handler /handler  \nCOPY serfnode.conf /etc/supervisor/conf.d/  \nCOPY programs /programs  \nCOPY me.py /me  \nCOPY serfnode.yml /serfnode.yml  \nCOPY deploy /deploy  \nCOPY entry.sh /bin/entry.sh  \nCOPY out /out  \nCOPY err /err  \nCOPY alias.sh /alias  \n  \nEXPOSE 7946 7946/udp 7373  \nRUN mkdir /serfnode  \nVOLUME /serfnode  \n  \n#CMD [\"/handler/entry.sh\"]  \n#CMD [\"/deploy/deploy.py\"]  \nENTRYPOINT [\"/bin/entry.sh\"]  \n\n"
    },
    {
        "filename": "8459064207159ea46ae45a93692de09af364a2f9.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Mikkel Vilstrup <mikkel@vilstrup.dk>\n\n##############################################################################\n# Install TensorFlow dependencies\n##############################################################################\nRUN apt-get update && apt-get install -y --no-install-recommends  \\\n    wget ca-certificates \\\n    git \\\n    curl \\\n    libfreetype6-dev \\\n    libpng12-dev l\\\n    ibhdf5-dev \\\n    openmpi-bin \\\n    pkg-config \\\n    zip \\\n    g++ \\\n    zlib1g-dev \\\n    unzip \\\n    build-essential \\\n    openjdk-8-jdk \\\n    openjdk-8-jre-headless \\\n    software-properties-common \\\n    python \\\n    python-dev \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n##############################################################################\n# Install Anaconda\n##############################################################################\nRUN apt-get update && \\\n    apt-get install -y wget bzip2 ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN wget --quiet https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh && \\\n    /bin/bash Anaconda3-4.4.0-Linux-x86_64.sh -b -p /opt/conda && \\\n    rm Anaconda3-4.4.0-Linux-x86_64.sh\n\nENV PATH /opt/conda/bin:$PATH\nRUN pip install --upgrade pip\n\n##############################################################################\n# Install TensorFlow w/ CPU instructions\n##############################################################################\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\nENV BAZEL_VERSION 0.5.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\nRUN git clone https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout r1.2\nWORKDIR /tensorflow\n\n\n# Must set bazel commands:\n# https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions\nRUN tensorflow/tools/ci_build/builds/configured CPU \\\n    bazel build -c opt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.1 --copt=-msse4.2 \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n\n##############################################################################\n# Setup Language to UTF-8 for text\n##############################################################################\n# https://askubuntu.com/a/601498\nRUN apt-get clean && apt-get -y update && apt-get install -y locales && locale-gen en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n##############################################################################\n# Setup Jupyter\n##############################################################################\nCOPY config.py /root/.jupyter/jupyter_notebook_config.py\n\n# Copy sample notebooks.\nCOPY notebooks /notebooks\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n\n# Tell docker where to go automatically\nWORKDIR \"/notebooks\"\n\nCMD [\"/run_jupyter.sh\", \"--allow-root\"]\n"
    },
    {
        "filename": "847edeef926a59e072ae4524197e388da972f5e2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# decking: build as makeusabrew/nodeflakes\nFROM makeusabrew/zeromq\n\nMAINTAINER Nick Payne <nick@kurai.co.uk>\n\nRUN apt-get update\n# some node modules (e.g. zmq) need python to install properly\nRUN apt-get install -y software-properties-common python\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN apt-get update\nRUN apt-get install -y nodejs\n\n# this file will need moving to the project root for this to work!\nADD . /nodeflakes\n\nWORKDIR /nodeflakes\n# remove all node modules in case they were compiled against a\n# different version of node\nRUN rm -fr node_modules\n# and then get a nice clean install\nRUN npm install --production\n\nWORKDIR /\n"
    },
    {
        "filename": "84dce5296acc5d34ab04de53619990a2bdc6fb12.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM cochain/eos-builder\nARG version\nARG symbol=EOC\nARG cdt_version=v1.5.0-rc1\n\nCOPY . /eos/\n\nRUN cd eos && echo $version > /etc/eosio-version \\\n    && cmake -H. -B\"/opt/eosio\" -GNinja -DCMAKE_BUILD_TYPE=Release -DWASM_ROOT=/opt/wasm -DCMAKE_CXX_COMPILER=clang++ \\\n       -DCMAKE_C_COMPILER=clang -DCMAKE_INSTALL_PREFIX=/opt/eosio -DCORE_SYMBOL_NAME=$symbol \\\n       -DOPENSSL_ROOT_DIR=/usr/include/openssl -DOPENSSL_INCLUDE_DIR=/usr/include/openssl \\\n    && cmake --build /opt/eosio --target install \\\n    && cp /eos/Docker/config.ini / && ln -s /opt/eosio/contracts /contracts && cp /eos/Docker/nodeosd.sh /opt/eosio/bin/nodeosd.sh && ln -s /eos/tutorials /tutorials \\\n    && rm -rf /eos\n\nRUN deb=$(curl -s https://api.github.com/repos/eoscochain/eoscochain.cdt/releases/tags/$cdt_version | grep \"browser_download_url.*deb\" | cut -d '\"' -f 4) \\\n    && filename=$(curl -s https://api.github.com/repos/eoscochain/eoscochain.cdt/releases/tags/$cdt_version | grep \"name.*deb\" | cut -d '\"' -f 4) \\\n    && wget $deb && dpkg -i \"$filename\" && rm -f \"$filename\"\n\nRUN git clone https://github.com/eoscochain/eoscochain.contracts \\\n    && cd eoscochain.contracts && chmod +x build.sh && ./build.sh \\\n    && mv build /opt/eosio/contracts\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install openssl ca-certificates vim psmisc python3-pip && rm -rf /var/lib/apt/lists/*\nRUN pip3 install numpy\nENV EOSIO_ROOT=/opt/eosio\nRUN chmod +x /opt/eosio/bin/nodeosd.sh\nENV LD_LIBRARY_PATH /usr/local/lib\nVOLUME /opt/eosio/bin/data-dir\nENV PATH /opt/eosio/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"
    },
    {
        "filename": "5c8f65039c9f3abbd3a143ec04d0a1947fbd4188.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:trusty  \nMAINTAINER Chris Hardekopf <cjh@ygdrasill.com>  \n  \n# Install packages required  \nRUN apt-get update && \\  \nDEBIAN_FRONTEND=noninteractive apt-get install -y \\  \npython3 python3-pip libssl-dev libacl1-dev \\  \nopenssh-client pkg-config libfuse-dev \\  \nsshfs && \\  \nrm -rf /var/lib/apt/lists/*  \n  \n# Install the python requirements  \nADD requirements.txt /opt/  \nRUN pip3 install --upgrade --requirement /opt/requirements.txt  \n  \n# Install attic  \nRUN pip3 install attic  \n  \n# Add the start script  \nADD start /opt/  \n  \n# Set the ENTRYPOINT  \nENTRYPOINT [ \"/opt/start\" ]  \n##CMD [ \"/opt/start\" ]  \n\n"
    },
    {
        "filename": "5c93d005d164848edfccfac957f3e8cec00f6bac.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ampervue/python34\n\n# https://github.com/ampervue/docker-python34-opencv3\n\nMAINTAINER David Karchmer <dkarchmer@ampervue.com>\n\n#####################################################################\n#\n# Image based on Ubuntu:14.04\n#\n#   with\n#     - Python 3.4\n#     - OpenCV 3 (built)\n#     - FFMPEG (built)\n#   plus a bunch of build/web essentials via wheezy\n#   including MySQL and Postgres clients:\n#      https://github.com/docker-library/docs/tree/master/buildpack-deps\n#\n#####################################################################\n\nENV NUM_CORES 4\n\n\nWORKDIR /usr/local/src\n\nRUN git clone --depth 1 https://github.com/l-smash/l-smash \\\n    && git clone --depth 1 git://git.videolan.org/x264.git \\\n    && hg clone https://bitbucket.org/multicoreware/x265 \\\n    && git clone --depth 1 git://source.ffmpeg.org/ffmpeg \\\n    && git clone https://github.com/Itseez/opencv.git \\\n    && git clone https://github.com/Itseez/opencv_contrib.git \\\n    && git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git \\\n    && git clone --depth 1 https://chromium.googlesource.com/webm/libvpx \\\n    && git clone https://git.xiph.org/opus.git \\\n    && git clone --depth 1 https://github.com/mulx/aacgain.git\n\n# Build L-SMASH\n# =================================\nWORKDIR /usr/local/src/l-smash\nRUN ./configure \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Build libx264\n# =================================\nWORKDIR /usr/local/src/x264\nRUN ./configure --enable-static \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Build libx265\n# =================================\nWORKDIR  /usr/local/src/x265/build/linux\nRUN cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../../source \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libfdk-aac\n# =================================\nWORKDIR /usr/local/src/fdk-aac\nRUN autoreconf -fiv \\\n    && ./configure --disable-shared \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libvpx\n# =================================\nWORKDIR /usr/local/src/libvpx\nRUN ./configure --disable-examples \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libopus\n# =================================\nWORKDIR /usr/local/src/opus\nRUN ./autogen.sh \\\n    && ./configure --disable-shared \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n\n# Build OpenCV 3.x\n# =================================\n#RUN apt-get update -qq && apt-get install -y --force-yes libopencv-dev\nRUN pip3 install --no-cache-dir --upgrade numpy\nWORKDIR /usr/local/src\nRUN mkdir -p opencv/release\nWORKDIR /usr/local/src/opencv/release\nRUN cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n          -D CMAKE_INSTALL_PREFIX=/usr/local \\\n          -D WITH_TBB=ON \\\n          -D BUILD_PYTHON_SUPPORT=ON \\\n          -D WITH_V4L=ON \\\n          -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\\n          ..\n\nRUN make -j ${NUM_CORES} \\\n    && make install \\\n    && sh -c 'echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf' \\\n    && ldconfig\n# =================================\n\n\n# Build ffmpeg.\n# =================================\nRUN apt-get update -qq && apt-get install -y --force-yes \\\n    libass-dev\n\n#            --enable-libx265 - Does not work on recent builds\nWORKDIR /usr/local/src/ffmpeg\nRUN ./configure --extra-libs=\"-ldl\" \\\n            --enable-gpl \\\n            --enable-libass \\\n            --enable-libfdk-aac \\\n            --enable-libfontconfig \\\n            --enable-libfreetype \\\n            --enable-libfribidi \\\n            --enable-libmp3lame \\\n            --enable-libopus \\\n            --enable-libtheora \\\n            --enable-libvorbis \\\n            --enable-libvpx \\\n            --enable-libx264 \\\n            --enable-nonfree \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Remove all tmpfile\n# =================================\nWORKDIR /usr/local/\nRUN rm -rf /usr/local/src\n# =================================\n\n"
    },
    {
        "filename": "5d5801414c9273891aaa63055877dd7f4fbe48c3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.10\n\nMAINTAINER Anciety <anciety512@gmail.com>\n\n# Apt packages\nRUN dpkg --add-architecture i386 && apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -qy \\\n    git nasm  python \\\n    build-essential \\\n    python-dev python-pip python-setuptools \\\n    libc6-dbg \\\n    libc6-dbg:i386 \\\n    gcc-multilib \\\n    gdb-multiarch \\\n    gcc \\\n    wget \\\n    curl \\\n    glibc-source \\\n    cmake \\\n    python-capstone \\\n    socat \\\n    netcat \\\n    ruby \\\n    lxterminal && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    cd ~ && tar -xvf /usr/src/glibc/glibc-*.tar.xz\n\n# python/ruby packages & gdb-plugin\nRUN pip install --no-cache-dir pwntools ropper ancypatch && \\\n    gem install one_gadget && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# git installaing package\nRUN cd ~/ && \\\n    git clone https://github.com/pwndbg/pwndbg.git && \\\n    cd ~/pwndbg/ && ./setup.sh && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV LANG C.UTF-8\n\nCOPY ./notiterm.py /usr/local/bin/notiterm\n\nVOLUME [\"/pwn\"]\nWORKDIR /pwn\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "5e849f5f97d7b0466908920b074f07ba1ca3d7cd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nLABEL version=\"1.1\"\n\nMAINTAINER Alexey Manikin <alexey@beget.ru>\n\n# Prepare environment\nENV DEBIAN_FRONTEND noninteractive\n\n# keys.gnupg.net - 84.112.2.30\nRUN apt-key adv --keyserver 84.112.2.30 --recv-keys 1C4CBDCDCD2EFD2A\n\n# Install.\nRUN \\\n  sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get -y upgrade && \\\n  apt-get install -y build-essential && \\\n  apt-get install -y software-properties-common && \\\n  echo \"deb http://repo.percona.com/apt quantal main\" >> /etc/apt/sources.list.d/percona.list && \\\n  echo \"deb-src http://repo.percona.com/apt quantal main\" >> /etc/apt/sources.list.d/percona.list && \\\n  apt-get update && \\\n  apt-get install -y percona-server-server-5.6 percona-server-client-5.6 && \\\n  apt-get install -y git htop vim wget && \\\n  rm -rf /var/lib/apt/lists/*\n\n# fix locales\nADD config/locales /var/lib/locales/supported.d/local\nRUN locale-gen\n\nADD install_minit.sh /usr/local/sbin/install_minit.sh\nRUN /bin/bash /usr/local/sbin/install_minit.sh\n\nADD config/my.cnf /etc/mysql/my.cnf\n\nRUN addgroup --gid 950 mysql || true\nRUN adduser --quiet --system --disabled-login --no-create-home --uid 950 --gid 950  mysql || true\n\nRUN cd /root/ && \\\n    git clone -n https://github.com/AlexeyManikin/domain_statistic.git --depth 1 && \\\n    cd domain_statistic && \\\n    git checkout HEAD structure.sql && \\\n    cp /root/domain_statistic/structure.sql /root/structure.sql && \\\n    rm -rf /root/domain_statistic;\n\nRUN mkdir -p /etc/minit\n\nADD create_base.sh /root/create_base.sh\nRUN chmod 755 /root/create_base.sh\n\nADD startup.sh /etc/minit/startup\nRUN chmod 755 /etc/minit/startup\nCMD [\"/sbin/minit\"]\n# EOF\n\n\n\n\n\n\n\n"
    },
    {
        "filename": "5ed7f7707006d890f05f08b71cbf121d24e2069e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# This Dockerfile is merely used to generate binaries for direct use during\n# buildpack runtime.\n\nFROM heroku/cedar\n\nRUN apt-get -qy update && apt-get -y install npm nodejs-legacy\nENV PATH /app/bin:$PATH\nWORKDIR /tmp\n\n\n# Install Elm\nENV ELM_VERSION 0.18.0\n\nRUN npm install -g elm@${ELM_VERSION}\nRUN mkdir -p /app/.profile.d /app/bin\nRUN cp /usr/local/lib/node_modules/elm/Elm-Platform/${ELM_VERSION}/.cabal-sandbox/bin/* /app/bin\n\n# Startup scripts for heroku\nRUN echo \"export PATH=\\\"/app/bin:\\$PATH\\\"\" > /app/.profile.d/appbin.sh\nRUN echo \"cd /app\" >> /app/.profile.d/appbin.sh\n\n# AWS upload script\nRUN apt-get -y install python-pip\nRUN pip install awscli\nADD upload-to-s3.sh /app/bin/\n"
    },
    {
        "filename": "5f253a2db4f4664656594d88621677382e5920ec.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 The Kubernetes Authors All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This docker image runs Jenkins Job Builder (JJB) for automatic job reconciliation.\n\nFROM ubuntu:14.04\nMAINTAINER Joe Finney <spxtr@google.com>\n\nRUN mkdir /build\nWORKDIR /build\n\n# Dependencies for JJB\nRUN apt-get update && apt-get install -y \\\n    wget \\\n    git \\\n    python-dev \\\n    python-pip \\\n    libyaml-dev \\\n    python-yaml\nRUN pip install PyYAML python-jenkins\n# Required since JJB supports python 2.6, which doesn't have ordereddict built-in. We have 2.7.\nRUN wget https://pypi.python.org/packages/source/o/ordereddict/ordereddict-1.1.tar.gz \\\n    && tar -xvf ordereddict-1.1.tar.gz \\\n    && cd ordereddict-1.1 \\\n    && python setup.py install\n\nRUN git clone https://git.openstack.org/openstack-infra/jenkins-job-builder \\\n    && cd jenkins-job-builder \\\n    && python setup.py install\n\n# JJB configuration lives in /etc/jenkins_jobs/jenkins_jobs.ini\nRUN mkdir -p /etc/jenkins_jobs\n\nWORKDIR /\nRUN git clone https://github.com/kubernetes/kubernetes.git\nWORKDIR kubernetes\n"
    },
    {
        "filename": "5f3a4f17859937f780b88de1b7fe3e833ce683bb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest  \nMAINTAINER winsent <pipetc@gmail.com>  \n  \nRUN apt-get -y update && apt-get -y install \\  \nwget \\  \ngcc \\  \nlibc-dev \\  \nzlib1g-dev  \n  \nWORKDIR /osm  \n  \nADD . .  \n  \nRUN gcc osmconvert.c -lz -O3 -o /usr/bin/osmconvert && \\  \ngcc osmfilter.c -O3 -o /usr/bin/osmfilter && \\  \ngcc osmupdate.c -o /usr/bin/osmupdate  \n\n"
    },
    {
        "filename": "5fdbcf27e9bfaf23ac0c37f6c3258f4c82e4afec.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM    ubuntu:16.04\nMAINTAINER  Pedro Alves <palves@pentaho.com>\n\n# Set the locale\n\nRUN apt-get clean && apt-get update && apt-get install -y locales && locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8  \nENV LANGUAGE en_US:en  \nENV LC_ALL en_US.UTF-8 \nENV TERM xterm\nRUN update-locale LANG=en_US.UTF-8 LC_MESSAGES=POSIX && \\\n    echo Building core image\n\n# For jdk7, install oracle-java7-installer\n# For jdk8, install oracle-java8-installer\n\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list && \\\n\tapt-get update && apt-get install -y software-properties-common unzip git lftp sudo && apt-get install postgresql postgresql-contrib -y && \\\n\tapt-get update && apt-get upgrade -y && add-apt-repository ppa:webupd8team/java -y && \\\n\tapt-get update && \\\n\techo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \\\n\t# DISABLED - Oracle removed java7 from pub site :( # apt-get install -y oracle-java7-installer && \\\n\techo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \\\n\t# DISABLED apt-get install -y oracle-java8-installer && \\\n\tsudo apt install -y openjdk-8-jdk && \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/* && \\\n\techo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \\\n\trm -rf /tmp/*\n    \n\nADD pg_hba.conf /etc/postgresql/9.5/main/pg_hba.conf\n\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.5/main/postgresql.conf\n\n\n"
    },
    {
        "filename": "603311facf70046f943a5de928aa854bef195338.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Deb build file\n# docker build -t logcabin-debbuild docker/debbuild\n# docker run -t -i -e PACKAGE=https://pypi.python.org/packages/package.tar.gz -v $HOME/.gnupg:/root/.gnupg logcabin-debbuild\n# CONTAINER=$(docker ps -q -a | head -1)\n# docker cp $CONTAINER:/tmp/build/deb_dist/logcabin_1.0.x-1_all.deb .\nFROM ubuntu:12.04\nMAINTAINER Barnaby Gray <barnaby@pickle.me.uk>\n\nRUN apt-get update && apt-get install -y dput python-stdeb devscripts wget && apt-get clean\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get install -y python-pip\nRUN pip install versiontools\nADD . /\n\nENV HOME /root\nCMD ./build.sh"
    },
    {
        "filename": "60695f1762a43fd191629712b1d961a5d9600c07.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Build a base Ubuntu kit for installing Annalist:\n# Includes base system updates, Python and git\n\nFROM ubuntu\n\nMAINTAINER Graham Klyne <gk-annalist@ninebynine.org>\n\nRUN apt-get update -y  && \\\n    apt-get upgrade -y && \\\n    apt-get install -y python python-pip python-virtualenv && \\\n    apt-get install -y git\n\nRUN mkdir /github && \\\n    cd /github && \\\n    git clone https://github.com/gklyne/annalist.git\n\n"
    },
    {
        "filename": "612302452c3f347efb6d50f6fec8762c8b267ef5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# A Fiona, Rasterio, and Shapely Image\n# ====================================\n# All from source, as well as GDAL and GEOS, for testing and debugging.\n\nFROM ubuntu\nMAINTAINER Sean Gillies <sean.gillies@gmail.com>\n\n# Install the Ubuntu packages.\nRUN apt-get update\nRUN apt-get install -y git python-pip cython python-numpy python-pytest python-nose wget vim\n\n# Set the locale.\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# More environment variables.\nENV LD_LIBRARY_PATH /usr/local/lib\nWORKDIR /home\n\n# Install GEOS.\nRUN wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2\nRUN tar -xjf geos-3.4.2.tar.bz2\nRUN cd geos-3.4.2; ./configure --enable-debug; make; make install\n\n# Install GDAL.\nRUN wget http://download.osgeo.org/gdal/1.11.0/gdal-1.11.0.tar.gz\nRUN tar -xzf gdal-1.11.0.tar.gz\nRUN cd gdal-1.11.0; ./configure --enable-debug; make; make install\n\n# Clone Fiona and install locally.\nRUN git clone https://github.com/Toblerity/Fiona.git\nRUN cd Fiona; pip install -e .\n\n# Clone Rasterio and install locally.\nRUN git clone https://github.com/mapbox/rasterio.git\nRUN cd rasterio; pip install -e .\n\n# Clone Shapely and install locally.\nRUN git clone https://github.com/Toblerity/Shapely.git\nRUN cd Shapely; pip install -e .\n\n"
    },
    {
        "filename": "613f1dd8e4b46ee9829f642e490caf0955e8ee5c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Cole Brokamp cole.brokamp@gmail.com\n\nRUN useradd docker \\\n  && mkdir /home/docker \\\n  && chown docker:docker /home/docker \\\n  && addgroup docker staff\n\nRUN apt-get update && apt-get install -y \\\n    libssl-dev \\\n    libssh2-1-dev \\\n    libcurl4-openssl-dev \\\n    libxml2-dev \\\n    git \\\n    make \\\n    wget \\\n    nano \\\n    sqlite3 \\\n    libsqlite3-dev \\\n    flex \\\n    ruby-full ruby-rubyforge \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN wget https://colebrokamp-dropbox.s3.amazonaws.com/geocoder.db -P /opt\n\nRUN echo \"deb http://cran.rstudio.com/bin/linux/ubuntu trusty/\" >> /etc/apt/sources.list \\\n  && apt-get update \\\n  && apt-get install r-base-core -y --force-yes \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN echo 'options(repos=c(CRAN = \"https://cran.rstudio.com/\"), download.file.method=\"wget\")' >> /etc/R/Rprofile.site\n\nRUN sudo su - -c \"R -e \\\"install.packages(c('devtools','argparser'))\\\"\" \nRUN sudo su - -c \"R -e \\\"devtools::install_github('cole-brokamp/CB')\\\"\"\n\n# need Ruby 3 for the gems\nRUN apt-get update && apt-get install -y apt-file \\\n  && apt-file update \\\n  && apt-get install software-properties-common -y \\\n  && apt-add-repository ppa:brightbox/ruby-ng \\\n  && apt-get update \\\n  && apt-get install ruby2.2 ruby2.2-dev -y \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN gem install sqlite3 json Text\n\nRUN mkdir /root/geocoder\nCOPY . /root/geocoder\n\nRUN cd /root/geocoder \\\n    && make install \\\n    && gem install Geocoder-US-2.0.4.gem\n\nENTRYPOINT [\"/root/geocoder/bin/geocode.R\"]\n"
    },
    {
        "filename": "616f1ea182567629da18182479a72405afdd7982.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM php:7.2.10-apache\nCOPY config/php.ini /usr/local/etc/php/\n\nRUN docker-php-ext-install mysqli && docker-php-ext-install pdo_mysql\n\nRUN apt-get clean && apt-get update && apt-get install --fix-missing wget apt-transport-https lsb-release ca-certificates gnupg2 -y\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp && wget https://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\nRUN echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/php.list\n\nRUN apt-get clean && apt-get update && apt-cache search php-mysql && apt-get install --fix-missing -y \\\n  ruby-dev \\\n  rubygems \\\n  imagemagick \\\n  graphviz \\\n  sudo \\\n  git \\\n  vim \\\n  memcached \\\n  libmemcached-tools \\\n  libmemcached-dev \\\n  libpng-dev \\\n  libjpeg62-turbo-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  libxslt1-dev \\\n  mysql-client \\\n  zip \\\n  wget \\\n  linux-libc-dev \\\n  libyaml-dev \\\n  zlib1g-dev \\\n  libicu-dev \\\n  libpq-dev \\\n  bash-completion \\\n  htop \\\n  libldap2-dev \\\n  libssl-dev\n\n# postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list && apt-get update && apt-get install -y postgresql-client-9.5\n\n# Install memcached for PHP 7\nRUN cd /tmp && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached && sudo git checkout php7 && phpize && ./configure --disable-memcached-sasl && make && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini &&\\\n echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20170718/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\n\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\nRUN docker-php-ext-install \\\n  gd \\\n  mbstring \\\n  zip \\\n  soap \\\n  pdo_mysql \\\n  mysqli \\\n  xsl \\\n  opcache \\\n  calendar \\\n  intl \\\n  exif \\\n  pgsql \\\n  pdo_pgsql \\\n  ftp \\\n  bcmath \\\n  ldap\n\nRUN pecl install mcrypt-1.0.1 && \\\n    docker-php-ext-enable mcrypt\n\n# Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Add sudo to www-data\nRUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Install YAML extension\nRUN pecl install yaml-2.0.2 && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n\n# Install APCu extension\nRUN pecl install apcu-5.1.8\n\nCOPY core/memcached.conf /etc/memcached.conf\n\n# Install sass and gem dependency\nRUN apt-get install --fix-missing automake ruby2.3-dev libtool -y\n\n# SASS and Compass installation\nRUN gem install sass -v 3.5.6 ;\\\n    gem install compass;\n\n# Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n\tapt-get update && apt-get install -y nodejs && \\\n\tnpm install npm@latest -g\n\n# Installation of LESS\nRUN npm install -g less && npm install -g less-plugin-clean-css\n\n# Installation of Grunt\nRUN npm install -g grunt-cli\n\n# Installation of Gulp\nRUN npm install -g gulp\n\n# Installation of Bower\nRUN npm install -g bower\n\n# Installation of Composer\nRUN cd /usr/src && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src && mv composer.phar /usr/bin/composer\n\n# Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush && git checkout 9.1.0\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush && composer update && composer install\n\n# Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ && wget http://xdebug.org/files/xdebug-2.6.1.tgz && tar -xvzf xdebug-2.6.1.tgz && cd xdebug-2.6.1/ && phpize && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config && make && make install\nRUN cd /tmp/xdebug-2.6.1 && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20170718/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_autostart=0' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_log=/tmp/php7-xdebug.log' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.remote_host=docker_host' >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo 'xdebug.idekey=PHPSTORM' >> /usr/local/etc/php/conf.d/xdebug.ini\n\nRUN rm -rf /var/www/html && \\\n  mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && \\\n  chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n\n# Installation of PHP_CodeSniffer with Drupal coding standards.\n# See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n# # Installation of Symfony console autocomplete\n# RUN composer global require bamarni/symfony-console-autocomplete\n\n# installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\n\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n\n# Installation of APCu cache\nRUN ( \\\n  echo \"extension=apcu.so\"; \\\n  echo \"apc.enabled=1\"; \\\n  ) > /usr/local/etc/php/conf.d/ext-apcu.ini\n\n# Installation of Opcode cache\nRUN ( \\\n  echo \"opcache.memory_consumption=128\"; \\\n  echo \"opcache.interned_strings_buffer=8\"; \\\n  echo \"opcache.max_accelerated_files=20000\"; \\\n  echo \"opcache.revalidate_freq=5\"; \\\n  echo \"opcache.fast_shutdown=1\"; \\\n  echo \"opcache.enable_cli=1\"; \\\n  ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nRUN a2enmod rewrite expires && service apache2 restart\n\n# Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar && mv drupal.phar /usr/local/bin/drupal && chmod +x /usr/local/bin/drupal\n\n# Install WKHTMLTOPDF\nRUN apt-get update && apt-get remove -y libqt4-dev qt4-dev-tools wkhtmltopdf && apt-get autoremove -y\nRUN apt-get install openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y\nRUN mkdir /var/wkhtmltopdf\nRUN cd /var/wkhtmltopdf && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\nRUN cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltopdf /bin/wkhtmltopdf && cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltoimage /bin/wkhtmltoimage\nRUN chown -R web:www-data /var/wkhtmltopdf\nRUN chmod +x /bin/wkhtmltopdf && chmod +x /bin/wkhtmltoimage\n\n# Our apache volume\nVOLUME /var/www/html\n\n# create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n\n# Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n# Expose 80 for apache, 9000 for xdebug\nEXPOSE 80 9000\n\n# Add web .bashrc config\nCOPY config/bashrc /var/www/\nRUN mv /var/www/bashrc /var/www/.bashrc\nRUN chown www-data:www-data /var/www/.bashrc\nRUN echo \"source .bashrc\" >> /var/www/.profile ;\\\n    chown www-data:www-data /var/www/.profile\n\n# Add root .bashrc config\n# When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc\n\n# Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n\n# Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "61a5e0bb1bb5cac09085e9e909e75380b5fff9a7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:0.10\nMAINTAINER Kai Davenport <kaiyadavenport@gmail.com>\nWORKDIR /usr/local/bin\nRUN apt-get -y update\nRUN apt-get -y install curl iptables\nRUN wget -O /usr/local/bin/weave https://github.com/zettio/weave/releases/download/v0.9.0/weave\nRUN chmod a+x /usr/local/bin/weave\nADD . /srv/app\nADD ./docker-1.3.1 /usr/bin/docker\nRUN chmod a+x /srv/app/run.sh\nRUN cd /srv/app && npm install\nEXPOSE 80\nENTRYPOINT [\"/srv/app/run.sh\"]"
    },
    {
        "filename": "61cee461fd873b5b683afcbfab329ac3f3eae103.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Base the image on Debian 7\n# Picked Debian because it's small and what runs on the bot\n# https://registry.hub.docker.com/_/debian/\nFROM debian:7.7\nMAINTAINER Daniel Farrell <dfarrell07@gmail.com>\n\n# These are the packages installed via setup/setup_bone.sh\n# https://github.com/IEEERobotics/bot2014/blob/master/setup/setup_bone.sh\nRUN apt-get update && apt-get install -y python-pip \\\n                                         python-smbus \\\n                                         git \\\n                                         libzmq-dev \\\n                                         python-zmq \\\n                                         python-dev \\\n                                         python-yaml \\\n                                         python-numpy \\\n                                         python3.2 \\\n                                         python \\\n                                         wget\n\nRUN wget -q --no-check-certificate \"https://raw.githubusercontent.com/IEEERobotics/bot2014/master/requirements.txt\" && \\\n    pip install -r requirements.txt && \\\n    rm requirements.txt\n\n# Drop source (bot2014, current context) in /opt dir\n# Do the ADD as late as possible, as it invalidates cache\nADD . /opt/bot\n\n# Due to issue #112, tests must be run before server can start\n# The tests create simulated hardware files required by server in test mode\nRUN cd /opt/bot && tox -epy27 2>&1\n\n# Expose server port\nEXPOSE 60000\n\nWORKDIR /opt/bot/bot\n# By default, start a server and CLI in test mode\nCMD [\"./start.py\", \"-Tsc\"]\n"
    },
    {
        "filename": "6280f11ba2a3fef5e787f56da508cc55a9fef791.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM slarson/eclipse-geppetto:luna-java-7\n\nMAINTAINER stephen@openworm.org\n\nUSER developer\nRUN cd ~/workspace/ && git clone http://github.com/openworm/org.geppetto.persistence \\\n  && cd org.geppetto.persistence && mvn install\n\nADD config.json workspace/org.geppetto/utilities/source_setup/\n\nRUN mkdir -p geppetto/\nADD db.properties geppetto/\n\n#INSTALL MYSQL\nUSER root\nENV MYSQL_USER=mysql \\\n    MYSQL_DATA_DIR=/var/lib/mysql \\\n    MYSQL_RUN_DIR=/run/mysqld \\\n    MYSQL_LOG_DIR=/var/log/mysql\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server \\\n && rm -rf ${MYSQL_DATA_DIR} \\\n && rm -rf /var/lib/apt/lists/*\n\nADD init.sql geppetto/\n\nRUN mkdir -p ${MYSQL_DATA_DIR} && mkdir -p ${MYSQL_RUN_DIR} && \\\n  mkdir -p ${MYSQL_LOG_DIR}\n\nUSER developer\n\n#END INSTALL MYSQL\n\nADD entrypoint.sh geppetto/\nRUN sudo chmod +x geppetto/entrypoint.sh\n\nCOPY workspace.tar.gz /home/developer/workspace\nRUN cd workspace && tar -xvzf workspace.tar.gz\n\nCMD /home/developer/geppetto/entrypoint.sh\n"
    },
    {
        "filename": "62aafa99d4c985d62b58909942a4b6ca141ab345.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jpetazzo/squid-in-a-can:latest\nMAINTAINER Damien DUPORTAL <damien.duportal@gmail.com>\n\nRUN apt-get -q update && apt-get -yq install rsync\n\nVOLUME [\"/var/cache/squid3\",\"/host-datadir\",\"/etc/cron.d\",\"/tmp/registry-dev\",\"/usr/share/nginx/html\"]\n\nADD backup.sh /backup.sh\nADD entrypoint.sh /entrypoint.sh\n\nCMD [\"/bin/sh\",\"-x\",\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "634bcc7d8ed8e3ad263494228b147c11ee3d5a16.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM linuxserver/baseimage  \nMAINTAINER Sparklyballs <sparklyballs@linuxserver.io>  \n  \nENV APTLIST=\"sabnzbdplus \\  \nsabnzbdplus-theme-mobile \\  \nunrar \\  \nwget\"  \n# Set the locale  \nENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8  \nRUN locale-gen en_US.UTF-8  \n  \n# install our compiled version of par2 multicore  \nADD deb/ /tmp/  \nRUN apt-get update -q && \\  \napt-get install libtbb2 -qy && \\  \ndpkg -i /tmp/par2-tbb_*.deb && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \n# install main packages  \nRUN add-apt-repository ppa:jcfp/ppa && \\  \napt-get update -q && \\  \napt-get install \\  \n$APTLIST -qy && \\  \napt-get clean -y && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \n# adding custom files  \nADD services/ /etc/service/  \nADD init/ /etc/my_init.d/  \nRUN chmod -v +x /etc/service/*/run && chmod -v +x /etc/my_init.d/*.sh  \n  \n# set volumes  \nVOLUME /config /downloads /incomplete-downloads /movies /tv /kidsmovies  \n  \n# expose ports  \nEXPOSE 8080 9090  \n\n"
    },
    {
        "filename": "63798bbb6de441ab07edb758f968b6479da82f42.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "ARG tag=latest\nFROM lballabio/quantlib:${tag} AS builder\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y python-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nARG quantlib_swig_version\n\nRUN wget https://dl.bintray.com/quantlib/releases/QuantLib-SWIG-${quantlib_swig_version}.tar.gz \\\n    && tar xfz QuantLib-SWIG-${quantlib_swig_version}.tar.gz \\\n    && rm QuantLib-SWIG-${quantlib_swig_version}.tar.gz \\\n    && cd QuantLib-SWIG-${quantlib_swig_version} \\\n    && ./configure CXXFLAGS='-g0 -O3' \\\n    && make -C Python && make -C Python check && make -C Python install \\\n    && cd .. && rm -rf QuantLib-SWIG-${quantlib_swig_version}\n\n\nFROM ubuntu:${tag}\nMAINTAINER Luigi Ballabio <luigi.ballabio@gmail.com>\nLABEL Description=\"An environment with the QuantLib Python module\"\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nENV quantlib_swig_version ${quantlib_swig_version}\n\nCOPY --from=builder /usr/lib/libQuantLib.la /usr/lib/\nCOPY --from=builder /usr/lib/libQuantLib.so.0.0.0 /usr/lib/\nRUN cd /usr/lib && ln -s libQuantLib.so.0.0.0 libQuantLib.so.0\nRUN cd /usr/lib && ln -s libQuantLib.so.0.0.0 libQuantLib.so\nRUN ldconfig\n\nCOPY --from=builder /usr/local/lib/python2.7/dist-packages/QuantLib \\\n                    /usr/local/lib/python2.7/dist-packages/QuantLib\nCOPY --from=builder /usr/local/lib/python2.7/dist-packages/QuantLib*.egg-info \\\n                    /usr/local/lib/python2.7/dist-packages/\n\nCMD python\n\n"
    },
    {
        "filename": "639a918ca02119b64b0170186f236e46872616e9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:bionic\nMAINTAINER patrick@oberdorf.net\n\nENV VERSION 1.9.2\n\nWORKDIR /usr/local/src/\nADD assets/sha256checksum sha256checksum\n\nRUN apt-get update && apt-get install -y \\\n\tbuild-essential \\\n\ttar \\\n\twget \\\n\tlibssl-dev \\\n\tlibevent-dev \\\n\tlibevent-2.1-6 \\\n\tlibexpat1-dev \\\n\tlibexpat1 \\\n\tdnsutils \\\n\t&& wget http://www.unbound.net/downloads/unbound-${VERSION}.tar.gz -P /usr/local/src/ \\\n\t&& sha256sum -c sha256checksum \\\n\t&& tar -xvf unbound-${VERSION}.tar.gz \\\n\t&& rm unbound-${VERSION}.tar.gz \\\n\t&& cd unbound-${VERSION} \\\n\t&& ./configure --prefix=/usr/local --with-libevent \\\n\t&& make \\\n\t&& make install \\\n\t&& cd ../ \\\n\t&& rm -R unbound-${VERSION} \\\n\t&& apt-get purge -y \\\n\tbuild-essential \\\n\tgcc \\\n\tgcc-4.8 \\\n\tcpp \\\n\tcpp-4.8 \\\n\tlibssl-dev \\\n\tlibevent-dev \\\n\tlibexpat1-dev \\\n\t&& apt-get autoremove --purge -y \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN useradd --system unbound --home /home/unbound --create-home\nENV PATH $PATH:/usr/local/lib\nRUN ldconfig\nADD assets/unbound.conf /usr/local/etc/unbound/unbound.conf\nRUN mkdir /usr/local/etc/unbound/conf.d\nRUN chown -R unbound:unbound /usr/local/etc/unbound/\n\nUSER unbound\nRUN unbound-anchor -a /usr/local/etc/unbound/root.key ; true\nRUN unbound-control-setup \\\n\t&& wget ftp://FTP.INTERNIC.NET/domain/named.cache -O /usr/local/etc/unbound/root.hints\n\nUSER root\nADD start.sh /start.sh\nRUN chmod +x /start.sh\n\nEXPOSE 53/udp\nEXPOSE 53\n\nCMD [\"/start.sh\"]\n"
    },
    {
        "filename": "63e2bf97b765e718e73826116b1c088417a62973.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user",
        "num": 6,
        "text": "FROM golang as builder\nRUN go get -d -v github.com/czerwonk/atlas_exporter\nWORKDIR /go/src/github.com/czerwonk/atlas_exporter\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\n\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates bash\nWORKDIR /app\nCOPY --from=builder /go/src/github.com/czerwonk/atlas_exporter/app atlas_exporter\nEXPOSE 9400\n\nADD entrypoint /entrypoint\nRUN chmod 0755 /entrypoint\nENTRYPOINT [\"/entrypoint\"]\n"
    },
    {
        "filename": "64ea2c8d3a5a1798d9fef6b274716d64e4daa1ba.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:12.10\nMAINTAINER Antonin Hildebrand <antonin@binaryage.com>\n\nRUN apt-get update\nRUN apt-get install -y wget make g++ python-leveldb libboost-all-dev libssl-dev libdb++-dev\nRUN wget http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/bitcoin-0.8.6-linux.tar.gz\nRUN tar xfz bitcoin-0.8.6-linux.tar.gz\nRUN cd bitcoin-0.8.6-linux/src/src && make USE_UPNP= -f makefile.unix\nRUN ln -s /bitcoin-0.8.6-linux/src/src/bitcoind /bin/bitcoind\n\nADD . /bitcoind\nWORKDIR /bitcoind\n\nEXPOSE 8333\nEXPOSE 8332\n\nADD\tenter /enter\nRUN\tchmod +x /enter\nENTRYPOINT [\"/enter\"]"
    },
    {
        "filename": "6510cf7b99dee674256519ec559b3329201132b5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM debian:latest\n\nRUN apt-get update && apt-get install -y python python-dev python-pip zlib1g-dev \\\n     libxml2-dev libxslt1-dev python-dev libncurses5-dev\nADD . /okcupyd\nRUN cd /okcupyd && python setup.py install"
    },
    {
        "filename": "653f80eeb3475b26c0918309b62f07fec6656f8d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM openjdk:8\n\nMAINTAINER Entria <developers@entria.com.br>\n\nRUN mkdir -p /opt/app\nWORKDIR /opt/app\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install general dependencies\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -yq \\\n    apt-transport-https \\\n    autoconf \\\n    automake \\\n    build-essential \\\n    imagemagick \\\n    jq \\\n    libc6:i386 \\\n    libcurl3 \\\n    libcurl3-gnutls \\\n    libcurl4-openssl-dev \\\n    libncurses5:i386 \\\n    librsvg2-bin \\\n    libssl-dev \\\n    libstdc++6:i386 \\\n    pkg-config \\\n    python \\\n    python-dev \\\n    python-pip \\\n    python-setuptools \\\n    software-properties-common \\\n    zlib1g:i386 \\\n    zlib1g-dev \\\n    --no-install-recommends\n\n# Install AWS CLI\nRUN pip install --upgrade awscli\n\nENV RUBY_VERSION=\"2.4.4\"\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV ANDROID_SDK=\"${ANDROID_HOME}\"\nENV PATH=\"${ANDROID_SDK}/tools:${ANDROID_SDK}/platform-tools:${ANDROID_SDK}/tools/bin:${PATH}\"\nRUN echo \"export PATH=${PATH}\" > /root/.profile\n\n# Install Android SDK (based on: https://github.com/gfx/docker-android-project/blob/master/Dockerfile)\n# See for CircleCI Issue:\n#  https://discuss.circleci.com/t/failed-to-register-layer-error-processing-tar-file-exit-status-1-container-id-249512-cannot-be-mapped-to-a-host-id/13453/5\n# Grab URL from footer of https://developer.android.com/studio/index.html\n# Following URL is for 26.0.2\nENV ANDROID_SDK_URL https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\n\n#ENV ANDROID_BUILD_TOOLS_VERSION 26.0.2,25.0.3\n#ENV ANDROID_API_LEVELS android-26,android-25\n#ENV ANDROID_COMPONENTS platform-tools,build-tools-${ANDROID_BUILD_TOOLS_VERSION},${ANDROID_API_LEVELS}\n#ENV GOOGLE_COMPONENTS extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services,extra-google-gcm\n\nRUN curl -L \"${ANDROID_SDK_URL}\" -o /tmp/android-sdk-linux.zip && \\\n    unzip /tmp/android-sdk-linux.zip -d /opt/ && \\\n    chown -R root:root /opt && \\\n    rm /tmp/android-sdk-linux.zip && \\\n    mkdir ${ANDROID_HOME} && \\\n    mv /opt/tools ${ANDROID_HOME}/ && \\\n    ls ${ANDROID_HOME} && \\\n    ls ${ANDROID_HOME}/tools && chown -R root:root ${ANDROID_HOME}\n\n# Install Android SDK components\nRUN echo y | sdkmanager \"platform-tools\" \"build-tools;26.0.2\" \"build-tools;25.0.3\" \"platforms;android-26\" \"platforms;android-25\" \\\n                \"extras;google;m2repository\" \"extras;android;m2repository\" \"extras;google;google_play_services\"\n\nRUN echo y | sdkmanager --licenses\n# Install Watchman\nRUN git clone https://github.com/facebook/watchman.git && \\\n    cd watchman && \\\n    git checkout v4.7.0 && \\\n    ./autogen.sh && ./configure && make && make install && cd .. && rm -rf watchman\n\n# Install Ruby and RubyGems\nRUN wget http://ftp.ruby-lang.org/pub/ruby/ruby-${RUBY_VERSION}.tar.gz && \\\n    tar -xzf ruby-${RUBY_VERSION}.tar.gz && \\\n    rm ruby-${RUBY_VERSION}.tar.gz && \\\n    cd ruby-${RUBY_VERSION}/ && \\\n    ./configure --disable-install-rdoc && make && make install\n\n# Install bundler\nRUN gem install bundler\n\n# Install Slack CLI https://github.com/rockymadden/slack-cli\nRUN curl -O https://raw.githubusercontent.com/rockymadden/slack-cli/master/src/slack && \\\n    chmod +x slack && \\\n    ln -s /opt/app/slack /usr/local/bin/slack\n\n# Install Node JS and Yarn\n# https://github.com/nodejs/docker-node/blob/12ba2e5432cd50037b6c0cf53464b5063b028227/8.1/Dockerfile\nENV NPM_CONFIG_LOGLEVEL info\nENV NODE_VERSION 10.13.0\nENV YARN_VERSION 1.12.3\n\nRUN groupadd --gid 1000 node && \\\n    useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n\n# gpg keys listed at https://github.com/nodejs/node#release-keys\nRUN set -ex \\\n  && for key in \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n    77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n  ; do \\\n    gpg --no-tty --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n    gpg --no-tty --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n    gpg --no-tty --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\" ; \\\n  done\n\nRUN ARCH= && dpkgArch=\"$(dpkg --print-architecture)\" \\\n  && case \"${dpkgArch##*-}\" in \\\n    amd64) ARCH='x64';; \\\n    ppc64el) ARCH='ppc64le';; \\\n    s390x) ARCH='s390x';; \\\n    arm64) ARCH='arm64';; \\\n    armhf) ARCH='armv7l';; \\\n    i386) ARCH='x86';; \\\n    *) echo \"unsupported architecture\"; exit 1 ;; \\\n  esac \\\n  && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n  && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n  && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n\nRUN set -ex \\\n  && for key in \\\n    6A010C5166006599AA17F08146C2130DFD2497F5 \\\n  ; do \\\n    gpg --no-tty --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n    gpg --no-tty --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n    gpg --no-tty --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\" ; \\\n  done \\\n  && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n  && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n  && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n  && mkdir -p /opt \\\n  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \\\n  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \\\n  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \\\n  && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz\n\n# Clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    apt-get autoremove -y && \\\n    apt-get clean\n\n# Support Gradle\nENV TERM dumb\n\n# Install code-push-cli\nRUN npm install -g code-push-cli && chown -R root:root /usr/local/lib/node_modules/code-push-cli/node_modules\n\nCOPY entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "66094d3ef88ed64d3d60978c1338e522a2865cc3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com, yihao.peng@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.9.22\nMAINTAINER PanZhibiao <zhibiao.pan@bitmain.com>\n\nENV HOME /root\nENV TERM xterm\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\nADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update\nRUN apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\nRUN apt-get install -y libboost-all-dev libzmq3-dev curl wget net-tools\n\n# install libdb for wallet\nRUN apt-get install -y software-properties-common \\\n  && add-apt-repository -y ppa:bitcoin/bitcoin \\\n  && apt-get -y update \\\n  && apt-get install -y libdb4.8-dev libdb4.8++-dev\n\n# build bitcoind\nRUN mkdir ~/source\nRUN cd ~/source && wget https://github.com/UnitedBitcoin/UnitedBitcoin/archive/v1.1.0.0.tar.gz\nRUN cd ~/source \\\n  && tar zxf v1.1.0.0.tar.gz && cd UnitedBitcoin-1.1.0.0 \\\n  && ./autogen.sh \\\n  && ./configure --disable-bench --disable-tests \\\n  && make && make install\n\n# make some alias\nRUN ln -s ubcd /usr/local/bin/bitcoind \\\n  && ln -s ubc-cli /usr/local/bin/bitcoin-cli \\\n  && ln -s ubc-tx /usr/local/bin/bitcoin-tx \\\n  && ln -s /root/.bitcoin /root/.unitedbitcoin\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\nRUN mkdir -p /root/scripts\n\n# scripts\nADD opsgenie-monitor-bitcoind.sh   /root/scripts/opsgenie-monitor-bitcoind.sh\n\n# crontab shell\nADD crontab.txt /etc/cron.d/bitcoind\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n# service for testnet3\n#RUN mkdir        /etc/service/bitcoind_testnet3\n#ADD run_testnet3 /etc/service/bitcoind_testnet3/run\n#RUN chmod +x     /etc/service/bitcoind_testnet3/run\n\n# remove source & build files\nRUN rm -rf ~/source\n\n# clean\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "6611c2641a56e10975cd6507bab4fe82fbe7b450.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# LAMP environment with apache2, mysql, memcached, php5 and php5-apcu\n#\n\nFROM nrpa/base\nMAINTAINER gavinmroy@gmail.com\n\nRUN echo \"mysql-server mysql-server/root_password password root\" | debconf-set-selections\nRUN echo \"mysql-server mysql-server/root_password_again password root\" | debconf-set-selections\n\nRUN apt-get update && apt-get install -y apache2 php5 php5-apcu memcached mysql-server\n\nRUN mkdir -p /etc/service/apache2 /etc/service/memcached /etc/service/mysqld\nADD bin/apache2.sh /etc/service/apache2/run\nADD bin/memcached.sh /etc/service/memcached/run\nADD bin/mysqld.sh /etc/service/mysqld/run\n\nADD newrelic-plugin-agent.cfg /etc/newrelic/newrelic-plugin-agent.cfg\n\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\nENV APACHE_LOCK_DIR /var/run/lock/apache2\nENV APACHE_PID_FILE /var/run/apache2/apache2.pid\n\nRUN echo \"ServerName nrpa-lamp.docker\" >> /etc/apache2/apache2.conf\n\nEXPOSE 80 3306 11211\n"
    },
    {
        "filename": "6617abd4ed92d37f6474e56c5daee43fb017a039.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ipython/ipython:3.x\n\nMAINTAINER Ryan Kennedy <ryankennedys30@gmail.com>\n\nVOLUME /notebooks\nWORKDIR /notebooks\n\nEXPOSE 8888\n\n# You can mount your own SSL certs as necessary here\nENV PEM_FILE /key.pem\n# $PASSWORD will get `unset` within notebook.sh, turned into an IPython style hash\nENV PASSWORD Dont make this your default\nENV USE_HTTP 0\n\nRUN apt-get update\n\nRUN apt-get install -y wget\n\n# Fetch & install Anaconda\nRUN wget http://09c8d0b2229f813c1b93-c95ac804525aac4b6dba79b00b39d1d3.r79.cf1.rackcdn.com/Anaconda-2.0.1-Linux-x86_64.sh && bash Anaconda-2.0.1-Linux-x86_64.sh -b\n\n# Set Anaconda's path\nENV PATH=/root/anaconda/bin:$PATH\nRUN yes | conda update conda \n\n#Install caffe deep learning dependancies\nRUN apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev\n\nRUN easy_install protobuf\n\n#Install remaining deep learning dependancies\nRUN apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler\nRUN apt-get install -y libjpeg-dev\nRUN apt-get install -y libjpeg62\n\n#Install atlas\nRUN apt-get install -y libatlas-base-dev\n\n# Install Caffe\nADD caffe-master /caffe-master\n\nRUN cd /caffe-master && make && make distribute\n\n# Set caffe to be in the python path\nENV PYTHONPATH=/caffe-master/distribute/python\nENV PATH $PATH:/opt/caffe/.build_release/tools\n\n# Add ld-so.conf so it can find libcaffe.so\nADD caffe-ld-so.conf /etc/ld.so.conf.d/\n\n# Run ldconfig again (not sure if needed)\nRUN ldconfig\n\n# Copy the notebook into the container\nADD dream.ipynb /notebooks/\n\nADD notebook.sh /\n\nRUN chmod u+x /notebook.sh\n\nCMD [\"/notebook.sh\"]"
    },
    {
        "filename": "6658ed86da566fef2633a3a14dbdf0d2bfef0b7b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Raymond Barbiero <raymond.barbiero.dev@gmail.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV NOKOGIRI_USE_SYSTEM_LIBRARIES 1\n\n# Nokogiri dependencies\nRUN true \\\n && apt-get update \\\n && apt-get install -qy --force-yes git ruby ruby-dev build-essential \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN true \\\n && apt-get update \\\n && apt-get install -qy libxslt1-dev libxml2-dev libssl-dev libyaml-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN true \\\n && apt-get update \\\n && apt-get install -qy --no-install-recommends openjdk-8-jdk openjdk-8-jre gradle \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN true \\\n && apt-get update \\\n && apt-get install -qy vim curl lsof libxml2 libxml2-dev pkg-config \\\n && apt-get clean \\\n && gem install bundler nokogiri \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN true \\\n && git clone https://github.com/jenkinsci/job-dsl-plugin.git /jdsl \\\n && cd /jdsl \\\n && gradle :job-dsl-core:oneJar\n\nENV DSL_JAR \"/jdsl/job-dsl-core/build/libs/job-dsl-core-*-standalone.jar\"\n\nENV APP_HOME /app\nENV HOME /root\nRUN mkdir $APP_HOME\nWORKDIR $APP_HOME\nCOPY Gemfile* $APP_HOME/\nRUN bundle config --global silence_root_warning 1 \\\n && bundle install\n\n# Upload source\nCOPY . $APP_HOME\n\n# Start server\nENV PORT 3000\nEXPOSE 3000\n\nVOLUME [\"/var/www/uploads\"]\nCMD [\"ruby\", \"server.rb\"]\n"
    },
    {
        "filename": "666f01ea15786589f94b5f688442f6254e5b96bb.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base\nMAINTAINER \"Jay Joshi <joshija@us.ibm.com>\"\n\nRUN apt-get update \\\n        && apt-get install git -y \\\n\t&& git clone https://github.com/cran/xtable.git\\\n\t&& cd xtable && git checkout 1.8-2 \\\n        && R -e 'install.packages(\"knitr\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& R CMD check xtable --no-manual \\\n\t&& cd .. && rm -rf xtable \\\n\t&& apt-get purge --auto-remove git -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "670a3da371e935bccd4cd22b4be1cd5396af3322.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "from mccaskey/xacc-zesty-dev\nmaintainer Alex McCaskey <mccaskeyaj@ornl.gov>\nrun apt-get -y update && apt-get install -y ruby ruby-dev rubygems \\ \n   && gem install --no-ri --no-rdoc fpm \n\nrun mkdir deb_build && cd deb_build && mkdir -p usr/local/xacc \\ \n   && cp -r /usr/local/xacc/* usr/local/xacc/ \\\n   && fpm -s dir -t deb --name xacc-openmpi --version 1.0 --depends libboost-all-dev \\ \n        --depends gcc-7 --depends g++-7 --depends python-dev --depends openmpi \\ \n        --depends cmake --depends git --depends make --depends libtool \\ \n        --description \"XACC - eXtreme-scale ACCelerator programming framework\" . && cp *.deb /\n"
    },
    {
        "filename": "671f1daabcc0285655dba2c56134a7390335c036.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Ubuntu 12.04 (precise) + ZeroVM + Python\n#\n# BUILDAS sudo docker build -t zerovm_python .\n# RUNAS sudo docker -i -t run zerovm_python <python file>\n#\n\nFROM ubuntu\nMAINTAINER Nick Lothian nick.lothian@gmail.com\n\nRUN mkdir -p /opt/zerovm\n\nRUN apt-get -y install sudo\nRUN apt-get -y install wget\n\nRUN useradd zerovmuser\n\nADD libpgm-5.1-0_5.1.118-1~dfsg-0.1ubuntu1_amd64.deb /opt/zerovm/libpgm-5.1-0_5.1.118-1~dfsg-0.1ubuntu1_amd64.deb\nADD libzmq3_4.0.1-ubuntu1_amd64.deb /opt/zerovm/libzmq3_4.0.1-ubuntu1_amd64.deb\n\n# ADD python.tar /opt/zerovm/python.tar # prior to Docker 0.8 this would not uncompress the tar file\n# This is a work around\nADD python.tar /opt/zerovm/pythondir\nRUN tar -cvf /opt/zerovm/python.tar -C /opt/zerovm/pythondir .\n\n\nADD helloworld.py /opt/zerovm/helloworld.py\n\nRUN chown -R zerovmuser:zerovmuser /opt/zerovm # not clear why this is needed. May be due to work around above\n\nRUN dpkg -i /opt/zerovm/libpgm-5.1-0_5.1.118-1~dfsg-0.1ubuntu1_amd64.deb\nRUN dpkg -i /opt/zerovm/libzmq3_4.0.1-ubuntu1_amd64.deb\n\nRUN wget -O- http://packages.zerovm.org/apt/ubuntu/zerovm.pkg.key | apt-key add -\n\nRUN echo \"deb http://packages.zerovm.org/apt/ubuntu/ precise main\" > /etc/apt/sources.list.d/zerovm-precise.list\n\n\nRUN apt-get update\n\nRUN apt-get -y install zerovm\n\nRUN apt-get -y install zerovm-cli\n\n\n#CMD [\"@/opt/zerovm/helloworld.py\"]\n#ENTRYPOINT [\"sudo\", \"-u\", \"zerovmuser\", \"zvsh\", \"--zvm-image\", \"/opt/zerovm/python.tar\", \"python\"]\n\n"
    },
    {
        "filename": "67cbb1b507fbacd40fb66a8d9160a50860ed20e0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:0.9.16\nMAINTAINER sparklyballs <sparkly@madeupemail.com>\n\n# Set correct environment variables\nENV DEBIAN_FRONTEND=noninteractive HOME=\"/root\" TERM=xterm LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8\n\n# set ports\nEXPOSE 7078\n\n# Use baseimage-docker's init system\nCMD [\"/sbin/my_init\"]\n\n# Add required files that are local\nADD src/ /root/\n\n# Set the locale\nRUN locale-gen en_US.UTF-8 && \\\n\n#\u00a0fix startup files\ncp /root/firstrun.sh /etc/my_init.d/firstrun.sh && \\\nchmod +x /etc/my_init.d/firstrun.sh && \\\nmkdir -p /etc/service/magpie && \\\ncp /root/magpie.sh /etc/service/magpie/run && \\\nchmod +x /etc/service/magpie/run && \\\n\n# Fix a Debianism of the nobody's uid being 65534\nusermod -u 99 nobody && \\\nusermod -g 100 nobody && \\\n\n# update apt and install dependencies\napt-get update && \\\napt-get install -y python python-pip python-dev git && \\\n\n#\u00a0install magpie\npip install magpie && \\\n\n# clean up\napt-get clean && \\\nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n/usr/share/man /usr/share/groff /usr/share/info \\\n/usr/share/lintian /usr/share/linda /var/cache/man && \\\n(( find /usr/share/doc -depth -type f ! -name copyright|xargs rm || true )) && \\\n(( find /usr/share/doc -empty|xargs rmdir || true ))\n"
    },
    {
        "filename": "68ef761aac86e89e785bc5e5e7c7a05b1bb2ba26.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM registry.access.redhat.com/rhel7/rhel:latest\nMAINTAINER Shea Stewart <shea.stewart@arctiq.ca>\n\n\nRUN yum install -y wget && \\\n    yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \\\n    yum install -y python-pip && \\\n    pip install ansible\n\n\nADD scripts/ .\nRUN chmod +x sleep.sh && \\\n    chmod +x install_oc.sh\n\nRUN ./install_oc.sh\n\n\nCMD [\"/sleep.sh\"]\n"
    },
    {
        "filename": "690bea74a5f486992a9de2583089ee7f8bcb18be.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM nvidia/opengl:1.0-glvnd-runtime-ubuntu16.04\n\nLABEL maintainer \"Samir Tabriz\"\n\nENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display,compute,utility\n\nRUN apt-get update \\ \n    && apt-get install -y --no-install-recommends mesa-utils \\ \n    && rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update \\ \n    && apt-get install -y --no-install-recommends         ocl-icd-libopencl1         clinfo \\ \n    &&     rm -rf /var/lib/apt/lists/*\n    \nRUN mkdir -p /etc/OpenCL/vendors \\ \n    && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n\nENV NVIDIA_VISIBLE_DEVICES=all\n\nRUN  echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections     \\ \n    && echo keyboard-configuration keyboard-configuration/layout select 'English (US)' | debconf-set-selections     \\ \n    && echo keyboard-configuration keyboard-configuration/layoutcode select 'us' | debconf-set-selections     \\ \n    && apt-get update     \\ \n    && apt-get install -y --no-install-recommends software-properties-common wget udev apt-utils sudo \n\nRUN  add-apt-repository -y ppa:danielrichter2007/grub-customizer     \\ \n    && wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add -     \\ \n    && apt-get install -y apt-transport-https     \\ \n    && echo \"deb https://download.sublimetext.com/ apt/stable/\" | tee /etc/apt/sources.list.d/sublime-text.list     \\ \n    && apt-add-repository -y ppa:obsproject/obs-studio     \\ \n    && apt-add-repository -y ppa:graphics-drivers/ppa     \\ \n    && add-apt-repository -y ppa:yannubuntu/boot-repair     \\ \n    && apt-get update     \\ \n    && apt-get install -y sublime-text grub-customizer exfat-fuse exfat-utils vim terminator gitg cmake-curses-gui gparted meld cowsay fortune gimp synaptic libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev ncdu filezilla p7zip-full openssh-client openssh-server boot-repair\n\nRUN  sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'     \\ \n    && apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116     \\ \n    && apt-get update     \\ \n    && apt-get install ros-kinetic-desktop-full python-rosinstall -y     \\ \n    && rosdep init     \\ \n    && rosdep update         \n\nRUN  /bin/bash -c \"echo 'source /opt/ros/kinetic/setup.bash' >> /root/.bashrc \\ \n    && source /root/.bashrc\"      \n\nRUN add-apt-repository -y ppa:levi-armstrong/ppa     \\ \n    && apt-get update\n\nRUN  /bin/bash -c \"source /opt/ros/kinetic/setup.bash     \\ \n    && cd     \\ \n    && mkdir -p workspace/ros/src     \\ \n    && cd workspace/ros     \\ \n    && catkin_make\"     \n\nRUN  /bin/bash -c \"echo 'source /root/workspace/ros/devel/setup.bash' >> /root/.bashrc\"          \n\nRUN  cd ~/workspace/ros     \\ \n    && apt-get install -y ocl-icd-opencl-dev     \\ \n    && wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run -O cuda.run     \\ \n    && chmod +x cuda.run     \\ \n    && ./cuda.run -silent --toolkit --samples --samplespath=\"/root/workspace/\"     \\ \n    && wget \"https://www.dropbox.com/s/cx95583vbf1ifzm/cudnn-8.0-linux-x64-v5.1.tgz?dl%3D0&sa=D&ust=1507541105896000&usg=AFQjCNEU511fT00n547PxPt_P6cfSLPVWw\"     \\ \n    && tar -zxvf cudnn*     \\\n    && cp cuda/include/* /usr/local/cuda/include     \\ \n    && cp cuda/lib64/* /usr/local/cuda/lib64/     \\ \n    && echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64' >> ~/.bashrc     \\ \n    && echo 'export PATH=$PATH:/usr/local/cuda/bin' >> ~/.bashrc          \n    \nRUN  apt-get install cmake libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev -y --force-yes     \\ \n    && mkdir /tmp/ceres_install     \\ \n    && cd /tmp/ceres_install     \\ \n    && git clone https://ceres-solver.googlesource.com/ceres-solver     \\ \n    && cd ceres-solver     \\ \n    && git fetch --tags     \\ \n    && git checkout tags/1.9.0     \\ \n    && cd ..     \\ \n    && mkdir ceres-bin     \\ \n    && cd ceres-bin     \\ \n    && cmake ../ceres-solver     \\ \n    && make -j8     \\ \n    && make test     \\ \n    && make install     \\ \n    && rm -R /tmp/ceres_install     \\ \n    && cd ~/workspace/ros/src     \\ \n    && git clone https://github.com/iaslab-unipd/calibration_toolkit     \\ \n    && cd calibration_toolkit     \\ \n    && git fetch origin --tags     \\ \n    && git checkout tags/v0.2         \n\nRUN cd     \\ \n    && cd workspace     \\ \n    && apt-get update     \\ \n    && git clone https://github.com/marketto89/opencv     \\ \n    && cd opencv     \\ \n    && git checkout 3.1.0-with-cuda8     \\ \n    && mkdir release     \\ \n    && cd release     \\ \n    && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/opencv3 -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_IPP=ON -D CMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs ..     \\ \n    && make -j8 -l8     \\ \n    && make install     \\ \n    && printf '#OpenCV\\nPKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opencv3/lib/pkgconfig\\nexport PKG_CONFIG_PATH\\n' >> /root/.bashrc     \\ \n    && printf 'PATH=$PATH:/usr/local/opencv3/bin\\nexport PATH\\n' >> /root/.bashrc      \\ \n    && printf 'LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/opencv3/lib\\nexport LD_LIBRARY_PATH\\n' >> /root/.bashrc       \\ \n    && /bin/bash -c \"source /root/.bashrc\"     \\ \n    && ln -s /usr/local/opencv3/share/OpenCV/3rdparty/lib/libippicv.a /usr/local/lib/libippicv.a  \n\nRUN  /bin/bash -c \"source /root/.bashrc    \\ \n    && cd ~/workspace/ros/src      \\ \n    && git clone https://bitbucket.org/mcarraro/rtpose_wrapper     \\ \n    && cd rtpose_wrapper     \\ \n    && git checkout integration-1604     \\ \n    && apt-get --assume-yes install libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev     \\ \n    && make all -j8\"\n\nRUN  cd     \\ \n    && cd workspace     \\ \n    && git clone https://github.com/OpenPTrack/libfreenect2.git     \\ \n    && cd libfreenect2     \\ \n    && git checkout 1606     \\ \n    && cd depends/     \\ \n    && apt-get install -y git cmake cmake-curses-gui libxmu-dev libxi-dev libgl1-mesa-dev xorg-dev libglu1-mesa-dev libtool automake libudev-dev libgtk2.0-dev pkg-config libjpeg-turbo8-dev libturbojpeg libglewmx-dev     \\ \n    && ln -f -s /usr/lib/x86_64-linux-gnu/libturbojpeg.so.0.1.0 /usr/lib/x86_64-linux-gnu/libturbojpeg.so     \\ \n    && cd .. \\\n    && mkdir build \\ \n    && cd build     \\ \n    && /bin/bash -c \"source /opt/ros/kinetic/setup.bash    \\ \n    && export NVCUDASAMPLES_ROOT='/root/workspace/NVIDIA_CUDA-8.0_Samples' \\\n    && cmake .. -DENABLE_CXX11=ON -DCUDA_PROPAGATE_HOST_FLAGS=off   \\ \n    && make     \\\n    && make install\"     \\\n    && echo '# ATTR{product}==\"Kinect2\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"045e\", ATTR{idProduct}==\"02c4\", MODE=\"0666\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"045e\", ATTR{idProduct}==\"02d8\", MODE=\"0666\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"045e\", ATTR{idProduct}==\"02d9\", MODE=\"0666\"' > ~/90-kinect2.rules     \\ \n    && cp ~/90-kinect2.rules /etc/udev/rules.d/\n\nRUN  cd ~/workspace/ros/src     \\ \n    && git clone https://github.com/OpenPTrack/iai_kinect2.git     \\ \n    && cd iai_kinect2     \\ \n    && git checkout 1607       \n\n\nRUN  /bin/bash -c \"git clone https://github.com/torch/distro.git ~/torch --recursive \\ \n    && cd ~/torch \\ \n    && bash install-deps \\ \n    && ./install.sh -b \\ \n    && source ~/.bashrc \\ \n    && cd install/bin \\ \n    && ./luarocks install dpnn \\ \n    && ./luarocks install csvigo\"\n\nRUN /bin/bash -c \"cd /tmp \\\n    && git clone https://github.com/cmusatyalab/openface.git \\\n    && cd openface \\\n    && sudo python setup.py install\"\n\nRUN /bin/bash -c \"cd /tmp \\\n    && rm -rf dlib \\\n    && git clone https://github.com/davisking/dlib.git \\\n    && cd dlib \\\n    && git checkout v19.4 \\\n    && mkdir python_examples/build \\\n    && cd python_examples/build \\\n    && cmake ../../tools/python -DUSE_AVX_INSTRUCTIONS=ON \\\n    && cmake --build . --config Release \\\n    && sudo cp dlib.so /usr/local/lib/python2.7/dist-packages\"\n\nRUN apt-get update \\\n    && apt-get install -y python-qt4 python-pip \\\n    && pip install requests\n\nRUN apt-get install ntp -y  \\ \n    && rm -rf /var/lib/apt/lists/*\n"
    },
    {
        "filename": "6954e5674a928f1a2c17f72d1c4db30624054cb6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Debian image that has Foswiki installed from the release tgz\n#\n# docker build -t svendowideit/foswiki .\n\nFROM debian\nMAINTAINER\tSven Dowideit <SvenDowideit@home.org.au>\n\nRUN apt-get update\nRUN apt-get install -yq vim-tiny wget \\\n\t\tapache2 rcs \\\n\t\tlibalgorithm-diff-perl libarchive-tar-perl libauthen-sasl-perl libcgi-pm-perl libcgi-session-perl libcrypt-passwdmd5-perl libdigest-sha-perl libencode-perl liberror-perl libfile-copy-recursive-perl libhtml-parser-perl libhtml-tree-perl libio-socket-ip-perl libio-socket-ssl-perl libjson-perl liblocale-maketext-perl liblocale-maketext-lexicon-perl liblocale-msgfmt-perl libwww-perl liburi-perl libversion-perl \\\n\t\tlibapache2-mod-fcgid \\\n\t\tperl-doc\n\nARG FOSWIKI_VERSION=2.0.3\n\nWORKDIR /var/lib/foswiki\nRUN wget http://sourceforge.net/projects/foswiki/files/foswiki/${FOSWIKI_VERSION}/Foswiki-${FOSWIKI_VERSION}.tgz\nRUN\ttar zxv --strip-components=1 -f Foswiki-${FOSWIKI_VERSION}.tgz \nRUN chown -R www-data:www-data /var/lib/foswiki\n\nADD foswiki.conf /etc/apache2/sites-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\nRUN a2enmod rewrite\nRUN a2enmod cgi\n\nRUN ./tools/configure -save -noprompt -set {PubUrlPath}='/pub' -set {ScriptUrlPath}='/bin' -set {DefaultUrlHost}='' \\\n\t&& chown -R www-data:www-data /var/lib/foswiki/lib/LocalSite.cfg\n\nRUN bash -c 'echo \"/usr/sbin/apachectl start\" >> /root/.bashrc'\n\nEXPOSE 80\n\n\n"
    },
    {
        "filename": "698d65040989be7ea26490a8a5791bb15fdce302.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM registry.spin.nersc.gov/das/jupyter-base:latest\nMAINTAINER Rollin Thomas <rcthomas@lbl.gov>\nWORKDIR /tmp\n\nRUN \\\n    apt-get update          &&  \\\n    apt-get --yes upgrade   &&  \\\n    apt-get --yes install       \\\n        openssh-server\n\n# Configure sshd\n\nRUN \\\n    mkdir -p /var/run/sshd\n\n# Python 3 Anaconda and additional packages\n\nRUN \\\n    conda update --yes conda    &&  \\\n    conda install --yes             \\\n        ipykernel                   \\\n        ipywidgets                  \\\n        notebook                &&  \\\n    ipython kernel install      &&  \\\n    conda clean --yes --all\n\nADD get_port.py /opt/anaconda3/bin\n\n# Typical extension\n\nRUN \\\n    jupyter nbextension enable --sys-prefix --py widgetsnbextension\n\n# Some dummy users\n\nRUN \\\n    adduser -q --gecos \"\" --disabled-password torgo     && \\\n    echo torgo:the-master-would-not-approve | chpasswd\n\nRUN \\\n    adduser -q --gecos \"\" --disabled-password master    && \\\n    echo master:you-have-failed-us-torgo | chpasswd\n\nWORKDIR /srv\nADD docker-entrypoint.sh .\nRUN chmod +x docker-entrypoint.sh\nENTRYPOINT [ \"./docker-entrypoint.sh\" ]\nCMD [ \"/usr/sbin/sshd\", \"-p\", \"22\", \"-D\" ]\n"
    },
    {
        "filename": "6990a89cdf04af9523a98167440da84db08a7df0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "ARG BASE=gcc:9.1\nFROM $BASE\n\nARG NPROCS=4\n\nRUN apt-get update && apt-get install -y \\\n        python3-dev \\\n        python3-pip \\\n        && \\\n    pip3 install numpy scipy h5py && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# Install CMake\nENV CMAKE_DIR=/opt/cmake\nRUN CMAKE_VERSION=3.13.4 && \\\n    CMAKE_VERSION_SHORT=3.13 && \\\n    CMAKE_URL=https://cmake.org/files/v${CMAKE_VERSION_SHORT}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    wget --quiet ${CMAKE_URL} --output-document=${CMAKE_SCRIPT} && \\\n    mkdir -p ${CMAKE_DIR} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_DIR} && \\\n    rm ${CMAKE_SCRIPT}\nENV PATH=${CMAKE_DIR}/bin:$PATH\n\n# Install OpenMPI\nENV OPENMPI_DIR=/opt/openmpi\nRUN OPENMPI_VERSION=3.1.3 && \\\n    OPENMPI_VERSION_SHORT=3.1 && \\\n    OPENMPI_SHA1=b3c60e2bdd5a8a8e758fd741f9a5bebb84da5e81 && \\\n    OPENMPI_URL=https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION_SHORT}/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    OPENMPI_ARCHIVE=openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA1} ${OPENMPI_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p openmpi && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C openmpi --strip-components=1 && \\\n    mkdir -p build && cd build && \\\n    ../openmpi/configure --prefix=${OPENMPI_DIR} && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${OPENMPI_DIR}/bin:$PATH\n\n# Install LAPACK\nRUN SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    git clone https://github.com/Reference-LAPACK/lapack-release.git && \\\n    cd lapack-release && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_Fortran_FLAGS=\"-fPIC\" -DCMAKE_C_FLAGS=\"-fPIC\" .. && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\n\n# Install TPLS's\nENV TRUCHAS_TPL_DIR=/opt/truchas-tpl\nRUN SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    git clone https://gitlab.com/truchas/truchas-tpl.git && \\\n    cd truchas-tpl && \\\n    mkdir build && cd build && \\\n    cmake -C ../config/linux-gcc.cmake -DCMAKE_INSTALL_PREFIX=${TRUCHAS_TPL_DIR} .. && \\\n    make -j${NPROCS} && \\\n    rm -rf ${SCRATCH_DIR}\n\n# Install Truchas\nENV TRUCHAS_DIR=/opt/truchas\nRUN SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    git clone https://gitlab.com/truchas/truchas.git && \\\n    cd truchas && \\\n    mkdir build && cd build && \\\n    cmake -C ../config/gcc-opt.cmake -D TRUCHAS_TPL_DIR=${TRUCHAS_TPL_DIR} -D CMAKE_INSTALL_PREFIX=${TRUCHAS_DIR} .. && \\\n    make -j${NPROCS} && make install && \\\n    rm -rf ${SCRATCH_DIR}\n\n\n\n"
    },
    {
        "filename": "69a4b5ef19f3303f251b56a97c755c8d5fd7268e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu  \nMAINTAINER Jacques Moati <jacques@moati.net>  \n  \nRUN apt-get update && \\  \napt-get install -y build-essential cmake git wget unzip qt5-default && \\  \ncd /root && \\  \nwget https://github.com/Itseez/opencv/archive/3.1.0.zip && \\  \nunzip 3.1.0.zip && \\  \nrm 3.1.0.zip && \\  \ngit clone https://github.com/opencv/opencv_contrib.git && \\  \ncd /root/opencv_contrib && \\  \ngit checkout 6dc1f416a0b3d912f4fdad1b307cccf0300571b4 && \\  \nmkdir build && \\  \ncd /root/opencv_contrib/build && \\  \ncmake -DOPENCV_EXTRA_MODULES_PATH=../modules ../../opencv-3.1.0/ && \\  \nmake -j8 && \\  \nmake install && \\  \necho \"/usr/local/opencv/\" > /usr/local/opencv2 && \\  \nldconfig -v\n\n"
    },
    {
        "filename": "69f36481cdb96b8c03b7305734cf2a37ef9f120c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nMAINTAINER Dmitry Pokidov <dooman87@gmail.com>\n\nWORKDIR /\n\nENV GO15VENDOREXPERIMENT=0\nENV PATH=/opt/go/bin:/gohome/bin:$PATH\nENV GOPATH=/gohome\nENV GOROOT=/opt/go\n\nRUN apt-get update && \\\n    apt-get -y install automake bison flex g++ git libboost1.54-all-dev libevent-dev libssl-dev libtool make \\\n    pkg-config wget \\\n    python-mapnik libmapnik-dev \\\n    protobuf-compiler libprotobuf-dev \\\n    jq cmake libncurses5-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n#Installing apache thrift\nRUN wget http://apache.uberglobalmirror.com/thrift/0.9.3/thrift-0.9.3.tar.gz && \\\n    tar -xzvf thrift-0.9.3.tar.gz && \\\n    rm ./thrift-0.9.3.tar.gz && \\\n    cd /thrift-0.9.3 && \\\n    ./configure --without-java && \\\n    make && \\\n    make install\n\n#Install golang 1.6\nWORKDIR /opt\nRUN wget https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz && \\\n    tar -xzvf go1.6.linux-amd64.tar.gz && \\\n    rm go1.6.linux-amd64.tar.gz && \\\n    mkdir -p /gohome/bin && \\\n    mkdir -p /gohome/pkg && \\\n    mkdir /gohome/src\n\nRUN go get github.com/mattn/gom\n\nRUN mkdir /gopnik\nADD . /gopnik\nWORKDIR /gopnik\nRUN gom install && \\\n    gom exec ./bootstrap.bash && \\\n    gom exec ./build.bash\n\nRUN mkdir /gopnik_data\nCOPY example/dockerconfig.json /gopnik_data/config.json\nCOPY sampledata/stylesheet.xml /gopnik_data/\nCOPY sampledata/world_merc.shp /gopnik_data/\nCOPY sampledata/world_merc.dbf /gopnik_data/\nVOLUME /gopnik_data\n\nEXPOSE 8080\nEXPOSE 9090\n\nENTRYPOINT ./entrypoint.sh\n"
    },
    {
        "filename": "6a29e0a657c69de0bbd1e9249da4f203b27b40e4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Sebastien Binet \"binet@cern.ch\"\n\n# install a few dependencies\nRUN apt-get update -y && \\\n    apt-get install -y \\\n\tgit rinse sudo tar\n\nRUN git clone \\\n\tgit://github.com/hepsw/docks \\\n\t/docks\n\nRUN mkdir /build && \\\n\tcd /build && \\\n\t/docks/mkimage-slc.sh hepsw/slc5-base slc-5\n"
    },
    {
        "filename": "6addd6fa79a7dc281d03c305115b64c646540783.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER Matthew Davis email: matdavis at ebi.ac.uk\n# Initially created by Natalja Kurbatova\n# Update the image with the latest packages (recommended)\n# and install missing packages\n\n##############################\n# Kraken with multithreaded Perl\n#############################\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# ubuntu dependencies \nRUN apt-get update && apt-get install -y \\ \n\tbuild-essential \\     \n        libcurl4-openssl-dev \\\n        libxml2-dev \\\n        gnupg \\\n        wget \\\n        zip \\\n        gcc \\\n        curl \\\n        procps \\\n        samtools \\\n        bowtie \\\n        && apt-get clean\n\n# install R\nRUN sh -c 'echo \"deb http://cran.rstudio.com/bin/linux/ubuntu trusty/\" >> /etc/apt/sources.list'\nRUN gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9\nRUN gpg -a --export E084DAB9 | sudo apt-key add -\nRUN apt-get update \\\n    && apt-get -y install r-base && apt-get clean\n\n# install R packages\nRUN echo \"r <- getOption('repos'); r['CRAN'] <- 'http://cran.us.r-project.org'; options(repos = r);\" > ~/.Rprofile\nRUN Rscript -e \"install.packages('R.utils')\"\nRUN Rscript -e \"install.packages('RColorBrewer')\"\nRUN Rscript -e \"install.packages('futile.logger')\"\nRUN Rscript -e \"install.packages('snow')\"\nRUN Rscript -e \"install.packages('bitops')\"\nRUN Rscript -e \"install.packages('hwriter')\"\nRUN Rscript -e \"install.packages('latticeExtra')\"\nRUN Rscript -e \"install.packages('gplots')\"\nRUN Rscript -e \"install.packages('S4Vectors', repos='http://bioconductor.org/packages/release/bioc')\"\nRUN Rscript -e \"install.packages('IRanges', repos='http://bioconductor.org/packages/release/bioc')\"\nRUN Rscript -e \"install.packages('GenomicRanges', repos='http://bioconductor.org/packages/release/bioc')\"\nRUN Rscript -e \"install.packages('ShortRead', repos='http://bioconductor.org/packages/release/bioc')\"\n\n# install multithreaded Perl\n# from https://github.com/Perl/docker-perl \nRUN rm -fr /var/lib/apt/lists/* \\\n    && mkdir /usr/src/perl\n\nCOPY *.patch /usr/src/perl/\n\nWORKDIR /usr/src/perl\n\nRUN curl -SL https://cpan.metacpan.org/authors/id/R/RJ/RJBS/perl-5.22.0.tar.bz2 -o perl-5.22.0.tar.bz2 \\\n    && echo '400338c91c56420d98142cbfcb84d418cae2c98c *perl-5.22.0.tar.bz2' | sha1sum -c - \\\n    && tar --strip-components=1 -xjf perl-5.22.0.tar.bz2 -C /usr/src/perl \\\n    && rm perl-5.22.0.tar.bz2 \\\n    && cat *.patch | patch -p1 \\\n    && ./Configure -Dusethreads -Duse64bitall  -des \\\n    && make -j$(nproc) \\\n    && make test_harness \\\n    && make install \\\n    && cd /usr/src \\\n    && curl -LO https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm \\\n    && chmod +x cpanm \\\n    && ./cpanm App::cpanminus \\\n    && rm -fr ./cpanm /root/.cpanm /usr/src/perl\n\nWORKDIR /root\n\nCMD [\"perl5.22.0\",\"-de0\"]\n\n# install Kraken\nRUN mkdir /kraken\nWORKDIR /kraken\nRUN wget ftp://ftp.ebi.ac.uk/pub/contrib/enrightlab/kraken/SequenceImp/src/seqimp-latest.tgz \\\n    && tar -xzf seqimp-latest.tgz \\\n    && wget ftp://ftp.ebi.ac.uk/pub/contrib/enrightlab/kraken/reaper/binaries/reaper-15-065/linux/tally-15-065 \\\n    && wget ftp://ftp.ebi.ac.uk/pub/contrib/enrightlab/kraken/reaper/binaries/reaper-15-065/linux/swan-15-065 \\\n    && wget ftp://ftp.ebi.ac.uk/pub/contrib/enrightlab/kraken/reaper/binaries/reaper-15-065/linux/reaper-15-065 \\\n    && wget ftp://ftp.ebi.ac.uk/pub/contrib/enrightlab/kraken/reaper/binaries/reaper-15-065/linux/minion-15-065 \\\n    && mv /kraken/reaper-15-065 /usr/bin/reaper \\\n    && mv /kraken/tally-15-065 /usr/bin/tally \\\n    && mv /kraken/swan-15-065 /usr/bin/swan \\\n    && mv /kraken/minion-15-065 /usr/bin/minion \\\n    && mv /kraken/seqimp*/ /kraken/seqimp\n\nRUN chmod 771 /usr/bin/reaper \\\n    && chmod 771 /usr/bin/tally \\\n    && chmod 771 /usr/bin/swan \\\n    && chmod 771 /usr/bin/minion \n\nENV PATH /kraken/seqimp/bin:$PATH\n\n# check Kraken\nCMD [\"/kraken/seqimp/bin/imp_commandline.pl\", \"--system-check\"]\n"
    },
    {
        "filename": "6b665adc5acac9c3fa35a5742bc09c7b2bf13bbb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Gabriel Moreira <gabrielmoreira@gmail.com>\nENV HOME /home\n\n# Dependencies\nRUN apt-get update && \\\n    apt-get -yq install \\\n\t\tsupervisor \\\n\t\twget git pwgen unzip \\\n        apache2 libapache2-mod-php5 \\\n        php5-mysql mysql-server \\\n\t\tphp5-imagick imagemagick \\\n        php5-curl curl \\\n        php5-mcrypt \\\n        php5-gd \\\n        php-pear \\\n        php-apc && \\\n    rm -rf /var/lib/apt/lists/*\n\n# PHP Composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n# Download latest craft\nRUN [\"/bin/bash\", \"-c\", \"curl -L -o /craft.zip https://craftcms.com/latest.zip?accept_license=yes\"]\n\n# Unzip craft\nRUN unzip /craft.zip -d /var/www && \\\n    mv /var/www/public/* /var/www/html && \\\n    rm -f /var/www/html/index.html\n\n# (Dev only)\n# RUN apt-get update && apt-get -yq install vim && curl http://j.mp/spf13-vim3 -L -o - | sh\n\n# Fix MySQL (why?)\nRUN rm -Rf /var/lib/mysql\n\n# Local includes\nADD includes /\n\n# Default database name\nENV CRAFT_DB_NAME craft\n\n# Default php configurations\nENV PHP_UPLOAD_MAX_FILESIZE 10M\nENV PHP_POST_MAX_SIZE 10M\n\n# Expose apache port\nEXPOSE 80\n\nRUN chmod +x /*.sh && \\\n    chmod +x /build/*.sh \n    \nWORKDIR /var/www/html\nCMD /run.sh\n"
    },
    {
        "filename": "6b996a890acc8aa76f2aaa8074fde9c3168ffe44.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-cudnn5-devel\n\nMAINTAINER berlius <berlius52@yahoo.com>\n\n# This project contains my code and that of https://github.com/saiprashanths/dl-docker/\n\nRUN apt-get update\n\nRUN apt-get install -y swig \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibopenjpeg2 \\\n\t\tlibpng12-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\tlibsdl2-2.0 \\\n\t\tlibsdl2-dev  \\\n\t\topenjdk-7-jdk \\\n\t\tlua5.1 \\\n\t\tlibxerces-c3.1 \\\n\t\tliblua5.1-0-dev \\\n\t\tlibav-tools python-tk \\\n\t\ttimidity \\\n\t\tjackd1 \\\n\t\tlxterminal \\\n\t\tmencoder \\\n\t\tgnome-terminal \\\n\t\tpython-numpy \\\n\t\tpython-scipy \\\n\t\tpython-nose \\\n\t\tpython-h5py \\\n\t\tpython-skimage \\\n\t\tpython-matplotlib \\\n\t\tpython-pandas \\\n\t\tpython-sklearn \\\n\t\tpython-sympy \\\n\t\tlibboost-all-dev \\\n\t\tlibgflags-dev \\\n\t\tlibgoogle-glog-dev \\\n\t\tlibhdf5-serial-dev \\\n\t\tlibleveldb-dev \\\n\t\tliblmdb-dev \\\n\t\tlibopencv-dev \\\n\t\tlibprotobuf-dev \\\n\t\tlibsnappy-dev \\\n\t\tprotobuf-compiler \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\t\n\t\n# Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\n# Add SNI support to Python\nRUN pip --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1\n\t\t\n# Install TensorFlow\nRUN pip --no-cache-dir install tensorflow-gpu\n\n\n\t\t\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install --upgrade ipython && \\\n\tpip --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\ttflearn \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\ttqdm  \\\n\t\tgym[all] \\\n\t\tchainer \\\n\t\tprettytensor \\\n\t\tprogressbar \\\n\t\tipdb \\\n\t\tscikit-neuralnetwork \\\n\t\t&& \\\n\tpython -m ipykernel.kernelspec\n\n        \nRUN update-ca-certificates -f \n\nENV JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 \\\n    CLASSPATH=/usr/lib/jvm/java-7-openjdk-amd64/libtools.jar:$CLASSPATH \\\n    PATH=/usr/lib/jvm/java-7-openjdk-amd64/bin:$PATH\n    \n# Install Caffe \nRUN git clone -b master --depth 1 https://github.com/BVLC/caffe.git /root/caffe && \\\n\tcd /root/caffe && \\\n\tcat python/requirements.txt | xargs -n1 pip install && \\\n\tmkdir build && cd build && \\\n\tcmake -DUSE_CUDNN=1 -DBLAS=Open .. && \\\n\tmake -j\"$(nproc)\" all && \\\n\tmake install\n\n# Set up Caffe environment variables\nENV CAFFE_ROOT=/root/caffe\nENV PYCAFFE_ROOT=$CAFFE_ROOT/python\nENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \\\n\tPATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\n\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n\n# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git && \\\n\t\\\n\techo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\n\n# Install Keras\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@\n\n\n# Install Lasagne\nRUN pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git\n\n\n# Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive && \\\n\tcd /root/torch && \\\n\tbash install-deps && \\\n\tyes no | ./install.sh\n\n# Export the LUA evironment variables manually\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \\\n\tLUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \\\n\tPATH=/root/torch/install/bin:$PATH \\\n\tLD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \\\n\tDYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n                \nRUN luarocks install display \nRUN luarocks install hdf5 \nRUN luarocks install image\nRUN luarocks install loadcaffe \nRUN luarocks install mnist \n\n# Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn && \\\n\tluarocks install cutorch && \\\n\tluarocks install cunn && \\\n\t\\\n\tcd /root && git clone https://github.com/soumith/cudnn.torch.git && cd cudnn.torch && \\\n\tgit checkout R4 && \\\n\tluarocks make && \\\n\t\\\n\tcd /root && git clone https://github.com/facebook/iTorch.git && \\\n\tcd iTorch && \\\n\tluarocks make\n\n# Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\n# Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006 8888 8000 \n\nWORKDIR \"/root\"\nCMD [\"jackd -R -d alsa -d hw:1\"]\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "6bbaaaa66983aa1e832c3f41f1ccd206ffaaad9a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:12.04\nMAINTAINER Erik Kristensen <erik@erikkristensen.com>\n\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get -y install python-software-properties build-essential git\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN apt-get update\nRUN apt-get -y install nodejs\n\nWORKDIR /opt/app\n\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install --production && cp -R node_modules /opt/app\n\nADD . /opt/app\n\nENV NODE_ENV docker\n\nEXPOSE 5100\n\nENTRYPOINT [\"node\"]\n\nCMD [\"app.js\"]\n\n"
    },
    {
        "filename": "6cf6f371b7b8d23a621988a9ae676b8b289d944c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:wheezy-backports\nMAINTAINER Gabriele Facciolo <gfacciol@gmail.com>\n# Following http://git.27o.de/dataserver/about/Installation-Instructions-for-Debian-Wheezy.md\n\n# debian packages\nRUN apt-get update && apt-get install -y \\\n    apache2 libapache2-mod-php5 mysql-server memcached zendframework php5-cli php5-memcached php5-mysql php5-curl \\\n    apache2 uwsgi uwsgi-plugin-psgi libplack-perl libdigest-hmac-perl libjson-xs-perl libfile-util-perl libapache2-mod-uwsgi libswitch-perl \\\n    git gnutls-bin runit wget curl net-tools vim build-essential\n\n# Zotero\nRUN mkdir -p /srv/zotero/log/upload && \\\n    mkdir -p /srv/zotero/log/download && \\\n    mkdir -p /srv/zotero/log/error && \\\n    mkdir -p /srv/zotero/log/api-errors && \\\n    mkdir -p /srv/zotero/log/sync-errors && \\\n    mkdir -p /srv/zotero/dataserver && \\\n    mkdir -p /srv/zotero/zss && \\\n    mkdir -p /var/log/httpd/sync-errors && \\\n    mkdir -p /var/log/httpd/api-errors && \\\n    chown www-data: /var/log/httpd/sync-errors && \\\n    chown www-data: /var/log/httpd/api-errors\n\n# Dataserver\nRUN git clone --depth=1 git://git.27o.de/dataserver /srv/zotero/dataserver && \\\n    chown www-data:www-data /srv/zotero/dataserver/tmp\n#RUN cd /srv/zotero/dataserver/include && rm -r Zend && ln -s /usr/share/php/libzend-framework-php/Zend\nRUN cd /srv/zotero/dataserver/include && rm -r Zend && ln -s /usr/share/php/Zend\n\n#Apache2\n#certtool -p --sec-param high --outfile /etc/apache2/zotero.key\n#certtool -s --load-privkey /etc/apache2/zotero.key --outfile /etc/apache2/zotero.cert\nADD apache/zotero.key /etc/apache2/\nADD apache/zotero.cert /etc/apache2/\nADD apache/sites-zotero.conf /etc/apache2/sites-available/zotero\nADD apache/dot.htaccess  /srv/zotero/dataserver/htdocs/\\.htaccess\nRUN a2enmod ssl && \\\n    a2enmod rewrite && \\\n    a2ensite zotero\n\n#Mysql\nADD mysql/zotero.cnf /etc/mysql/conf.d/zotero.cnf\nADD mysql/setup_db /srv/zotero/dataserver/misc/setup_db\nRUN /etc/init.d/mysql start && \\\n    mysqladmin -u root password password && \\\n    cd /srv/zotero/dataserver/misc/ && \\\n    ./setup_db\n\n\n# Zotero Configuration\nADD dataserver/dbconnect.inc.php dataserver/config.inc.php /srv/zotero/dataserver/include/config/\nADD dataserver/sv/zotero-download /etc/sv/zotero-download\nADD dataserver/sv/zotero-upload   /etc/sv/zotero-upload  \nADD dataserver/sv/zotero-error    /etc/sv/zotero-error   \nRUN cd /etc/service && \\\n    ln -s ../sv/zotero-download /etc/service/ && \\\n    ln -s ../sv/zotero-upload /etc/service/ && \\\n    ln -s ../sv/zotero-error /etc/service/ \n\n\n\n# ZSS\nRUN git clone --depth=1 git://git.27o.de/zss /srv/zotero/zss && \\\n    mkdir /srv/zotero/storage && \\\n    chown www-data:www-data /srv/zotero/storage\n\nADD zss/zss.yaml /etc/uwsgi/apps-available/\nADD zss/ZSS.pm   /srv/zotero/zss/\nADD zss/zss.psgi /srv/zotero/zss/\nRUN ln -s /etc/uwsgi/apps-available/zss.yaml /etc/uwsgi/apps-enabled \n# fix uwsgi init scipt (always fails)\nADD patches/uwsgi /etc/init.d/uwsgi \n\n\n## failed attempt to install Zotero Web-Library locally\n## not working\n#RUN cd /srv/ && \\\n#    git clone --depth=1 --recursive https://github.com/zotero/web-library.git && \\\n#    curl -sL https://deb.nodesource.com/setup_4.x | bash - && apt-get install -y nodejs && \\\n#    cd /srv/web-library && \\\n#    npm install && \\\n#    npm install prompt\n\n\n\n\n# replace custom /srv/zotero/dataserver/admin/add_user that allows to write the password\nADD patches/add_user /srv/zotero/dataserver/admin/add_user\n\n# TEST ADD USER: test PASSWORD: test\nRUN service mysql start && service memcached start && \\\n    cd /srv/zotero/dataserver/admin && \\\n    ./add_user 101 test test && \\\n    ./add_user 102 test2 test2 && \\\n    ./add_group -o test -f members -r members -e members testgroup && \\\n    ./add_groupuser testgroup test2 member \n\n\n# docker server startup\nEXPOSE 80 443\n\nCMD service mysql start && \\\n    service uwsgi start && \\\n    service apache2 start && \\\n    service memcached start && \\\n    bash -c \"/usr/sbin/runsvdir-start&\" && \\\n    /bin/bash \n"
    },
    {
        "filename": "6d50b0c15c3ad6f07d51b3ac8481b44c4ca19f23.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## Emacs, make this -*- mode: sh; -*-\n\n#-------------- dev-clang\nFROM rocker/r-devel-ubsan-clang as dev-clang\n\nMAINTAINER \"Joshua N. Pritikin\" jpritikin@pobox.com\n\nRUN apt-get update && apt-get install -y --no-install-suggests \\\n\t\t\t      git \\\n\t\t\t      libcurl4-gnutls-dev \\\n\t\t\t      libssl-dev \\\n\t\t\t      libxml2-dev\n\nWORKDIR /opt/github.org/\n\nRUN git clone -b stable https://github.com/OpenMx/OpenMx.git && \\\n    cd OpenMx && \\\n    RD --no-save -f util/update-dependencies.R --args ./DESCRIPTION.in && \\\n    make cran-install REXEC=RD && \\\n    rm -rf /opt/github.org/\n\nWORKDIR /root\n\nENV ASAN_OPTIONS abort_on_error=1\n\nCMD [\"R\"]\n\n"
    },
    {
        "filename": "6dcc61eb474a803e117b3204deeabda0350e0795.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build CentOS,Nginx installed  Container\n# Based on CentOS\n############################################################\n\n# Set the base image to Ubuntu\nFROM centos:latest\n\n# File Author / Maintainer\nMAINTAINER Kaushal Kishore <kaushal.rahuljaiswal@gmail.com>\n\n# Add the ngix and PHP dependent repository\nADD nginx.repo /etc/yum.repos.d/nginx.repo\n\n# Installing nginx \nRUN yum -y install nginx\n\n# Installing PHP\nRUN yum -y --enablerepo=remi,remi-php56 install nginx php-fpm php-common\n\n# Installing supervisor\nRUN yum install -y python-setuptools\nRUN easy_install pip\nRUN pip install supervisor\n\n\n# Adding the configuration file of the nginx\nADD nginx.conf /etc/nginx/nginx.conf\nADD default.conf /etc/nginx/conf.d/default.conf\n\n# Adding the configuration file of the Supervisor\nADD supervisord.conf /etc/\n\n# Adding the default file\nADD index.php /var/www/index.php\n\n# Set the port to 80 \nEXPOSE 80\n\n# Executing supervisord\nCMD [\"supervisord\", \"-n\"]\n"
    },
    {
        "filename": "6e098d5218f60430286d766cfd8aaa7572aa81dd.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# The stress_test Docker image build a self-contained Ray instance for launching Ray.\n\nFROM ray-project/base-deps\n\n# We install ray and boto3 to enable the ray autoscaler as\n# a test runner.\nRUN pip install -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-0.8.0.dev1-cp27-cp27mu-manylinux1_x86_64.whl boto3\n# We install this after the latest wheels -- this should not override the latest wheels.\nRUN apt-get install -y zlib1g-dev\n# The following is needed to support TensorFlow 1.14\nRUN conda remove -y --force wrapt\nRUN pip install gym[atari]==0.10.11 opencv-python-headless tensorflow lz4 keras pytest-timeout smart_open\nRUN pip install --upgrade bayesian-optimization\nRUN pip install --upgrade git+git://github.com/hyperopt/hyperopt.git\nRUN pip install --upgrade sigopt\n# RUN pip install --upgrade nevergrad\nRUN pip install --upgrade scikit-optimize\nRUN conda install pytorch-cpu torchvision-cpu -c pytorch\n\n# RUN mkdir -p /root/.ssh/\n\n# We port the source code in so that we run the most up-to-date stress tests.\nADD ray.tar /ray\nADD git-rev /ray/git-rev\nRUN python /ray/python/ray/rllib/setup-rllib-dev.py --yes\n\nWORKDIR /ray\n"
    },
    {
        "filename": "6e5bbb638f375c06252249c7bee597c0aae62f1c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos:centos7\nMAINTAINER Jan Garaj info@monitoringartist.com\n\n# ZABBIX_VERSION=trunk tags/2.4.7 branches/dev/ZBXNEXT-1263-1\n\nENV \\\n  ZABBIX_VERSION=trunk \\\n  ZS_enabled=true \\\n  ZA_enabled=true \\\n  ZW_enabled=true \\\n  SNMPTRAP_enabled=false \\\n  STATUS_PAGE_ALLOWED_IP=127.0.0.1 \\\n  JAVA_HOME=/usr/lib/jvm/jre \\\n  JAVA=/usr/bin/java \\\n  PHP_date_timezone=UTC \\\n  PHP_max_execution_time=300 \\\n  PHP_max_input_time=300 \\\n  PHP_memory_limit=128M \\\n  PHP_error_reporting=E_ALL \\\n  ZS_ListenPort=10051 \\\n  ZS_SourceIP=\"\" \\\n  ZS_LogFile=/tmp/zabbix_server.log \\\n  ZS_LogFileSize=10 \\\n  ZS_DebugLevel=3 \\\n  ZS_PidFile=/var/run/zabbix_server.pid \\\n  ZS_DBHost=zabbix.db \\\n  ZS_DBName=zabbix \\\n  ZS_DBSchema=\"\" \\\n  ZS_DBUser=zabbix \\\n  ZS_DBPassword=zabbix \\\n  ZS_DBSocket=/tmp/mysql.sock \\\n  ZS_DBPort=3306 \\\n  ZS_StartPollers=5 \\\n  ZS_StartPollersUnreachable=1 \\\n  ZS_StartTrappers=5 \\\n  ZS_StartPingers=1 \\\n  ZS_StartDiscoverers=1 \\\n  ZS_StartHTTPPollers=1 \\\n  ZS_StartTimers=1 \\\n  ZS_JavaGateway=127.0.0.1 \\\n  ZS_JavaGatewayPort=10052 \\\n  ZS_StartJavaPollers=0 \\\n  ZS_StartVMwareCollectors=0 \\\n  ZS_VMwareFrequency=60 \\\n  ZS_VMwarePerfFrequency=60 \\\n  ZS_VMwareCacheSize=8M \\\n  ZS_VMwareTimeout=10 \\\n  ZS_SNMPTrapperFile=/tmp/zabbix_traps.tmp \\\n  ZS_StartSNMPTrapper=0 \\\n  ZS_ListenIP=0.0.0.0 \\\n  ZS_HousekeepingFrequency=1 \\\n  ZS_MaxHousekeeperDelete=500 \\\n  ZS_SenderFrequency=30 \\\n  ZS_CacheSize=8M \\\n  ZS_CacheUpdateFrequency=60 \\\n  ZS_StartDBSyncers=4 \\\n  ZS_HistoryCacheSize=8M \\\n  ZS_TrendCacheSize=4M \\\n  ZS_HistoryTextCacheSize=16M \\\n  ZS_ValueCacheSize=8M \\\n  ZS_Timeout=3 \\\n  ZS_TrapperTimeout=300 \\\n  ZS_UnreachablePeriod=45 \\\n  ZS_UnavailableDelay=60 \\\n  ZS_UnreachableDelay=15 \\\n  ZS_AlertScriptsPath=/usr/local/share/zabbix/alertscripts \\\n  ZS_ExternalScripts=/usr/local/share/zabbix/externalscripts \\\n  ZS_FpingLocation=/usr/sbin/fping \\\n  ZS_Fping6Location=/usr/sbin/fping6 \\\n  ZS_SSHKeyLocation=\"\" \\\n  ZS_LogSlowQueries=0 \\\n  ZS_TmpDir=/tmp \\\n  ZS_StartProxyPollers=1 \\\n  ZS_ProxyConfigFrequency=3600 \\\n  ZS_ProxyDataFrequency=1 \\\n  ZS_AllowRoot=0 \\\n  ZS_User=zabbix \\\n  ZS_Include=\"\" \\\n  ZS_SSLCertLocation=/usr/local/share/zabbix/ssl/certs \\\n  ZS_SSLKeyLocation=/usr/local/share/zabbix/ssl/keys \\\n  ZS_SSLCALocation=\"\" \\\n  ZS_LoadModulePath=/usr/lib/zabbix/modules \\\n  ZS_LoadModule=\"\" \\\n  ZW_ZBX_SERVER=localhost \\\n  ZW_ZBX_SERVER_PORT=10051 \\\n  ZW_ZBX_SERVER_NAME=\"Zabbix Server\" \\\n  TERM=xterm\n\n# Layer: base\nRUN \\\n  yum clean all && \\\n  yum update -y && \\\n  yum install -y epel-release && \\\n  sed -i -e \"\\|^https://\\\"http://|d\" /etc/yum.repos.d/epel.repo && \\\n  yum clean all && \\\n  yum install -y supervisor && \\\n  yum install -y http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm && \\\n  yum install -y nginx inotify-tools && \\\n  `# Rename nginx:nginx user/group to www:www, also set uid:gid to 80:80 (just to make it nice)` \\\n  groupmod --gid 80 --new-name www nginx && \\\n  usermod --uid 80 --home /data/www --gid 80 --login www --shell /bin/bash --comment www nginx && \\\n  `# Clean-up /etc/nginx/ directory from all not needed stuff...` \\\n  rm -rf /etc/nginx/*.d /etc/nginx/*_params && \\\n  `# Prepare dummy SSL certificates` \\\n  mkdir -p /etc/nginx/ssl && \\\n  openssl genrsa -out /etc/nginx/ssl/dummy.key 2048 && \\\n  openssl req -new -key /etc/nginx/ssl/dummy.key -out /etc/nginx/ssl/dummy.csr -subj \"/C=GB/L=London/O=Company Ltd/CN=zabbix-docker\" && \\\n  openssl x509 -req -days 3650 -in /etc/nginx/ssl/dummy.csr -signkey /etc/nginx/ssl/dummy.key -out /etc/nginx/ssl/dummy.crt && \\\n  yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm && \\\n  yum install -y --enablerepo=remi-php56 php-fpm \\\n       php-gd php-bcmath php-ctype php-xml php-xmlreader php-xmlwriter \\\n       php-session php-net-socket php-mbstring php-gettext php-cli \\\n       php-mysqlnd php-opcache php-pdo php-snmp php-ldap && \\\n  yum clean all && rm -rf /tmp/*\nADD container-files-base /\n\n# Layer: zabbix\nCOPY container-files-zabbix /\nRUN \\\n  yum clean all && \\\n  yum update -y && \\\n  yum install -y tar svn gcc automake make nmap traceroute iptstate wget \\\n              net-snmp-devel net-snmp-libs net-snmp net-snmp-perl iksemel \\\n              net-snmp-python net-snmp-utils java-1.8.0-openjdk python-pip \\\n              java-1.8.0-openjdk-devel mariadb-devel libxml2-devel gettext \\\n              libcurl-devel OpenIPMI-devel mysql iksemel-devel libssh2-devel \\\n              unixODBC unixODBC-devel mysql-connector-odbc postgresql-odbc \\\n              openldap-devel telnet net-tools snmptt sudo && \\\n `# reinstall glibc for locales` \\\n  yum -y -q reinstall glibc-common && \\\n  cp /usr/local/etc/zabbix_agentd.conf /tmp && \\\n  svn co svn://svn.zabbix.com/${ZABBIX_VERSION} /usr/local/src/zabbix && \\\n  cd /usr/local/src/zabbix && \\\n  DATE=`date +%Y-%m-%d` && \\\n  sed -i \"s/ZABBIX_VERSION.*'\\(.*\\)'/ZABBIX_VERSION', '\\1 ($DATE)'/g\" frontends/php/include/defines.inc.php && \\\n  sed -i \"s/ZABBIX_VERSION_RC.*\\\"\\(.*\\)\\\"/ZABBIX_VERSION_RC \\\"\\1 (${DATE})\\\"/g\" include/version.h && \\\n  sed -i \"s/String VERSION =.*\\\"\\(.*\\)\\\"/String VERSION = \\\"\\1 (${DATE})\\\"/g\" src/zabbix_java/src/com/zabbix/gateway/GeneralInformation.java && \\\n  ./bootstrap.sh && \\\n  ./configure --enable-server --enable-agent --with-mysql --enable-java \\\n              --with-net-snmp --with-libcurl --with-libxml2 --with-openipmi \\\n              --enable-ipv6 --with-jabber --with-openssl --with-ssh2 \\\n              --with-ldap --with-unixodbc && \\\n  make dbschema && \\\n  make install && \\\n  cp /usr/local/etc/web/zabbix.conf.php /usr/local/src/zabbix/frontends/php/conf/ && \\\n  pip install py-zabbix && \\\n  wget https://github.com/schweikert/fping/archive/3.10.tar.gz && \\\n  tar -xvf 3.10.tar.gz && \\\n  cd fping-3.10/ && \\\n  ./autogen.sh && \\\n  ./configure --prefix=/usr --enable-ipv6 --enable-ipv4 && \\\n  make && \\\n  make install && \\\n  mv /health/ /usr/local/src/zabbix/frontends/php/ && \\\n  setcap cap_net_raw+ep /usr/sbin/fping || echo 'Warning: setcap cap_net_raw+ep /usr/sbin/fping' && \\\n  setcap cap_net_raw+ep /usr/sbin/fping6 || echo 'Warning: setcap cap_net_raw+ep /usr/sbin/fping6' && \\\n  chmod 4710 /usr/sbin/fping && \\\n  chmod 4710 /usr/sbin/fping6 && \\\n  cd .. && \\\n  cp -f /tmp/zabbix_agentd.conf /usr/local/etc/ && \\\n  rm -rf fping-3.10 && \\\n  rm -rf 3.10.tar.gz && \\\n  cd /usr/local/src/zabbix/frontends/php && \\\n  locale/make_mo.sh && \\\n  yum autoremove -y gettext python-pip tar svn gcc automake mariadb-devel \\\n                    java-1.8.0-openjdk-devel libxml2-devel libcurl-devel \\\n                    OpenIPMI-devel iksemel-devel && \\\n  yum install -y OpenIPMI-libs && \\\n  chmod +x /config/bootstrap.sh && \\\n  chmod +x /config/ds.sh && \\\n  chmod +x /usr/local/src/zabbix/misc/snmptrap/zabbix_trap_receiver.pl && \\\n  chmod +x /usr/share/snmptt/snmptthandler-embedded && \\\n  yum clean all && \\\n  mkdir -p /usr/local/share/ssl/certs && \\\n  mkdir -p /usr/local/share/ssl/keys && \\\n  mkdir -p /usr/lib/zabbix/modules && \\\n  mkdir -p /etc/zabbix/snmp/mibs && \\\n  rm -rf /tmp/*\n\n  # TODO apply http://geofrogger.net/review/snmptt-hide-generic-part.patch\n\nCMD [\"/config/bootstrap.sh\"]\n\nVOLUME [\"/etc/custom-config\", \"/usr/local/share/zabbix/externalscripts\", \"/usr/local/share/zabbix/ssl/certs\", \"/usr/local/share/zabbix/ssl/keys\", \"/usr/lib/zabbix/modules\", \"/usr/share/snmp/mibs\", \"/etc/snmp\"]\n\nEXPOSE 80 162/udp 10051 10052\n"
    },
    {
        "filename": "6eec4549380d8e90182a0869c67def4ee9138088.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# vim: set ft=dockerfile:  \nFROM ubuntu:trusty  \n# Author with no obligation to maintain  \nMAINTAINER Paul T\u00f6tterman <paul.totterman@iki.fi>  \n  \nENV DEBIAN_FRONTEND=\"noninteractive\" \\  \nRATTIC_URL=\"https://github.com/tildaslash/RatticWeb/archive/v1.3.1.tar.gz\" \\  \n# possible configs for rattic, check out entrypoint.sh  \nTIMEZONE=\"\" \\  \nSECRETKEY=\"\" \\  \nDEBUG=\"\" \\  \nLOGLEVEL=\"\" \\  \nHOSTNAME=\"\" \\  \nPASSWORD_EXPIRY_DAYS=\"\" \\  \nDB_HOSTNAME=\"\" \\  \nDB_PORT=\"\" \\  \nDB_DBNAME=\"\" \\  \nDB_USERNAME=\"\" \\  \nDB_PASSWORD=\"\" \\  \nLDAP_URI=\"\" \\  \nLDAP_STARTTLS=\"\" \\  \nLDAP_REQCERT=\"\" \\  \nLDAP_BINDDN=\"\" \\  \nLDAP_BINDPW=\"\" \\  \nLDAP_BASE=\"\" \\  \nLDAP_USERBASE=\"\" \\  \nLDAP_USERFILTER=\"\" \\  \nLDAP_GROUPBASE=\"\" \\  \nLDAP_GROUPFILTER=\"\" \\  \nLDAP_GROUPTYPE=\"\" \\  \nLDAP_USERFIRSTNAME=\"\" \\  \nLDAP_USERLASTNAME=\"\" \\  \nLDAP_STAFFDN=\"\"  \n  \nCOPY 00InstallRecommends /etc/apt/apt.conf.d/00InstallRecommends  \nRUN apt-get -q update && \\  \napt-get -qq install \\  \nbuild-essential \\  \nca-certificates \\  \ncurl \\  \ngettext \\  \nlibjs-jquery \\  \nmysql-client \\  \nlibmysqlclient-dev \\  \npython \\  \npython-crypto \\  \npython-dev \\  \npython-django \\  \npython-django-auth-ldap \\  \npython-ldap \\  \npython-lxml \\  \npython-markdown \\  \npython-mimeparse \\  \npython-mysqldb \\  \npython-pip \\  \npython-pyasn1 \\  \nzlib1g-dev && \\  \napt-get clean && \\  \nrm -f /var/lib/apt/lists/*_* && \\  \ncurl -sSL -o /opt/rattic.tar.gz \"${RATTIC_URL}\" && \\  \nmkdir -p /opt/rattic && \\  \ntar xzCf /opt/rattic /opt/rattic.tar.gz --strip-components=1 && \\  \nrm -f /opt/rattic.tar.gz && \\  \ncd /opt/rattic && \\  \nmkdir static && \\  \npip install -r requirements-mysql.txt && \\  \npip install gunicorn && \\  \ncd /usr/local/lib/python2.7/dist-packages && \\  \nrm -rf djcelery/migrations kombu/transport/django/migrations && \\  \nmv djcelery/south_migrations djcelery/migrations && \\  \nmv kombu/transport/django/south_migrations kombu/transport/django/migrations  \n  \nCOPY minimal.cfg /opt/rattic/conf/local.cfg  \nRUN cd /opt/rattic && \\  \n./manage.py collectstatic -c --noinput && \\  \n./manage.py compilemessages  \n  \nCOPY entrypoint.sh /  \n  \nVOLUME /opt/rattic/static  \nEXPOSE 8000  \nENTRYPOINT [\"/entrypoint.sh\"]  \nCMD [\"serve\"]  \n\n"
    },
    {
        "filename": "6f336f82569487f5a8002764c7bf4cb6402e4b30.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile that creates a container for running Gate One.\n# Inside the container Gate One will run as the 'gateone'\n# user and will listen on port 8000.  docker run example:\n#\n#   docker run -t --name=gateone -p 443:8000 gateone\n#\n# That would run Gate One; accessible via port 443 from\n# outside the container.  It will also run in the foreground\n# with pretty-printed log output (so you can see what's\n# going on).  To run Gate One in the background:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone\n#\n# You could then stop or start the container like so:\n#\n#   docker stop gateone\n#   docker start gateone\n#\n# The script that starts Gate One inside of the container\n# performs a 'git pull' and will automatically install the\n# latest code whenever it runs.  To disable this feature\n# simply pass --noupdate when running the container:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone --noupdate\n#\n# Note that merely stopping & starting the container doesn't\n# pull in updates.  That will only happen if you 'docker rm'\n# the container and start it back up again.\n#\n############################################################\n\nFROM ubuntu:16.04\nMAINTAINER Dan McDougall <daniel.mcdougall@liftoffsoftware.com>\n\nENV GATEONE_REPO_URL https://github.com/liftoff/GateOne.git\n\n# Ensure everything is up-to-date\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update --fix-missing && apt-get -y upgrade\n\n# Install dependencies\nRUN apt-get -y install python-pip python-pil python-setuptools python-mutagen python-pam python-dev dtach git telnet openssh-client && \\\n    apt-get -y clean && \\\n    apt-get -q -y autoremove\nRUN pip install --upgrade pip\nCOPY requirements.txt /tmp/requirements.txt\nRUN pip install -r /tmp/requirements.txt\n\n# Create the necessary directories, clone the repo, and install everything\nRUN mkdir -p /gateone/logs && \\\n    mkdir -p /gateone/users && \\\n    mkdir -p /etc/gateone/conf.d && \\\n    mkdir -p /etc/gateone/ssl && \\\n    cd /gateone && \\\n    git clone $GATEONE_REPO_URL && \\\n    cd GateOne && \\\n    python setup.py install && \\\n    cp docker/update_and_run_gateone.py /usr/local/bin/update_and_run_gateone && \\\n    cp docker/60docker.conf /etc/gateone/conf.d/60docker.conf\n\n# This ensures our configuration files/dirs are created:\nRUN /usr/local/bin/gateone --configure \\\n    --log_file_prefix=\"/gateone/logs/gateone.log\"\n\n# Remove the auto-generated key/certificate so that a new one gets created the\n# first time the container is started:\nRUN rm -f /etc/gateone/ssl/key.pem && \\\n    rm -f /etc/gateone/ssl/certificate.pem\n# (We don't want everyone using the same SSL key/certificate)\n\nEXPOSE 8088\n\nENTRYPOINT [\"/usr/local/bin/update_and_run_gateone\", \"--log_file_prefix=/gateone/logs/gateone.log\"]\n"
    },
    {
        "filename": "6fe1ee98f43eb693cfd647f3c9e237cfdb08fde1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.15.1\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n\tca-certificates \\\n\tcurl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "705fb90c0e0006a9287480fb403ce30d0d10d2ad.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#Hitcon 2017 web babyfirst_revenge\n#\n#mysql root\u5bc6\u7801 : Pr0ph3t\n#\u5176\u4f59\u73af\u5883\u4e0e\u9898\u76ee\u65e0\u5f02\n#\u5982\u8981\u4fee\u6539root\u4e0e\u9898\u76ee\u7528\u6237\u5bc6\u7801\u8bf7\u7528 [docker exec -it '\u4f60\u7684\u5e94\u7528\u540d\u79f0' /bin/bash] \u8fdb\u5165\u5bb9\u5668\u4fee\u6539\n#usage : \n#    \u8fdb\u5165Dockerfile\u76ee\u5f55\n#    [docker build -t '\u81ea\u5b9a\u4e49\u955c\u50cf\u540d\u5b57' . ] //\u6700\u540e\u7684.\u522b\u5c11\u4e86\n#    [docker run -id --name '\u4f60\u7684\u5e94\u7528\u540d\u79f0' -p \u5916\u90e8\u7aef\u53e3:80 -m '\u5185\u5b58\u9650\u5236 \u59821g\u3001500m' '\u4f60\u7684\u81ea\u5b9a\u4e49\u955c\u50cf\u540d\u79f0' /run.sh]\n\n#\u6574\u5408lamp\nFROM pr0ph3t/lamp\nMAINTAINER Pr0ph3t <1415314884@qq.com>\n\n#Install crontab\n\nRUN apt-get update -y && apt-get install cron -y && apt-get install curl -y && apt-get install python -y\n\n#Init crontab , \u6bcf\u5929\u51cc\u66684\u70b9\u6e05\u7a7asandbox\u6587\u4ef6\u5939\n\nRUN echo '0 4 * * * root rm -rf /www/sandbox/*' >> /etc/crontab\n\n#Init challenge\n\nADD index.php /var/www/html/\nADD init.sql /var/www/\nRUN rm -rf /var/www/html/index.html\nRUN mkdir /www\nRUN mkdir /www/sandbox\nRUN chown www-data /www/sandbox\nRUN chmod -R 775 /www/sandbox\nRUN useradd -m -s /sbin/nologin fl4444g\nRUN echo 'Flag is in the MySQL database\\nfl4444g / SugZXUtgeJ52_Bvr' > /home/fl4444g/README.txt\n\n#Create run.sh\nADD run.sh /\nRUN chmod +x /run.sh\n\n\n#Expose http service\nEXPOSE 80\nCMD [\"bash -x /run.sh\"]"
    },
    {
        "filename": "708eb516f354e70a0e13f3f37a005dac6a6d6cae.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "###############################################################################\n# Dockerfile for https://github.com/ppwwyyxx/speaker-recognition\n# -----------------------------------------------------------------------------\n# Docker provides a way to run applications securely isolated in a container, \n# packaged with all its dependencies and libraries.\n#\n# This Dockerfile produces a docker image, from which containers can be created\n# * An image is a lightweight, stand-alone, executable package that includes \n#   everything needed to run a piece of software, including the code, a runtime,\n#   libraries, environment variables, and config files.\n# * A container is a runtime instance of an image \u2013 what the image becomes in\n#   memory when actually executed. It runs completely isolated from the host \n#   environment by default, only accessing host files and ports if configured \n#   to do so.\n#\n# Containers run apps natively on the host machine\u2019s kernel. \n# They have better performance than virtual machines that only get virtual\n# access to host resources through a hypervisor. \n# Images or containers can easily be exchanged and many users publish images in\n# the docker hub (https://hub.docker.com/).  Docker further enables upscaling\n# of solutions from single workstation to server farms through docker swarms.\n#\n#      Read more here: https://docs.docker.com/\n# Install docker here: https://docs.docker.com/engine/installation/linux/\n#\n# Quick start commands (as root)\n# -----------------------------------------------------------------------------\n# Pull an image from the docker hub\n# > docker pull <image name>\n# \n# Build this Dockerfile (place it in an empty folder and cd to it): \n# > docker build -f Dockerfile -t speaker-recognition .\n#\n# Instantiate a container from an image\n# > docker run -ti speaker-recognition\n# To give container access to host files during development:\n# > docker run --name speaker-recognitionInstance -ti -v /:/host speaker-recognition\n#\n# Run a stopped container\n# > docker start -ai speaker-recognitionInstance\n# \n# Run the speaker_recognition.py directly thorough the configured entry point\n# > docker run -v local_path:remote_path speaker-recognition\n#\n# List information\n# > docker images                 All docker images\n# > docker ps -a                  All docker containers (running or not: -a)\n#\n###############################################################################\n# BASE IMAGE\nFROM ubuntu\nENV DEBIAN_FRONTEND=noninteractive\n\n# Prepare package management\n###############################################################################\nRUN apt-get update && \\\n    apt-get install -y nano sudo tzdata apt-utils && \\\n    apt-get -y dist-upgrade\n\n\n# Set timezone\n# https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806\n###############################################################################\nRUN rm /etc/localtime && echo \"Australia/Sydney\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n\n# Create the GUI User\n###############################################################################\n# Then you can run a docker container with access to the GUI on your desktop:\n# > docker run -ti -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -u guiuser <image>\n# -----------------------------------------------------------------------------\nENV USERNAME guiuser\nRUN useradd -m $USERNAME && \\\n    echo \"$USERNAME:$USERNAME\" | chpasswd && \\\n    usermod --shell /bin/bash $USERNAME && \\\n    usermod -aG sudo $USERNAME && \\\n    echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/$USERNAME && \\\n    chmod 0440 /etc/sudoers.d/$USERNAME && \\\n    # Replace 1000 with your user/group id\n    usermod  --uid 1000 $USERNAME && \\\n    groupmod --gid 1000 $USERNAME\n\n\n# Python 2\n###############################################################################\nRUN apt-get update && apt-get install -y python python-pip && \\\n    pip2 list --outdated | cut -d' ' -f1 | xargs -n 1 pip2 install --upgrade\n\n\n# Base Dependencies\n###############################################################################\nRUN apt-get install -y portaudio19-dev libopenblas-base libopenblas-dev pkg-config git-core cmake python-dev liblapack-dev libatlas-base-dev libblitz0-dev libboost-all-dev libhdf5-serial-dev libqt4-dev libsvm-dev libvlfeat-dev  python-nose python-setuptools python-imaging build-essential libmatio-dev python-sphinx python-matplotlib python-scipy\n# additional dependencies for bob\nRUN apt-get install -y libfftw3-dev libtiff5-dev libgif-dev libpng-dev libjpeg-dev\n\n# Spear\n# https://gitlab.idiap.ch/bob/bob/wikis/Dependencies\n# Takes a very long time to install python packages because compilation is happening in the background\n###############################################################################\nRUN pip2 install scipy scikit-learn scikits.talkbox numpy pyside pyssp PyAudio argparse h5py\nRUN pip2 install bob.extension\nRUN pip2 install bob.blitz\nRUN pip2 install bob.core\nRUN pip2 install bob.io.base\nRUN pip2 install bob.bio.spear\nRUN pip2 install bob.sp\n\n\n# Realtime Speaker Recognition\n# https://github.com/ppwwyyxx/speaker-recognition\n###############################################################################\nRUN cd ~/ && \\\n    git clone https://github.com/ppwwyyxx/speaker-recognition.git && \\\n    cd ~/speaker-recognition && \\\n    make -C src/gmm\n\n\n# Clean up\n###############################################################################\nRUN apt-get clean &&apt-get autoremove -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Entrypoint - so `docker run speaker-recognition` will automatically run the python main\n###############################################################################\nENTRYPOINT [\"/usr/bin/python\", \"/root/speaker-recognition/src/speaker-recognition.py\"]\n"
    },
    {
        "filename": "7170a1a00c5e8810b8461e379b4aedaa8612a133.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile\n#\n# @author zhibiao.pan@bitmain.com, yihao.peng@bitmain.com\n# @copyright btc.com\n# @since 2016-08-01\n#\n#\nFROM phusion/baseimage:0.9.22\nMAINTAINER PanZhibiao <zhibiao.pan@bitmain.com>\n\nENV HOME /root\nENV TERM xterm\nCMD [\"/sbin/my_init\"]\n\n# use aliyun source\nADD sources-aliyun.com.list /etc/apt/sources.list\n\nRUN apt-get update\nRUN apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\nRUN apt-get install -y libboost-all-dev libzmq3-dev curl wget net-tools\n\n# install libdb for wallet\nRUN apt-get install -y software-properties-common \\\n  && add-apt-repository -y ppa:bitcoin/bitcoin \\\n  && apt-get -y update \\\n  && apt-get install -y libdb4.8-dev libdb4.8++-dev\n\n# build bitcoind\nRUN mkdir ~/source\nRUN cd ~/source && wget https://github.com/UnitedBitcoin/UnitedBitcoin/archive/v1.0.6.0.tar.gz\nRUN cd ~/source \\\n  && tar zxf v1.0.6.0.tar.gz && cd UnitedBitcoin-1.0.6.0 \\\n  && ./autogen.sh \\\n  && ./configure --disable-bench --disable-tests \\\n  && make && make install\n\n# make some alias\nRUN ln -s ubcd /usr/local/bin/bitcoind \\\n  && ln -s ubc-cli /usr/local/bin/bitcoin-cli \\\n  && ln -s ubc-tx /usr/local/bin/bitcoin-tx \\\n  && ln -s /root/.bitcoin /root/.unitedbitcoin\n\n# mkdir bitcoind data dir\nRUN mkdir -p /root/.bitcoin\nRUN mkdir -p /root/scripts\n\n# scripts\nADD opsgenie-monitor-bitcoind.sh   /root/scripts/opsgenie-monitor-bitcoind.sh\n\n# crontab shell\nADD crontab.txt /etc/cron.d/bitcoind\n\n# logrotate\nADD logrotate-bitcoind /etc/logrotate.d/bitcoind\n\n#\n# services\n#\n# service for mainnet\nRUN mkdir    /etc/service/bitcoind\nADD run      /etc/service/bitcoind/run\nRUN chmod +x /etc/service/bitcoind/run\n# service for testnet3\n#RUN mkdir        /etc/service/bitcoind_testnet3\n#ADD run_testnet3 /etc/service/bitcoind_testnet3/run\n#RUN chmod +x     /etc/service/bitcoind_testnet3/run\n\n# remove source & build files\nRUN rm -rf ~/source\n\n# clean\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "719ec9a2f395e379184dba439a135a728b547f29.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM lablup/common-tensorflow:1.7-py36-cuda9 as tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        ca-certificates \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        gcc g++ make \\\n        xz-utils \\\n\tlibsqlite3-dev \\\n\t&& \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/\n\n#install Python 3\nRUN curl https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz -o /opt/python.tar.xz && \\\n      cd /opt && tar xvf python.tar.xz && \\\n      cd /opt/*/ && ./configure && \\\n      make && make install && \\\n      ln -s -f /usr/local/bin/python3.6 /usr/bin/python\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.4\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.4.1 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\n# we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir pillow && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir tensorflow-hub && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/local/bin/python3 2\n\n# Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.7 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile\n"
    },
    {
        "filename": "71a52059dec18d10d910354d2fce14c34885c2c3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER CodaLab Worksheets <codalab.worksheets@gmail.com>\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update; apt-get install -y \\\n    build-essential \\\n    git \\\n    libfuse-dev \\\n    libjpeg-dev \\\n    libmysqlclient-dev \\\n    mysql-client \\\n    python-dev \\\n    python-pip \\\n    python-software-properties \\\n    python-virtualenv \\\n    software-properties-common \\\n    zip;\n\n# Install dependencies\nRUN pip install --upgrade pip MySQL-python\nCOPY docker/compose_files/files/wait-for-it.sh /opt/wait-for-it.sh\nRUN mkdir /opt/codalab-worksheets\nCOPY worker /opt/codalab-worksheets/worker\nCOPY requirements.txt /opt/codalab-worksheets\nCOPY requirements-server.txt /opt/codalab-worksheets\nCOPY setup.sh /opt/codalab-worksheets\nRUN cd /opt/codalab-worksheets && ./setup.sh server\n\n# Install code\nCOPY . /opt/codalab-worksheets\n\nRUN pip install -e /opt/codalab-worksheets/worker/\nRUN pip install -e /opt/codalab-worksheets/\n\nENV PATH=\"/opt/codalab-worksheets/codalab/bin:${PATH}\"\nENV CODALAB_HOME=/home/codalab\n\nEXPOSE 2900\n\nENTRYPOINT [\"/opt/codalab-worksheets/codalab/bin/cl\"]\n"
    },
    {
        "filename": "71ce5f9081bfe7e9160956357c5f527a0a9f4f8b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-006,DOCKER-012",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,miss-specific-tags,miss-specific-tags,miss-specific-tags,root-privilege-user",
        "num": 6,
        "text": "FROM golang:latest AS build-env\nADD ./  /go/src/github.com/iyacontrol/prom2click\nWORKDIR /go/src/github.com/iyacontrol/prom2click\nRUN CGO_ENABLED=0  go build -ldflags \"-X main.GitCommit=${GIT_COMMIT}${GIT_DIRTY} -X main.VersionPrerelease=DEV\" -o bin/prom2click\n\nFROM alpine\nRUN apk add -U tzdata\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime\nCOPY --from=build-env /go/src/github.com/iyacontrol/bin/prom2click /usr/local/bin/prom2click\nRUN chmod +x /usr/local/bin/prom2click\nCMD [\"prom2click\"]"
    },
    {
        "filename": "71db66f9d46a1f1bc4e863f621ab876ceb998908.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Facebook FAIR SentEval\n# A python tool for evaluating the quality of sentence embeddings.\n#\n# @see https://github.com/facebookresearch/SentEval\n#\n\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\nMAINTAINER Loreto Parisi <loretoparisi@gmail.com>\n\n# Install base packages\nRUN apt-get update && apt-get install -y \\\n  git \\\n  software-properties-common \\\n  python-dev \\\n  python-pip \\\n  cabextract \\\n  sudo\n\n# install dependencies\nRUN pip install numpy scipy scikit-learn sklearn\n\nWORKDIR /root/\n\n# SentEval\nRUN git clone https://github.com/facebookresearch/SentEval.git\n\n# download dataset and models\nRUN \\\n    cd SentEval/data && \\\n    ./get_transfer_data.bash && \\\n    cd .. && \\\n    curl -Lo examples/infersent.allnli.pickle https://s3.amazonaws.com/senteval/infersent/infersent.allnli.pickle && \\\n    curl -Lo examples/infersent.snli.pickle https://s3.amazonaws.com/senteval/infersent/infersent.snli.pickle && \\\n    cd examples/ && \\\n    ./get_glove.bash\n\n# test gloVe\nRUN python bow.py\n\n# test infersent tasks\nRUN python infersent.py\n\n# test nvidia docker\nCMD nvidia-smi -q\n\n# defaults command\nCMD [\"bash\"]"
    },
    {
        "filename": "72537c5ebb1ae3cf5accd5a1827240809e93734c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build DELLY workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to Ubuntu\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Ivica Letunic <letunic@biobyte.de>\n\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time python python-dev python-distribute python-pip r-base r-base-dev tabix cython sudo \\\n    && pip install -i https://pypi.python.org/simple/ --upgrade pip && hash -r \\\n    && pip install pybedtools==0.7.7 numpy==1.11.0 docopt==0.6.2 PyVCF==0.6.8 wheel==0.29.0 pandas==0.18.1 pysam==0.9.0 \\\n    && wget https://github.com/samtools/samtools/releases/download/1.2/samtools-1.2.tar.bz2 -O - |tar -xj -C /tmp/ && cd /tmp/samtools-1.2 && make && make install\n#RUN echo \"source(\\\"http://bioconductor.org/biocLite.R\\\")\" > /tmp/dnacopy; echo \"biocLite()\" >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\nCOPY scripts/* /usr/bin/\nRUN for i in cleanup.sh cov cov_plot.pl cov_v0.5.6_linux_x86_64bit cov_v0.5.6_parallel_linux_x86_64bit delly delly_pcawg_qc_json.py delly_pcawg_timing_json.py delly_pe_dump.sh delly_prepare_uploader.sh DellySomaticFreqFilter.py delly_v0.6.3_parallel_linux_x86_64bit delly_v0.6.6_parallel_linux_x86_64bit dellyVcf2Tsv.py vcfcombine vcf_index.sh vcf-sort; do chmod a+rx /usr/bin/$i; done;\nRUN echo 'install.packages(\"/usr/bin/DNAcopy_1.38.1.tar.gz\")' >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\n\nENV GOSU_VERSION 1.10\nRUN set -x \\\n    && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n    && dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\" \\\n    && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" \\\n    && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true \\\n    && chown root:users /usr/local/bin/gosu \\\n    && chmod +s /usr/local/bin/gosu\nADD scripts/start.sh /start.sh\nRUN chmod a+rx /start.sh\n\n# copy over the workflow src contents\nCOPY DELLY /home/seqware/DELLY\nRUN chown -R seqware /home/seqware/DELLY\nUSER seqware\nWORKDIR /home/seqware/DELLY/\n\n# add godaddy cert bridge\n# see http://drcs.ca/blog/adding-godaddy-intermediate-certificates-to-java-jdk/ and\n# http://tozny.com/blog/godaddys-ssl-certs-dont-work-in-java-the-right-solution/ for more information on this\nRUN wget https://certs.godaddy.com/repository/gdroot-g2_cross.crt && \\\n    keytool -import -alias cross -file gdroot-g2_cross.crt -trustcacerts -keystore /usr/lib/jvm/java-7-oracle-cloudera/jre/lib/security/cacerts  -storepass changeit\n\n# build the workflow\nRUN mvn -B clean install\n\n# configure for no retries and memory for SeqWare whitestar\nRUN sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\nVOLUME /output /datastore /home/seqware\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "732d45409cc901b91e07c22e57fa7c5643b61e30.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:i386-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.24\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "735ee77e8654a47e56652a7f598cee1ca7b8ec64.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Simple Couchbase Server instance\n#\n# Install Couchbase Server Community Edition (version as per CB_VERSION below)\n#\n# VERSION 1.1.0\n\nFROM ubuntu\nMAINTAINER Brian Shumate, brian@brianshumate.com\n\nENV CB_VERSION 4.5.0\nENV CB_BASE_URL http://packages.couchbase.com/releases\nENV CB_PACKAGE couchbase-server-community_${CB_VERSION}-ubuntu12.04_amd64.deb\nENV CB_DOWNLOAD_URL ${CB_BASE_URL}/${CB_VERSION}/${CB_PACKAGE}\nENV CB_LOCAL_PATH /tmp/${CB_PACKAGE}\n\n# Limits\nRUN sed -i.bak '/\\# End of file/ i\\\\# Following 4 lines added by docker-couchbase-server' /etc/security/limits.conf\nRUN sed -i.bak '/\\# End of file/ i\\\\*                hard    memlock          unlimited' /etc/security/limits.conf\nRUN sed -i.bak '/\\# End of file/ i\\\\*                soft    memlock         unlimited\\n' /etc/security/limits.conf\nRUN sed -i.bak '/\\# End of file/ i\\\\*                hard    nofile          65536' /etc/security/limits.conf\nRUN sed -i.bak '/\\# End of file/ i\\\\*                soft    nofile          65536\\n' /etc/security/limits.conf\nRUN sed -i.bak '/\\# end of pam-auth-update config/ i\\\\# Following line was added by docker-couchbase-server' /etc/pam.d/common-session\nRUN sed -i.bak '/\\# end of pam-auth-update config/ i\\session\trequired        pam_limits.so\\n' /etc/pam.d/common-session\n\n# Packages\nRUN apt-get update && apt-get install -y \\\n    git \\\n    python\n#ADD http://cbfs-ext.hq.couchbase.com/dustin/software/confsed/confsed.lin64.gz /usr/local/sbin/confsed.gz\n#RUN gzip -d /usr/local/sbin/confsed.gz\n#RUN chmod 755 /usr/local/sbin/confsed\n\n# Locale and supporting utility commands\nRUN locale-gen en_US en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nRUN echo 'root:couchbase' | chpasswd\nRUN mkdir -p /var/run/sshd\n\n# Download Couchbase Server package to /tmp & install\nADD $CB_DOWNLOAD_URL $CB_LOCAL_PATH\nRUN dpkg -i $CB_LOCAL_PATH\n\n# Open the OpenSSH server and Couchbase Server ports\nEXPOSE 22 4369 8091 8092 11209 11210 11211\n\n# couchbase-script approach (thanks for the ideas Dustin!)\nVOLUME /home/couchbase-server:/opt/couchbase/var\nRUN rm -r /opt/couchbase/var/lib\nADD bin/couchbase-script /usr/local/sbin/couchbase\nRUN chmod 755 /usr/local/sbin/couchbase\nCMD /usr/local/sbin/couchbase\n"
    },
    {
        "filename": "738920758ab8a150917728af3ac93ef6cf578b17.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# In order to support graphical interfaces,\n# this should be run with \n# docker run -it --rm \\\n#     -e DISPLAY=$DISPLAY \\\n#     -v /tmp/.X11-unix:/tmp/.X11-unix \\  \n#     ros-indigo-full-catkin <cmd> \n#\n# The -e and -v commands are needed to display on the host X server.\n# For hardware support, you will also need:\n#  --privileged   (to access the graphics card) \n#  It may also be required to call\n#  $ xhost +\n#  before running the container.\n\nFROM jenniferbuehler/ros-indigo-full-catkin \n\nMAINTAINER Jennifer Buehler\n\n# Install system essentials\nRUN apt-get update && apt-get install -y \\\n    cmake \\\n    libsoqt4-dev \\\n    libcoin80-dev \\\n    libqt4-dev \\\n    libblas-dev \\\n    liblapack-dev \\\n    libqhull-dev \\\n    sudo \\\n    vim \\\n    && rm -rf /var/lib/apt/lists/*\n\n# need g++ for compiling with cmake even if gcc\n# is already installed\nRUN apt-get update && apt-get install -y g++ \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install required ROS dependencies\nRUN apt-get update && apt-get install -y \\\n    ros-indigo-eigen-conversions \\\n    ros-indigo-household-objects-database \\\n    ros-indigo-household-objects-database-msgs  \\\n    ros-indigo-manipulation-msgs \\\n    ros-indigo-object-recognition-msgs \\\n    ros-indigo-roslint \\\n    && rm -rf /var/lib/apt/lists/\n\nCOPY graspit_tools /catkin_ws/src/graspit_tools\nCOPY grasp_planning_graspit_ros /catkin_ws/src/grasp_planning_graspit_ros\nCOPY grasp_planning_graspit /catkin_ws/src/grasp_planning_graspit\nCOPY grasp_planning_graspit_msgs /catkin_ws/src/grasp_planning_graspit_msgs\nCOPY urdf2graspit /catkin_ws/src/urdf2graspit\nCOPY jaco_graspit_sample /catkin_ws/src/jaco_graspit_sample\n\n# Build\nRUN bin/bash -c \"source /.bashrc \\\n    && cd /catkin_ws \\\n    && catkin_make \\\n    && catkin_make install\"\n\n# set GRASPIT environment to /graspit_home\nRUN bin/bash -c \"mkdir -p /graspit_home/models/robots\"\nRUN bin/bash -c \"mkdir -p /graspit_home/models/objects\"\nRUN bin/bash -c \"mkdir -p /graspit_home/worlds\"\nENV GRASPIT /graspit_home\n\nRUN bin/bash -c \"source .bashrc\"\n\nCMD [\"bash\",\"-l\"]\n"
    },
    {
        "filename": "7401fc55498b184f34843abcc6bf8a972ef6c0d8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER GreenPioneer\n# Install Utilities\nRUN apt-get update -q\n# RUN apt-get install -yqq wget aptitude htop vim git traceroute dnsutils curl ssh sudo tree tcpdump nano psmisc gcc make build-essential libfreetype6 libfontconfig libkrb5-dev\nRUN apt-get install -yqq wget vim git curl ssh build-essential\n\n# Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\nRUN sudo apt-get install -yq nodejs\n\n# Install Meanstackjs Prerequisites\nRUN npm install --quiet -g mocha pm2 mongo-express nodemon node-inspector\n\nRUN mkdir /opt/meanstackjs\nWORKDIR /opt/meanstackjs\n\n# Copies the local package.json file to the container\n# and utilities docker container cache to not needing to rebuild\n# and install node_modules/ everytime we build the docker, but only\n# when the local package.json file changes.\n# Install npm packages\nADD package.json /opt/meanstackjs/package.json\nRUN npm install --quiet\n\n# Install bower packages\n# ADD bower.json /opt/meanstackjs/bower.json\n# ADD .bowerrc /opt/meanstackjs/.bowerrc\n# RUN bower install --quiet --allow-root --config.interactive=false\n\n# Share local directory on the docker container\nADD . /opt/meanstackjs\n\n# Machine cleanup\nRUN npm cache clean\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set development environment as default\nENV NODE_ENV development\n\n# Ports generic\nEXPOSE 80:80\nEXPOSE 443:443\n\n# Port 3000 for Meanstackjs server\nEXPOSE 3000:3000\n\n# Port 5858 for node debug\nEXPOSE 5858:5858\n\n# Port 35729 for livereload\nEXPOSE 35729:35729\n\n# Run Meanstackjs server\nCMD [\"npm\", \"start\"]\n"
    },
    {
        "filename": "7417e2bbdc5878530f8fc65361595ec740d1c55c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\n    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,\n    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346\nRUN sed -i \"s/httpredir.debian.org/debian.uchicago.edu/\" /etc/apt/sources.list && \\\n    apt-get update && apt-get install -y build-essential python-pip apt-utils git cmake && \\\n    pip install pandas numpy scipy && \\\n    cd /usr/local/src && \\\n    pip install tensorflow && \\\n\n    # Microsoft's LightGBM\n    cd /usr/local/src && git clone --recursive --depth 1 https://github.com/Microsoft/LightGBM && \\\n    cd LightGBM && mkdir build && cd build && cmake .. && make -j $(nproc) && \\\n    cd /usr/local/src/LightGBM/python-package && python setup.py install && \\\n\n    # XGBoost\n    cd /usr/local/src && mkdir xgboost && cd xgboost && \\\n    git clone --depth 1 --recursive https://github.com/dmlc/xgboost.git && cd xgboost && \\\n    make && cd python-package && python setup.py install && \\\n\n    apt-get autoremove -y && apt-get clean\n\n\nRUN pip install dill h5py scikit-learn scipy python-dateutil pandas pathos keras coveralls nose\n\n# To update this image and upload it:\n# docker build -t testdocker .\n# docker tag testdocker climbsrocks/quantile_ml_tests:0.0.2\n# docker push climbsrocks/quantile_ml_tests:0.0.2\n"
    },
    {
        "filename": "7483d9031ad1f787bd2c07734a8662880bcf2f55.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM bbvainnotech/ubuntu-base-os:latest\nMAINTAINER BBVA Innovation <eurocloud-oneteam.group@bbva.com>\n\nENV OPENSTACK_VERSION=mitaka \\\n    PBR=9.0.1 \\\n    CLIENT=1.22.0\n\n# Install requriments and the main packages\n\nRUN    curl -fSL https://github.com/openstack/keystone/archive/${PBR}.zip -o keystone-${PBR}.zip \\\n    && unzip keystone-${PBR}.zip \\\n    && cd keystone-${PBR} \\\n    && pip install -r requirements.txt \\\n    && PBR_VERSION=${PBR}  pip install . \\\n    && pip install uwsgi \\\n    && cp -r etc /etc/keystone \\\n    && mv /etc/keystone/keystone.conf.sample /etc/keystone/keystone.conf \\\n    && pip install git+https://github.com/openstack/python-openstackclient.git@stable/${OPENSTACK_VERSION} \\\n    && pip install os-client-config==${CLIENT} \\\n    && cd - \\\n    && rm -rf keystone-${PBR}*\n\nADD     data /\n\nRUN     chown root:root /bootstrap/*.sh && chmod a+x /bootstrap/*.sh\n\nENTRYPOINT  [\"/bootstrap/bootstrap.sh\"]\nEXPOSE      5000 35357\n\n"
    },
    {
        "filename": "754d9fffd4c6dd8d87fd7204d9937a3cac589e5c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "##\n# ojo-bot base image stack using conda\n# Target is Heroku using Docker [Everything has to be built in /app ]\n#\n# Pat Cappelaere Vightel\n# pat@cappelaere.com\n#\n# GDAL (with-python), PROJ, GEOS\n# Node.js 4.2.3\n# \n\n# Inherit from Heroku's stack\nFROM heroku/cedar:14\n\nMAINTAINER Pat Cappelaere <pat@cappelaere.com>\n\n# Install apt dependencies\nRUN apt-get update -qq && apt-get install -y \\\n    build-essential \\\n    curl wget git\n\nRUN mkdir /app /app/user\nWORKDIR /app/user\n\nENV MINICONDA\t/app/user/miniconda\n\n# Set up Miniconda environment for python2\nENV PATH ${MINICONDA}/bin:$PATH\n\nRUN curl https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -s -o miniconda.sh && \\\n    bash miniconda.sh -p ${MINICONDA} -b\n\nRUN conda update --yes conda && conda install pip --yes\nRUN conda install \\\n  netcdf4 libnetcdf proj4 pyproj geos hdf4 hdf5 h5py lxml gdal libgdal \\\n  numpy scipy matplotlib ipython pillow\nRUN pip install boto boto3 pytrmm python-dateutil\n\n# Install potrace\nRUN mkdir ${MINICONDA}/potrace && cd ${MINICONDA}/potrace && wget http://potrace.sourceforge.net/download/1.13/potrace-1.13.tar.gz && tar -zxf potrace-1.13.tar.gz\nRUN cd ${MINICONDA}/potrace/potrace-1.13 && ./configure --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/potrace\n\n# Install grib_api\nRUN mkdir ${MINICONDA}/grib && cd ${MINICONDA}/grib && wget https://software.ecmwf.int/wiki/download/attachments/3473437/grib_api-1.14.4-Source.tar.gz && tar -xzvf grib_api-1.14.4-Source.tar.gz\nRUN cd ${MINICONDA}/grib/grib_api-1.14.4-Source && ./configure --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/grib\n\nENV GRIBAPI_DIR ${MINICONDA}\nRUN pip install https://pypi.python.org/packages/source/p/pygrib/pygrib-2.0.1.tar.gz\nRUN pip install boto3\nRUN pip install PyYAML\n\n#\n# Install node\n#\nENV NODE_ENGINE \t4.2.6\nRUN mkdir ${MINICONDA}/node && cd ${MINICONDA}/node && wget https://nodejs.org/dist/v${NODE_ENGINE}/node-v${NODE_ENGINE}.tar.gz && tar -zxf node-v${NODE_ENGINE}.tar.gz\nRUN cd ${MINICONDA}/node/node-v${NODE_ENGINE} && ./configure --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/node\n\n# Topojson\nRUN npm -g install topojson\n\n# To find EPSG csv files\nENV GDAL_DATA ${MINICONDA}/share/gdal\n\n"
    },
    {
        "filename": "756edb873017539caea48d937d8b00eb90df6ab4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\nMAINTAINER \"Max Woolf\"\n\nRUN apt-get update && apt-get install -y wget ca-certificates \\\n    git curl vim python3-dev python3-pip libopencv-dev python-opencv \\\n    libfreetype6-dev libpng12-dev libhdf5-dev openmpi-bin \\\n    pkg-config zip g++ zlib1g-dev unzip build-essential \\\n    openjdk-8-jdk openjdk-8-jre-headless python-dev\n\nRUN pip3 install --upgrade pip\nRUN pip3 --no-cache-dir install numpy pandas sklearn matplotlib seaborn jupyter pyyaml h5py ipykernel\n\n# Compile TensorFlow w/ CPU instructions\n# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.devel\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\nENV BAZEL_VERSION 0.5.4\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\nRUN git clone https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout r1.4\nWORKDIR /tensorflow\n\nENV CI_BUILD_PYTHON python3\n\n# Must set bazel commands:\n# https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions\n\nRUN tensorflow/tools/ci_build/builds/configured CPU \\\n    bazel build -c opt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.1 --copt=-msse4.2 \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n\n# Keras\nRUN pip3 install git+https://github.com/fchollet/keras.git\n\n# CNTK\nRUN pip3 install https://cntk.ai/PythonWheel/CPU-Only/cntk-2.2-cp35-cp35m-linux_x86_64.whl\n\n# textgenrnn (must be installed after Keras)\n# RUN pip3 --no-cache-dir install textgenrnn reactionrnn\n\n# Jupyter and Tensorboard ports\nEXPOSE 8888 6006\n\n# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/\nCOPY jupyter_notebook_config.py /root/.jupyter/\nCOPY run_jupyter.sh /\n\n# Create folder for Keras i/o\nWORKDIR /keras\nVOLUME /keras\n\n# Set CNTK backend for Keras\nENV KERAS_BACKEND=cntk\n\n# Set locale to UTF-8 for text:\n# https://askubuntu.com/a/601498\nRUN apt-get clean && apt-get -y update && apt-get install -y locales && locale-gen en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'"
    },
    {
        "filename": "75731387f2d1752fb6e4822f593c6a8b2a11bead.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nRUN apt-get update\nRUN apt-get install -y \\\n    apt-utils \\\n    vim \\\n    curl \\\n    apache2 \\\n    apache2-utils \\\n    git \\\n    python \\\n    python-pip \\\n    libapache2-mod-wsgi\n\nRUN pip install --upgrade pip\nRUN pip install \\\n    'django==1.4.22' \\\n    git+https://github.com/Datadog/dd-trace-py.git@django-legacy-support\n\nRUN ln -sf /proc/self/fd/1 /var/log/apache2/access.log && \\\n    ln -sf /proc/self/fd/1 /var/log/apache2/error.log\n\nADD ./wsgi_site.conf /etc/apache2/sites-available/000-default.conf\n\nWORKDIR /var/www/html/app\n\nEXPOSE 80\nCMD sh -c \"python manage.py syncdb --noinput; apache2ctl -D FOREGROUND\"\n"
    },
    {
        "filename": "75ddd32dd69b11683621e276fd988d0e5880e734.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Giacomo Vianello <giacomov@stanford.edu>\n\n# Override the default shell (sh) with bash\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# Update repositories and install needed packages\n# I use one long line so that I can remove all .deb files at the end\n# before Docker writes out this layer\n\nRUN apt-get update && apt-get install -y python2.7 python2.7-dev python-dev wget python-pip git python-tk libreadline6-dev libncurses5-dev xorg-dev gcc g++ gfortran perl-modules && apt-get clean \n\nRUN mkdir -p /heasoft/src\n\nCOPY heasoft-6.19src.tar.gz /heasoft/src\n\nRUN cd /heasoft && mkdir build && cd src && tar zxvf heasoft-6.19src.tar.gz && cd heasoft-6.19/BUILD_DIR/ && ./configure --prefix=/heasoft/build && make && make install && rm -rf /heasoft/src\n\nRUN pip install virtualenv\n\nRUN apt-get install sudo\n\nWORKDIR /\n"
    },
    {
        "filename": "760f5385a818b97105988cb5970773f1d21db58e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# OS\nFROM ubuntu:16.04\n\nMAINTAINER A. Segura <alberto.segura.delgado@gmail.com>\n\nRUN apt-get update\n\n# Install Git and wget\nRUN apt-get install -y git git-core wget --force-yes\n\n# Install compilers, etc\nRUN apt-get install -y build-essential --force-yes\n\n# Install Redis\nRUN wget http://download.redis.io/redis-stable.tar.gz\nRUN tar xvzf redis-stable.tar.gz\nWORKDIR \"/redis-stable\"\nRUN make\nRUN make install\nRUN cd ..\n\n# You can expose port 6379 from the container to the host\n# EXPOSE 6379\n\n\n# Install Golang\nRUN wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\nRUN tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nRUN mkdir $HOME/gocode\nRUN mkdir $HOME/gocode/src\nRUN echo 'export PATH=$PATH:/usr/local/go/bin' >> /root/.bashrc\nRUN echo 'export GOPATH=$HOME/gocode' >> /root/.bashrc\nRUN echo 'export PATH=$PATH:$HOME/gocode/bin' >> /root/.bashrc\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nENV GOPATH=\"/root/gocode\"\nENV PATH=\"${PATH}:/root/gocode/bin\"\n\nRUN mkdir /root/gocode/src/GoHole\nWORKDIR \"/root/gocode/src/GoHole\"\n\n# Copy GoHole code\nADD . .\n# Compile\nRUN sh install.sh\nRUN make install\n# Prepare config file\nRUN cp config_example.json /root/gohole_config.json\n\nEXPOSE 53 53/udp\nEXPOSE 443 443/udp\n\nRUN chmod +x docker/init.sh\nENTRYPOINT docker/init.sh\n\n"
    },
    {
        "filename": "762d04d26d886cfe5dfc81062af495475f867d5c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM swift:latest\nMAINTAINER Tim Burks <timburks@google.com>\n\nENV PROTOC_VERSION=3.5.1\n\n# Install a few needed packages that aren't in swiftdocker/swift\nRUN apt-get -q update \\\n    && apt-get -q install -y unzip libnghttp2-dev \\\n    && rm -r /var/lib/apt/lists/*\n\n# Install protoc\nRUN curl -O -L https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip \\\n    && unzip protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr \\\n    && rm -rf protoc-${PROTOC_VERSION}-linux-x86_64.zip\n\n# Build and install the swiftgrpc plugin\nRUN git clone https://github.com/grpc/grpc-swift \\\n    && cd grpc-swift \\\n    && make \\\n    && cp protoc-gen-swift protoc-gen-swiftgrpc /usr/bin \\\n    && cd / \\\n    && rm -rf grpc-swift\n"
    },
    {
        "filename": "7655fbde8702360b07cfa627fc99ff4e6ee0a35f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\nMAINTAINER Florin Patan \"florinpatan@gmail.com\"\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list && \\\n    apt-get update -qq && \\\n    echo 'Installing OS dependencies' && \\\n    apt-get install -qq -y --fix-missing sudo software-properties-common git libxext-dev libxrender-dev libxslt1.1 \\\n        libxtst-dev libgtk2.0-0 libcanberra-gtk-module unzip wget && \\\n    echo 'Cleaning up' && \\\n    apt-get clean -qq -y && \\\n    apt-get autoclean -qq -y && \\\n    apt-get autoremove -qq -y &&  \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /tmp/*\n\nRUN echo 'Creating user: developer' && \\\n    mkdir -p /home/developer && \\\n    echo \"developer:x:1000:1000:Developer,,,:/home/developer:/bin/bash\" >> /etc/passwd && \\\n    echo \"developer:x:1000:\" >> /etc/group && \\\n    sudo echo \"developer ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/developer && \\\n    sudo chmod 0440 /etc/sudoers.d/developer && \\\n    sudo chown developer:developer -R /home/developer && \\\n    sudo chown root:root /usr/bin/sudo && \\\n    chmod 4755 /usr/bin/sudo\n\nRUN mkdir -p /home/developer/.IdeaIC2016.2/config/options && \\\n    mkdir -p /home/developer/.IdeaIC2016.2/config/plugins\n\nADD ./jdk.table.xml /home/developer/.IdeaIC2016.2/config/options/jdk.table.xml\nADD ./jdk.table.xml /home/developer/.jdk.table.xml\n\nADD ./run /usr/local/bin/intellij\n\nRUN chmod +x /usr/local/bin/intellij && \\\n    chown developer:developer -R /home/developer/.IdeaIC2016.2\n\nRUN echo 'Downloading IntelliJ IDEA' && \\\n    wget https://download.jetbrains.com/idea/ideaIC-2016.2.tar.gz -O /tmp/intellij.tar.gz -q && \\\n    echo 'Installing IntelliJ IDEA' && \\\n    mkdir -p /opt/intellij && \\\n    tar -xf /tmp/intellij.tar.gz --strip-components=1 -C /opt/intellij && \\\n    rm /tmp/intellij.tar.gz\n\nRUN echo 'Downloading Go 1.6.3' && \\\n    wget https://storage.googleapis.com/golang/go1.6.3.linux-amd64.tar.gz -O /tmp/go.tar.gz -q && \\\n    echo 'Installing Go 1.6.3' && \\\n    sudo tar -zxf /tmp/go.tar.gz -C /usr/local/ && \\\n    rm -f /tmp/go.tar.gz\n\nRUN echo 'Installing Go plugin' && \\\n    wget https://plugins.jetbrains.com/files/5047/27278/Go-0.12.1724.zip -O /home/developer/.IdeaIC2016.2/config/plugins/go.zip -q && \\\n    cd /home/developer/.IdeaIC2016.2/config/plugins/ && \\\n    unzip -q go.zip && \\\n    rm go.zip\n\nRUN echo 'Installing Markdown plugin' && \\\n    wget https://plugins.jetbrains.com/files/7793/25156/markdown-2016.1.20160405.zip -O markdown.zip -q && \\\n    unzip -q markdown.zip && \\\n    rm markdown.zip\n\nRUN sudo chown developer:developer -R /home/developer\n\nUSER developer\nENV HOME /home/developer\nENV GOPATH /home/developer/go\nENV PATH $PATH:/home/developer/go/bin:/usr/local/go/bin\nWORKDIR /home/developer/go\nCMD /usr/local/bin/intellij\n"
    },
    {
        "filename": "76598d846095498e15384ad34d4def644a46f00b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04\nMAINTAINER xenron <xenron@hotmail.com>\n\n# install software package\nRUN apt-get update -y && \\\n  apt-get install -y vim tar unzip dnsmasq wget net-tools curl openssh-server nano g++ autoconf automake libtool cmake zlib1g-dev pkg-config libssl-dev \n\nRUN mkdir -p /opt\n\n# Protocol buffers\nRUN wget -q -o out.log -P /tmp https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz && \\\n  tar xzf /tmp/protobuf-2.5.0.tar.gz -C /opt && \\\n  cd /opt/protobuf-2.5.0 && \\\n  ./autogen.sh && \\\n  ./configure --prefix=/usr && \\\n  make && \\\n  make check && \\\n  make install && \\\n  protoc --version \n\n# Clean\nRUN apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y && \\\n  rm -rf /var/lib/{apt,dpkg,cache,log}/ && \\\n  rm -rf /tmp\n\n# Java Version\nENV JAVA_VERSION_MAJOR 8\nENV JAVA_VERSION_MINOR 111\nENV JAVA_VERSION_BUILD 14\nENV JAVA_PACKAGE       jdk\n\n# Download and unarchive Java\nRUN curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\"\\\n    http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz | gunzip -c - | tar -xf - -C /opt && \\\n    ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk && \\\n    rm -rf /opt/jdk/*src.zip \\\n         /opt/jdk/lib/missioncontrol \\\n         /opt/jdk/lib/visualvm \\\n         /opt/jdk/lib/*javafx* \\\n         /opt/jdk/jre/lib/plugin.jar \\\n         /opt/jdk/jre/lib/ext/jfxrt.jar \\\n         /opt/jdk/jre/bin/javaws \\\n         /opt/jdk/jre/lib/javaws.jar \\\n         /opt/jdk/jre/lib/desktop \\\n         /opt/jdk/jre/plugin \\\n         /opt/jdk/jre/lib/deploy* \\\n         /opt/jdk/jre/lib/*javafx* \\\n         /opt/jdk/jre/lib/*jfx* \\\n         /opt/jdk/jre/lib/amd64/libdecora_sse.so \\\n         /opt/jdk/jre/lib/amd64/libprism_*.so \\\n         /opt/jdk/jre/lib/amd64/libfxplugins.so \\\n         /opt/jdk/jre/lib/amd64/libglass.so \\\n         /opt/jdk/jre/lib/amd64/libgstreamer-lite.so \\\n         /opt/jdk/jre/lib/amd64/libjavafx*.so \\\n         /opt/jdk/jre/lib/amd64/libjfx*.so \n\n# move all configuration files into container\nADD files/* /usr/local/  \n\n# set environment variable \nENV JAVA_HOME /opt/jdk \nENV PATH ${PATH}:${JAVA_HOME}/bin\n\n# configure ssh free key access\nRUN mkdir /var/run/sshd && \\\n  ssh-keygen -t rsa -f ~/.ssh/id_rsa -P '' && \\\n  cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys && \\\n  mv /usr/local/ssh_config ~/.ssh/config && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Hadoop\nRUN wget -q -o out.log -P /tmp https://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/hadoop-2.7.3-src.tar.gz && \\\n  tar xzf /tmp/hadoop-2.7.3-src.tar.gz -C /opt && \\\n  rm /tmp/hadoop-2.7.3-src.tar.gz && \\\n  mv /opt/hadoop-2.7.3-src /opt/hadoop\n\n# Spark\nRUN wget -q -o out.log -P /tmp https://archive.apache.org/dist/spark/spark-2.1.0/spark-2.1.0.tgz && \\\n  tar xzf /tmp/spark-2.1.0.tgz -C /opt && \\\n  rm /tmp/spark-2.1.0.tgz && \\\n  mv /opt/spark-2.1.0 /opt/spark\n\n# Maven\nRUN wget -q -o out.log -P /tmp https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz && \\\n  tar xzf /tmp/apache-maven-3.3.9-bin.tar.gz -C /opt && \\\n  rm /tmp/apache-maven-3.3.9-bin.tar.gz && \\\n  mv /opt/apache-maven-3.3.9 /opt/maven\n\nRUN mv /usr/local/bashrc ~/.bashrc\n\n# compile\nRUN . ~/.bashrc && \\\n  cd /opt/spark && \\\n  mvn clean -Dhadoop.version=2.7.3 -Pyarn -Phadoop-2.7 -DskipTests clean package\n\n\n"
    },
    {
        "filename": "768f142b870b6c7e3f4e5a86e6b6d5a95915fba5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerfile with tensorflow gpu support on python2, opencv3.3.0  \nFROM tensorflow/tensorflow:1.4.1-gpu  \n  \nMAINTAINER whenyd <whenyd@126.com>  \n  \nRUN apt-get update  \n  \n# Core linux dependencies.  \nRUN apt-get install -y \\  \n# developer tools  \nbuild-essential \\  \ncmake \\  \ngit \\  \nwget \\  \nunzip \\  \nyasm \\  \npkg-config \\  \n# image formats support  \nlibtbb2 \\  \nlibtbb-dev \\  \nlibjpeg-dev \\  \nlibpng-dev \\  \nlibtiff-dev \\  \nlibjasper-dev \\  \nlibhdf5-dev \\  \n# video formats support  \nlibavcodec-dev \\  \nlibavformat-dev \\  \nlibswscale-dev \\  \nlibv4l-dev \\  \nlibxvidcore-dev \\  \nlibx264-dev  \n  \n# Python dependencies  \nRUN pip --no-cache-dir install \\  \nnumpy \\  \nhdf5storage \\  \nh5py \\  \nscipy \\  \nkeras  \n  \nWORKDIR /  \n  \nRUN wget https://github.com/opencv/opencv_contrib/archive/3.3.0.zip \\  \n&& unzip 3.3.0.zip \\  \n&& rm 3.3.0.zip  \n  \nRUN wget https://github.com/opencv/opencv/archive/3.3.0.zip \\  \n&& unzip 3.3.0.zip \\  \n&& mkdir /opencv-3.3.0/build \\  \n&& cd /opencv-3.3.0/build \\  \n&& cmake -DBUILD_TIFF=ON \\  \n-DBUILD_opencv_java=OFF \\  \n-DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-3.3.0/modules \\  \n-DWITH_CUDA=OFF \\  \n-DENABLE_AVX=ON \\  \n-DWITH_OPENGL=ON \\  \n-DWITH_OPENCL=ON \\  \n# cannot download ippicv  \n-DWITH_IPP=ON \\  \n-DWITH_TBB=ON \\  \n-DWITH_EIGEN=ON \\  \n-DWITH_V4L=ON \\  \n-DBUILD_TESTS=OFF \\  \n-DBUILD_PERF_TESTS=OFF \\  \n-DCMAKE_BUILD_TYPE=RELEASE \\  \n-DCMAKE_INSTALL_PREFIX=$(python -c \"import sys; print(sys.prefix)\") \\  \n-DPYTHON_EXECUTABLE=$(which python) \\  \n-DPYTHON_INCLUDE_DIR=$(python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\  \n-DPYTHON_PACKAGES_PATH=$(python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") .. \\  \n&& make install \\  \n&& rm /3.3.0.zip \\  \n&& rm -r /opencv-3.3.0 \\  \n&& ldconfig  \n  \nCMD [\"/bin/bash\"]  \n\n"
    },
    {
        "filename": "76e073abafe69adcdc674264834cbecc9b97c3ff.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dkarchmervue/python27-opencv\n\n# https://github.com/ampervue/docker-python27-opencv\n\nMAINTAINER David Karchmer <dkarchmer@gmail.com>\n\n# ============================================================================\n# As an example, we compile a small program to load an image and write out\n#     a gray scale version of it.\n# See http://docs.opencv.org/doc/tutorials/introduction/load_save_image/load_save_image.html\n#\n# ~~~~\n# git clone https://dkarchmer-vue@bitbucket.org/ampervue/python27-opencv.git\n# cd example\n# docker build -t opencvtest .\n# docker run -it --rm -p 5901:5901 -e USER=root opencvtest \\\n#    bash -c \"vncserver :1 -geometry 1280x800 -depth 24 && tail -F /root/.vnc/*.log\"\n#\n# Connect to vnc://<host>:5901 via VNC client.\n# On a terminal, call program with: `opencvtest sample.jpg` and open generated Gray_Image.jpg\n# ~~~~\n# ============================================================================\n\n# Step 0: Install a VNC Server so we can use OpenCV GUI features\n# --------------------------------------------------------------\n\n# Install VNC server and an editor\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n  x11-apps \\\n  firefox \\\n  lxde-core \\\n  lxterminal \\\n  tightvncserver \\\n  emacs \\\n  gpicview \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN touch /root/.Xresources\n\n# Step 1: Install any Python packages\n# ----------------------------------------\n\nRUN mkdir /code\nWORKDIR /code\n\n# Step 2: Copy code\n# ----------------------------------------\n\nADD app /code/app\n\n# Step 3: Compile Code\n# ----------------------------------------\n\nWORKDIR /code/app\n\nRUN g++ -ggdb `pkg-config --cflags opencv` -o `basename opencvtest.cpp .cpp` opencvtest.cpp `pkg-config --libs opencv`\n\n# Define default command.\nCMD [\"bash\"]\n\n# Expose ports.\nEXPOSE 5901\n\n\n\n\n\n\n\n\n"
    },
    {
        "filename": "778f9b6cd624dc53bb2903c5e5c0533688191b72.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# BUILD INSTRUCTIONS & README\n# POST HERE: https://blog.obscuritylabs.com/docker-command-controll-c2/\n#   1) docker build --build-arg cskey=\"xxxx-xxxx-xxxx-xxxx\" -t cobaltstrike/cs .\n#   2) docker run -d -p 192.168.2.238:50050:50050 cobaltstrike/cs 192.168.2.238 password\n#      - This runs docker in Detached mode, to tshoot issues or see logs do the following\n#   3) docker logs -f {docker ps -> CONTAINER ID}\n#      - Example: docker logs -f 38830d90537f\n#    NOTE: you can eaily name the docker like so as well:\n#      - docker run -d -p 192.168.2.238:50050:50050 --name \"war_games\"  cobaltstrike/cs 192.168.2.238 password\n#      - docker logs -f \"war_games\"\n#      - To kill CS: docker kill war_games\n#    NOTE: to go interactive we need to bypass the ENTRYPOINT\n#      - docker run -ti --entrypoint \"\" cobaltstrike/cs bash\nFROM ubuntu:16.04\n\n# Dockerfile metadata\nMAINTAINER Killswitch-GUI\nLABEL version=\"1.0\"\nLABEL description=\"Dockerfile base for CobaltStrike.\"\n\n# setup local env\nARG cskey\nENV cs_key ${cskey}\nENV JAVA_HOME /opt/jdk-10.0.2\nENV PATH $PATH:$JAVA_HOME/bin\n\n# docker hardcoded sh...\nSHELL [\"/bin/bash\", \"-c\"]\n\n# install proper tools\nRUN apt-get update && \\\n    apt-get install -y wget curl net-tools sudo\n\n# install oracle jave\nRUN cd /opt && \\\n    wget -c --header 'Cookie: oraclelicense=accept-securebackup-cookie' http://download.oracle.com/otn-pub/java/jdk/10.0.2+13/19aef61b38124481863b1413dce1855f/jdk-10.0.2_linux-x64_bin.tar.gz && \\\n    tar xvf jdk-10.0.2_linux-x64_bin.tar.gz && \\\n    cd jdk-10.0.2 && \\\n    source /etc/bash.bashrc && \\\n    sudo update-alternatives --install '/usr/bin/java' 'java' '/opt/jdk-10.0.2/bin/java' 1 && \\\n    sudo update-alternatives --install '/usr/bin/javac' 'javac' '/opt/jdk-10.0.2/bin/javac' 1 && \\\n    sudo update-alternatives --set 'java' '/opt/jdk-10.0.2/bin/java' && \\\n    sudo update-alternatives --set 'javac' '/opt/jdk-10.0.2/bin/javac'\n\n# install CobaltStrike with license key and update\nRUN var=$(curl 'https://www.cobaltstrike.com/download' -XPOST -H 'Referer: https://www.cobaltstrike.com/download' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Origin: https://www.cobaltstrike.com' -H 'Host: www.cobaltstrike.com' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Connection: keep-alive' -H 'Accept-Language: en-us' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0.1 Safari/604.3.5' --data \"dlkey=$cs_key\" | sed -n 's/.*href=\"\\([^\"]*\\).*/\\1/p' | grep /downloads/ | cut -d '.' -f 1) && \\\n    cd /opt && \\\n    wget https://www.cobaltstrike.com$var.tgz && \\\n    tar xvf cobaltstrike-trial.tgz && \\\n    cd cobaltstrike && \\\n    echo $cs_key > ~/.cobaltstrike.license && \\\n    ./update\n\n# cleanup image\nRUN apt-get -y clean && \\\n    apt-get -y autoremove\n\n# set entry point\nWORKDIR \"/opt/cobaltstrike\"\nENTRYPOINT [\"./teamserver\"]\n"
    },
    {
        "filename": "77c0ca58339f546364ab62be3f089102fca2339c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#Hitcon 2017 web baby^h-master-php-2017\n#\n#read_secret\u8f93\u51faOrangeOrangeOrange\n#MaxConnectionsPerChild\u4e3a100\n#\u5176\u4f59\u73af\u5883\u4e0e\u9898\u76ee\u5927\u81f4\u65e0\u5f02\n#\u5982\u8981\u4fee\u6539root\u4e0e\u9898\u76ee\u7528\u6237\u5bc6\u7801\u8bf7\u7528 [docker exec -it '\u4f60\u7684\u5e94\u7528\u540d\u79f0' /bin/bash] \u8fdb\u5165\u5bb9\u5668\u4fee\u6539\n#usage : \n#    \u8fdb\u5165Dockerfile\u76ee\u5f55\n#    [docker build -t '\u81ea\u5b9a\u4e49\u955c\u50cf\u540d\u5b57' . ] //\u6700\u540e\u7684.\u522b\u5c11\u4e86\n#    [docker run -id --name '\u4f60\u7684\u5e94\u7528\u540d\u79f0' -p \u5916\u90e8\u7aef\u53e3:80 -m '\u5185\u5b58\u9650\u5236 \u59821g\u3001500m' '\u4f60\u7684\u81ea\u5b9a\u4e49\u955c\u50cf\u540d\u79f0' /run.sh]\n\n#\u6574\u5408 apache php7\nFROM pr0ph3t/lap7\nMAINTAINER Pr0ph3t <1415314884@qq.com>\n\n#Install crontab and perl with LWP\nRUN apt-get update -y && apt-get install cron -y\n\n#Init crontab , \u6bcf\u5929\u51cc\u66684\u70b9\u6e05\u7a7adata\u6587\u4ef6\u5939\nRUN echo '0 4 * * * root rm -rf /var/www/data/*' >> /etc/crontab\n\n#Init challenge\nADD index.php /var/www/html/\nADD readflag /read_flag\nADD read_secret /read_secret\nADD avatar-1.gif /var/www/html/avatar.gif\nRUN chmod u+s /read_flag\nRUN rm -rf /var/www/html/index.html\nRUN mkdir /var/www/data\nRUN chown www-data /var/www/data\nRUN chmod -R 775 /var/www/data\nRUN echo 'hitcon{Th3 d4rk fl4m3 PHP Mast3r}' > /flag\nRUN chmod 700 /flag\n\n#Configure the apache2\nRUN sed 's/Indexes //' /etc/apache2/apache2.conf > /etc/apache2/apache2.conf.new\nRUN sed 's/MaxConnectionsPerChild   0/MaxConnectionsPerChild   100/' /etc/apache2/mods-available/mpm_prefork.conf > /etc/apache2/mods-available/mpm_prefork.conf.new\nRUN mv /etc/apache2/apache2.conf.new /etc/apache2/apache2.conf\nRUN mv /etc/apache2/mods-available/mpm_prefork.conf.new /etc/apache2/mods-available/mpm_prefork.conf\nRUN echo '<Directory \"/var/www/data\">\\n\\tphp_flag engine off\\n</Directory>' >> /etc/apache2/sites-enabled/000-default.conf\n\n#Create run.sh\nADD run.sh /\nRUN chmod +x /run.sh\n\n\n#Expose http service\nEXPOSE 80\nCMD [\"bash -x /run.sh\"]"
    },
    {
        "filename": "77e895e294cbe5c9de822f2ac8d1cf723f532ed7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# runnable base\nFROM boxcar/raring\n\n# REPOS\nRUN apt-get -y update\nRUN apt-get install -y -q software-properties-common\nRUN add-apt-repository -y \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\"\nRUN add-apt-repository -y ppa:gophers/go/ubuntu\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN add-apt-repository -y ppa:webupd8team/java\nRUN add-apt-repository -y ppa:nginx/stable\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/10gen.list\nRUN apt-get -y update\n\n#SHIMS\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -s /bin/true /sbin/initctl\nENV DEBIAN_FRONTEND noninteractive\n\n# EDITORS\nRUN apt-get install -y -q vim\nRUN apt-get install -y -q nano\n\n# TOOLS\nRUN apt-get install -y -q curl\nRUN apt-get install -y -q git\nRUN apt-get install -y -q make\nRUN apt-get install -y -q wget\n# RUN apt-get install -y -q supervisor\n\n# BUILD\nRUN apt-get install -y -q build-essential\nRUN apt-get install -y -q g++\n\n# SERVICES\n\n## MEMCACHED\nRUN apt-get install -y -q memcached\n#RUN pecl install -y memcache\n\n## COUCHDB\nRUN apt-get install -y -q couchdb\n\n## REDIS\nRUN apt-get install -y -q redis-server\n\n## MONGO\nRUN apt-get install -y -q mongodb-10gen\n\n## POSTGRES\nRUN echo \"#!/bin/sh\\nexit 101\" > /usr/sbin/policy-rc.d; chmod +x /usr/sbin/policy-rc.d\nRUN apt-get install -y -q postgresql-9.1\nRUN apt-get install -y -q postgresql-contrib-9.1\nRUN rm /usr/sbin/policy-rc.d\nRUN apt-get install -y -q pgadmin3\n\n## MAGICK\nRUN apt-get install -y -q imagemagick\nRUN apt-get install -y -q graphicsmagick\nRUN apt-get install -y -q graphicsmagick-libmagick-dev-compat\n# #RUN pecl install -y imagick\n\n## APACHE\nRUN apt-get install -y -q apache2\nRUN apt-get install -y -q libapache2-mod-php5\n\n## MYSQL\nRUN apt-get install -y -q mysql-client\nRUN apt-get install -y -q mysql-server\n\n## NGINX\nRUN apt-get install -y -q nginx\n\n# LANGS\n\n## GO\nRUN apt-get install -y -q golang\n\n## RUBY\nRUN apt-get install -y -q ruby\n\n## NODE\nRUN apt-get install -y -q nodejs\n\n## PHP\nRUN apt-get install -y -q php5\nRUN apt-get install -y -q php-pear\n\n## ERLANG\nRUN apt-get install -y -q erlang\n\n# # # JAVA\n# # # Broken\n# # RUN debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n# # RUN debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n# # RUN apt-get install -y -q oracle-java7-installer\n\n## PYTHON\nRUN apt-get install -y -q python-software-properties\nRUN apt-get install -y -q python\nRUN apt-get install -y -q python-dev\nRUN apt-get install -y -q python-distribute\nRUN apt-get install -y -q python-pip\nRUN pip --no-input --exists-action=w install --upgrade pip\n\n# LIBS\nRUN apt-get install -y -q libjpeg8-dev\nRUN apt-get install -y -q zlib1g-dev\nRUN apt-get install -y -q libfreetype6-dev\nRUN apt-get install -y -q liblcms1-dev\nRUN apt-get install -y -q libwebp-dev\nRUN apt-get install -y -q libtiff-dev\n\nENV DEBIAN_FRONTEND dialog"
    },
    {
        "filename": "78181c5a51a24d4d3b6228e2f349f1bd18250b94.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Ilya Kovalenko <agentsib@gmail.com>\n\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ xenial-security multiverse' >> /etc/apt/sources.list && \\\n    echo 'deb-src http://archive.ubuntu.com/ubuntu/ xenial-security multiverse' >> /etc/apt/sources.list && \\\n    echo 'deb http://archive.ubuntu.com/ubuntu/ xenial multiverse' >> /etc/apt/sources.list && \\\n    echo 'deb-src http://archive.ubuntu.com/ubuntu/ xenial multiverse' >> /etc/apt/sources.list && \\\n    apt-get update && \\\n    # LATEST SYSTEM UPDATES\n    DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes dist-upgrade && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https wget vim cabextract libmspack0 xfonts-75dpi xvfb xz-utils curl supervisor git unzip \\\n    php php-fpm php-zip php-imagick libapache2-mod-php apache2 libapache2-mod-rpaf libapache2-mod-xsendfile && \\\n    # mscorefonts: license should be accepted to download fonts; apt-transport-https is used for downloads\n    echo 'ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true' | debconf-set-selections && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y ttf-mscorefonts-installer && \\\n    # Get wkhtmltopdf dependencies\n#    apt-get -y install wkhtmltopdf && \\\n#    apt-get -y remove wkhtmltopdf && \\\n    # FLASH SUPPORT\n    DEBIAN_FRONTEND=noninteractive apt-get -y install flashplugin-installer && \\\n    # WKHTMLTOPDF\n    # SYSTEM\n    DEBIAN_FRONTEND=noninteractive apt-get -y install wkhtmltopdf && \\\n    # LATEST\n#    wget http://download.gna.org/wkhtmltopdf/0.12/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && \\\n#    tar xfv wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && \\\n#    cp -R wkhtmltox/* / && \\\n#    rm -rf wkhtmltox && \\\n#    rm wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && \\\n    # STABLE\n#    wget http://download.gna.org/wkhtmltopdf/0.12/0.12.3/wkhtmltox-0.12.3_linux-generic-amd64.tar.xz && \\\n#    tar xfv wkhtmltox-0.12.3_linux-generic-amd64.tar.xz && \\\n#    cp -R wkhtmltox/* / && \\\n#    rm -rf wkhtmltox && \\\n#    rm wkhtmltox-0.12.3_linux-generic-amd64.tar.xz && \\\n    # LATEST UBUNTU\n#    wget http://download.gna.org/wkhtmltopdf/0.12/0.12.2/wkhtmltox-0.12.2_linux-trusty-amd64.deb && \\\n#    dpkg -i wkhtmltox-0.12.2_linux-trusty-amd64.deb && \\\n#    rm wkhtmltox-0.12.2_linux-trusty-amd64.deb && \\\n     apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n     a2enmod rewrite\n\nADD docker_files/entrypoint.sh /entrypoint.sh\nADD docker_files/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nADD docker_files/apache-host.conf /etc/apache2/sites-available/000-default.conf\n\nADD web /var/www/shot/web\nADD composer.json /var/www/shot/composer.json\nADD composer.lock /var/www/shot/composer.lock\n\n#ADD vendor /var/www/shot/vendor\nRUN chown -R www-data /var/www\n\nUSER www-data\n\nRUN cd /var/www/shot && \\\n    curl -o installer https://getcomposer.org/installer && \\\n    php installer && \\\n    rm installer && \\\n    php composer.phar install\n\nUSER root\n\nENV DISPLAY :99\nENV DEBUG 0\nENV ENABLE_PLUGINS 0\nENV PROCESS_WAIT_TIME 0\n\nEXPOSE 80\n\nWORKDIR /var/www/shot\nVOLUME /var/www/shot/cache\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "7883ea4e79c42fc301c1115d918ed26e033faa97.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# pull ubuntu 18.04 from Docker repo\nFROM ubuntu:18.04\n\nMAINTAINER \"Zhicheng Geng <zhichenggeng@utexas.com>\"\n\n# install packages for madagascar\nRUN apt-get update && apt-get install -y \\\n        git \\\n        python2.7 \\\n        python-pip \\\n        openssh-client \\\n        tar \\\n        gzip \\\n        wget \\\n        vim \\\n        emacs \\\n        make \\\n        man \\\n && apt-get install -y \\\n        libblas-dev \\\n        liblapack-dev \\\n        swig \\\n        libxaw7-dev \\\n        freeglut3-dev \\\n        libnetpbm10-dev \\\n        libtiff5-dev \\\n        libgd-dev \\\n        libplplot-dev \\\n        libavcodec-dev \\\n        libcairo2-dev \\\n        libjpeg-dev \\\n        libopenmpi-dev \\\n        libfftw3-dev \\\n        libsuitesparse-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# install python packages\nRUN pip install numpy scipy\n\n# get code from sourceforge\nRUN  wget -O madagascar.tar.gz https://sourceforge.net/projects/rsf/files/latest/download \\\n && tar -xzvf madagascar.tar.gz -C $HOME \\\n && rm madagascar.tar.gz\n\n# set environment variable for installing madagascar\nENV RSFROOT /root/RSFROOT\n\n# install madagascar\nRUN cd ~/madagascar* \\\n && ./configure \\\n && make install\n\n# install latex\nRUN apt-get update && apt-get install -y \\\n        texlive-latex-recommended \\\n\t\ttexlive-latex-extra \\\n\t\ttexlive-fonts-recommended \\\n\t\ttexlive-bibtex-extra \\\n\t\ttexlive-lang-english \\\n\t\ttexlive-generic-extra \\\n\t\tbiber \\\n        --no-install-recommends \\\n && rm -rf /var/lib/apt/lists/*\n\n# install segtex\nRUN git clone https://github.com/SEGTeX/texmf $HOME/texmf \\\n && texhash\n\nRUN echo 'export RSFROOT=\"$HOME/RSFROOT\"'                   >> $HOME/.bashrc \\\n && echo 'source $RSFROOT/share/madagascar/etc/env.sh'      >> $HOME/.bashrc\n\nWORKDIR /root\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "78d185eb1e60ba16ebdd36cf439d67c023123281.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM python:2.7-slim\nENV DEBIAN_FRONTEND noninteractive\nENV ETCDCTL_VERSION v2.3.1\nENV CONFD_VERSION 0.12.0-alpha3\n\n# Native packages, python depdencies, aws cli, supervisor, dumb-init, etcd\n\nRUN \\\n    # Haproxy\n    echo deb http://httpredir.debian.org/debian jessie-backports main | \\\n          sed 's/\\(.*\\)-sloppy \\(.*\\)/&@\\1 \\2/' | tr @ '\\n' | \\\n          tee /etc/apt/sources.list.d/backports.list && \\\n    apt-get update && \\\n    apt-get upgrade -y && \\\n    # Curl Wget\n    apt-get install -y -t jessie-backports haproxy curl wget rsyslog && \\\n    mkdir -p /run/haproxy && \\\n    chown -R haproxy:haproxy /run/haproxy && \\\n\n    # Confd\n    curl -L https://github.com/kelseyhightower/confd/releases/download/v$CONFD_VERSION/confd-${CONFD_VERSION}-linux-amd64 -o /usr/local/bin/confd && \\\n    chmod 555 /usr/local/bin/confd && \\\n\n    # AWS Cli, Supervisor\n    pip install awscli supervisor==3.2.3 supervisor-stdout && \\\n\n    # Dumb Init\n    wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.0.0/dumb-init_1.0.0_amd64 && \\\n    chmod +x /usr/bin/dumb-init && \\\n\n    # Etcd\n    curl -L https://github.com/coreos/etcd/releases/download/$ETCDCTL_VERSION/etcd-$ETCDCTL_VERSION-linux-amd64.tar.gz -o /tmp/etcd-$ETCDCTL_VERSION-linux-amd64.tar.gz && \\\n    cd /tmp && gzip -dc etcd-$ETCDCTL_VERSION-linux-amd64.tar.gz | tar -xof - && \\\n    cp -f /tmp/etcd-$ETCDCTL_VERSION-linux-amd64/etcdctl /usr/local/bin && \\\n\n    # Cleanup\n    apt-get clean && rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/* /tmp/*\n\n# Configs , Custom Scripts\n\n#Supervisor Config\nRUN mkdir -p /var/log/supervisor && \\\n    mkdir -p /etc/supervisor/conf.d && \\\n    ln -sf /etc/supervisor/supervisord.conf /etc/supervisord.conf\nADD etc/supervisor/conf.d/supervisord.conf /etc/supervisor/conf.d/\nADD etc/supervisor/supervisord.conf /etc/supervisor/\n\n# Confd Config\nADD etc/confd /etc/confd\n\n#Certificates Sync Job\nADD ./bin/sync-certs.sh /usr/sbin/sync-certs.sh\nRUN chmod 550 /usr/sbin/sync-certs.sh\n\n#Default Certs\nADD /etc/haproxy/certs.d /etc/haproxy/certs.d\n\n#Custom Scripts\nADD ./bin/*.sh /usr/sbin/\nRUN chmod -R +x /usr/sbin\n\n\nEXPOSE 80 443 8080 8443 8081\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"/usr/sbin/supervisord-wrapper.sh\"]\n"
    },
    {
        "filename": "78d26bf19ade0cd21167b9b3c53a6f692427f959.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM debian:testing\n\n# Click needs this for python3 support\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\n# Skip the same tests as Travis\nENV TRAVIS true\n\nRUN apt-get update && apt-get install -y vim git python-pip tree xclip gnupg2 python3 pypy\nRUN pip install tox\n\nRUN git config --global user.email \"you@example.com\"\nRUN git config --global user.name \"Your Name\"\n\nADD pypass pypass/pypass\nADD docs pypass/docs\nADD setup.py pypass/setup.py\nADD setup.cfg pypass/setup.cfg\nADD requirements.txt pypass/requirements.txt\nADD test-requirements.txt pypass/test-requirements.txt\nADD README.rst pypass/README.rst\nADD tox.ini pypass/tox.ini\nADD .git pypass/.git\n\n# Install testing gpg key\nRUN gpg --allow-secret-key-import --import pypass/pypass/tests/test_key_sec.asc\nRUN gpg --import-ownertrust pypass/pypass/tests/test_ownertrust.txt\n\nRUN pip install -r pypass/requirements.txt\nRUN cd pypass && python setup.py install\n\n"
    },
    {
        "filename": "791997d6d3a68d47944613e8cbd728bf98107a6c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2019 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER toppi.ale@gmail.com\nRUN apt-get update && apt-get install -y \\\n\tautoconf autoconf-archive \\\n\tautomake \\\n\tgengetopt \\\n\tgtk-doc-tools \\\n\tlibconfig-dev \\\n\tlibglib2.0-dev \\\n\tlibgnutls-dev \\\n\tlibini-config-dev \\\n\tlibjansson-dev \\\n\tlibnice-dev \\\n\tlibssl-dev \\\n\tlibtool \\\n\topenssl \\\n\tpkg-config\n\n# install libsrtp dep from source\nRUN git clone --single-branch --branch 2_2_x_throttle https://github.com/cisco/libsrtp.git libsrtp\nRUN cd libsrtp && ./configure --enable-openssl && make -j$(nproc) shared_library && make install\n\n# fetch Janus code\nRUN git clone --single-branch --branch master https://github.com/meetecho/janus-gateway.git janus-gateway\n\nWORKDIR $SRC\nCOPY build.sh $SRC/\n"
    },
    {
        "filename": "798bd2672abc5657fa2adc5ad170c2f644538d74.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM python:2-stretch\nMAINTAINER Jacopo Mauro\n\n# Install packages for compiling the feature extractor and minizin suite\nRUN apt-get update && \\\n  apt-get install -y \\\n    flex \\\n\tbison \\\n\t# for gecode\n\tlibgl1 \\\n\t# for choco and jacop\n\topenjdk-8-jre-headless && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  pip install \\\n\tpsutil \\\n\tclick\n\n# minizinc + gecode + chuffed\nCOPY --from=jacopomauro/minizinc:v2.2.1 /tool/MiniZincIDE /tool/MiniZincIDE\nENV PATH \"$PATH:/tool/MiniZincIDE/bin\"\nENV LD_LIBRARY_PATH \"$LD_LIBRARY_PATH:/tool/MiniZincIDE/lib\"\n\n# Install feature extractor\nRUN cd /tool && \\\n  git clone --depth=1 https://github.com/CP-Unibo/mzn2feat.git && \\\n  cd mzn2feat && \\\n  bash install --no-xcsp\nENV MZN2FEAT_HOME /tool/mzn2feat\nENV PATH /tool/mzn2feat/bin:$PATH\n\n# install sunny-cp (basic one with only minizinc solvers)\nRUN cd /tool && \\\n  git clone --depth=1 https://github.com/CP-Unibo/sunny-cp.git && \\\n  cd sunny-cp && \\\n  bash install.sh\nENV PATH /tool/sunny-cp/bin:$PATH\n\n# or-tools\nCOPY --from=jacopomauro/or-tools:v6.9.1 /tool/or-tools /tool/ortools\nRUN mkdir -p /tool/sunny-cp/solvers/ortools && \\\n    ln -s /tool/ortools/ortools/flatzinc/mznlib_sat /tool/sunny-cp/solvers/ortools/mzn-lib && \\\n    ln -s /tool/ortools/bin/fzn-or-tools /tool/sunny-cp/solvers/ortools/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/ortools/opts\n\n\n# Install choco\nCOPY --from=jacopomauro/choco:v4.0.4 /tool/choco /tool/choco\nRUN mkdir -p /tool/sunny-cp/solvers/choco && \\\n    ln -s /tool/choco/mzn-lib /tool/sunny-cp/solvers/choco/mzn-lib && \\\n    ln -s /tool/choco/fzn-choco /tool/sunny-cp/solvers/choco/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/choco/opts\n\n# Install picat\nCOPY --from=jacopomauro/picat:v2.5 /tool/picat /tool/picat\nRUN mkdir -p /tool/sunny-cp/solvers/picat && \\\n    ln -s /tool/picat/mzn-lib /tool/sunny-cp/solvers/picat/mzn-lib && \\\n    ln -s /tool/picat/fzn-picat /tool/sunny-cp/solvers/picat/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/picat/opts\n\n# Install jacop\nCOPY --from=jacopomauro/jacop:v4.4.0 /tool/jacop /tool/jacop\nRUN mkdir -p /tool/sunny-cp/solvers/jacop && \\\n    ln -s /tool/jacop/mzn-lib /tool/sunny-cp/solvers/jacop/mzn-lib && \\\n    ln -s /tool/jacop/fzn-jacop /tool/sunny-cp/solvers/jacop/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/jacop/opts\n\n# Install minisatid\nCOPY --from=jacopomauro/minisatid:v3.11.0 /tool/minisatid /tool/minisatid\nRUN mkdir -p /tool/sunny-cp/solvers/minisatid && \\\n    mkdir -p /tool/sunny-cp/solvers/minisatid/mzn-lib && \\\n    ln -s /tool/minisatid/fzn-minisatid /tool/sunny-cp/solvers/minisatid/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = ''\" > /tool/sunny-cp/solvers/minisatid/opts\nENV LD_LIBRARY_PATH \"$LD_LIBRARY_PATH:/tool/minisatid/lib\"\n\n\n# Install haifacsp\nCOPY --from=jacopomauro/haifacsp:v1.3.0 /tool/haifacsp /tool/haifacsp\nRUN mkdir -p /tool/sunny-cp/solvers/haifacsp && \\\n    ln -s /tool/haifacsp/mzn-lib /tool/sunny-cp/solvers/haifacsp/mzn-lib && \\\n    ln -s /tool/haifacsp/fzn-haifacsp /tool/sunny-cp/solvers/haifacsp/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/haifacsp/opts\n\n\n# Install yuck\nCOPY --from=jacopomauro/yuck:v20180303 /tool/yuck /tool/yuck\nRUN mkdir -p /tool/sunny-cp/solvers/yuck && \\\n    ln -s /tool/yuck/mzn-lib /tool/sunny-cp/solvers/yuck/mzn-lib && \\\n    ln -s /tool/yuck/fzn-yuck /tool/sunny-cp/solvers/yuck/fzn-exec && \\\n    echo \"all_opt = '-a'\\n\\\nfree_opt  = '-f'\" > /tool/sunny-cp/solvers/yuck/opts\n\n# Install mistral\n# Compiles but does not print output on zebra instance and other instances\n#COPY --from=jacopomauro/mistral /tool/mistral /tool/mistral\n#RUN mkdir -p /tool/sunny-cp/solvers/mistral && \\\n#    ln -s /tool/mistral/mzn-lib /tool/sunny-cp/solvers/mistral/mzn-lib && \\\n#    ln -s /tool/mistral/fzn-mistral /tool/sunny-cp/solvers/mistral/fzn-exec && \\\n#    echo \"all_opt = '-a'\\n\\\n#free_opt  = '-f'\" > /tool/sunny-cp/solvers/mistral/opts\n\n\n# expose port 9001 for the sunny-cp server\nEXPOSE 9001\n\nRUN cd /tool/sunny-cp && \\\n  bash install.sh\nWORKDIR /tool/sunny-cp\nCMD [\"python\",\"/tool/sunny-cp/src/sunny_server.py\"]\n\n\n\n"
    },
    {
        "filename": "799e6fbffadd7c20e897d30651fbbcd0e07dd011.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER @FrenchYeti \"frenchyeti@protonmail.com\"\n\nRUN useradd -ms /bin/bash dexcalibur\n \n# support multiarch: i386 architecture\n# install Java\n# install essential tools\n# install Nodejs\nRUN dpkg --add-architecture i386 && \\\n    apt-get update -y && \\\n    apt-get install -y libncurses5:i386 libc6:i386 libstdc++6:i386 lib32gcc1 lib32ncurses5 lib32z1 zlib1g:i386 && \\\n    apt-get install -y --no-install-recommends openjdk-8-jdk && \\\n    apt-get install -y git wget zip curl && \\\n\tapt-get install -y usbutils\n\nRUN\tcurl -sL https://deb.nodesource.com/setup_12.x  | bash -\nRUN apt-get update -y && \\\n\tapt-get install -y nodejs && \\\n\tnodejs -v && \\\n\tnpm -v\n\n# download and install Gradle\n# https://services.gradle.org/distributions/\nARG GRADLE_VERSION=4.10.3\nRUN cd /opt && \\\n    wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip && \\\n    unzip gradle*.zip && \\\n    ls -d */ | sed 's/\\/*$//g' | xargs -I{} mv {} gradle && \\\n    rm gradle*.zip\n\n\n# download and install Android SDK\n# https://developer.android.com/studio/#downloads\n# ARG ANDROID_SDK_VERSION=4333796\n# RUN mkdir -p /opt/android-sdk && cd /opt/android-sdk && \\\n# \twget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && \\\n#\tunzip *tools*linux*.zip && \\\n#\trm *tools*linux*.zip\n\n\n# set the environment variables\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV GRADLE_HOME /opt/gradle\nENV ANDROID_HOME /opt/android-sdk\n# ENV PATH ${PATH}:${GRADLE_HOME}/bin:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools/bin\nENV PATH ${PATH}:${GRADLE_HOME}/bin\nENV _JAVA_OPTIONS -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\n\n# accept the license agreements of the SDK components\n# ADD license_accepter.sh /opt/\n#\u00a0RUN /opt/license_accepter.sh $ANDROID_HOME\n\n# setup adb and dexcalibur server\nEXPOSE 5037 8000 31415\n\n\n\n# Install android tools + sdk\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH $PATH:${ANDROID_HOME}/tools:$ANDROID_HOME/platform-tools\n\n# Install APKTool\nRUN mkdir -p /home/dexcalibur/tools/apktool && \\\n\tcd /home/dexcalibur/tools/apktool && \\\n\twget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool && \\\n\twget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.4.0.jar && \\\n\tmv *.jar apktool.jar && \\\n\tmv apktool* /usr/local/bin/. && \\\n\tchmod +x /usr/local/bin/apktool*\n\t\n\n# RUN wget -qO- \"http://dl.google.com/android/android-sdk_r24.3.4-linux.tgz\" | tar -zx -C /opt && \\\n#     echo y | android update sdk --no-ui --all --filter platform-tools --force\n\n# Setup Dexcalibur\nWORKDIR /home/dexcalibur\n\n\nRUN head -c 5 /dev/random > random_bytes && git clone https://github.com/FrenchYeti/dexcalibur.git && \\\n\tcd /home/dexcalibur/dexcalibur && \\\n\t/usr/bin/npm install\n\t\nADD docker/config.js dexcalibur/config.js\n\n# install platform-tools\nRUN mkdir /home/dexcalibur/platform-tools/ && \\ \n\tcd /home/dexcalibur/platform-tools/ && \\\n\twget -q https://dl.google.com/android/repository/platform-tools-latest-linux.zip && \\\n\tunzip *.zip && \\\n\trm *.zip \n\nRUN echo 'adb forward tcp:31415 tcp:31415' >> /home/dexcalibur/.bashrc\n\nWORKDIR /home/dexcalibur/dexcalibur\nVOLUME [\"/home/dexcalibur/workspace\"]\nCMD [\"/bin/sh\"]\n"
    },
    {
        "filename": "79e37a9a4b0abdc1394fea826ef1a353ae76ae60.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nMAINTAINER Dapeng \"dapeng@edgenius.com\"\n\n# Update Ubuntu\nRUN apt-get update && apt-get -y upgrade\n\n# Add oracle java 8 repository\nRUN apt-get -y install software-properties-common\nRUN add-apt-repository -y ppa:webupd8team/java\nRUN apt-get -y update\n\n# Install Oracle Java\n# Accept the Oracle Java license\nRUN echo \"oracle-java8-installer shared/accepted-oracle-license-v1-1 boolean true\" | debconf-set-selections\nRUN apt-get -y install oracle-java8-installer\n\n# Install tomcat\nRUN apt-get -y install tomcat8\n\nCOPY logging.properties /etc/tomcat8\nCOPY tomcat8.sh /tomcat8/\nRUN chmod +x /tomcat8/tomcat8.sh\n\nRUN rm -rf /var/lib/tomcat8/webapps/ROOT/*\n\nCOPY geniuswiki.war /var/lib/tomcat8/webapps/ROOT/\nRUN cd /var/lib/tomcat8/webapps/ROOT/ && jar xvf geniuswiki.war && rm geniuswiki.war\n\nWORKDIR /tomcat8/\nCMD /bin/bash -c ./tomcat8.sh"
    },
    {
        "filename": "7a004b6b3206cb41fcd988a77d0a6444b88f29da.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM python:3.7\nCOPY . .\nMAINTAINER Ash Agarwal <ashutosh.nath.agarwal@gmail.com>\n\nRUN apt-get update && \\\n        apt-get install -y \\\n        build-essential \\\n        cmake \\\n        git \\\n        wget \\\n        unzip \\\n        yasm \\\n        pkg-config \\\n        libswscale-dev \\\n        libtbb2 \\\n        libtbb-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libtiff-dev \\\n        libavformat-dev \\\n        libpq-dev\n\nRUN pip install numpy\n\nWORKDIR /\nENV OPENCV_VERSION=\"3.4.2\"\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n&& unzip ${OPENCV_VERSION}.zip \\\n&& mkdir /opencv-${OPENCV_VERSION}/cmake_binary \\\n&& cd /opencv-${OPENCV_VERSION}/cmake_binary \\\n&& cmake -DBUILD_TIFF=ON \\\n  -DBUILD_opencv_java=OFF \\\n  -DWITH_CUDA=OFF \\\n  -DWITH_OPENGL=ON \\\n  -DWITH_OPENCL=ON \\\n  -DWITH_IPP=ON \\\n  -DWITH_TBB=ON \\\n  -DWITH_EIGEN=ON \\\n  -DWITH_V4L=ON \\\n  -DBUILD_TESTS=OFF \\\n  -DBUILD_PERF_TESTS=OFF \\\n  -DCMAKE_BUILD_TYPE=RELEASE \\\n  -DCMAKE_INSTALL_PREFIX=$(python3.7 -c \"import sys; print(sys.prefix)\") \\\n  -DPYTHON_EXECUTABLE=$(which python3.7) \\\n  -DPYTHON_INCLUDE_DIR=$(python3.7 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n  -DPYTHON_PACKAGES_PATH=$(python3.7 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\\n  .. \\\n&& make install \\\n&& rm /${OPENCV_VERSION}.zip \\\n&& rm -r /opencv-${OPENCV_VERSION}\n\nRUN pip install flask && \\\n  pip install python-dotenv\nRUN apt-get install -y ffmpeg libavcodec-extra\nRUN pip install gevent\nRUN pip install flask-socketio\nRUN pip install requests\nRUN pip install pytesseract\nRUN pip install imutils\nRUN pip install Pillow\nRUN pip install streamlink\nRUN apt-get install -y tesseract-ocr\n\nEXPOSE 8080\nCMD [\"python\", \"run.py\"]\n"
    },
    {
        "filename": "7a15fbd344174824de47eec008fcc3bb239976bf.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM xacc/xacc-python-install\n\nLABEL maintainer=\"Alex McCaskey <mccaskeyaj@ornl.gov>\"\n\n# Replace shell with bash so we can source files\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh && apt-get -y update && apt-get -y install vim gfortran libblas-dev liblapack-dev pkg-config \\\n    && python3 -m pip install --upgrade pip && python3 -m pip install jupyterlab pyquil mpmath deepdiff \\\n       numpy scipy openfermion --no-cache-dir && ipython3 kernel install \\\n    && git clone https://github.com/amccaskey/OpenFermion-Psi4 && cd OpenFermion-Psi4 && python3 -m pip install --user .\nrun git clone https://github.com/ornl-qci/xacc-rigetti \\\n    && git clone https://github.com/ornl-qci/xacc-ibm \\\n    && git clone https://github.com/ornl-qci/xacc-vqe \\ \n    && git clone https://github.com/ornl-qci/tnqvm \\\n    && cd xacc-rigetti && python3 -m pip install --user . \\\n    && cd ../xacc-ibm && python3 -m pip install --user . \\\n    && cd /xacc-vqe && python3 -m pip install --user . \\\n    && cd ../tnqvm && python3 -m pip install --user . \n\nrun cd / && git clone https://github.com/psi4/psi4 && cd psi4 && mkdir build && cd build \\\n    && cmake .. -DPYTHON_EXECUTABLE=$(which python3) -DCMAKE_INSTALL_PREFIX=$(python3 -m site --user-site)/psi4 \\\n    && make -j8 install \nrun python3 -m pip uninstall -y h5py && python3 -m pip install h5py==2.8.0rc1\nrun echo \"./psi4\" >> /root/.local/lib/python3.6/site-packages/psi4.pth \\\n    && echo \"export PATH=$PATH:$(python3 -m site --user-site)/psi4/bin\" >> ~/.bashrc\n# hack - fix bug in openfermion... need to contribute back\n# i think it has to do with volumes mounted via the docker container\nrun sed -i 's/os.rename/shutil.move/g' /usr/local/lib/python3.6/dist-packages/openfermion/hamiltonians/_molecular_data.py \\\n    && sed -i 's/import os/import os, shutil/g' /usr/local/lib/python3.6/dist-packages/openfermion/hamiltonians/_molecular_data.py\nrun apt-get install -y apt-transport-https ca-certificates curl software-properties-common \\\n    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n    && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic test\" \nrun apt-get update -y && apt-get install -y docker-ce\nrun echo \"alias python=python3\" >> ~/.bashrc \\\n    && echo \"function xacc-logs() { docker logs -f \\$(docker ps -aqf name=expo) ; }\" >> ~/.bashrc\n"
    },
    {
        "filename": "7a4b56be92bf7d61ecfc0567c7fc85540034565e.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Modified from h\\ttps://github.com/saiprashanths/dl-docker\nFROM nvidia/cuda:7.5-cudnn5-devel\n\nMAINTAINER Brian Lee Yung Rowe <rowe@zatonovo.com>\n\nARG THEANO_VERSION=rel-0.8.2\nARG KERAS_VERSION=1.1.0\nARG TORCH_VERSION=latest\n\n# Install some dependencies\nRUN apt-get update && apt-get install -y \\\n    curl wget git \\\n    nano vim \\\n    bc \\\n    build-essential \\\n    pkg-config software-properties-common \\\n    cmake g++ gfortran \\\n    libopenblas-dev liblapack-dev \\\n    libffi-dev libfreetype6-dev libhdf5-dev liblcms2-dev \\\n    libjpeg-dev libopenjpeg2 libpng12-dev libtiff5-dev \\\n    libssl-dev \\\n    libwebp-dev libzmq3-dev \\\n    python-dev \\\n    zlib1g-dev unzip \\\n    && \\\n  apt-get clean && \\\n  apt-get autoremove && \\\n  rm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n  update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install latest version of pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py && \\\n  python get-pip.py && \\\n  rm get-pip.py\n\n\n# Add SNI support to Python\nRUN pip --no-cache-dir install pyopenssl ndg-httpsclient pyasn1\n\n# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update && apt-get install -y \\\n    python-numpy \\\n    python-scipy \\\n    python-nose \\\n    python-h5py \\\n    python-skimage \\\n    python-matplotlib \\\n    python-pandas \\\n    python-sklearn \\\n    python-sympy \\\n    && \\\n  apt-get clean && \\\n  apt-get autoremove && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install --upgrade ipython && \\\n  pip --no-cache-dir install \\\n    Cython \\\n    ipykernel \\\n    jupyter \\\n    path.py \\\n    Pillow \\\n    pygments \\\n    six \\\n    sphinx \\\n    wheel \\\n    zmq \\\n    && \\\n  python -m ipykernel.kernelspec\n\n\n# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \\\n  \\\n  echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\\n    \\n[lib]\\ncnmem=0.95 \\\n    \\n[nvcc]\\nfastmath=True \\\n    \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n    \\n[DebugMode]\\ncheck_finite=1\" \\\n  > /root/.theanorc\n\n\n# Install Keras\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n\n# Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive && \\\n  cd /root/torch && \\\n  bash install-deps && \\\n  yes no | ./install.sh\n\n# Export the LUA evironment variables manually\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \\\n  LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \\\n  PATH=/root/torch/install/bin:$PATH \\\n  LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \\\n  DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n# Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn && \\\n  luarocks install cutorch && \\\n  luarocks install cunn && \\\n  luarocks install dp && \\\n  luarocks install mnist && \\\n  luarocks install qtlua && \\\n  \\\n  cd /root && git clone https://github.com/soumith/cudnn.torch.git && cd cudnn.torch && \\\n  git checkout R4 && \\\n  luarocks make && \\\n  \\\n  cd /root && git clone https://github.com/facebook/iTorch.git && \\\n  cd iTorch && \\\n  luarocks make\nRUN wget https://raw.githubusercontent.com/rtsisyk/luafun/master/fun-scm-1.rockspec && luarocks install fun-scm-1.rockspec\n\n\n\n# Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\n# Use theano backend\nCOPY keras.json /root/.keras/\n\n# Expose Ports for IPython (8888)\nEXPOSE 8888\n\nWORKDIR \"/code\"\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "7ab0feeaf133517151f4e263153efc4fb07e15fb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "from ubuntu\nMAINTAINER Charlie Lewis <charlie.lewis42@gmail.com>\n\nENV REFRESHED_AT 2013-11-17\nRUN sed 's/main$/main universe/' -i /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get upgrade -y\n\nRUN apt-get install -y git\nRUN apt-get install -y python-setuptools\nRUN apt-get install -y redis-server\nRUN easy_install pip\nADD . /wharf\nRUN pip install -r /wharf/requirements.txt\nADD patch/auth.py /usr/local/lib/python2.7/dist-packages/docker/auth/auth.py\nADD patch/client.py /usr/local/lib/python2.7/dist-packages/docker/client.py\n\nEXPOSE 5000\n\nWORKDIR /wharf\nCMD [\"python\", \"runserver.py\"]\n"
    },
    {
        "filename": "eb3d4782fea5f41e4e764cf0e0ac9070cf6b7fd9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Language pack with Go runtime\nFROM ubuntu:trusty\n\nMAINTAINER Devdatta Kulkarni <devdatta.kulkarni@rackspace.com>\n\nRUN apt-get -yqq update && apt-get -yqq install curl build-essential libxml2-dev libxslt-dev git autoconf wget golang\n\nADD hello.go /tmp/hello.go\n\nADD testgo.sh /tmp/testgo.sh\n\nRUN cd /tmp && bash testgo.sh\n\n"
    },
    {
        "filename": "ec37174af3d42e08cbe51eb35afa70a1bc39ec7d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM marcbachmann/libvips  \nMAINTAINER Brendan Younger <brendan@brendanyounger.com>  \n  \nWORKDIR /image-server  \n  \nRUN apt-get update && \\  \nDEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential && \\  \ncurl -sL https://deb.nodesource.com/setup | sudo bash - && \\  \nDEBIAN_FRONTEND=noninteractive apt-get install -y nodejs && \\  \nnpm install -g image-resizer && \\  \nimage-resizer new && \\  \nnpm install  \n  \nRUN apt-get remove -y curl build-essential && \\  \napt-get autoremove -y && \\  \napt-get autoclean && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \nENV NODE_ENV=production  \n  \nEXPOSE 3001  \nENTRYPOINT nodejs index.js  \n\n"
    },
    {
        "filename": "ec72aa3a47433586c24330678a65bf7d0739cf1c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:8.0-devel-ubuntu16.04\nMAINTAINER Pierre Letessier <pletessier@ina.fr>\n\nRUN apt-get update -y\nRUN apt-get install -y libopenblas-dev python-numpy python-dev swig git python-pip wget\n\nRUN pip install matplotlib\n\nCOPY . /opt/faiss\n\nWORKDIR /opt/faiss\n\nENV BLASLDFLAGS /usr/lib/libopenblas.so.0\n\nRUN mv example_makefiles/makefile.inc.Linux ./makefile.inc\n\nRUN make tests/test_blas -j $(nproc) && \\\n    make -j $(nproc) && \\\n    make demos/demo_sift1M -j $(nproc) && \\\n    make py\n\nRUN cd gpu && \\\n    make -j $(nproc) && \\\n    make test/demo_ivfpq_indexing_gpu && \\\n    make py\n\nENV PYTHONPATH $PYTHONPATH:/opt/faiss\n\n# RUN ./tests/test_blas && \\\n#     tests/demo_ivfpq_indexing\n\n\n# RUN wget ftp://ftp.irisa.fr/local/texmex/corpus/sift.tar.gz && \\\n#     tar xf sift.tar.gz && \\\n#     mv sift sift1M\n\n# RUN tests/demo_sift1M\n"
    },
    {
        "filename": "ed64c172a1a6a05630ec01f5a84432cbc1eb44da.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian\n\nMAINTAINER alan.zimm@gmail.com\n\nENV DEBIAN_FRONTEND noninteractive\n\n####### GHC 7.4.2 ######################\nRUN apt-get update\nRUN apt-get install -y wget\nRUN apt-get install -y bzip2\nRUN apt-get install -y libgmp-dev\n\nRUN wget http://www.haskell.org/ghc/dist/7.4.2/ghc-7.4.2-x86_64-unknown-linux.tar.bz2\n\nRUN tar xvfj ghc-7.4.2-x86_64-unknown-linux.tar.bz2\n\nRUN ln -s /usr/lib/x86_64-linux-gnu/libgmp.so /usr/lib/x86_64-linux-gnu/libgmp.so.3\n\nRUN apt-get install -y libncursesw5 gcc apt-utils\nRUN apt-get install -y make\n\nRUN cd ghc-7.4.2 && ./configure\nRUN cd ghc-7.4.2 && make install\n\n##### haskell platform 2013.2.0.0 #################\n\n# RUN wget http://www.haskell.org/platform/download/2013.2.0.0/haskell-platform-2013.2.0.0.tar.gz\n\n# RUN tar xvfz haskell-platform-2013.2.0.0.tar.gz\n\n# RUN apt-get install -y zlib1g-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev\n\n# RUN apt-get install -y libglc-dev libedit-dev libglw1-mesa libglw1-mesa-dev\n# RUN apt-get install -y zlib1g-dev\n\n\n# RUN cd haskell-platform-2013.2.0.0 && ./configure --enable-unsupported-ghc-version\n# RUN cd haskell-platform-2013.2.0.0 && make\n# RUN cd haskell-platform-2013.2.0.0 && make install\n\n##### haskell platform 2012.4.0.0 ######\n\nRUN wget http://www.haskell.org/platform/download/2012.4.0.0/haskell-platform-2012.4.0.0.tar.gz\n\nRUN tar xvfz haskell-platform-2012.4.0.0.tar.gz\n\nRUN apt-get -y install libterm-readline-perl-perl\nRUN export TERM=xterm && apt-get install -y dialog\n\nRUN apt-get install -y zlib1g-dev\nRUN apt-get install -y libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev\nRUN apt-get install -y libglc-dev libedit-dev libglw1-mesa libglw1-mesa-dev\n\nRUN cd haskell-platform-2012.4.0.0 && ./configure\nRUN cd haskell-platform-2012.4.0.0 && make\nRUN cd haskell-platform-2012.4.0.0 && make install\n\n\n# Note: to debug the partial build do the following\n# docker run -i -t alanz/HaRe /bin/bash\n"
    },
    {
        "filename": "ed71571751514d97a371b8b7271817aa10fb566a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# million12/nginx-php\n#\nFROM million12/nginx:latest\nMAINTAINER Marcin Ryzycki <marcin@m12.io>\n\nENV \\\n  NVM_DIR=/usr/local/nvm \\\n  NODE_VERSION=6.3.0 \\\n  STATUS_PAGE_ALLOWED_IP=127.0.0.1\n\n# Add install scripts needed by the next RUN command\nADD container-files/config/install* /config/\nADD container-files/etc/yum.repos.d/* /etc/yum.repos.d/\n\nRUN \\\n  yum update -y && \\\n  `# Install some basic web-related tools...` \\\n  yum install -y wget patch tar bzip2 unzip openssh-clients MariaDB-client && \\\n\n  `# Install PHP 7.0 from Remi YUM repository...` \\\n  rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-7.rpm && \\\n\n  yum install -y \\\n    php70-php \\\n    php70-php-bcmath \\\n    php70-php-cli \\\n    php70-php-common \\\n    php70-php-devel \\\n    php70-php-fpm \\\n    php70-php-gd \\\n    php70-php-gmp \\\n    php70-php-intl \\\n    php70-php-json \\\n    php70-php-mbstring \\\n    php70-php-mcrypt \\\n    php70-php-mysqlnd \\\n    php70-php-opcache \\\n    php70-php-pdo \\\n    php70-php-pear \\\n    php70-php-process \\\n    php70-php-pspell \\\n    php70-php-xml \\\n\n    `# Also install the following PECL packages:` \\\n    php70-php-pecl-imagick \\\n    php70-php-pecl-mysql \\\n    php70-php-pecl-uploadprogress \\\n    php70-php-pecl-uuid \\\n    php70-php-pecl-zip \\\n\n    `# Temporary workaround: one dependant package fails to install when building image (and the yum error is: Error unpacking rpm package httpd-2.4.6-40.el7.centos.x86_64)...` \\\n    || true && \\\n\n  `# Set PATH so it includes newest PHP and its aliases...` \\\n  ln -sfF /opt/remi/php70/enable /etc/profile.d/php70-paths.sh && \\\n  `# The above will set PATH when container starts... but not when php is used on container build time.` \\\n  `# Therefore create symlinks in /usr/local/bin for all PHP tools...` \\\n  ln -sfF /opt/remi/php70/root/usr/bin/{pear,pecl,phar,php,php-cgi,php-config,phpize} /usr/local/bin/. && \\\n\n  php --version && \\\n\n  `# Move PHP config files from /etc/opt/remi/php70/* to /etc/* ` \\\n  mv -f /etc/opt/remi/php70/php.ini /etc/php.ini && ln -s /etc/php.ini /etc/opt/remi/php70/php.ini && \\\n  rm -rf /etc/php.d && mv /etc/opt/remi/php70/php.d /etc/. && ln -s /etc/php.d /etc/opt/remi/php70/php.d && \\\n\n  echo 'PHP 7 installed.' && \\\n\n  `# Install libs required to build some gem/npm packages (e.g. PhantomJS requires zlib-devel, libpng-devel)` \\\n  yum install -y ImageMagick GraphicsMagick gcc gcc-c++ libffi-devel libpng-devel zlib-devel && \\\n\n  `# Install common tools needed/useful during Web App development` \\\n  `# Install Ruby 2` \\\n  yum install -y ruby ruby-devel && \\\n  echo 'gem: --no-document' > /etc/gemrc && \\\n  gem update --system && \\\n  gem install bundler && \\\n\n  `# Install/compile other software (Git, NodeJS)` \\\n  source /config/install.sh && \\\n\n  `# Install nvm and NodeJS/npm` \\\n  export PROFILE=/etc/profile.d/nvm.sh && touch $PROFILE && \\\n  curl -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh | bash && \\\n  source $NVM_DIR/nvm.sh && \\\n  nvm install $NODE_VERSION && \\\n  nvm alias default $NODE_VERSION && \\\n  nvm use default && \\\n\n  `# Install common npm packages: grunt, gulp, bower, browser-sync` \\\n  npm install -g gulp grunt-cli bower browser-sync && \\\n\n  `# Disable SSH strict host key checking: needed to access git via SSH in non-interactive mode` \\\n  echo -e \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config && \\\n\n  `# Install Memcached, Redis PECL extensions from the source. Versions available in yum repo have dependency on igbinary which causes PHP seg faults in some PHP apps (e.g. Flow/Neos)...` \\\n  `# Install PHP Memcached ext from the source...` \\\n  yum install -y libmemcached-devel && \\\n  git clone https://github.com/php-memcached-dev/php-memcached.git && cd php-memcached && git checkout php7 && \\\n  phpize && ./configure && make && make install && \\\n  echo \"extension=memcached.so\" > /etc/php.d/50-memcached.ini && \\\n  `# Install PHP Redis ext from the source...` \\\n  git clone https://github.com/phpredis/phpredis.git && cd phpredis && git checkout php7 && \\\n  phpize && ./configure && make && make install && \\\n  echo \"extension=redis.so\" > /etc/php.d/50-redis.ini && \\\n\n  curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\n  chown www /usr/local/bin/composer && composer --version && \\\n\n  `# Clean YUM caches to minimise Docker image size... #` \\\n  yum clean all && rm -rf /tmp/yum*\n\nADD container-files /\n\n# Add NodeJS/npm to PATH (must be separate ENV instruction as we want to use $NVM_DIR)\nENV \\\n  NODE_PATH=$NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules \\\n  PATH=$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n"
    },
    {
        "filename": "ed91df64ebe4c3ab1aaff2c05d44b9e674b9bc18.dockerfile",
        "riskid_list": "DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos:latest\nMAINTAINER \"The CentOS Project\" <admin@jiobxn.com>\nARG LATEST=\"0\"\nENV container docker\n\nRUN \\cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN yum clean all; yum -y install epel-release; yum -y update\nRUN yum -y install cockpit bash-completion vim wget python34-setuptools aria2 openssh-server openssh-clients initscripts iptables-services bind-utils net-tools cronie at; yum clean all\nRUN easy_install-3.4 pip; pip install --upgrade youtube-dl you-get\nRUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \\\nsystemd-tmpfiles-setup.service ] || rm -f $i; done); \\\nrm -f /lib/systemd/system/multi-user.target.wants/*;\\\nrm -f /etc/systemd/system/*.wants/*;\\\nrm -f /lib/systemd/system/local-fs.target.wants/*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\nrm -f /lib/systemd/system/basic.target.wants/*;\\\nrm -f /lib/systemd/system/anaconda.target.wants/*;\n\nRUN systemctl enable cockpit.socket\nRUN echo -e '#!/bin/bash\\n: ${PASS:=$(pwmake 128)}\\n\\nif [ ! -f /init.ok ]; then \\n  echo \"root:$PASS\" | chpasswd\\n  echo -e \"root password: $PASS\"\\n  touch /init.ok\\nfi\\n\\nexec \"$@\"' >/init.sh\nRUN chmod +x /init.sh\n\nVOLUME [ \"/sys/fs/cgroup\" ]\nENTRYPOINT [\"/init.sh\"]\nCMD [\"/usr/sbin/init\"]\n\n# docker build -t cockpit .\n# docker run -d --restart always --privileged -p 9090:9090 -v /sys/fs/cgroup:/sys/fs/cgroup:ro --name webshell cockpit\n"
    },
    {
        "filename": "edf21070b49700778f242b390b9036c022560553.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM hypriot/rpi-ruby\nMAINTAINER steffen <devnull@snizzle.org>\n\nRUN apt-get update \\\n && apt-get install -y \\\n      sqlite \\\n      nodejs \\\n      libpq-dev \\\n      libssl-dev \\\n      libsqlite3-dev \\\n      ruby-dev \\\n      python3 \\\n      python3-pip \\\n && mkdir /app \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nCOPY . .\n\nRUN gem install dashing \\\n && gem install bundler \\\n && bundle \\\n && pip3 install daemonize sseclient configobj \\\n && pip3 install --upgrade requests\n\n\nEXPOSE 3030\n\nVOLUME /app/lib /app/dashboards /app/hapush\n\nCMD /app/hapush/hapush.py -d /app/hapush/hapush.cfg && dashing start\n"
    },
    {
        "filename": "eeca2e0443febda3d9101887b3be12271bae5a51.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM boomtownroi/data-volume:latest  \n  \nMAINTAINER BoomTown CNS Team <consumerteam@boomtownroi.com>  \n  \nENV ALLOW_DEBUG true  \n  \n# Install nginx and have it forward logs to Docker  \nRUN add-apt-repository -y ppa:nginx/stable &2> /dev/null  \n  \nRUN apt-get update && \\  \napt-get install -y git php-fpm php-mysql php-curl php-gd \\  \nphp-intl php-mbstring php-pear php-imagick php-imap php-mcrypt php-memcached \\  \ng++ cpp php-dev \\  \nphp-pspell php-recode php-tidy php-xmlrpc php-xsl php-xdebug netcat \\  \npkg-config byacc && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/*  \n  \n# Install latest development version of Swig that has support for PHP7  \nRUN cd / && \\  \ngit clone https://github.com/swig/swig.git  \n  \nRUN cd swig && \\  \nsh ./autogen.sh && \\  \n./configure && \\  \nmake && \\  \nmake install  \n  \n# Clean up  \nRUN cd / && \\  \nrm -rf swig  \n  \n# Install & configure the 51Degrees extension  \nRUN cd / && \\  \ngit clone https://github.com/51Degrees/Device-Detection.git  \n  \nRUN cd Device-Detection/php/pattern && \\  \nphpize && \\  \n./configure PHP7=1 && \\  \nmake install  \n  \n# Clean up  \nRUN cd / && \\  \nrm -rf Device-Detection && \\  \napt-get remove -y git  \n  \n# COPY root/build-v8.sh /build-v8.sh  \n# RUN /build-v8.sh  \nCOPY root /  \n  \nRUN phpenmod opcache && phpdismod xdebug  \n  \nVOLUME /var/run/fpm/  \n\n"
    },
    {
        "filename": "efece8d6dfc0152513e79200cf813c3ec4320bbc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# docker run -d --restart=always \\\n#   -v $PWD/conf:/etc/kapacitor.toml\n#   -v /tasks:/var/lib/kapacitor/tasks\n#   gianarb/kapacitor\n#\nFROM ubuntu\nMAINTAINER Gianluca Arbezzano <gianarb92@gmail.com>\n\nENV KAPACITOR_CONF=/etc/kapacitor.toml\nEXPOSE 9092\n\nRUN apt-get update\nRUN apt-get install -y wget\n\nRUN wget https://dl.influxdata.com/kapacitor/releases/kapacitor_0.13.1_amd64.deb\nRUN dpkg -i kapacitor_0.13.1_amd64.deb\nRUN rm kapacitor_0.13.1_amd64.deb\n\nADD ./kapacitor.toml $KAPACITOR_CONF\nADD ./run.sh /opt/run.sh\nRUN chmod 755 /opt/run.sh\n\nCMD [\"/opt/run.sh\"]\n"
    },
    {
        "filename": "f040cb1c831161e2628173127ae918d410d32aa5.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu as builder\nMAINTAINER Roy van Rijn\n\nRUN apt-get update && \\\n    apt-get -y install gcc libc6-dev zlib1g-dev curl bash && \\\n    rm -rf /var/lib/apt/lists/*\n\n# GraalVM\n\nENV GRAAL_VERSION 1.0.0-rc6\nENV GRAAL_FILENAME graalvm-ce-${GRAAL_VERSION}-linux-amd64.tar.gz\n\nRUN curl -4 -L https://github.com/oracle/graal/releases/download/vm-${GRAAL_VERSION}/${GRAAL_FILENAME} -o /tmp/${GRAAL_FILENAME}\n\nRUN tar -zxvf /tmp/${GRAAL_FILENAME} -C /tmp \\\n    && mv /tmp/graalvm-ce-${GRAAL_VERSION} /usr/lib/graalvm\n\nRUN rm -rf /tmp/*\n\nWORKDIR /projects\nADD . /projects/\n\nARG GRAAL_ARGUMENTS\n\nRUN /usr/lib/graalvm/bin/native-image ${GRAAL_ARGUMENTS}\n\nFROM ubuntu\nMAINTAINER Roy van Rijn\n\nRUN apt-get update && \\\n    apt-get -y install gcc libc6-dev zlib1g-dev curl bash && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /projects/app /app\nEXPOSE 4567\nCMD [\"/app\"]\n"
    },
    {
        "filename": "f0a2eb224105a91d0b88632160c0d74489de5ceb.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:9.0-cudnn7-runtime\n\nMAINTAINER K-Lab Authors <service@kesci.com>\n\nUSER root\n\n# Configure environment\nENV CONDA_DIR /opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\nENV SHELL /bin/bash\nENV NB_USER kesci\nENV NB_UID 1000\nENV HOME /home/$NB_USER\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Install prerequisites\nRUN apt-get update && apt-get -yqq dist-upgrade && \\\n    # Basic utils\n    apt-get install -yqq --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    bzip2 \\\n    ca-certificates \\\n    iptables \\\n    locales \\\n    sudo \\\n    wget \\\n    strace \\\n    # Install all OS dependencies for fully functional notebook server\n    build-essential \\\n    emacs \\\n    git \\\n    inkscape \\\n    jed \\\n    libsm6 \\\n    libxrender1 \\\n    pandoc \\\n    python-dev \\\n    texlive-fonts-extra \\\n    texlive-fonts-recommended \\\n    texlive-generic-recommended \\\n    texlive-latex-base \\\n    texlive-latex-extra \\\n    unzip \\\n    vim \\\n    && \\\n    # Setup locales\n    echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen && \\\n    # Create kesci user with UID=1000 and in the 'users' group\n    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\\n    chown $NB_USER $CONDA_DIR && \\\n    # Python pre-requisites\n    apt-get install -yqq \\\n    libfontconfig1 \\\n    libfreetype6-dev \\\n    libglib2.0-0 \\\n    libsm6 \\\n    libxext6 \\\n    libxrender1 \\\n    # Pillow dependencies\n    liblcms2-dev \\\n    libwebp-dev \\\n    zlib1g-dev \\\n    # R pre-requisites\n    ca-certificates \\\n    fonts-dejavu \\\n    gcc \\\n    gfortran \\\n    graphviz \\\n    libxml2-dev \\\n    xz-utils \\\n    libudunits2-dev \\\n    default-jdk && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    echo \"deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\\n\" > /etc/apt/source.list\n\n# Setup kesci home directory and install conda\nRUN su -m -l $NB_USER -c '\\\n    mkdir /home/$NB_USER/work && \\\n    mkdir /home/$NB_USER/input && \\\n    mkdir /home/$NB_USER/.jupyter && \\\n    echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc && \\\n    # Install conda as kesci\n    cd /tmp && \\\n    mkdir -p $CONDA_DIR && \\\n    wget https://repo.continuum.io/miniconda/Miniconda3-4.4.10-Linux-x86_64.sh -O Miniconda3-latest-Linux-x86_64.sh && \\\n    sha256sum Miniconda3-latest-Linux-x86_64.sh && \\\n    /bin/bash Miniconda3-latest-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    rm Miniconda3-latest-Linux-x86_64.sh && \\\n    $CONDA_DIR/bin/conda --version && \\\n    $CONDA_DIR/bin/conda config --set show_channel_urls yes && \\\n    $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \\\n    $CONDA_DIR/bin/conda clean -tipsy \\\n    ' && \\\n    echo \"jpeg 9*\" >> /opt/conda/conda-meta/pinned\n\nUSER root\n\nRUN cd /tmp && \\\n    wget https://bootstrap.pypa.io/get-pip.py && \\\n    python2 get-pip.py && \\\n    rm get-pip.py && \\\n    python2 -m pip install ipykernel && \\\n    python2 -m ipykernel install && \\\n    chown $NB_USER /usr/local/bin && \\\n    chown $NB_USER /usr/local/share && \\\n    chown -R $NB_USER /usr/local/lib/python2.7\n\n# Julia dependencies\n# install Julia packages in /opt/julia instead of $HOME\nENV JULIA_DEPOT_PATH=/opt/julia\nENV JULIA_PKGDIR=/opt/julia\nENV JULIA_VERSION=1.0.0\n\nRUN mkdir /opt/julia-${JULIA_VERSION} && \\\n    cd /tmp && \\\n    wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \\\n    echo \"bea4570d7358016d8ed29d2c15787dbefaea3e746c570763e7ad6040f17831f3 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - && \\\n    tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \\\n    rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n\n# Show Julia where conda libraries are \\\nRUN mkdir /etc/julia && \\\n    echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl && \\\n    # Create JULIA_PKGDIR \\\n    mkdir $JULIA_PKGDIR && \\\n    chown $NB_USER $JULIA_PKGDIR\n\nUSER $NB_USER\n\nRUN echo \"Install R and R basic packages\" && \\\n    conda config --add channels conda-forge && \\\n    conda install -y \\\n    'r-essentials=3.5.1' && \\\n    conda config --add channels ataenzer && \\\n    conda config --add channels jsignell && \\\n    conda config --add channels pjones && \\\n    conda config --add channels omgarcia && \\\n    conda config --add channels cgat && \\\n    conda config --add channels sebp && \\\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ && \\\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ && \\\n    conda install -y \\\n    'r-tm' \\\n    'r-rcolorbrewer' \\\n    'r-nnet' \\\n    'r-nlp' \\\n    'r-ggmap' \\\n    'r-chron' \\\n    'r-rocr' \\\n    'r-arules' \\\n    && \\\n    echo 'options(\"repos\" = c(CRAN=\"http://cran.us.r-project.org\"))' > ~/.Rprofile && \\\n    R -e \"\\\n    install.packages('choroplethr'); \\\n    install.packages('choroplethrMaps'); \\\n    install.packages('Metrics'); \\\n    install.packages('DescTools'); \\\n    install.packages('tools'); \\\n    install.packages('grid'); \\\n    install.packages('WDI'); \\\n    install.packages('wordcloud'); \\\n    install.packages('wordcloud2'); \\\n    install.packages('xgboost'); \\\n    install.packages('plotly');\" && \\\n    echo 'options(\"repos\" = c(CRAN=\"https://mirrors.tuna.tsinghua.edu.cn/CRAN/\"))' > ~/.Rprofile && \\\n    conda clean -tipsy\n\n# Add Julia packages. Only add HDF5 if this is not a test-only build since\n# it takes roughly half the entire build time of all of the images on Travis\n# to add this one package and often causes Travis to timeout.\n#\n# Install IJulia as jovyan and then move the kernelspec out\n# to the system share location. Avoids problems with runtime UID change not\n# taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'import Pkg; Pkg.update()' && \\\n    (test $TEST_ONLY_BUILD || julia -e 'import Pkg; Pkg.add(\"HDF5\")') && \\\n    julia -e 'import Pkg; Pkg.add(\"Gadfly\")' && \\\n    julia -e 'import Pkg; Pkg.add(\"RDatasets\")' && \\\n    julia -e 'import Pkg; Pkg.add(\"IJulia\")' && \\\n    # Precompile Julia packages \\\n    julia -e 'using IJulia' && \\\n    # move kernelspec out of home \\\n    mkdir -p $CONDA_DIR/share/jupyter/kernels/ && \\\n    mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ && \\\n    chmod -R go+rx $CONDA_DIR/share/jupyter && \\\n    rm -rf $HOME/.local\n\nUSER root\n\n# Make sure /usr/local/ and conda directories belong to user.\nRUN chown $NB_USER /usr/local/bin && \\\n    chown $NB_USER /usr/local/share && \\\n    chown -R $NB_USER /usr/local/lib && \\\n    chown -R $NB_USER /opt/conda/lib/python3.6/site-packages/ && \\\n    chown -R $NB_USER /usr/local/lib/python2.7/dist-packages/ && \\\n    mkdir -p /home/$NB_USER/.cache && chown $NB_USER -R /home/$NB_USER/.cache && \\\n    rm -rf /root/.cache/pip/* && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    rm -rf /home/$NB_USER/.cache/matplotlib/ && \\\n    # Allow kesci run sudo apt-get\n    echo \"kesci ALL=NOPASSWD: /usr/bin/apt-get\" > /etc/sudoers.d/kesci && chmod 0400 /etc/sudoers.d/kesci\n\nWORKDIR /home/$NB_USER/work\n"
    },
    {
        "filename": "f154328f3781989215f43edc050808adb576905d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.1\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.22.1\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "f208b84895e06429658dc04168a9f9b1f819d6e3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ocaml/opam:debian-stable_ocaml-4.03.0  \nMAINTAINER canopy  \nENV OPAMYES 1  \nRUN sudo apt-get update  \nRUN sudo apt-get -yy install npm  \nRUN sudo ln -s `which nodejs` /usr/bin/node  \nRUN sudo npm install -g less browserify  \nRUN cd /home/opam/opam-repository && git pull && opam update  \nRUN opam remote add mirage-dev git://github.com/mirage/mirage-dev.git  \nRUN opam update -u  \nADD package.json README.md config.ml /src/  \nWORKDIR /src  \nADD tls /src/tls  \nRUN sudo chown -R opam:opam /src; sudo chmod -R 700 /src  \nENV TMP /tmp  \nRUN opam pin add git git://github.com/avsm/ocaml-git#dirty-warning  \nRUN opam install -y -j2 mirage  \nRUN opam config exec \\-- mirage configure --no-assets-compilation  \nCOPY . /src  \nADD assets /src/assets  \nRUN sudo chown -R opam:opam /src; sudo chmod -R 700 /src  \nRUN opam config exec \\-- mirage configure --no-opam --no-depext  \nRUN opam config exec \\-- make  \nEXPOSE 8080  \nENTRYPOINT [\"opam\", \"config\", \"exec\", \"--\", \"./mir-canopy\"]  \n\n"
    },
    {
        "filename": "f2b869e496d722070e6b6aec03fd86031c23a50b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM phusion/baseimage\nENV ARCH amd64\nENV DIST trusty\nRUN echo 'deb http://fuel-repository.mirantis.com/fwm/5.0/ubuntu trusty main' >> /etc/apt/sources.list\nRUN apt-get -q update\nRUN apt-get -y --force-yes install python-cliff python-pyparsing python-pypcap scapy python-pip wget openssh-server\nRUN pip install pytest mock\nRUN sudo locale-gen en_US.UTF-8\n\nRUN mkdir -p /app\n"
    },
    {
        "filename": "f2dea74ac6c1a84188a117c456bdb86e55ff4b54.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM eosio/builder\nARG branch=master\nARG symbol=SYS\n\nRUN git clone -b $branch https://github.com/EOSIO/eos.git --recursive \\\n    && cd eos && echo \"$branch:$(git rev-parse HEAD)\" > /etc/eosio-version \\\n    && cmake -H. -B\"/opt/eosio\" -GNinja -DCMAKE_BUILD_TYPE=Release -DWASM_ROOT=/opt/wasm -DCMAKE_CXX_COMPILER=clang++ \\\n       -DCMAKE_C_COMPILER=clang -DCMAKE_INSTALL_PREFIX=/opt/eosio -DBUILD_MONGO_DB_PLUGIN=true -DCORE_SYMBOL_NAME=$symbol \\\n    && cmake --build /opt/eosio --target install \\\n    && cp /eos/Docker/config.ini / && ln -s /opt/eosio/contracts /contracts && cp /eos/Docker/nodeosd.sh /opt/eosio/bin/nodeosd.sh && ln -s /eos/tutorials /tutorials\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install openssl ca-certificates vim psmisc python3-pip && rm -rf /var/lib/apt/lists/*\nRUN pip3 install numpy\nENV EOSIO_ROOT=/opt/eosio\nRUN chmod +x /opt/eosio/bin/nodeosd.sh\nENV LD_LIBRARY_PATH /usr/local/lib\nENV PATH /opt/eosio/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"
    },
    {
        "filename": "f31dd9e133353d74bb456ff847b23487cc20d6c6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\nFROM microsoft/dotnet:latest\n\nRUN DIST=xenial && \\\n    sed -i 's/deb.debian.org/ftp.daumkakao.com/' /etc/apt/sources.list && \\\n    apt-get update\nRUN apt-get install -y xinetd\n\nCOPY Lambda /Lambda\nCOPY chal /chal\nCOPY repl /repl\n\nRUN cd /repl && \\\n      dotnet build -c repl\n\nRUN cd /chal && \\\n      dotnet build -c release\n\n\nADD repl.xinetd /etc/xinetd.d/repl\nADD chal.xinetd /etc/xinetd.d/chal\nADD repl.sh /\nADD chal.sh /\nADD start.sh /\n\nRUN chmod +x /repl.sh\nRUN chmod +x /chal.sh\nRUN chmod +x /start.sh\n\n\nEXPOSE 42\nEXPOSE 4242\nCMD [\"/start.sh\"]\n"
    },
    {
        "filename": "f39b9421af9a2344abad89253f45e09d3920538b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:14.04\n\n# Install all the required packages.\nRUN apt-get update\nRUN apt-get -y install \\\n  git apache2 dpkg-dev python-pygments \\\n  php5 php5-mysql php5-gd php5-dev php5-curl php-apc php5-cli php5-json php5-xhprof\nRUN a2enmod rewrite\nRUN apt-get source php5\nRUN (cd `ls -1F | grep '^php5-.*/$'`/ext/pcntl && phpize && ./configure && make && sudo make install)\n\n# Load code source.\nRUN mkdir /home/www-data\nRUN cd /home/www-data && git clone https://github.com/phacility/libphutil.git\nRUN cd /home/www-data && git clone https://github.com/phacility/arcanist.git\nRUN cd /home/www-data && git clone https://github.com/phacility/phabricator.git\nRUN chown -R www-data /home/www-data\nRUN chgrp -R www-data /home/www-data\n\nADD 000-default.conf /etc/apache2/sites-available/000-default.conf\nADD run.sh /run.sh\nRUN chmod a+x /*.sh\n\n# Run Apache2.\nEXPOSE 80\nCMD [\"/run.sh\"]\n"
    },
    {
        "filename": "f4188e35fe7aae2052ba3ec151d0d8fa301d533b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Syoyo Fujita(syoyo@lighttransport.com)\n\nRUN apt-get update\nRUN apt-get -y --force-yes install x-window-system\nRUN apt-get install -y binutils\nRUN apt-get install -y pkg-config\nRUN apt-get install -y x11vnc\nRUN apt-get install -y mesa-utils\nRUN apt-get install -y libgtk2.0-0\nRUN apt-get install -y twm\n\nADD NVIDIA-DRIVER.run /tmp/NVIDIA-DRIVER.run\nRUN sh /tmp/NVIDIA-DRIVER.run -a -N --ui=none --no-kernel-module\nRUN nvidia-xconfig -a --use-display-device=None --enable-all-gpus --virtual=1280x1024\nRUN rm /tmp/NVIDIA-DRIVER.run\n"
    },
    {
        "filename": "f44963b2e47e351eb95ec275d362829c668f3418.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Sample Dockerfile that can be use to build heat-translator docker container\nFROM ubuntu\n\nMAINTAINER Heat Translator contributors\n\nRUN apt-get -y update && apt-get install -y \\\n    python-pip\n\nRUN pip install heat-translator\n\nCOPY heat_translator_logging.conf /usr/local/lib/python2.7/dist-packages/translator/conf/\n\n# Have some test TOSCA templates in my_tosca directory to copy to the container as an example.\n# This is an optional step and can be removed.\nCOPY my_tosca /tmp/my_tosca\n\nENTRYPOINT [\"heat-translator\"]\n\n"
    },
    {
        "filename": "f4a20bf8d57f8b9d44dbbbd3f8961e60c5cdeb85.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "###########################################################\n# Gargamelle WEB\n###########################################################\n#Build an image starting with debian:stretch image\n# wich contains all the source code of the app\nFROM debian:stretch\nMAINTAINER ISCPIF <gargantext@iscpif.fr>\n\nUSER root\n\n\n### Update and install base dependencies\nRUN echo \"############ DEBIAN LIBS ###############\"\nRUN apt-get update &&                                     \\\n    apt-get install -y                                     \\\n    apt-utils ca-certificates locales                       \\\n    sudo aptitude gcc g++ wget git vim                       \\\n    build-essential make                                      \\\n    curl                                                       \n#    postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6 \\\n#    postgresql-server-dev-9.6 libpq-dev libxml2                  \\\n#    postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6\n\n# Install Stack\n\n### Configure timezone and locale\nRUN echo \"###########  LOCALES & TZ #################\"\nRUN echo \"Europe/Paris\" > /etc/timezone\nENV TZ \"Europe/Paris\"\n\nRUN sed -i -e 's/# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/' /etc/locale.gen && \\\n    sed -i -e 's/# fr_FR.UTF-8 UTF-8/fr_FR.UTF-8 UTF-8/' /etc/locale.gen &&  \\\n    dpkg-reconfigure --frontend=noninteractive locales                   &&   \\\n    echo 'LANG=\"fr_FR.UTF-8\"' > /etc/default/locale\nENV LANG fr_FR.UTF-8\nENV LANGUAGE fr_FR.UTF-8\nENV LC_ALL fr_FR.UTF-8\n\n\n### Install main dependencies and python packages based on Debian distrib\nRUN echo \"############# PYTHON DEPENDENCIES ###############\"\nRUN apt-get update && apt-get install -y       \\\n        libxml2-dev xml-core libgfortran-6-dev  \\\n        libpq-dev                                \\\n        python3.5                                 \\\n        python3-dev                                \\\n        # for numpy, pandas and numpyperf           \\\n        python3-six python3-numpy python3-setuptools \\\n        python3-numexpr                               \\\n        # python dependencies                          \\\n        python3-pip                                     \\\n        # for lxml\n        libxml2-dev libxslt-dev libxslt1-dev zlib1g-dev\n\n\n# UPDATE AND CLEAN\nRUN apt-get update && apt-get autoclean \\ \n    && rm -rf /var/lib/apt/lists/*\n#NB: removing /var/lib will avoid to significantly fill up your /var/ folder on your native system\n\n########################################################################\n### PYTHON ENVIRONNEMENT (as ROOT)\n########################################################################\n\nRUN adduser --disabled-password --gecos \"\" notebooks\n\nRUN pip3 install virtualenv\nRUN virtualenv /env_3-5\nRUN echo 'alias venv=\"source /env_3-5/bin/activate\"' >> ~/.bashrc\n# CONFIG FILES\nADD requirements.txt /\n#ADD psql_configure.sh /\nADD django_configure.sh /\n\nRUN . /env_3-5/bin/activate && pip3 install -r requirements.txt                         && \\\n    pip3  install git+https://github.com/zzzeek/sqlalchemy.git@rel_1_1                  && \\\n    python3 -m nltk.downloader averaged_perceptron_tagger -d /usr/local/share/nltk_data\n\n#RUN ./psql_configure.sh\n#RUN ./django_configure.sh\nRUN chown notebooks:notebooks -R /env_3-5\n\n########################################################################\n### POSTGRESQL DATA (as ROOT)\n########################################################################\n\n#RUN sed -iP \"s%^data_directory.*%data_directory = \\'\\/srv\\/gargandata\\'%\" /etc/postgresql/9.5/main/postgresql.conf\n#RUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.5/main/pg_hba.conf\n#RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.5/main/postgresql.conf\n\nEXPOSE 5432 8899\n\nVOLUME [\"/srv/\",\"/home/notebooks/\"]\n\n\n########################################################################\n### Notebook IHaskell and IPYTHON ENVIRONNEMENT\n########################################################################\n\nRUN apt-get update && apt-get install -y \\\n        libtinfo-dev                      \\\n        libzmq3-dev                        \\\n        libcairo2-dev                       \\\n        libpango1.0-dev                      \\\n        libmagic-dev                          \\\n        libblas-dev                            \\\n        liblapack-dev\n\n#USER notebooks\n#\n#RUN cd  /home/notebooks                              \\\n#    &&  curl -sSL https://get.haskellstack.org/ | sh  \\\n#    &&  stack setup                                    \\\n#    &&  git clone https://github.com/gibiansky/IHaskell \\\n#    &&  . /env_3-5/bin/activate                          \\\n#    &&  cd IHaskell                                       \\\n#    &&  stack install gtk2hs-buildtools                    \\\n#    &&  stack install --fast                                \\\n#    &&  /root/.local/bin/ihaskell install --stack\n#\n\n\n"
    },
    {
        "filename": "f4e1e361df0528703a53717df098dd4a3f94fadb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:latest\nMAINTAINER Matej Kramny <matej@matej.me>\n\nRUN apt-get update\nRUN apt-get install -y apache2 php-pear php5-curl php5-mysql php5-odbc php5-imagick php5-mcrypt mysql-client curl git postfix libsasl2-modules rsyslog python-setuptools libapache2-mod-php5 php5-imap\nRUN apt-get install -y imagemagick php5-imagick php5-gd\nRUN pear install Mail Mail_Mime Net_SMTP Net_Socket Spreadsheet_Excel_Writer XML_RPC\nRUN php5enmod mcrypt\n\nRUN apt-get install -y supervisor\nRUN mkdir -p /var/log/supervisor\n\nRUN a2enmod rewrite\nRUN a2enmod php5\n\nRUN rm -f /etc/apache2/sites-enabled/000-default.conf\n\nADD conf/supervisord.conf /etc/supervisord.conf\nADD conf/website.conf /etc/apache2/conf.d/website.conf\nADD conf/httpd.conf /etc/apache2/apache2.conf\nADD conf/php.ini /etc/php5/apache2/php.ini\nADD conf/postfix.cf /etc/postfix/main.cf\nADD conf/sasl_passwd /etc/postfix/sasl_passwd\nADD conf/rsyslog.conf /etc/rsyslog.conf\nADD conf/lamp.sh /etc/lamp.sh\n\nRUN chmod +x /etc/lamp.sh\n\nRUN chown -R root:root /etc/postfix\nRUN chmod 600 /etc/postfix/sasl_passwd\nRUN postmap /etc/postfix/sasl_passwd\n# Maybe a fix for some errors..\nRUN chmod o+rwx /var/spool/postfix/maildrop\nRUN chmod o+x /var/spool/postfix/public\n\n# Fix session write warnings\nRUN chown www-data:www-data /var/lib/php5\nRUN chmod g+rwx /var/lib/php5\n\nRUN apachectl configtest\nRUN rm -rf /var/www\n\nRUN service apache2 stop\nRUN service postfix stop\nRUN service rsyslog stop\n\nEXPOSE 80\nEXPOSE 443\n\nCMD [\"/etc/lamp.sh\"]\n"
    },
    {
        "filename": "f4e7e9804a7aa2bbb4edbb98440a04e537f9eb61.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# in production this should probably be busybox, but let's use ubuntu for a\n# fair comparison \nFROM tutum/ubuntu-saucy\n\nMAINTAINER Ram Rajamony, rajamon@us.ibm.com\n\nRUN apt-get -qq install -y libgomp1 numactl\nADD bin /\nCMD numactl --physcpubind=0-31 --interleave=0,1 /gups.exe\n"
    },
    {
        "filename": "f53df77660bb6f6b9f4ad0beff573fc24a5ff0d3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# to build:\n# docker build -t=\"pgbovine/opt-cpp-backend:v1\" .\n#\n# to test:\n# docker run -t -i --rm --user=netuser --net=none --cap-drop all pgbovine/opt-cpp-backend:v1 bash\n#\n# remember --rm or else stale old containers will be left around!\n# use \"docker ps -a\" to see all containers\n\n# don't use 'latest' tag since that might change\nFROM ubuntu:14.04.1\nMAINTAINER Philip Guo <philip@pgbovine.net>\n\n# if apt-get doesn't work, then follow these instructions:\n# http://stackoverflow.com/questions/24991136/docker-build-could-not-resolve-archive-ubuntu-com-apt-get-fails-to-install-a\n# Uncomment the following line in /etc/default/docker DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\"\n# Restart the Docker service sudo service docker restart\n#\n# to get gcc and g++, Valgrind needs libc6-dbg apparently\nRUN apt-get update && apt-get install -y \\\n  build-essential \\\n  autotools-dev \\\n  automake \\\n  libc6-dbg \\\n  python\n\nRUN mkdir /tmp/opt-cpp-backend\nADD . /tmp/opt-cpp-backend\n\n# we need to compile Valgrind from scratch within the container (hence\n# 'make clean' first) to make it work from within the container, ergh\nRUN cd /tmp/opt-cpp-backend/valgrind-3.11.0 && make clean && ./autogen.sh && ./configure --prefix=`pwd`/inst && make && make install\n\nRUN useradd netuser\n\nRUN cd /tmp/ && find . | xargs chown netuser\n"
    },
    {
        "filename": "f54235279356af80d82d9ec4d9037d197111500d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu\n\nRUN apt-get update\nRUN apt-get install -y apt-utils vim curl apache2 apache2-utils\nRUN apt-get -y install python3 libapache2-mod-wsgi-py3\nRUN ln /usr/bin/python3 /usr/bin/python\nRUN apt-get -y install python3-pip\nRUN ln /usr/bin/pip3 /usr/bin/pip\nRUN pip install --upgrade pip\nRUN pip install django ptvsd ddtrace\n\nRUN ln -sf /proc/self/fd/1 /var/log/apache2/access.log && \\\n    ln -sf /proc/self/fd/1 /var/log/apache2/error.log\n\nADD ./wsgi_site.conf /etc/apache2/sites-available/000-default.conf\n\nWORKDIR /var/www/html/app\n\nEXPOSE 80\nCMD sh -c \"python manage.py makemigrations polls; python manage.py migrate polls; apache2ctl -D FOREGROUND\"\n"
    },
    {
        "filename": "f55a4f6c71d543210e76c7a209c5700fd755dc3d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Interactive Base Image (gewo/interactive)\nFROM gewo/base\nMAINTAINER Gebhard W\u00f6stemeyer <g.woestemeyer@gmail.com>\n\nADD docker_link /usr/local/bin/docker_link\nRUN chmod 755 /usr/local/bin/docker_link\n\nONBUILD RUN apt-get update && \\\n  apt-get install -y zsh vim lftp\n\nONBUILD RUN echo 'docker_link' >> /etc/shell_env\nONBUILD RUN echo 'cd /mnt' >> /etc/shell_env\n\nONBUILD RUN echo '. /etc/shell_env' >> /etc/bash.bashrc\nONBUILD RUN echo '. /etc/shell_env' >> /etc/zsh/zshenv\n"
    },
    {
        "filename": "f5832168d9d0a94baf66d76325ae324065948935.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:xenial\nMAINTAINER Martin H\u00f8gh<mh@mapcentia.com>\n\nRUN  export DEBIAN_FRONTEND=noninteractive\nENV  DEBIAN_FRONTEND noninteractive\n\n# Install packages\nRUN apt-get -y update --fix-missing\nRUN apt-get -y install nginx apache2 libapache2-mod-wsgi libpq5 wget postgresql-client apg gettext\n\nRUN wget http://packaging.ckan.org/python-ckan_2.7-xenial_amd64.deb &&\\\n        dpkg -i python-ckan_2.7-xenial_amd64.deb\n\nADD conf/ckan/production.ini /etc/ckan/default/\n\n# Expose standard ports for HTTP and HTTPS\nEXPOSE 8080\n\nVOLUME [\"/etc/ckan\", \"/var/log\", \"/usr/lib/ckan\", \"/etc/letsencrypt\", \"/etc/apache2\"]\n\n# Install ckanext-geoview plugins\nRUN . /usr/lib/ckan/default/bin/activate &&\\\n        pip install --upgrade pip &&\\\n        pip install ckanext-geoview\n\nADD run-apache.sh /\nRUN chmod +x /run-apache.sh\n\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"/run-apache.sh\"]"
    },
    {
        "filename": "f5d62f17e6f81b5b131cd583b4015be4ac52fab2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM biodepot/bioc-base-jupyter  \n  \nMAINTAINER Jimmy huj22@uw.edu  \n  \nUSER root  \n  \n# Python3  \nRUN apt-get update && \\  \napt-get install -y cmake libhdf5-dev graphviz && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/*  \n  \n# RUN pip3 install --upgrade pip  \nRUN pip install --upgrade pip  \n  \n# install docker on the jupyterhub container  \nRUN wget https://get.docker.com -q -O /tmp/getdocker && \\  \nchmod +x /tmp/getdocker && \\  \nsh /tmp/getdocker  \n  \nRUN usermod -aG docker $NB_USER  \n  \nUSER $NB_USER  \n  \nRUN pip --no-cache-dir install --user --upgrade \\  \nmatplotlib \\  \nnumpy \\  \nscipy \\  \nsklearn \\  \npandas \\  \nnltk \\  \ntensorflow \\  \nkeras \\  \nh5py \\  \npydot \\  \ngraphviz \\  \ndocker \\  \nplotly \\  \nsympy \\  \nseaborn  \n  \nRUN conda install -c conda-forge ipywidgets && \\  \nconda install -c conda-forge jupyter_nbextensions_configurator && \\  \nconda install -c conda-forge jupyter_contrib_nbextensions  \n  \n# install ipydocker and nbdocker  \nUSER root  \nADD . /home/$NB_USER/nbdocker  \nRUN chown -R $NB_USER /home/$NB_USER/*docker  \nUSER $NB_USER  \n  \nRUN pip install -e /home/$NB_USER/nbdocker --user && \\  \njupyter serverextension enable \\--py --user nbdocker && \\  \njupyter nbextension install /home/$NB_USER/nbdocker/nbdocker --user && \\  \njupyter nbextension enable nbdocker/main --user  \nENV NLTK_DATA /home/$NB_USER/.local/nltk_data  \n  \nRUN mkdir -p $NLTK_DATA  \n  \nWORKDIR /home/$NB_USER/work  \n\n"
    },
    {
        "filename": "f67693506c01f4072956953b7efd26218272adca.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# build docker image to run the unifi controller  \n#  \n# the unifi contoller is used to admin ubunquty wifi access points  \n#  \nFROM ubuntu  \nMAINTAINER stuart nixon dotcomstu@gmail.com  \nENV DEBIAN_FRONTEND noninteractive  \n  \nRUN mkdir -p /var/log/supervisor /usr/lib/unifi/data && \\  \ntouch /usr/lib/unifi/data/.unifidatadir  \n# add unifi and mongo repo  \nADD ./100-ubnt.list /etc/apt/sources.list.d/100-ubnt.list  \n  \n# add ubiquity + 10gen(mongo) repo + key  \n# update then install  \nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv C0A52C50 && \\  \napt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 && \\  \napt-get update -q -y && \\  \napt-get install -q -y mongodb-server unifi  \n  \nVOLUME /usr/lib/unifi/data  \nEXPOSE 8443 8880 8080 27117 3478  \nWORKDIR /usr/lib/unifi  \nCMD [\"java\", \"-Xmx256M\", \"-jar\", \"/usr/lib/unifi/lib/ace.jar\", \"start\"]  \n\n"
    },
    {
        "filename": "f68cca5592d05e409cfe2c4fb2194b31cf303172.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER kcc@google.com\nRUN apt-get update && \\\n    apt-get install -y make autoconf automake libtool zlib1g-dev ninja-build cmake\n\nRUN git clone --depth 1 https://github.com/glennrp/libpng.git\nRUN git clone --depth 1 https://github.com/google/libprotobuf-mutator.git\nRUN git clone --depth 1 https://github.com/google/fuzzer-test-suite\nRUN (mkdir LPM && cd LPM && cmake ../libprotobuf-mutator -GNinja -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON -DLIB_PROTO_MUTATOR_TESTING=OFF -DCMAKE_BUILD_TYPE=Release && ninja)\nCOPY build.sh png_fuzz_proto.proto  png_proto_fuzzer_example.cc libpng_transforms_fuzzer.cc $SRC/\n"
    },
    {
        "filename": "f6b193ec5ab705a1a1a504511b31706973563024.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# \n# Used for Docker Compose stuff.\n# See https://github.com/cdrage/composefiles\n#\n# Must mount config.json to /etc/sensu/config.json !!\n#\nFROM debian:jessie\n\nMAINTAINER Charlie Drage <charlie@charliedrage.com>\n\nENV DEBIAN_FRONTEND=\"noninteractive\"\n\n#! System preparation\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y sudo wget git wget ruby ruby-dev openssl supervisor build-essential \\\n    && mkdir -p /var/log/supervisor\n\n#! Sensu server\nRUN wget -q http://repositories.sensuapp.org/apt/pubkey.gpg -O- | sudo apt-key add - \\\n    && echo \"deb     http://repositories.sensuapp.org/apt sensu main\" | sudo tee /etc/apt/sources.list.d/sensu.list \\\n    && apt-get update \\\n    && apt-get install -y sensu\n\n\n#! Install handler dependencies (mailer + slack)\nRUN mkdir -p /etc/sensu/handlers \\\n    && /opt/sensu/embedded/bin/gem install sensu-plugin \\\n    && /opt/sensu/embedded/bin/gem install mail erubis\n\n#! Add graphite tcp ruby file to handlers\nADD ./graphite-tcp.rb /etc/sensu/handlers/graphite-tcp.rb\nADD ./mailer.rb /etc/sensu/handlers/mailer.rb\nADD ./slack.rb /etc/sensu/handlers/slack.rb\n\n#! Add supervisord\nADD ./supervisord.conf /etc/supervisord.conf\n\n#! Sensu api port\nEXPOSE 4567\n\nCMD [\"/usr/bin/supervisord\"]\n"
    },
    {
        "filename": "f6c1dfd95c45cae3e7c92a3b0a1ec6ca4ea700f3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:12.04\nMAINTAINER Jason Kendall\n\n# (Optional) Set APT proxy\nRUN echo 'Acquire::http { Proxy \"http://10.0.10.10:8000\"; };' > /etc/apt/apt.conf.d/99proxy\n\nRUN apt-get update\n\nRUN apt-get -y install wget iptables libnetfilter-queue1 libpcap0.8 libnet1 libnuma1 python-setuptools\n\n# Install Suppervisord to support multiple processes\nRUN easy_install supervisor\nRUN mkdir -p /var/log/supervisor\nADD supervisor/supervisord.conf /etc/supervisord.conf\n\n# Install from locally generated .deb files\nADD debs /root/\nRUN dpkg -i /root/*.deb\nRUN mv /root/daq_pfring.* /usr/local/lib/daq\nRUN rm /root/*.deb /root/run.sh\nRUN cd /usr/local/lib && ln -s libdnet.1 libdnet.so.1\nRUN ldconfig\nADD run.sh /\nADD apps /root/apps/\nADD rules /root/rules/\n\nCMD [\"/usr/local/bin/supervisord\"]\n"
    },
    {
        "filename": "f74bd6573eacec320a410432f6b9955929eb9c17.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'php-fpm' base Image, visit its repository on Github\n#    https://github.com/Laradock/php-fpm\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/php-fpm:1.4-56\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n# are installed on the base image 'laradock/php-fpm' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/php-fpm).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_ZIP_ARCHIVE=true\n#\n\n#####################################\n# SOAP:\n#####################################\n\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n    # Install the soap extension\n    apt-get update -yqq && \\\n    apt-get -y install libxml2-dev php-soap && \\\n    docker-php-ext-install soap \\\n;fi\n\n#####################################\n# PHP GMP\n#####################################\n\nARG INSTALL_GMP=false\nENV INSTALL_GMP ${INSTALL_GMP}\n\nRUN if [ ${INSTALL_GMP} = true ]; then \\\n    # Install GMP extension\n    apt-get update -yqq && \\\n    apt-get -y install libgmp-dev && \\\n    docker-php-ext-configure gmp && \\\n    docker-php-ext-install gmp && \\\n    docker-php-ext-enable gmp \\\n;fi\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    # Install the xdebug extension\n    # pecl install xdebug && docker-php-ext-enable xdebug \\\n    # workaround for https://github.com/docker-library/php/issues/133\n    #     - Xdebug breaks on access to class static property\n    apt-get install -y php5-xdebug && \\\n\techo \"zend_extension=/usr/lib/php5/20131226/xdebug.so\" > /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n;fi\n\n# Copy xdebug configration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\") \\\n    && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n    && mv /tmp/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so \\\n    && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n;fi\n\n#####################################\n# PHP REDIS EXTENSION FOR PHP 5\n#####################################\n\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ]; then \\\n    # Install Php Redis Extension\n    pecl install -o -f redis \\\n    &&  rm -rf /tmp/pear \\\n    &&  docker-php-ext-enable redis \\\n;fi\n\n#####################################\n# Swoole EXTENSION FOR PHP 5\n#####################################\n\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n    # Install Php Swoole Extension\n    pecl install swoole \\\n    &&  docker-php-ext-enable swoole \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\nARG INSTALL_MONGO=false\n\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    docker-php-ext-enable mongodb \\\n;fi\n\n#####################################\n# ZipArchive:\n#####################################\n\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \\\n    # Install the zip extension\n    docker-php-ext-install zip \\\n;fi\n\n#####################################\n# bcmath:\n#####################################\n\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ]; then \\\n    # Install the bcmath extension\n    docker-php-ext-install bcmath \\\n;fi\n\n#####################################\n# PHP Memcached:\n#####################################\n\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ]; then \\\n    # Install the php memcached extension\n    pecl install memcached-2.2.0 && \\\n    docker-php-ext-enable memcached \\\n;fi\n\n#####################################\n# Exif:\n#####################################\n\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ]; then \\\n    # Enable Exif PHP extentions requirements\n    docker-php-ext-install exif \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\n\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    # Install the php aerospike extension\n    curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src/aerospike \\\n        && phpize \\\n        && ./build.sh \\\n        && make install \\\n    ) \\\n    && rm /tmp/aerospike-client-php.tar.gz \\\n    && docker-php-ext-enable aerospike \\\n;fi\n\n#####################################\n# Opcache:\n#####################################\n\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ]; then \\\n    docker-php-ext-install opcache \\\n;fi\n\n# Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n\n#####################################\n# Mysqli Modifications:\n#####################################\n\nARG INSTALL_MYSQLI=false\n# MySQL extenstion is available for Php5.6 and lower only\nCOPY ./mysql.ini /usr/local/etc/php/conf.d/mysql.ini\nRUN if [ ${INSTALL_MYSQLI} = true ]; then \\\n    docker-php-ext-install mysql && \\\n    docker-php-ext-install mysqli \\\n;fi\n\n#####################################\n# Tokenizer Modifications:\n#####################################\n\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ]; then \\\n    docker-php-ext-install tokenizer \\\n;fi\n\n#####################################\n# Human Language and Character Encoding Support:\n#####################################\n\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ]; then \\\n    # Install intl and requirements\n    apt-get install -y zlib1g-dev libicu-dev g++ && \\\n    docker-php-ext-configure intl && \\\n    docker-php-ext-install intl \\\n;fi\n\n#####################################\n# GHOSTSCRIPT:\n#####################################\n\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \\\n    # Install the ghostscript extension for PDF editing\n    apt-get update -yqq && \\\n    apt-get install -y poppler-utils ghostscript \\\n;fi\n\n#####################################\n# LDAP:\n#####################################\n\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install -y libldap2-dev && \\\n    docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \\\n    docker-php-ext-install ldap \\\n;fi\n\n#####################################\n# ImageMagick\n#####################################\n\nARG INSTALL_IMAGICK=false\nRUN if [ ${INSTALL_IMAGICK} ]; then \\\n  # Add source src\n  echo \"deb-src http://deb.debian.org/debian jessie main\" >> /etc/apt/sources.list && \\\n  echo \"deb-src http://deb.debian.org/debian jessie-updates main\" >> /etc/apt/sources.list && \\\n  echo \"deb-src http://security.debian.org jessie/updates main\" >> /etc/apt/sources.list && \\\n  # Update and build required\n  apt-get update && \\\n  apt-get build-dep imagemagick -y && \\\n  apt-get install libwebp-dev -y && \\\n  # Ready and go\n  mkdir /tmp/imagemagick && \\\n  cd /tmp/imagemagick && \\\n  curl -L -o ImageMagick.tar.gz http://www.imagemagick.org/download/ImageMagick.tar.gz && \\\n  tar xf ImageMagick*.tar.gz && \\\n  cd ImageMagic* && \\\n  ./configure --prefix=/usr --without-x && \\\n  make && \\\n  make install && \\\n  # Install php ext\n  pecl install imagick && \\\n  docker-php-ext-enable imagick \\\n;fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\nADD ./laravel.ini /usr/local/etc/php/conf.d\nADD ./laravel.pool.conf /usr/local/etc/php-fpm.d/\n\n#RUN rm -r /var/lib/apt/lists/*\n\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nCMD [\"php-fpm\"]\n\nEXPOSE 9000\n"
    },
    {
        "filename": "f7a7cb87f043051b6f8216529cd14c1119f87262.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Example built from a couple of sources\nFROM node\nMAINTAINER Tim Hartmann <tfhartmann@gmail.com>\n\nRUN apt-get update\nRUN apt-get -y install wget python-dev g++ make libicu-dev redis-server python-pip\n\nRUN npm install --global coffee-script hubot@v2.7.5\nRUN hubot --create /opt/hubot\nWORKDIR /opt/hubot\nRUN npm install\nRUN npm install --save git+https://github.com/idio/hubot-hipchat.git\nADD add-hubot-scripts.sh /tmp/\nADD add-external-scripts.py /tmp/\n\nenv   HUBOT_HIPCHAT_JID [asdfID]@chat.hipchat.com\nenv   HUBOT_HIPCHAT_PASSWORD [your-password]\nenv   HUBOT_AUTH_ADMIN [your name]\n\nCMD redis-server /etc/redis/redis.conf && /tmp/add-hubot-scripts.sh && /tmp/add-external-scripts.py && bin/hubot --adapter hipchat\n"
    },
    {
        "filename": "f7af1f954c1a0efb4a2e524938516cf3b2c5b714.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM arnaudpiroelle/base  \nMAINTAINER Arnaud Piroelle  \n  \nRUN apt-get install -y python python-cheetah  \n  \nRUN cd / && git clone https://github.com/sarakha63/Sick-Beard.git sickbeard  \n  \nEXPOSE 8081  \nVOLUME [\"/data\"]  \nVOLUME [\"/media\"]  \n  \nCMD [\"python\", \"/sickbeard/SickBeard.py\", \"--datadir=/data\"]  \n\n"
    },
    {
        "filename": "f7b744d79567ba0544c56b8b07dfae173c25a6fb.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM golang:latest\nARG branch=master\nENV GOROOT /usr/local/go\nENV GOPATH /go\nENV PATH $GOROOT/bin:$PATH\n#\u4f5c\u8005\nMAINTAINER Razil \"jiawang06@163.com\"\n\nRUN apt-get -qq update && apt-get -qq install curl unzip\n\nADD https://releases.hashicorp.com/consul/1.2.1/consul_1.2.1_linux_amd64.zip /tmp/consul.zip\nRUN cd /usr/sbin && unzip /tmp/consul.zip && chmod +x /usr/sbin/consul && rm /tmp/consul.zip\n#CMD consul agent -dev > consul.log && tail -F consul.log && sleep 3\n#CMD [ \"/usr/sbin/consul\", \"agent\", \"-dev\",\"-D\" ]\n  \nADD https://github.com/bottos-project/magiccube/raw/master/vendor/micro /usr/sbin/micro\nRUN cd /usr/sbin && chmod +x /usr/sbin/micro\n\n \n#\u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\nWORKDIR $GOPATH/src/github.com/bottos-project\n\n#\u5c06\u670d\u52a1\u5668\u7684go\u5de5\u7a0b\u4ee3\u7801\u52a0\u5165\u5230docker\u5bb9\u5668\u4e2d\nRUN git clone -b $branch https://github.com/bottos-project/bottos.git --recursive\nRUN git clone https://github.com/bottos-project/crypto-go.git\n\n#go\u6784\u5efa\u53ef\u6267\u884c\u6587\u4ef6\nWORKDIR $GOPATH/src/github.com/bottos-project/bottos\nRUN go build .\n \nRUN chmod +x ./docker/botNode.sh\n\n#\u66b4\u9732\u7aef\u53e3\nEXPOSE 53/udp 8300 8301 8301/udp 8302 8302/udp 8400 8500 8080\nVOLUME /go/src/github.com/bottos-project/bottos/datadir\n#\u6700\u7ec8\u8fd0\u884cdocker\u7684\u547d\u4ee4\nWORKDIR $GOPATH/src/github.com/bottos-project/bottos/docker/\nENTRYPOINT  [\"./botNode.sh\"]\nCMD [\"start\"]\n"
    },
    {
        "filename": "f870ca69757fed434c623f1e0c34d5e93fa279b8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Ayush Shanker <ayush@cloudinfra.in>  \n  \n# Install Apache, PHP5 and speedtest mini zip  \nRUN apt-get update -qq \\  \n&& apt-get install -y wget unzip apache2 php5 php5-mysql php5-gd php5-mcrypt \\  \n&& wget http://c.speedtest.net/mini/mini.zip -O /tmp/mini.zip \\  \n&& mkdir -p /var/www/mini \\  \n&& unzip /tmp/mini.zip -d /var/www/ \\  \n&& cd /var/www/mini \\  \n&& mv index-php.html index.html \\  \n&& mv * ../ \\  \n&& mkdir -p /etc/apache2/conf.d/ \\  \n&& echo \"ServerName localhost\" | tee /etc/apache2/conf.d/fqdn \\  \n&& apt-get clean autoclean \\  \n&& apt-get autoremove -y \\  \n&& rm -rf /var/lib/{apt,dpkg,cache,log}/* /tmp/* /var/tmp/*  \n  \nADD entrypoint.sh /entrypoint.sh  \n  \n# Ports  \nEXPOSE 80  \nCMD [\"sudo /entrypoint.sh\"]  \n\n"
    },
    {
        "filename": "f88d77d5ad6ac1c4ed8f4c985373a5168696d697.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# It Builds an image to deploy a Rserve\n\n# Dotcloud ubuntu image\nFROM ubuntu:13.10\nMAINTAINER Felipe Triana, ftrianakast@gmail.com\n\n# Update\nRUN apt-get update\n\n# Install wget\nRUN apt-get install -y wget\n\n# Install latest R\nRUN sh -c 'echo \"deb http://cran.rstudio.com/bin/linux/ubuntu trusty/\" >> /etc/apt/sources.list'\nRUN gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9\nRUN gpg -a --export E084DAB9 | sudo apt-key add -\nRUN apt-get update\nRUN sudo apt-get -y install r-base\n\n# Important additional libraries\nRUN apt-get install -y libcurl4-gnutls-dev\nRUN apt-get install libxml2-dev\nRUN apt-get install -y libmime-base64-urlsafe-perl libdigest-hmac-perl libdigest-sha-perl\nRUN apt-get install libssl-dev\n\n# adding start R script: you can find the RScript on the docker github\nADD start.R start.R\nADD Rserv.conf /Rserv.conf\nEXPOSE 6311\nCMD Rscript start.R\n"
    },
    {
        "filename": "f966d9409262211fff30d642cc46932c750d5d85.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM    ubuntu:latest\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN dpkg-divert --local --rename --add /sbin/initctl\nRUN ln -s /bin/true /sbin/initctl\nRUN apt-get update\nRUN apt-get install -y python-software-properties python g++ make\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN apt-get update\nRUN apt-get -y install nodejs curl\nRUN mkdir -p /opt/magnets\nAdd magnets/ /magnets\nRUN cd /magnets && npm install \n# fix crappy wwwdude\nRUN cp /magnets/node_modules/wwwdude/lib/wwwdude/node-versions/v0.5.x.js /magnets/node_modules/wwwdude/lib/wwwdude/node-versions/v0.10..js\n# -v /media/ext/magnet_pics/:/images\nENV image_folder /images\nCMD [\"/magnets/run.sh\"]\n"
    },
    {
        "filename": "f97a22d2aa3aade9e582cca037ab16deb96a04e2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM quay.io/letsencrypt/letsencrypt\nMAINTAINER kvaps <kvapss@gmail.com>\n\nRUN apt-get update && apt-get -y install docker.io\n\nADD start.sh /bin/start.sh\n\nENTRYPOINT [ \"/bin/start.sh\" ]\n"
    },
    {
        "filename": "f98dbc2ea8c44cde5e28fd7de5e45a41ce3a5dab.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "from stackbrew/ubuntu:12.04\nmaintainer Evan Hazlett <ejhazlett@gmail.com>\nrun echo \"deb-src http://us.archive.ubuntu.com/ubuntu precise main universe multiverse\" > /etc/apt/sources.list.d/src.list\nrun apt-get update\nrun apt-get install -y libxml2-dev libxslt-dev git-core wget zlib1g-dev libssl-dev libsqlite3-dev libreadline-dev\nrun apt-get build-dep -y python\nrun wget https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz -O /tmp/python.tar.gz\nrun (cd /tmp && tar zxf python.tar.gz && cd Python-* && ./configure && make install)\nrun wget https://pypi.python.org/packages/source/s/setuptools/setuptools-3.4.4.tar.gz -O /tmp/setuptools.tar.gz\nrun (cd /tmp && tar zxf setuptools.tar.gz && cd setuptools-* && /usr/local/bin/python setup.py install)\nrun easy_install pip\nrun pip install uwsgi\n"
    },
    {
        "filename": "fa9c45a320344f2e81c8aa4f253fd946fbabd280.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Andy Wick <andy.wick@oath.com>\n\nRUN apt-get update && \\\napt-get install -y ruby-dev make python-pip git libtest-differences-perl sudo openjdk-8-jre-headless wget libjson-pp-perl tzdata wget lsb-release && \\\n(cd /tmp; wget http://apt-stable.ntop.org/16.04/all/apt-ntop-stable.deb; dpkg -i apt-ntop-stable.deb) && \\\napt-get update && \\\napt-get install -y pfring && \\\napt-get -f install && \\\ngem install --no-ri --no-rdoc fpm; \\\npip install awscli; \\\nuseradd -u 2000 elasticsearch; \\\n(cd / ; \\\n wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-6.7.0.tar.gz; \\\n tar xf elasticsearch-oss-6.7.0.tar.gz; \\\n chown -R elasticsearch elasticsearch-6.7.0; \\\n rm -f elasticsearch-oss-6.7.0.tar.gz \\\n); \\\ngit clone https://github.com/aol/moloch; (cd moloch ; ./easybutton-build.sh --daq --pfring); mv moloch/thirdparty /; rm -rf moloch; \\\nrm -rf /var/lib/apt/lists/*\n"
    },
    {
        "filename": "faa8ee72c433f8a37de1331ecf4f677d9bf5a855.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian\nMAINTAINER Peter Naudus <uselinux@gmail.com>\nRUN apt-get -y update\nRUN apt-get -y install python python-dev python-pip apache2 apache2-dev libev-dev gcc\nRUN pip install cherrypy tornado uwsgi gunicorn bjoern meinheld mod_wsgi\nRUN mkdir -p /home/www\nCOPY src /home/www/wsgi_benchmark\nRUN chown -R www-data:www-data /home/www/wsgi_benchmark\n"
    },
    {
        "filename": "fb48ae29ce1dddeb6de2f0259be2ebc483554330.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM csp-tomcat8:1.0p1-deb\n\nMAINTAINER Majid Salehi Ghamsari <majid.salehi.ghamsari[AT]fokus[DOT]fraunhofer[DOT]de>\nMAINTAINER Orestis Akrivopoulos\nMAINTAINER Kusber, Tomasz <tomasz.kusber[AT]fokus[DOT]fraunhofer[DOT]de>\n\n\nRUN apt-get update && \\\n    apt-get install -yy python bash\n\n# setup\nENV CATALINA_OPTS=\"-Xmx2g -Xms2g -server\"\nENV TOOLS_HOME=/opt/ssoadm\nENV CATALINA_HOME /usr/local/tomcat\nENV PATH $CATALINA_HOME/bin:$PATH\n\n# download openam fraunhofer build 13 war\nADD software/OpenAM-13.0.0.war $CATALINA_HOME/webapps/openam.war\n\n# add the custom authentication module to image\nADD software/openam-auth-cert2-13.0.0.jar /tmp/openam-auth-cert2-13.0.0.jar\nADD software/amAuthCert2.xml /tmp/amAuthCert2.xml\n\n# Deploy OpenAM v13.0.0 Config Tools\nRUN mkdir -p $TOOLS_HOME  \n\nADD software/SSOConfiguratorTools-13.0.0.zip $TOOLS_HOME/SSOConfiguratorTools-13.0.0.zip\n\n# Deploy OpenAM v13.0.0 Config Tools\nRUN cd $TOOLS_HOME && \\\n    unzip *.zip && \\\n    rm SSOConfiguratorTools-13.0.0.zip\n\nADD software/SSOAdminTools-13.0.0.zip $TOOLS_HOME/SSOAdminTools-13.0.0.zip\n\n# Deploy OpenAM admin Tools\nRUN cd $TOOLS_HOME && \\\n    unzip -o SSOAdminTools-13.0.0.zip && \\\n    rm SSOAdminTools-13.0.0.zip\n    \nADD openam-config.properties $TOOLS_HOME/openam-config.properties\nADD agent-config.tmpl $TOOLS_HOME/agent-config.tmpl\nADD agent-config.tmpl.tc $TOOLS_HOME/agent-config.tmpl.tc\nADD agent-config.tmpl.imq $TOOLS_HOME/agent-config.tmpl.imq\nADD agent-config.tmpl.rt $TOOLS_HOME/agent-config.tmpl.rt\nADD embedded_datastore_update.properties $TOOLS_HOME/embedded_datastore_update.properties\nADD policy.json $TOOLS_HOME/policy.json\nADD policyset-rt.json $TOOLS_HOME/policyset-rt.json\nADD policyset-imq.json $TOOLS_HOME/policyset-imq.json\nADD policy-rt.json $TOOLS_HOME/policy-rt.json\nADD policy-imq.json $TOOLS_HOME/policy-imq.json\nADD run-openam.sh $TOOLS_HOME/run-openam.sh\nADD post-config-openam.sh $TOOLS_HOME/post-config-openam.sh\nADD post.batch $TOOLS_HOME/post.batch\nADD Cert.properties $TOOLS_HOME/Cert.properties\nADD setenv.sh /usr/local/tomcat/bin/setenv.sh\nADD proxy-ca-truststore.jks /usr/local/tomcat/conf/proxy-ca-truststore.jks\nADD CSP-Cert.properties $TOOLS_HOME/CSP-Cert.properties\nADD web-page/DataStore.xml $TOOLS_HOME/DataStore.xml\nADD web-page/login-logo.png $TOOLS_HOME/login-logo.png\nADD web-page/logo-horizontal.png $TOOLS_HOME/logo-horizontal.png\nADD web-page/ThemeConfiguration.js $TOOLS_HOME/ThemeConfiguration.js\nADD web-page/DataStore1.html $TOOLS_HOME/DataStore1.html\n\n#update section, if needed\nRUN mkdir /tmp/updates\n#ADD update.sh /tmp/updates/update.sh\nRUN chmod +x /usr/local/tomcat/bin/setenv.sh && \\\n  chmod +x $TOOLS_HOME/run-openam.sh && \\\n  chmod +x $TOOLS_HOME/post-config-openam.sh\n\n\nCOPY create-agent.sh /usr/local/bin/\nRUN ln -s usr/local/bin/create-agent.sh / # backwards compat\nRUN chmod +x /usr/local/bin/create-agent.sh\n\nCMD [\"/opt/ssoadm/run-openam.sh\"] \n\n\n\n"
    },
    {
        "filename": "fb88bb6692ad6418693ce3b2400eb52a22ab0ad9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# This file was generated by ansible for {{ansible_fqdn}}\n# This Dockerfile is used to build an image containing basic stuff to be used as a Jenkins slave build node.\n#FROM        ubuntu:latest\nFROM        ubuntu:14.04\n\n# Volume can be accessed outside of container\nVOLUME      [{{ docker_volume_directory }}]\n\nMAINTAINER  Alban Andrieu \"https://github.com/AlbanAndrieu\"\n\nENV\t\t\tDEBIAN_FRONTEND noninteractive\nENV         JENKINS_HOME {{ jenkins_home }}\nENV         WORKDIR /home/vagrant\nENV         ANSIBLE_LIBRARY {{ docker_working_directory }}/library\nENV         PYTHONPATH {{ docker_working_directory }}/lib:$PYTHON_PATH\nENV         PATH {{ docker_working_directory }}/bin:/sbin:/usr/sbin:/usr/bin:/bin:$PATH\n\n# Working dir\nWORKDIR {{ docker_working_directory }}\n\n# Because docker replaces /sbin/init: https://github.com/dotcloud/docker/issues/1024\nRUN dpkg-divert --local --rename --add /sbin/initctl\n\n# Make sure the package repository is up to date.\n#RUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\n#RUN echo \"deb http://archive.ubuntu.com/ubuntu trusty main universe\" > /etc/apt/sources.list\nRUN apt-get clean && apt-get -y update\n\n# COPY\n#COPY /workspace/users/albandri10/env/ansible/roles/jenkins-slave $WORKDIR\n\n#RUN git pull && git submodule init && git submodule update && git submodule status\n#RUN git submodule foreach git checkout master\n\nADD roles $WORKDIR/roles\n\nRUN ls -lrta $WORKDIR/roles/*\n\n#ADD defaults $WORKDIR/ansible-jenkins-slave/defaults\n#ADD meta $WORKDIR/ansible-jenkins-slave/meta\n#ADD files $WORKDIR/ansible-jenkins-slave/files\n##ADD handlers $WORKDIR/ansible-jenkins-slave/handlers\n#ADD tasks $WORKDIR/ansible-jenkins-slave/tasks\n#ADD templates $WORKDIR/ansible-jenkins-slave/templates\n#ADD vars $WORKDIR/ansible-jenkins-slave/vars\n\n# Here we continue to use add because\n# there are a limited number of RUNs\n# allowed.\nADD hosts /etc/ansible/hosts\nADD jenkins-slave-docker.yml $WORKDIR/jenkins-slave.yml\n\n# Install ansible\nRUN apt-get install -y python-dev python-yaml python-jinja2 git unzip python-pip\nRUN pip install paramiko PyYAML jinja2 httplib2 boto && pip install ansible\n#RUN git clone http://github.com/ansible/ansible.git {{ docker_working_directory }}\n#RUN mkdir {{ docker_working_directory }}\n\n# Install JDK 7 (latest edition)\n#RUN apt-get install -y --no-install-recommends openjdk-7-jdk\n\n# Add user jenkins to the image\n#RUN         adduser --quiet jenkins --home {{ jenkins_home }}\n# Set password for the jenkins user (you may want to alter this).\n#RUN         echo jenkins:jenkins | chpasswd\n\n# Execute\nRUN         ansible-playbook $WORKDIR/jenkins-slave.yml -c local\n\n# Install a basic SSH server\nRUN apt-get install -y openssh-server\nRUN mkdir -p /var/run/sshd\n#RUN         apt-get update && \\\n#            apt-get install -y openssh-server openjdk-7-jre-headless\n\n# Clean up APT when done.\nRUN         apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Standard SSH port\nEXPOSE      22\n# Standard MySQL port for Sonar\n#EXPOSE      3306\n\n#ENTRYPOINT  [\"/etc/init.d/jenkins-swarm-client\"]\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n#CMD [\"-g\", \"deamon off;\"]\n"
    },
    {
        "filename": "fbc5c5d090f01ef3c0c767144813e6afd6382975.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# FE apache php base container  \n# base off of ubuntu for now  \nFROM ubuntu  \n  \nMAINTAINER Hinling Yeung  \n  \n# Make DEBIAN_FRONTEND less chatty  \nENV DEBIAN_FRONTEND noninteractive  \nENV DEBIAN_FRONTEND newt  \n  \n# Update the default application repository sources list  \nRUN apt-get update  \n  \n# Install apache 2  \nRUN apt-get -y install apache2  \n  \n# Install php5  \nRUN apt-get -y install php5 libapache2-mod-php5 php5-dev  \n  \n# Install mysql client  \nRUN apt-get -y install libapache2-mod-auth-mysql php5-mysql mysql-client  \n  \n# Install PEAR  \nRUN apt-get -y install php-pear  \n  \n# Install phpmods  \nRUN pear upgrade \\--force pear  \nRUN printf \"no\\n\" | pecl install stomp-1.0.5  \nRUN apt-get -y install libpcre3-dev  \nRUN apt-get -y install pkg-config  \n# RUN pecl install APC -- no APC for php5.5  \nRUN pecl install xdebug  \n# RUN pecl install memcached  \n# Install apache libs  \nRUN apt-get -y install apache2-dev apache2-doc  \n  \n# Install all the php libraries  \nRUN apt-get -y install php5-common libapache2-mod-php5 php5-cli  \n#RUN apt-get -y install php-gd  \nRUN apt-get -y install php5-mcrypt  \nRUN apt-get -y install php5-curl  \nRUN apt-get -y install libmemcached-dev  \nRUN apt-get -y install memcached php5-memcached  \n  \n# helper tools  \nRUN apt-get -y install telnet  \n  \n# configure apache  \nADD apache_conf/apache2.conf /etc/apache2/apache2.conf  \nADD apache_conf/000-default.conf /etc/apache2/sites-enabled/000-default.conf  \n  \n# Install Opcache and APCu  \nADD apache_conf/install_opcache_apcu.sh /var/www/scripts/  \n  \n# ENV changes  \nENV APACHE_RUN_USER www-data  \nENV APACHE_RUN_GROUP www-data  \nENV APACHE_LOG_DIR /var/log/apache2  \n  \nENV MEMCACHED_LOG_DIR /var/log/memcached.log  \n  \nEXPOSE 80  \nEXPOSE 11211  \n  \nCMD [\"/var/www/scripts/install_opcache_apcu.sh\"]  \n\n"
    },
    {
        "filename": "fbd073069730b0634cda2f6e2491a3bfa221fdff.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Create a Docker image that is ready to run the main Randoop tests,\n# using JDK 8.\n\nFROM ubuntu\nMAINTAINER Michael Ernst <mernst@cs.washington.edu>\n\n# According to\n# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/:\n#  * Put \"apt-get update\" and \"apt-get install\" in the same RUN command.\n#  * Do not run \"apt-get upgrade\"; instead get upstream to update.\nRUN apt-get -qqy update \\\n&& apt-get -qqy install \\\n  git \\\n  gradle \\\n  xvfb \\\n  default-jdk \\\n&& apt-get -qqy update \\\n&& apt-get -qqy install \\\n  python-pip \\\n&& apt-get clean \\\n&& rm -rf /var/lib/apt/lists/* \\\n&& pip install html5validator\n"
    },
    {
        "filename": "fbf9f33d728165fb30dfcba75498f2da51212c0f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "######################################################################################\n#                                                                                    #\n# To build: docker build -t ubuntu:scribengin directory                              # \n# To run:   docker run -t -i ubuntu:scribengin  /bin/bash                            #\n#                                                                                    #\n######################################################################################\nFROM ubuntu:latest\n#FROM ubuntu:latest\nMAINTAINER Tuan Nguyen <tuan@demandcube.com>\n\n#Update and installl the dependencies\nRUN echo \"Update and install the requirement software\"\nRUN apt-get update \nRUN apt-get install -y wget openssh-server openssh-client rsync vim bc\n\nRUN apt-get install -y openjdk-7-jdk\nRUN echo 'JAVA_HOME=\"/usr/lib/jvm/java-7-openjdk-amd64\"' >> /etc/environment\n\n#Configure root Account\nRUN mkdir /var/run/sshd\nRUN echo 'root:root' | chpasswd\n\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\n#ADD authorized_keys /opt/authorized_keys\nRUN mkdir -p /root/.ssh\nRUN chmod 700 /root/.ssh\nADD tmp/authorized_keys /root/.ssh/authorized_keys\nRUN chmod 644 /root/.ssh/authorized_keys\n\n#Configure neverwinterdp account\nRUN echo \"Create neverwinterdp user account and setup home directory\"\n\n#ENV HOME /home/neverwinterdp\n#RUN useradd -m -d /home/neverwinterdp -s /bin/bash -c \"neverwinterdp user\" -p $(openssl passwd -1 neverwinterdp)  neverwinterdp\n#RUN echo \"neverwinterdp ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n#A bug with file creation permission, need to create a template ssh configuration and copy to the account in the post installation\n\n#EXPOSE Ports\nEXPOSE 22 2181 9092 50070 8088 9000\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n\n#Download java opensource projects\n#RUN wget -q -O - http://mirrors.digipower.vn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz | tar -xzf - -C /opt\nRUN wget -q -O - http://jenkinsdp.do.demandcube.com/zookeeper-3.4.6.tar.gz | tar -xzf - -C /opt\nRUN mv /opt/zookeeper-3.4.6 /opt/zookeeper\nRUN cp /opt/zookeeper/conf/zoo_sample.cfg /opt/zookeeper/conf/zoo.cfg\n\n#RUN wget -q http://apache.01link.hk/kafka/0.8.2.0/kafka_2.10-0.8.2.0.tgz -O /tmp/kafka_2.10-0.8.2.0.tgz\nRUN wget -q http://jenkinsdp.do.demandcube.com/kafka_2.10-0.8.2.0.tgz -O /tmp/kafka_2.10-0.8.2.0.tgz\nRUN tar xfz /tmp/kafka_2.10-0.8.2.0.tgz -C /opt\nRUN mv /opt/kafka_2.10-0.8.2.0 /opt/kafka\n\n#RUN wget -q  https://archive.apache.org/dist/hadoop/core/hadoop-2.4.0/hadoop-2.4.0.tar.gz -O /tmp/hadoop-2.4.0.tar.gz\nRUN wget -q  http://jenkinsdp.do.demandcube.com/hadoop-2.4.0.tar.gz -O /tmp/hadoop-2.4.0.tar.gz\nRUN tar xfz /tmp/hadoop-2.4.0.tar.gz -C /opt\nRUN mv /opt/hadoop-2.4.0 /opt/hadoop\n\n\n\n#Run Post installation\nADD bootstrap/post-install /tmp/post-install\nRUN chmod +x /tmp/post-install/post-install.sh\n\nRUN mkdir -p        /tmp/post-install/ssh-config\nADD tmp/id_rsa*     /tmp/post-install/ssh-config/\nRUN cat             /tmp/post-install/ssh-config/id_rsa.pub > /tmp/post-install/ssh-config/authorized_keys\nRUN chmod -R 700    /tmp/post-install/ssh-config && chmod 644 /tmp/post-install/ssh-config/authorized_keys\n\n#Move Scribengin release\nRUN mkdir -p  /opt/scribengin/\nADD tmp/release /tmp/post-install/release/\n\n\nRUN /tmp/post-install/post-install.sh\n\n#Set up ssh for neverwinterdp user\n#RUN su neverwinterdp -c \"sudo cat        /tmp/post-install/ssh-config/id_rsa.pub > /home/neverwinterdp/.ssh/authorized_keys\"\n#RUN su neverwinterdp -c \"chmod -R 700    /home/neverwinterdp/.ssh/ && chmod 644 /home/neverwinterdp/.ssh/authorized_keys\"\n\n\nRUN rm -rf          /tmp/*.tgz\nRUN rm -rf          /tmp/post-install\n"
    },
    {
        "filename": "fc15e2a9bcdf1d8d89938f3fde09ee29fc2c73ef.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "## Poppy Dockerfile for CI\n\nFROM ubuntu:14.04\nMAINTAINER Chris Powell <chris.powell@rackspace.com>\n\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    python-dev \\\n    git\n\n# Get a working version of pip for ubuntu 14.04:\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=744145\nRUN /usr/bin/curl -s https://bootstrap.pypa.io/get-pip.py | python\n\n# Seed the initial requirements to make startups faster\nADD ./requirements /root/requirements\nRUN pip install -r /root/requirements/requirements.txt\n\n# Pip install uwsgi rather than use the system version\nRUN pip install uwsgi\n\n# Set up the configuration files\nADD ./docker/api_ci/poppy.conf /etc/poppy.conf\nADD ./docker/api_ci/logging.conf /etc/logging.conf\nADD ./docker/api_ci/uwsgi.ini /root/uwsgi.ini\n\n# ADD start_poppy script\nADD ./docker/api_ci/start_poppy.sh /root/start_poppy.sh\n\n# create uwsgi log directory\nRUN mkdir -p /var/log/poppy && chmod -R +w /var/log/poppy\n\n# create uwsgi pid directory\nRUN mkdir -p /var/run/poppy && chmod -R +w /var/run/poppy\n\nEXPOSE 8081\n"
    },
    {
        "filename": "fc1b1477fc91a6f0b23077f3127938018a81b99b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM thecruel/devkitarm-3ds:latest\nMAINTAINER Thomas Edvalson \"machin3@gmail.com\"\n\nENV CPP3DS /usr/src/cpp3ds\n\nCOPY . /usr/src/cpp3ds\nWORKDIR /usr/src\n\nRUN apt-get update && apt-get -y install \\\n    libgtest-dev \\\n\tlibsfml-dev \\\n\tlibglew-dev \\\n\tqt5-default \\\n\tlibopenal-dev \\\n\tlibjpeg-dev \\\n\tlibpng-dev \\\n\tlibfreetype6-dev \\\n\tlibvorbis-dev \\\n\tlibfaad-dev \\\n\tlibfmt3-dev\n\nRUN apt-get -y clean\n\nRUN wget -q https://github.com/cpp3ds/3ds_portlibs/releases/download/r5/portlibs-3ds-r5.tar.xz -O portlibs.tar.xz && \\\n    tar -xaf portlibs.tar.xz && \\\n    rm portlibs.tar.xz && \\\n    ln -s $(pwd)/portlibs $DEVKITPRO/portlibs && \\\n    ln -s $DEVKITPRO/portlibs/3ds $DEVKITPRO/portlibs/armv6k\n\nRUN wget -q https://github.com/cpp3ds/3ds-tools/releases/download/r6/3ds-tools-linux-r6.tar.gz -O tools.tar.gz && \\\n    tar -xaf tools.tar.gz && \\\n    cp 3ds-tools/* $DEVKITARM/bin && \\\n    rm tools.tar.gz\n\nWORKDIR /usr/src/gtest\nRUN cmake . && \\\n    make -j4 && \\\n    cp *.a /usr/lib && \\\n    make clean\n\nWORKDIR /usr/src/cpp3ds\nRUN mkdir build && \\\n    cd build && \\\n    cmake -DBUILD_EMULATOR=ON -DENABLE_OGG=ON -DENABLE_AAC=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=ON .. && \\\n    make -j4 && \\\n    mv lib .. && \\\n    cd .. && \\\n    ./bin/tests\n"
    },
    {
        "filename": "fc52e6521f80cfdad2fc26e11a3c7ba13cd1f485.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage\nMAINTAINER Brian Prodoehl <bprodoehl@connectify.me>\n\n# Set correct environment variables.\nENV HOME /root\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\nRUN apt-get update && apt-get -y upgrade\n\n# install default Ruby\nRUN apt-get install -y curl build-essential ruby ruby-dev wget\n\n# install RVM, Ruby, and Bundler\n#RUN \\curl -k -L https://get.rvm.io | bash -s stable\n#RUN /bin/bash -l -c \"rvm requirements\"\n#RUN /bin/bash -l -c \"rvm install 2.0\"\n#RUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n\nRUN gem install fluentd --no-ri --no-rdoc\n\n# install ElasticSearch plugin\nRUN apt-get install -y libcurl4-openssl-dev\nRUN gem install fluent-plugin-elasticsearch --no-ri --no-rdoc\n\nRUN mkdir /etc/service/fluentd\nADD fluentd.sh /etc/service/fluentd/run\n\nRUN mkdir /app\nWORKDIR /app\nADD . /app\n\nRUN wget https://github.com/jwilder/docker-gen/releases/download/0.3.2/docker-gen-linux-amd64-0.3.2.tar.gz\nRUN tar xvzf docker-gen-linux-amd64-0.3.2.tar.gz\n\nRUN mkdir /etc/service/dockergen\nADD dockergen.sh /etc/service/dockergen/run\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "fc7a1d7a6d566a9d34dc0248f71e6a8741e049b7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.10\nMAINTAINER Daniel Norberg <daniel.norberg@gmail.com>\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update \nRUN apt-get install -y software-properties-common\nRUN add-apt-repository -y ppa:webupd8team/java\nRUN apt-get update\n\n# Auto-accept the Oracle JDK license\nRUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\n\nRUN apt-get install -y openjdk-7-jdk openjdk-8-jdk oracle-java7-installer oracle-java8-installer maven\nRUN apt-get install -y curl jq\n\nRUN mkdir -p /usr/src/auto-matter\nWORKDIR /usr/src/auto-matter\n\nADD . /usr/src/auto-matter\nRUN mvn -B install -DskipTests\n\n# OpenJDK 7\nRUN update-alternatives --set java /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\nRUN update-alternatives --set javac /usr/lib/jvm/java-7-openjdk-amd64/bin/javac\nRUN mvn -B clean verify\nRUN ./jackson-it.sh\n\n# OpenJDK 8\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\nRUN update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac\nRUN mvn -B clean verify\nRUN ./jackson-it.sh\n\n# Oracle JDK 7\nRUN update-alternatives --set java /usr/lib/jvm/java-7-oracle/jre/bin/java\nRUN update-alternatives --set javac /usr/lib/jvm/java-7-oracle/bin/javac\nRUN mvn -B clean verify\nRUN ./jackson-it.sh\n\n# Oracle JDK 8\nRUN update-alternatives --set java /usr/lib/jvm/java-8-oracle/jre/bin/java\nRUN update-alternatives --set javac /usr/lib/jvm/java-8-oracle/bin/javac\nRUN mvn -B clean verify\nRUN ./jackson-it.sh\n"
    },
    {
        "filename": "fd1fb4721e9b30c5e619a3f0aaa9bccc4eb2f82e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM blankoninfra/lucid  \nRUN mkdir /var/cache/apt/archives/partial && \\  \napt-get install -y python-pip  \nADD v1.0.tar.gz /opt  \nRUN mv /opt/aku-boi-1.0 /opt/aku && \\  \ncd /opt/aku && \\  \npip install -r requirements.txt  \nADD run.sh /root  \nEXPOSE 8081  \nCMD [\"/bin/bash\",\"/root/run.sh\"]\n\n"
    },
    {
        "filename": "fd7287d6c419f2e9fd193ccb5afa513998c0afdb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,use-sudo-run,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM node:alpine\n\nMAINTAINER Waldemar Hummer (whummer@atlassian.com)\nLABEL authors=\"Waldemar Hummer (whummer@atlassian.com)\"\n\n# install some common libs\nRUN apk add --no-cache autoconf automake build-base ca-certificates curl docker git \\\n        libffi-dev libtool linux-headers make openssl openssl-dev python python-dev \\\n        py-pip supervisor tar xz zip && \\\n    update-ca-certificates\n\n# Install Java - taken from official repo:\n# https://github.com/docker-library/openjdk/blob/master/8-jdk/alpine/Dockerfile)\nENV LANG C.UTF-8\nRUN { \\\n        echo '#!/bin/sh'; echo 'set -e'; echo; \\\n        echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n    } > /usr/local/bin/docker-java-home \\\n    && chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin\nENV JAVA_VERSION 8u131\nENV JAVA_ALPINE_VERSION 8.131.11-r2\nRUN set -x && apk add --no-cache openjdk8=\"$JAVA_ALPINE_VERSION\" \\\n    && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\n\n\n# Install Maven - taken from official repo:\n# https://github.com/carlossg/docker-maven/blob/master/jdk-8/Dockerfile)\nARG MAVEN_VERSION=3.5.0\nARG USER_HOME_DIR=\"/root\"\nARG SHA=beb91419245395bd69a4a6edad5ca3ec1a8b64e41457672dc687c173a495f034\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  && echo \"${SHA}  /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n  && rm -f /tmp/apache-maven.tar.gz \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"\nADD https://raw.githubusercontent.com/carlossg/docker-maven/master/jdk-8/settings-docker.xml /usr/share/maven/ref/\n\n# set workdir\nRUN mkdir -p /opt/code/localstack\nWORKDIR /opt/code/localstack/\n\n# init environment and cache some dependencies\nADD requirements.txt .\nRUN wget -O /tmp/localstack.es.zip \\\n        https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.3.0.zip && \\\n    (pip install --upgrade pip) && \\\n    (test `which virtualenv` || \\\n        pip install virtualenv || \\\n        sudo pip install virtualenv) && \\\n    (virtualenv .testvenv && \\\n        source .testvenv/bin/activate && \\\n        pip install six==1.10.0 && \\\n        pip install --quiet -r requirements.txt && \\\n        rm -rf .testvenv)\n\n# add files required to run \"make install-web\"\nADD Makefile .\nADD localstack/dashboard/web/package.json localstack/dashboard/web/package.json\n\n# install web dashboard dependencies\nRUN make install-web\n\n# cache Maven dependencies\nADD localstack/ext/java/pom.xml localstack/ext/java/pom.xml\nRUN cd localstack/ext/java && mvn -q -DskipTests package || true\n"
    },
    {
        "filename": "fde2e23dae96672ac2863bf6e4b898b334adf767.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM golang:1.9.4 as builder\nADD . /go/src/github.com/redjack/marionette/\nWORKDIR /go/src/github.com/redjack/marionette/\nRUN GOOS=linux GOARCH=amd64 go build -a -o marionette ./cmd/marionette\n\nFROM ubuntu:16.04\nWORKDIR /root/\nRUN apt-get update && \\\n\tapt-get install -y build-essential software-properties-common m4 wget python2.7 python-dev python-pip unzip libffi-dev && \\\n\tpip2 install cffi cryptography\n\nRUN wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2 && \\\n\ttar -xvjf gmp-6.1.2.tar.bz2 && cd gmp-6.1.2 && \\\n\t./configure --enable-cxx && make && make install && \\\n\tcd /root && rm -rf gmp-*\n\nRUN wget https://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.1.tar.gz && \\\n\ttar zxvf pycrypto-2.6.1.tar.gz && cd pycrypto-2.6.1 && \\\n\tpython2.7 setup.py build && python2.7 setup.py install && \\\n\tcd /root && rm -rf pycrypto-*\n\nRUN wget -O regex2dfa.zip https://github.com/kpdyer/regex2dfa/archive/master.zip && \\\n\tunzip regex2dfa.zip && cd regex2dfa-master && \\\n\t./configure && make && python2.7 setup.py install && \\\n\tcd /root && rm -rf regex2dfa*\n\nRUN wget -O libfte.zip https://github.com/kpdyer/libfte/archive/master.zip && \\\n\tunzip libfte.zip && cd libfte-master && \\\n\tpython2.7 setup.py install && \\\n\tcd /root && rm -rf libfte*\n\nCOPY --from=builder /go/src/github.com/redjack/marionette/marionette .\n\nENTRYPOINT [\"./marionette\"]\n"
    },
    {
        "filename": "ff8eff33506dda350401e4d1d1103285d2a3b16a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM tatsuru/debian\nENV PATH /usr/sbin:/sbin:/usr/bin:/bin\n\n# do not ask\nENV DEBIAN_FRONTEND noninteractive\n\n# update/install packages\nRUN apt-get -f update\nRUN apt-get install -y adduser bash openssh-server curl wget lsb-release build-essential libgmp3-dev libssl-dev libexpat1-dev libxml2-dev libmysqlclient-dev shared-mime-info libmagickcore-dev git supervisor telnet strace tcpdump uuid-runtime git\n\n# perl-install\nRUN wget -O /tmp/perl-install https://raw.github.com/tatsuru/xbuild/master/perl-install\nRUN bash /tmp/perl-install 5.18.1 /opt/perl\n\n# ruby-install\nRUN wget -O /tmp/ruby-install https://raw.github.com/tatsuru/xbuild/master/ruby-install\nRUN bash /tmp/ruby-install 2.0.0-p353 /opt/ruby\nENV PATH /opt/ruby/bin:/opt/perl/bin:/usr/sbin:/sbin:/usr/bin:/bin\n\nRUN gem install fluentd\n\n# sensu\nRUN wget -q -O /tmp/sensu_0.12.2-1_amd64.deb  http://repos.sensuapp.org/apt/pool/sensu/main/s/sensu/sensu_0.12.2-1_amd64.deb\nRUN dpkg -i /tmp/sensu_0.12.2-1_amd64.deb\nRUN mkdir /var/run/sensu\n\n# deploy\nRUN mkdir -p /opt/Sampleapp\nADD . /opt/Sampleapp/current\n\n# \u5dee\u5206\u3067\u4f5c\u308c\u308b\u3088\u3046\u306brepository \u3092\u5411\u304f\u3088\u3046\u306b\u3059\u308b(\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u3072\u3069\u3044)\nRUN cd /opt/Sampleapp/current && git config remote.origin.url https://github.com/tatsuru/docker-sample-app.git\nRUN cd /opt/Sampleapp/current && git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'\n\n# carton install\nRUN mkdir /opt/Sampleapp/shared\nRUN cd /opt/Sampleapp/current && carton install --deployment --path /opt/Sampleapp/shared\n\n# log\nRUN mkdir /var/log/app\n\nRUN mkdir /root/.ssh\nADD key/authorized_keys /root/.ssh/authorized_keys\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/authorized_keys\nRUN chown root:root /root/.ssh/authorized_keys\n\n# sensu\nADD sensu/config.json /etc/sensu/config.json\nADD sensu/handler.json /etc/sensu/conf.d/handler.json\nADD sensu/metric.json /etc/sensu/conf.d/metric.json\n\nEXPOSE 8000\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/opt/Sampleapp/current/supervisor/supervisord.conf\"]\n"
    },
    {
        "filename": "ffc64295cf1721550201b7470e56809795486abe.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Docker container for Ubuntu 14.04\n\n# See https://github.com/ceejatec/naked-docker/ for details about the\n# construction of the base image.\n\nFROM ceejatec/naked-ubuntu:14.04\nMAINTAINER build-team@couchbase.com\n\nUSER root\n\n# Install SSH server\nRUN apt-get update && \\\n    apt-get install -y openssh-server && \\\n    rm -f /var/cache/apt/archives/*.deb && \\\n    mkdir /var/run/sshd # update\n\n# Create couchbase user with password-less sudo privs, and give\n# ownership of /opt/couchbase\nRUN useradd couchbase -G sudo -m -s /bin/bash && \\\n    mkdir -p /opt/couchbase && chown -R couchbase:couchbase /opt/couchbase && \\\n    echo 'couchbase:couchbase' | chpasswd && \\\n    sed -ri 's/ALL\\) ALL/ALL) NOPASSWD:ALL/' /etc/sudoers\n\n# Expose and start SSH daemon\nEXPOSE 22\nCMD [ \"/usr/sbin/sshd\", \"-D\" ]\n\n# Install Couchbase Mobile build dependencies. We don't need \"go\" or \"repo\"\n# yet, but we probably will.\nRUN apt-get update && \\\n    apt-get install -y ccache git-core ed man curl ccache gcc-multilib g++-multilib lib32z1 lib32stdc++6 npm bc && \\\n    rm -f /var/cache/apt/archives/*.deb\nRUN ln -s /usr/bin/nodejs /usr/bin/node\nRUN ln -s /usr/bin/nodejs /usr/sbin/node\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\nRUN echo 'PATH=\"/usr/lib/ccache:$PATH\"' >> /home/couchbase/.profile\nRUN mkdir /tmp/deploy && \\\n    curl https://storage.googleapis.com/golang/go1.4.1.linux-amd64.tar.gz -o /tmp/deploy/go.tar.gz && \\\n    cd /usr/local && tar xzf /tmp/deploy/go.tar.gz && \\\n    cd bin && for file in /usr/local/go/bin/*; do ln -s $file; done && \\\n    curl https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo && \\\n    chmod a+x /usr/local/bin/repo && \\\n    cd /tmp && rm -rf /tmp/deploy\n\n# Node.js dependency to build phonegap-plugin\nRUN npm config set registry=\"http://registry.npmjs.org/\"\nRUN npm install xmlbuilder\nRUN npm install findit\nRUN npm install ncp\nRUN echo yes | apt-get install zip\n\n# JDK for Jenkins.\n# JCE Unlimited Policy is not available by default from oracle-java8-installer\n# Software-properties-common is required for add-apt-repository\nRUN apt-get update && \\\n    apt-get install -y maven unzip && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:webupd8team/java -y && \\\n    apt-get update && \\\n    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections && \\\n    apt-get install oracle-java8-installer -y && \\\n    apt-get install oracle-java8-set-default && \\\n    apt-get install oracle-java8-unlimited-jce-policy && \\\n    rm -f /var/cache/apt/archives/*.deb\n\n# CLANG compiler\nRUN apt-get install -y clang-3.6\n\n# Android SDK/CLANG environment settings\nRUN echo 'export ANDROID_NDK_HOME=\"/home/couchbase/jenkins/tools/android-ndk-r12b\"\\nexport ANDROID_HOME=\"/home/couchbase/jenkins/tools/android-sdk\"\\nexport ANDROID_SDK_HOME=\"/home/couchbase/jenkins/tools/android-sdk\"\\nexport PATH=\"/usr/lib/llvm-3.6/bin:$ANDROID_NDK_HOME:$ANDROID_SDK_HOME:$ANDROID_SDK_HOME/tools:$ANDROID_SDK_HOME/platform-tools:$PATH\"' > /etc/profile.d/android.sh\n\n# Android SDK\nUSER couchbase\nRUN mkdir -p /home/couchbase/jenkins/tools && \\\n    cd /home/couchbase/jenkins/tools && \\\n    curl -L https://dl.google.com/android/repository/tools_r25.2.3-linux.zip -o android-sdk.zip && \\\n    unzip android-sdk.zip -d android-sdk && \\\n    chown -R couchbase:couchbase android-sdk && \\\n    chmod 755 android-sdk\n\nENV ANDROID_HOME /home/couchbase/jenkins/tools/android-sdk\nENV SDK_CMD $ANDROID_HOME/tools/bin/sdkmanager\n\n# Android SDK License\nRUN mkdir $ANDROID_HOME/licenses && \\\n    echo 8933bad161af4178b1185d1a37fbf41ea5269c55 > $ANDROID_HOME/licenses/android-sdk-license  && \\\n    echo d56f5187479451eabf01fb78af6dfcb131a6481e >> $ANDROID_HOME/licenses/android-sdk-license && \\\n    echo 84831b9409646a918e30573bab4c9c91346d8abd > $ANDROID_HOME/licenses/android-sdk-preview-license\n\nRUN . /etc/profile && \\\n    $SDK_CMD \"tools\" \"platform-tools\" && \\\n    $SDK_CMD \"build-tools;27.0.3\" \"build-tools;27.0.0\" \"build-tools;26.0.2\" \"build-tools;24.0.0\" \"build-tools;25.0.3\" \"build-tools;22.0.1\" \"build-tools;23.0.3\" \"build-tools;19.1.0\" && \\\n    $SDK_CMD \"platforms;android-27\" \"platforms;android-26\" \"platforms;android-25\" \"platforms;android-24\" \"platforms;android-22\" \"platforms;android-16\" && \\\n    $SDK_CMD \"system-images;android-16;default;armeabi-v7a\" && \\\n    $SDK_CMD \"system-images;android-19;default;armeabi-v7a\" && \\\n    $SDK_CMD \"system-images;android-24;default;armeabi-v7a\" && \\\n    $SDK_CMD \"system-images;android-25;google_apis;armeabi-v7a\"\n\n# Android NDK\nUSER couchbase\nRUN cd /home/couchbase/jenkins/tools && \\\n    curl -L https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip -o android-ndk-r12b.zip && \\\n    unzip -qq android-ndk-r12b.zip && \\\n    chown -R couchbase:couchbase android-ndk-r12b && \\\n    chmod 755 android-ndk-r12b\n\n# Revert so CMD will run as root.\nUSER root\n\n"
    },
    {
        "filename": "d6f5c6320930c46a86c62117c2115b3b089e102b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:stretch\nMAINTAINER Josh Cox <josh 'at' webhosting.coop>\n\nENV MKDOMOTICZ_UPDATED=20190316\n\nARG DOMOTICZ_VERSION=\"master\"\n\n# install packages\nRUN apt-get update && apt-get install -y \\\n\tgit \\\n\tlibssl1.0.2 libssl-dev \\\n\tbuild-essential cmake \\\n\tlibboost-all-dev \\\n\tlibsqlite3-0 libsqlite3-dev \\\n\tcurl libcurl3 libcurl4-openssl-dev \\\n\tlibusb-0.1-4 libusb-dev \\\n\tzlib1g-dev \\\n\tlibudev-dev \\\n\tpython3-dev python3-pip \\\n        fail2ban && \\\n    # linux-headers-generic\n\n## OpenZwave installation\n# grep git version of openzwave\ngit clone --depth 2 https://github.com/OpenZWave/open-zwave.git /src/open-zwave && \\\ncd /src/open-zwave && \\\n# compile\nmake && \\\n\n# \"install\" in order to be found by domoticz\nln -s /src/open-zwave /src/open-zwave-read-only && \\\n\n## Domoticz installation\n# clone git source in src\ngit clone -b \"${DOMOTICZ_VERSION}\" --depth 2 https://github.com/domoticz/domoticz.git /src/domoticz && \\\n# Domoticz needs the full history to be able to calculate the version string\ncd /src/domoticz && \\\ngit fetch --unshallow && \\\n# prepare makefile\ncmake -DCMAKE_BUILD_TYPE=Release . && \\\n# compile\nmake && \\\n# Install\n# install -m 0555 domoticz /usr/local/bin/domoticz && \\\ncd /tmp && \\\n# Cleanup\n# rm -Rf /src/domoticz && \\\n\n# ouimeaux\npip3 install -U ouimeaux && \\\n\n# remove git and tmp dirs\napt-get remove -y git cmake linux-headers-amd64 build-essential libssl-dev libboost-dev libboost-thread-dev libboost-system-dev libsqlite3-dev libcurl4-openssl-dev libusb-dev zlib1g-dev libudev-dev && \\\n   apt-get autoremove -y && \\ \n   apt-get clean && \\\n   rm -rf /var/lib/apt/lists/*\n\n\nVOLUME /config\n\nEXPOSE 8080\n\nCOPY start.sh /start.sh\n\n#ENTRYPOINT [\"/src/domoticz/domoticz\", \"-dbase\", \"/config/domoticz.db\", \"-log\", \"/config/domoticz.log\"]\n#CMD [\"-www\", \"8080\"]\nCMD [ \"/start.sh\" ]\n"
    },
    {
        "filename": "d7479cacd1f40ffd325e245b6822b2b09b4911cf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\nMAINTAINER dustyfresh, https://github.com/dustyfresh\n\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\nRUN apt-get update && apt-get install --yes sudo vim build-essential tcpdump libpcap-dev \\\n libssl-dev python-dev python-setuptools python-pip python-virtualenv supervisor\n\nRUN mkdir -p /opt/opencanary &&  virtualenv -p python /opt/opencanary/virtualenv \\\n  && source /opt/opencanary/virtualenv/bin/activate \\\n  && pip install opencanary \\\n  && pip install scapy pcapy\n\nADD conf/opencanary.conf /root/.opencanary.conf\nADD conf/supervise-opencanary.conf /etc/supervisor/conf.d/supervise-opencanary.conf\n\nRUN mkdir -p /opt/opencanary/scripts\nADD scripts/startcanary.sh /opt/opencanary/scripts/startcanary.sh\nRUN chmod +x /opt/opencanary/scripts/startcanary.sh\n\nCMD [\"/usr/bin/supervisord\", \"-n\"]\n"
    },
    {
        "filename": "d7d9f644b6d76f29bc147fc40c211554df1f3dbf.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM\t\tphusion/baseimage:0.9.18\nMAINTAINER\tcontact@oliver.la\nENV\t\tSEAFILE_VERSION 6.3.7\n\nEXPOSE\t\t8082 8000\n\nVOLUME\t\t/seafile\nWORKDIR\t\t/seafile\n\n# Required packages for pro edition\n# Taken from https://manual.seafile.com/deploy_pro/download_and_setup_seafile_professional_server.html\nRUN\t\tapt-get update && \\\n\t\tDEBIAN_FRONTEND=noninteractive apt-get install -y \\\n\t\topenjdk-7-jre \\\n\t\tpoppler-utils libpython2.7 python-pip python-setuptools python-imaging python-mysqldb python-memcache python-ldap python-urllib3 \\\n\t\tsqlite3 wget \\\n\t\tlibreoffice libreoffice-script-provider-python \\\n\t\tfonts-vlgothic ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy && \\\n\t\tapt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n\t\tpip install boto\n\n# Download seafile binary\n# List of binaries are here: https://download.seafile.com/d/6e5297246c/files/?p=/pro/\nRUN\t\twget \"https://download.seafile.com/d/6e5297246c/files/?p=/pro/seafile-pro-server_${SEAFILE_VERSION}_x86-64.tar.gz&dl=1\" -O \"/seafile-pro-server_${SEAFILE_VERSION}_x86-64.tar.gz\"\n\n# Add seafile service.\nADD\t\tservice/seafile/run.sh /etc/service/seafile/run\nADD\t\tservice/seafile/stop.sh /etc/service/seafile/stop\n\n# Add seahub service\nADD\t\tservice/seahub/run.sh /etc/service/seahub/run\nADD\t\tservice/seahub/stop.sh /etc/service/seahub/stop\n\n# Custom configuration\nCOPY\tconfig/seafevents.conf /seafevents.conf\n\n# Custom scripts\nADD\t\tbin/setup.sh /usr/local/sbin/setup\nADD\t\tbin/upgrade.sh /usr/local/sbin/upgrade\n\n# Set permissions\nRUN\t\tchmod +x /usr/local/sbin/setup && \\\n\t\tchmod +x /usr/local/sbin/upgrade && \\\n\t\tchmod +x /etc/service/seafile/* && \\\n\t\tchmod +x /etc/service/seahub/*\n\nCMD\t\t/sbin/my_init\n"
    },
    {
        "filename": "d7dbc5a1b7ab9207f3a39a022a826bf041d9db9c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM clarkzjw/restweb\nMAINTAINER clarkzjw <clarkzjw@gmail.com>\n\nRUN \\\n  go get github.com/djimenez/iconv-go && \\\n  git clone https://github.com/ZJGSU-Open-Source/GoOnlineJudge.git $GOPATH/src/GoOnlineJudge\n\nENV OJ_HOME $GOPATH/src\nENV DATA_PATH=$OJ_HOME/Data\nENV LOG_PATH=$OJ_HOME/log\nENV RUN_PATH=$OJ_HOME/run\n\nRUN \\\n  mkdir -p $OJ_HOME/Data && \\\n  mkdir -p $OJ_HOME/DBData && \\\n  mkdir -p $OJ_HOME/run && \\\n  mkdir -p $OJ_HOME/log\n\nRUN \\\n  sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get -y upgrade && \\\n  apt-get install -y build-essential flex openjdk-7-jdk && \\\n  apt-get autoremove && \\\n  apt-get autoclean && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN \\\n  git clone https://github.com/ZJGSU-Open-Source/RunServer.git $GOPATH/src/RunServer && \\\n  git clone https://github.com/ZJGSU-Open-Source/vjudger.git $GOPATH/src/vjudger && \\\n  cd $GOPATH/src/RunServer && \\\n  ./make.sh\n\nEXPOSE 8888\nCMD RunServer\n"
    },
    {
        "filename": "d7e461a2ef3366aa8de4575dfaf439fc01562d20.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# FROM dockerfile/ubuntu\nFROM phusion/baseimage:0.9.11\n\nMAINTAINER Michiel van Oosten\n\n# Regenerate SSH host keys. baseimage-docker does not contain any, so you\n# have to do that yourself. You may also comment out this instruction; the\n# init system will auto-generate one during boot.\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\nADD docker/scripts /root/scripts\nADD docker/.bashrc /root/\nADD docker/.z /root/\nADD docker/.gitconfig /root/\n\n# setting environment variables\nRUN echo \"/root\" > /etc/container_environment/HOME\n\n# my build instructions:\n\nRUN apt-get update\nRUN apt-get install rlwrap wget\n\n# haproxy \n# RUN   \\\n#     cd /opt && \\\n#     apt-get install -qq build-essential libssl-dev libev-dev wget rlwrap&& \\\n#     wget http://www.haproxy.org/download/1.5/src/haproxy-1.5.1.tar.gz && \\\n#     tar xzvf haproxy-1.5.1.tar.gz && \\\n#     cd haproxy-1.5.1 && \\\n#     make TARGET=linux26 USE_OPENSSL=1 && \\ \n#     sudo make install && \\\n#     rm -rf /opt/haproxy-1.5.1 && \\\n#     rm -f /opt/haproxy-1.5.1.tar.gz\n\n# or just:    \nADD docker/haproxy /usr/local/sbin/\n\nRUN useradd haproxy    \n\n# serf\nADD docker/serf /usr/local/sbin\n\n# ADD docker/node /opt/node #one can add the node dir to the project instead perhaps\n\n# # Install Node \nRUN   \\\n  cd /opt && \\\n  wget http://nodejs.org/dist/v0.10.28/node-v0.10.28-linux-x64.tar.gz && \\\n  tar -xzf node-v0.10.28-linux-x64.tar.gz && \\\n  mv node-v0.10.28-linux-x64 node && \\\n\n  cd /usr/local/bin && \\\n  ln -s /opt/node/bin/* . && \\\n  rm -f /opt/node-v0.10.28-linux-x64.tar.gz\n\nRUN \\\n   npm install -g nodemon \n\n# Set the working directory\nWORKDIR   /src\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
    },
    {
        "filename": "d801ec21308b17bfddb9efad9bb865393af6a1b0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# See the top level Makefile in https://github.com/docker/docker for usage.\n#\nFROM debian:jessie\nMAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)\n\nRUN apt-get update \\\n\t&& apt-get install -y \\\n\t\tgettext \\\n\t\tgit \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\tpython-dev \\\n\t\tpython-pip \\\n\t\tpython-setuptools \\\n\t\tvim-tiny\n\nRUN pip install mkdocs\n\n# add MarkdownTools to get transclusion\n# (future development)\n#RUN easy_install -U setuptools\n#RUN pip install MarkdownTools2\n\n# this version works, the current versions fail in different ways\nRUN pip install awscli==1.4.4 pyopenssl==0.12\n\n# get my sitemap.xml branch of mkdocs and use that for now\n# commit hash of the newest commit of SvenDowideit/mkdocs on\n# docker-markdown-merge branch, it is used to break docker cache\n# see: https://github.com/SvenDowideit/mkdocs/tree/docker-markdown-merge\nRUN git clone -b docker-markdown-merge https://github.com/SvenDowideit/mkdocs \\\n\t&& cd mkdocs/ \\\n\t&& git checkout ad32549c452963b8854951d6783f4736c0f7c5d5 \\\n\t&& ./setup.py install\n\nCOPY . /docs\nCOPY MAINTAINERS /docs/sources/humans.txt\nWORKDIR /docs\n\nRUN VERSION=$(cat VERSION) \\\n\t&& MAJOR_MINOR=\"${VERSION%.*}\" \\\n\t&& for i in $(seq $MAJOR_MINOR -0.1 1.0); do \\\n\t\techo \"<li><a class='version' href='/v$i'>Version v$i</a></li>\"; \\\n\tdone > sources/versions.html_fragment \\\n\t&& GIT_BRANCH=$(cat GIT_BRANCH) \\\n\t&& GITCOMMIT=$(cat GITCOMMIT) \\\n\t&& AWS_S3_BUCKET=$(cat AWS_S3_BUCKET) \\\n\t&& BUILD_DATE=$(date) \\\n\t&& sed -i \"s/\\$VERSION/$VERSION/g\" theme/mkdocs/base.html \\\n\t&& sed -i \"s/\\$MAJOR_MINOR/v$MAJOR_MINOR/g\" theme/mkdocs/base.html \\\n\t&& sed -i \"s/\\$GITCOMMIT/$GITCOMMIT/g\" theme/mkdocs/base.html \\\n\t&& sed -i \"s/\\$GIT_BRANCH/$GIT_BRANCH/g\" theme/mkdocs/base.html \\\n\t&& sed -i \"s/\\$BUILD_DATE/$BUILD_DATE/g\" theme/mkdocs/base.html \\\n\t&& sed -i \"s/\\$AWS_S3_BUCKET/$AWS_S3_BUCKET/g\" theme/mkdocs/base.html\n\nEXPOSE 8000\n\nCMD [\"mkdocs\", \"serve\"]\n"
    },
    {
        "filename": "d805e3ed3274141d2ac06bcaf756be46be42302d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM php:7.0.12-apache\nCOPY config/php.ini /usr/local/etc/php/\n\nRUN apt-get clean && apt-get update && apt-get install --fix-missing wget -y\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp && wget https://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg\n\nRUN apt-get clean && apt-get update && apt-get install --fix-missing -y \\\n  ruby-dev \\\n  rubygems \\\n  imagemagick \\\n  graphviz \\\n  sudo \\\n  git \\\n  vim \\\n  php7.0-dev \\\n  memcached \\\n  libmemcached-tools \\\n  libmemcached-dev \\\n  libpng12-dev \\\n  libjpeg62-turbo-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  libxslt1-dev \\\n  mysql-client \\\n  php5-mysqlnd \\\n  zip \\\n  wget \\\n  linux-libc-dev \\\n  libyaml-dev \\\n  apt-transport-https \\\n  zlib1g-dev \\\n  libicu-dev \\\n  libpq-dev \\\n  bash-completion \\\n  htop\n\n# postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list && apt-get update && apt-get install -y postgresql-client-9.5\n\n# Install memcached for PHP 7\nRUN cd /tmp && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached && sudo git checkout php7 && phpize && ./configure --disable-memcached-sasl && make && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini &&\\\n echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20151012/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\n\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \\\n&& docker-php-ext-install \\\n  gd \\\n  mbstring \\\n  mcrypt \\\n  zip \\\n  soap \\\n  pdo_mysql \\\n  mysqli \\\n  xsl \\\n  opcache \\\n  calendar \\\n  intl \\\n  exif \\\n  pgsql \\\n  pdo_pgsql \\\n  ftp\n\n# Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nRUN pecl install yaml-2.0.0 && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n\nCOPY core/memcached.conf /etc/memcached.conf\n\n# SASS and Compass installation\nRUN gem install compass\n\n# Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\nRUN DEBIAN_FRONTEND=noninteractive apt-get -yq --no-install-recommends install -y nodejs\n\n# Installation of LESS\nRUN npm update -g npm && \\\nnpm install -g less && npm install -g less-plugin-clean-css\n\n# Installation of Grunt\nRUN npm install -g grunt-cli\n\n# Installation of Gulp\nRUN npm install -g gulp\n\n# Installation of Bower\nRUN npm install -g bower\n\n# Installation of Composer\nRUN cd /usr/src && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src && mv composer.phar /usr/bin/composer\n\n# Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush && git checkout 8.1.5\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush && composer update && composer install\n\n# Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ && wget http://xdebug.org/files/xdebug-2.4.0.tgz && tar -xvzf xdebug-2.4.0.tgz && cd xdebug-2.4.0/ && phpize && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config && make && make install\nRUN cd /tmp/xdebug-2.4.0 && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20151012/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_enable=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_autostart=0 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_connect_back=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_port=9000 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_log=/tmp/php5-xdebug.log >> /usr/local/etc/php/conf.d/xdebug.ini\n\nRUN rm -rf /var/www/html && \\\n  mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && \\\n  chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n\n# Installation of PHP_CodeSniffer with Drupal coding standards.\n# See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n# # Installation of Symfony console autocomplete\n# RUN composer global require bamarni/symfony-console-autocomplete\n\n# installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\n\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n\n# Installation of Opcode cache\nRUN ( \\\n  echo \"opcache.memory_consumption=128\"; \\\n  echo \"opcache.interned_strings_buffer=8\"; \\\n  echo \"opcache.max_accelerated_files=4000\"; \\\n  echo \"opcache.revalidate_freq=5\"; \\\n  echo \"opcache.fast_shutdown=1\"; \\\n  echo \"opcache.enable_cli=1\"; \\\n  ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nRUN a2enmod rewrite expires && service apache2 restart\n\n# Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar && mv drupal.phar /usr/local/bin/drupal && chmod +x /usr/local/bin/drupal\n\n# Our apache volume\nVOLUME /var/www/html\n\n# create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n\n# Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n# Expose 80 for apache, 9000 for xdebug\nEXPOSE 80 9000\n\n# Add web and root .bashrc config\n# When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc && \\\n    echo \". .profile\" > /var/www/.bashrc && \\\n    echo \"alias ll='ls -al'\" > /var/www/.profile && \\\n    echo \"cd /var/www/html\" >> /var/www/.profile\n\n# Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n\n# Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "d82db3ec3c27d87ce88bf9f797b065b4ae9a535b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# OpenATTIC Dev docker image\n\nFROM ubuntu:16.04\nMAINTAINER Ricardo Dias \"rdias@suse.com\"\n\nADD entrypoint.sh pgsql_setup.sh /\n\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq mercurial git nodejs npm apache2 postgresql-9.5 \\\nsystemd dbus libapache2-mod-wsgi bzip2 ntp udisks2 vlan wget \\\nbridge-utils vlan ifenslave-2.6 sg3-utils python-django python-dbus \\\npython-configobj python-gobject python-pam python-m2crypto python-netifaces \\\npython-netaddr python-requests python-pyudev python-djangorestframework \\\npython-pyinotify \\\nlsb-release memcached python-memcache python-psycopg2 python-numpy \\\npython-rtslib python-apt nagios3-core nagios-plugins-standard \\\nnagios-plugins-basic rrdtool lvm2 ceph ceph-common python-ceph \\\nzfs && \\\napt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN wget https://bootstrap.pypa.io/get-pip.py && \\\npython get-pip.py && \\\n/usr/local/bin/pip install mock\n\nRUN ln -s /usr/bin/nodejs /usr/bin/node\n\nRUN (cd /lib/systemd/system/sysinit.target.wants/; \\\n/bin/bash -c 'for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done'); \\\nrm -f /lib/systemd/system/multi-user.target.wants/*; \\\nrm -f /etc/systemd/system/*.wants/*; \\\nrm -f /lib/systemd/system/local-fs.target.wants/*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\nrm -f /lib/systemd/system/basic.target.wants/*; \\\nrm -f /lib/systemd/system/anaconda.target.wants/*;\n\nRUN wget http://downloads.sourceforge.net/project/pnp4nagios/PNP-0.6/pnp4nagios-0.6.24.tar.gz; \\\ntar zxvf pnp4nagios-0.6.24.tar.gz; cd pnp4nagios-0.6.24; ./configure \\\n--with-httpd-conf=/etc/apache2/conf-available; make all; make install; \\\nmake install-webconf; make install-config; make install-init; \\\nupdate-rc.d npcd defaults; \\\nmkdir -p /var/lib/pnp4nagios/spool; mkdir -p /var/lib/pnp4nagios/perfdata; \\\nmkdir -p /var/lib/pnp4nagios/stats; chown -R nagios:nagios /var/lib/pnp4nagios; \\\nsed -i -e 's!/usr/local/pnp4nagios/var!/var/lib/pnp4nagios!' \\\n-e 's!log_type = syslog!log_type = file!g' /usr/local/pnp4nagios/etc/npcd.cfg; \\\nsed -i -e 's!/usr/local/pnp4nagios/var!/var/lib/pnp4nagios!' /usr/local/pnp4nagios/etc/process_perfdata.cfg; \\\nmkdir -p /etc/pnp4nagios; cp /usr/local/pnp4nagios/etc/npcd.cfg /etc/pnp4nagios/npcd.cfg; \\\nmkdir -p /usr/lib/pnp4nagios; cp /usr/local/pnp4nagios/lib/npcdmod.o /usr/lib/pnp4nagios; \\\nrm -rf pnp4nagios-0.6.*\n\nRUN /pgsql_setup.sh init_db\n\nRUN adduser --system --shell /bin/bash --quiet --home /var/lib/openattic --group openattic; \\\nadduser www-data openattic; adduser openattic www-data; adduser nagios openattic; \\\nadduser openattic nagios\n\nEXPOSE 5432 80\n\nVOLUME [\"/srv/openattic\", \"/sys/fs/cgroup\", \"/etc/ceph\"]\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
    },
    {
        "filename": "d85555de193444fc5251f46c1246cf372897448d.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:stretch\n\nMAINTAINER Bj\u00f6rn Dahlgren <bjodah@gmail.com>\n\nENV LANG C.UTF-8\n\n# This dockerfile is designed to run on binder (mybinder.org)\nRUN apt-get update && \\\n    apt-get --quiet --assume-yes install curl git g++-6 libgmp-dev binutils-dev bzip2 make cmake sudo \\\n    python3-dev python3-pip libgsl-dev liblapack-dev graphviz && \\\n    apt-get clean && \\\n    curl -LOs http://computation.llnl.gov/projects/sundials/download/sundials-3.1.2.tar.gz && \\\n    tar xzf sundials-3.1.2.tar.gz && mkdir build/ && cd build/ && \\\n    cmake -DCMAKE_PREFIX_PATH=/usr/local -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DEXAMPLES_ENABLE=OFF -DEXAMPLES_INSTALL=OFF \\\n    ../sundials*/ && make install && cd - && rm -r build/ sundials* && \\\n    python3 -m pip install --upgrade pip && \\\n    curl -LOs http://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.bz2 && \\\n    tar xjf boost_*.tar.bz2 && cd boost* && ./bootstrap.sh && ./b2 -j 2 --prefix=/usr/local/ install && cd -\n\n# At this point the system should be able to pip-install the package and all of its dependencies. We'll do so\n# when running the image using the ``host-jupyter-using-docker.sh`` script. Installed packages are cached.\n"
    },
    {
        "filename": "d8b8a9b8ed0fdb6872e7c3a8c55f386b0821bcb7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM bamos/ubuntu-opencv-dlib-torch:ubuntu_14.04-opencv_2.4.11-dlib_19.0-torch_2016.07.12\nMAINTAINER Justin Long <crockpotveggies@users.github.com>\n\nRUN apt-get update -y; apt-get install wget -y\n\nADD . /root/overfeat\n\nRUN cd /root/overfeat/; /bin/bash install.sh\n\nCMD /bin/bash\n"
    },
    {
        "filename": "d8f53688a53ed0346719a433fe3798aa98b662a8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nginx:stable  \nMAINTAINER The Doalitic team  \n  \nENV DEBIAN_FRONTEND noninteractive  \nRUN apt-get update && apt-get -y dist-upgrade && \\  \napt-get -y install python-pip && rm -rf /var/lib/apt/lists/*  \nRUN pip install Sphinx sphinx_rtd_theme  \n  \nADD . /tmp  \nWORKDIR /tmp  \n  \nRUN make html  \nRUN mkdir -p /var/www/docs  \nRUN cp -r /tmp/build/html/* /var/www/docs/  \nRUN rm -rf *  \nRUN chown -R www-data:www-data /var/www/docs/*  \n  \nCMD [ \"echo\", \"Documentation volume: /var/www/docs\" ]  \n\n"
    },
    {
        "filename": "d90446529cbed66f15825a7bc1858b47854f162d.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# BMO - josemazo/bmo\n\nFROM ubuntu:14.04\nMAINTAINER Jose M. Camacho <hello@josemazo.com>\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qq update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qqy upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qqy dist-upgrade\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qqy install build-essential gfortran graphviz-dev imagemagick libatlas-dev libatlas3-base libfreetype6-dev liblapack-dev libpng-dev libxml2-dev libxslt1-dev libyaml-dev pandoc pkg-config python-dev python-pip supervisor zlib1g-dev\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qqy autoremove\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qqy autoclean\n\nRUN pip install -U pip\nRUN pip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs pip install -U\n\nRUN pip install numpy\nRUN pip install scipy\nRUN pip install matplotlib\nRUN pip install bottleneck cython numexpr nose patsy pyenchant pygments pygraphviz pytz pyyaml\nRUN pip install configobj lxml python-dateutil networkx textblob\nRUN pip install beautifulsoup4 gensim ipython[notebook] mpltools nltk pandas pattern scikit-learn simpy ujson\nRUN pip install statsmodels\nRUN pip install seaborn\n\nADD resources/ipython_notebook_config.py /ipython_notebook_config.py\nRUN IPYTHON_DIR=$(ipython locate) && \\\n    mv /ipython_notebook_config.py $IPYTHON_DIR/profile_default/ipython_notebook_config.py\n\nADD resources/ipynblogo.png /ipynblogo.png\nRUN mv /ipynblogo.png /usr/local/lib/python2.7/dist-packages/IPython/html/static/base/images/ipynblogo.png\n\nRUN mkdir -p /var/log/supervisor\nADD resources/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n"
    },
    {
        "filename": "d909a194ee0d46a3251232edaf58713502ca9bf5.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ruby\nMAINTAINER Tim Perry <pimterry@gmail.com>\n\nUSER root\n\nRUN apt-get update && \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    # Set password to temp-password - reset to random password on startup\n    echo mysql-server mysql-server/root_password password temp-password | debconf-set-selections && \\\n    echo mysql-server mysql-server/root_password_again password temp-password | debconf-set-selections && \\   \n    # Instal MySQL for data, node as the JS engine for uglifier\n    apt-get install -y mysql-server nodejs\n    \nCOPY . /opt/staytus\n\nRUN cd /opt/staytus && \\\n    bundle install --deployment --without development:test\n\nENTRYPOINT /opt/staytus/docker-start.sh\n\n# Persists all DB state\nVOLUME /var/lib/mysql\n\n# Persists copies of other relevant files (DB config, custom themes). Contents of this are copied \n# to the relevant places each time the container is started\nVOLUME /opt/staytus/persisted\n\nEXPOSE 5000\n"
    },
    {
        "filename": "d940bea24446bcc2b8b9678389ecf08b1d393bf2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Dockerfile for Origin Flask E2E Test Site\n\nFROM ubuntu\n\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y python-dev python-pip\nRUN pip install pip --upgrade\n\nADD flasksite /opt/flasksite\n\nRUN pip install -r /opt/flasksite/requirements.txt\n\nEXPOSE 80\n\nCMD python /opt/flasksite/test_app.py\n"
    },
    {
        "filename": "d94670d1d9e4e35b64ab8829f1fffa2cf1387f13.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu\n\n# File Author / Maintainer\nMAINTAINER Adrian Moreno <adrian.moreno@emc.com>\n\n# Update the sources list\nRUN apt-get update\n\n# Install Python and Basic Python Tools\nRUN apt-get install -y python python-dev python-distribute python-pip\nRUN apt-get install -y build-essential git curl\nRUN apt-get install -y nginx gunicorn\n\n# Copy the application folder inside the container\nADD . /app/mosaicme-web\n\n# Get pip to download and install requirements:\nRUN pip install -r /app/mosaicme-web/requirements.txt\n\n# Set environment variables\nENV PYTHONPATH /app/mosaicme-web:$PYTHON_PATH\n\n# setup all the config files\nrun rm /etc/nginx/sites-enabled/default\nrun ln -s /app/mosaicme-web/mosaicme_nginx.conf /etc/nginx/sites-enabled/mosaicme\n\n# Set the default directory where CMD will execute\nWORKDIR /app/mosaicme-web\n\n# Expose ports\nEXPOSE 80\n\nCMD sh start.sh\n"
    },
    {
        "filename": "d9b430a83d51d7518762364121138580983e04f0.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 6,
        "text": "FROM continuumio/anaconda\nUSER root\n\n# Install some dev tools\nRUN apt-get update\nRUN apt-get install -y wget gcc g++ make alsa-base alsa-utils\n\nRUN wget http://www.mega-nerd.com/libsndfile/files/libsndfile-1.0.25.tar.gz && tar xvzf libsndfile-1.0.25.tar.gz && cd libsndfile-1.0.25 && ./configure --prefix=/usr && make && make install\n\nADD . protolab_sound_recognition \nRUN cd protolab_sound_recognition && pip install -r requirements.txt  && python setup.py develop\n"
    },
    {
        "filename": "da037730842ff4cefe7d23e5773c51d2f689b46b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Spoke Dockerfile for an attic server  \nFROM radial/spoke-base:latest  \nMAINTAINER Brice Waegeneire, \"https://bricewge.fr\"  \n# Install attic  \nENV DEBIAN_FRONTEND noninteractive  \nRUN apt-get -q update && apt-get -qyV install \\  \npython3-pip \\  \npython3-openssl \\  \nlibssl-dev \\  \nlibacl1-dev &&\\  \napt-get clean  \nRUN pip3 install attic  \n  \n# Configure attic user  \nRUN groupadd -g 502 attic &&\\  \nuseradd -g attic -u 502 -s /bin/bash -d /data/ attic &&\\  \npasswd -d -u attic  \n  \n# Set the program group to be start by supervisor  \nENV SPOKE_NAME attic  \n  \n  \n\n"
    },
    {
        "filename": "da7a6e161f77b8c0b448e365f40ab4514fa316c8.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:14.04  \nMAINTAINER Yaroslav Admin <devoto13@gmail.com>  \n  \n# Base  \nENV LANG en_US.UTF-8  \nENV DEBIAN_FRONTEND noninteractive  \n  \nRUN locale-gen en_US en_US.UTF-8  \nRUN dpkg-reconfigure locales  \nRUN apt-get update  \n  \nRUN apt-get install -y python-software-properties  \n  \n# Supervisor  \nRUN apt-get install supervisor -y  \nRUN update-rc.d -f supervisor disable  \n  \nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf  \n  \n# Start Script  \nADD startup /usr/local/bin/startup  \nRUN chmod +x /usr/local/bin/startup  \n  \nCMD [\"/usr/local/bin/startup\"]  \n  \n# Install global dependencies  \nRUN apt-get install -y python python-dev python-setuptools python-pip  \nRUN pip install gunicorn setproctitle  \n  \n# Install gunicorn running script  \nADD run /usr/local/bin/run  \nRUN chmod +x /usr/local/bin/run  \n  \n# Volumes  \nVOLUME [\"/root/app/logs\"]  \n  \n# Ports  \nEXPOSE 80  \n\n"
    },
    {
        "filename": "da85c218a93514c12937a1b005dbe88fdd368fcc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:16.04\nMAINTAINER Min Yu <yumin9822@gmail.com>\n\n#Please make sure the DOMAIN has A record which is same with your server ip. Or the SSL certifications will not be issued by letsencrypt\n\nENV DOMAIN **None**\nENV MIRROR_NAME google\n#ENV SSLCert **None**\n#ENV SSLKEY **None**\n#ENV SSLChain **None**\n\n#python3 and flask requests cchardet fastcache dependencies installation\n#cron\u53ef\u9009\u5b89\u88c5\u3002\nRUN apt-get update && \\cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    apt-get install -y build-essential patch binutils make devscripts nano libtool libssl-dev libxml2 \\\n                       libxml2-dev software-properties-common python-software-properties dnsutils \\\n                       git wget curl python3 python3-dev iftop cron && \\\n    wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | python3\n\n#\u63a8\u8350\u5b89\u88c5\u7684cChardet fastcache\u9700\u8981\u5b89\u88c5python3-dev\u548cbuild-essential\n#RUN pip3 install -U flask requests distro chardet cchardet fastcache lru-dict\nRUN pip3 install -r https://raw.githubusercontent.com/aploium/zmirror/master/requirements.txt\n\n#Apache2 installation\u3002 \"LC_ALL=C.UTF-8\"\u5fc5\u987b\u6dfb\u52a0\uff0c\u8981\u4e0d\u7136apt-key\u83b7\u53d6\u5931\u8d25\u4f1a\u5bfc\u81f4\u540e\u7eed\u5f88\u591a\u9519\u8bef\u3002\nRUN LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/apache2 && \\\n    apt-key update && apt-get update && apt-get upgrade -y && \\\n    apt-get install -y apache2 && \\\n    a2enmod rewrite mime include headers filter expires deflate autoindex setenvif ssl http2 && \\\n    apt-get install -y libapache2-mod-wsgi-py3\n\n#Zmirror installation,\u5982\u679c\u8981\u5b89\u88c5\u53e6\u5916\u7684\u4f8b\u5982YouTube\u955c\u50cf\uff0c\u8bf7\u4fee\u6539\u6b64\u6bb5\u3002\n#Reference https://github.com/aploium/zmirror/wiki/%E5%9C%A8%E4%B8%80%E5%8F%B0VPS%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAzmirror%E9%95%9C%E5%83%8F\nRUN cd /var/www && \\\n    git clone https://github.com/aploium/zmirror ${MIRROR_NAME} && chown -R www-data.www-data ${MIRROR_NAME} && \\\n    cp /var/www/${MIRROR_NAME}/more_configs/config_google_and_zhwikipedia.py /var/www/${MIRROR_NAME}/config.py && \\\n    sed -i \"s/^my_host_scheme.*$/my_host_scheme = \\'https:\\/\\/\\'/g\" /var/www/${MIRROR_NAME}/config.py && \\\n    echo \"verbose_level = 2\" >> /var/www/${MIRROR_NAME}/config.py\n\n#Apache2 conf cleaning according to https://github.com/aploium/zmirror-onekey/blob/master/deploy.py\nRUN rm -rf /etc/apache2/sites-enabled/000-default.conf && \\\n    rm -rf /etc/apache2/conf-enabled/apache2-doc.conf && \\\n    rm -rf /etc/apache2/conf-enabled/security.conf\n\n#zmirror-apache-boilerplate.conf is the h5.conf\nADD zmirror-apache-boilerplate.conf /etc/apache2/conf-enabled/zmirror-apache-boilerplate.conf\n\n#zmirror-http-redirection.conf is to let *:80 automatically redirects *:443\n#apache2-https.conf and apache2-http.conf are two virtual host templates from zmirror-onekey\n#ADD zmirror-http-redirection.conf /etc/apache2/sites-enabled/zmirror-http-redirection.conf\nADD apache2-https.conf /etc/apache2/sites-enabled/apache2-https.conf.sample\nADD apache2-http.conf /etc/apache2/sites-enabled/zmirror-http-redirection.conf\n#ADD no-ip-access.conf /etc/apache2/sites-enabled/no-ip-access.conf\n\n\nADD ENTRY.sh /\nRUN chmod a+x /ENTRY.sh\n\nVOLUME [\"/etc/letsencrypt\"]\n\n# PORTS\nEXPOSE 80\nEXPOSE 443\n\nENTRYPOINT [\"/ENTRY.sh\"]\n\nCMD [\"start\"]\n#CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n"
    },
    {
        "filename": "dad92f43b277354eb74df96106a3ea5803539773.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ppc64le/r-base \nMAINTAINER \"Jay Joshi <joshija@us.ibm.com>\"\n\nRUN apt-get update \\\n        && apt-get install git texlive-latex-extra -y \\\n\t&& git clone https://github.com/cran/acepack.git \\\n\t&& cd acepack && git checkout 1.3-3.2 \\\n        && R -e 'install.packages(\"acepack\",dependencies= TRUE,repos=\"http://cran.rstudio.com/\")' \\\n\t&& R CMD check acepack \\\n\t&& cd .. && rm -rf acepack \\\n\t&& apt-get purge --auto-remove git texlive-latex-extra -y\n\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "db8e682a52ee0ec9a531db04d025ceae1a9ae77f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:jessie\nMAINTAINER slush@satoshilabs.com\n\nENV DEBIAN_FRONTEND noninteractive\nENV HOME /root\nENV TERM linux\n\nRUN apt-get update && \\\n    apt-get upgrade -qy && \\\n    apt-get install -qy apt-transport-https curl git && \\\n    echo 'deb https://deb.nodesource.com/node_4.x jessie main' | tee /etc/apt/sources.list.d/nodesource.list && \\\n    curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\nRUN apt-get update && \\\n    apt-get -qy install nodejs python make build-essential devscripts dh-systemd\nRUN npm install -g yarn\nADD bitcore-bcc/ /root/bitcore-bcc\nRUN ( cd /root/bitcore-bcc && debuild -uc -us )\n\n"
    },
    {
        "filename": "dbaeef11e25f41e34e793c5938d22ea1e1908957.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM datmo/buildpack-deps:cpu\n\nMAINTAINER Datmo devs <dev@datmo.com>\n\n# From https://github.com/docker-library/python/blob/master/2.7/jessie/Dockerfile\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n# https://github.com/docker-library/python/issues/147\nENV PYTHONIOENCODING UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\ttcl \\\n\t\ttk \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF\nENV PYTHON_VERSION 2.7.15\n\nRUN set -ex \\\n\t&& buildDeps=' \\\n\t\tdpkg-dev \\\n\t\ttcl-dev \\\n\t\ttk-dev \\\n\t' \\\n\t&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\t\\\n\t&& cd /usr/src/python \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-shared \\\n\t\t--enable-unicode=ucs4 \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\t&& ldconfig \\\n\t\\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t\\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -rf /usr/src/python\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 10.0.1\n\nRUN set -ex; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n\t\\\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py\n\n# install \"virtualenv\", since the vast majority of users of this image will want it\nRUN pip install --no-cache-dir virtualenv\n\nCMD [\"python2\"]\n"
    },
    {
        "filename": "dbc82c2f18b25a143af377af11b0c26b76c1016b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM linuxserver/baseimage  \nMAINTAINER Gonzalo Peci <davyjones@linuxserver.io>  \n  \n#Add Deluge variable  \nENV PYTHON_EGG_CACHE=\"/config/plugins/.python-eggs\"  \nENV APTLIST=\"deluged deluge-web deluge-console unrar unzip\"  \n# Install Deluge  \nRUN add-apt-repository ppa:deluge-team/ppa > /dev/null && \\  \napt-get update -q && \\  \napt-get install $APTLIST -qy && \\  \napt-get clean && \\  \nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  \n  \n#Adding Custom files  \nADD services/ /etc/service/  \nRUN chmod -v +x /etc/service/*/run /etc/my_init.d/*.sh  \n  \n#Ports and Volumes  \nVOLUME /config /downloads  \nEXPOSE 8112 58846 58946 58946/udp  \n\n"
    },
    {
        "filename": "dbd02e3121a0441a2e76a8ff0f0c42b1bcc096a3.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# docker build -t opencog/ros-indigo-zenorsm .\n# xhost +\n# docker run --rm --privileged -i -v /dev/ttyACM0:/dev/ttyACM0 -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -v /dev/dri:/dev/dri -v /dev/shm:/dev/shm -e DISPLAY=:0.0 -p 33433:33433/udp -t opencog/ros-indigo-zenorsm \n# Note: port 33433=faceshift, /dev/ttyACM0=pololu, /dev/dri=gpu, /dev/shm=gpu\n# ToDo: add MORSE robot simulator\n#       replace faceshift with OpenCV FaceRecognizer, etc.\n\nFROM opencog/ros-indigo-dev\nMAINTAINER Mandeep Singh Bhatia \"mandeep.singh.bhatia@gmail.com\"\nMAINTAINER David Hart \"dhart@opencog.org\"\n\nRUN apt-get -y update\nRUN apt-get -y install blender\n\nRUN apt-get -y install python3-yaml python3-pip\nRUN pip3 install rospkg catkin_pkg\n\nRUN echo source /catkin_ws/devel/setup.bash >> /.bash_profile && \\\n    echo -e \"\\e[1;34m[$SELF_NAME] catkin devel setup\\.bash sourced\\e[0m\"\n\n# Install ITFTalk and prerequisites\nWORKDIR /catkin_ws/src\nRUN apt-get -y install mplayer python-pycurl libcurl3\nRUN apt-get install libavbin-dev libavbin0\n\nRUN git clone https://github.com/geni-lab/ITFTalk\n\n# Install ITFListen and prerequisites\nWORKDIR /catkin_ws/src\nRUN apt-get -y install sox python-simplejson\nRUN git clone https://github.com/geni-lab/ITFListen\n\n# Install ITFParrot to test ITFListen -> ITFTalk\nWORKDIR /catkin_ws/src\nRUN git clone https://github.com/geni-lab/ITFParrot\n\n# I figured it'd be undesirable to auto-start the aprrot, so\n# to Run ITFParrot, go to /catkin_ws and then run:\n# source devel/setup.bash\n# rosrun itf_parrot itf_parrot.py\n\n# Install openEAR prerequisites\nRUN apt-get -y install autoconf libtool g++ libportaudio2\n\n# Download ROS-enabled version of openEAR\n# WORKDIR /\n# Line below is needed otherwise it keeps saying ros_open_ear exists\n# and is not empty\n# RUN rm -rf /ros_open_ear\n# RUN git clone https://github.com/Alex-van-der-Peet/ros_open_ear\n\n# Unpack, make and install portaudio (openEAR prerequisite)\n# WORKDIR /ros_open_ear/thirdparty\n# RUN tar -xvf portaudio.tgz\n# WORKDIR /ros_open_ear/thirdparty/portaudio\n# RUN ./configure\n# RUN make\n# RUN make install\n\n# Configure, build and install the modified version of openEAR\n# WORKDIR /ros_open_ear\n# Double run below is on purpose\n# ENV C_INCLUDE_PATH /opt/ros/indigo/include/ros:/opt/ros/indigo/include\n# RUN ./autogen.sh\n# RUN ./autogen.sh\n# RUN ./configure\n# RUN apt-get install libc6-dev build-essential\n# RUN echo \"C_INCLUDEPATH=$C_INCLUDE_PATH\"\n# RUN make\n# RUN make install\n\nWORKDIR /catkin_ws/src\nRUN cp /opt/ros/indigo/setup.sh /etc/profile.d/ros_indigo.sh\nENV PYTHONPATH /opt/ros/indigo/lib/python2.7/dist-packages\nRUN /usr/bin/python3 /opt/ros/indigo/bin/catkin_init_workspace\n\nRUN git clone https://github.com/hansonrobotics/robo_blender\nRUN git clone https://github.com/yantrabuddhi/ros_pololu_servo\n# RUN git clone https://github.com/yantrabuddhi/ros_nmpt_saliency\n# Mandeep's saliency tracker above doesn't work, so I'm using the one I made\n# which is stored in Jamie's repo - Alex\nRUN git clone https://github.com/jdddog/ros_nmpt_saliency\nRUN git clone https://github.com/yantrabuddhi/ros_faceshift\nRUN git clone https://github.com/yantrabuddhi/simple_face_tracker\n#RUN git clone https://github.com/OctoMap/octomap\n#RUN git clone https://github.com/Alex-van-der-Peet/ITFOpenEar\n\nWORKDIR /catkin_ws\nRUN bash -l -c \"/usr/bin/python3 /opt/ros/indigo/bin/catkin_make\"\n\nWORKDIR /catkin_ws/src/robo_blender/src\n\nENV STARTSCRIPT \"\\\necho evaluating startup script... &&\\\nsource /catkin_ws/devel/setup.bash &&\\\ntmux new-session -d 'echo -e \\\"\\e[1;34mroscore\\e[0m\\\" ; roscore' &&\\\ntmux set -g set-remain-on-exit on &&\\\ntmux set-option -g set-remain-on-exit on &&\\\ntmux bind-key R respawn-window &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mros_pololu_servo\\e[0m\\\" ;\\\n  rosrun ros_pololu_servo ros_pololu_servo_node' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mblender robo.blend\\e[0m\\\" ;\\\n  sleep 4 && blender robo.blend' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mbash shell\\e[0m\\\" ;\\\n  bash -l -i' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mros_itf_talk\\e[0m\\\" ;\\\n  rosrun itf_talk itf_talk.py' &&\\\ntmux split-window -d -v -p 25 'echo -e \\\"\\e[1;34mros_itf_listen\\e[0m\\\" ;\\\n  rosrun itf_listen itf_listen.py' &&\\\ntmux select-layout even-vertical &&\\\ntmux attach \\\n\"\n\nCMD /bin/bash -l -c \"eval $STARTSCRIPT\"\n"
    },
    {
        "filename": "dc48206d0c6efd9f294c3de42cd5c9c3a8cfdf10.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM php:7.1\n\nMAINTAINER huangzhhui <h@swoft.org>\n\n# Version\nENV PHPREDIS_VERSION 4.0.0\nENV HIREDIS_VERSION 0.13.3\nENV SWOOLE_VERSION 4.0.3\n\n# Timezone\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && echo Asia/Shanghai > /etc/timezone\n\n# Libs\nRUN apt-get update \\\n    && apt-get install -y \\\n        curl \\\n        wget \\\n        git \\\n        zip \\\n        libz-dev \\\n        libssl-dev \\\n        libnghttp2-dev \\\n        libpcre3-dev \\\n    && apt-get clean \\\n    && apt-get autoremove\n\n# Composer\nRUN curl -sS https://getcomposer.org/installer | php \\\n    && mv composer.phar /usr/local/bin/composer \\\n    && composer self-update --clean-backups\n\n# PDO extension\nRUN docker-php-ext-install pdo_mysql\n\n# Bcmath extension\nRUN docker-php-ext-install bcmath\n\n# Redis extension\nRUN wget http://pecl.php.net/get/redis-${PHPREDIS_VERSION}.tgz -O /tmp/redis.tar.tgz \\\n    && pecl install /tmp/redis.tar.tgz \\\n    && rm -rf /tmp/redis.tar.tgz \\\n    && docker-php-ext-enable redis\n\n# Hiredis\nRUN wget https://github.com/redis/hiredis/archive/v${HIREDIS_VERSION}.tar.gz -O hiredis.tar.gz \\\n    && mkdir -p hiredis \\\n    && tar -xf hiredis.tar.gz -C hiredis --strip-components=1 \\\n    && rm hiredis.tar.gz \\\n    && ( \\\n        cd hiredis \\\n        && make -j$(nproc) \\\n        && make install \\\n        && ldconfig \\\n    ) \\\n    && rm -r hiredis\n\n# Swoole extension\nRUN wget https://github.com/swoole/swoole-src/archive/v${SWOOLE_VERSION}.tar.gz -O swoole.tar.gz \\\n    && mkdir -p swoole \\\n    && tar -xf swoole.tar.gz -C swoole --strip-components=1 \\\n    && rm swoole.tar.gz \\\n    && ( \\\n        cd swoole \\\n        && phpize \\\n        && ./configure --enable-async-redis --enable-mysqlnd --enable-openssl --enable-http2 \\\n        && make -j$(nproc) \\\n        && make install \\\n    ) \\\n    && rm -r swoole \\\n    && docker-php-ext-enable swoole\n\nRUN apt-get install -y redis-server & redis-server &\n\nADD . /website/gateway-api\n\nEXPOSE 8090\n\nENTRYPOINT [\"php\", \"/website/redis-service/bin/swoft\",\"rpc:start\"]\n\n"
    },
    {
        "filename": "dc51a21d1e83a2359f6eb704b24e781b56dc825a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM deis/base:latest  \nMAINTAINER OpDemand <info@opdemand.com>  \n  \n# install redis from OS package  \nRUN apt-get update && apt-get install -yq python-software-properties  \nRUN add-apt-repository ppa:chris-lea/redis-server -y  \nRUN apt-get update && apt-get install -yq redis-server  \n  \nWORKDIR /app  \nCMD [\"/app/bin/boot\"]  \nEXPOSE 6379  \nADD . /app  \nADD redis.conf /etc/redis/redis.conf  \n\n"
    },
    {
        "filename": "dc8dad1a62fc3b58ac72fb28625dcb4d89505f45.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Use local version of image built from Dockerfile.cpu in /docker/base\nFROM tensorflow-base:1.5.0-cpu-py2\nMAINTAINER Amazon AI\n\nWORKDIR /root\n\nRUN apt-get -y update && \\\n    apt-get -y install curl && \\\n    apt-get -y install wget && \\\n    apt-get -y install vim && \\\n    apt-get -y install iputils-ping && \\\n    apt-get -y install nginx\n\nRUN pip install numpy boto3 six awscli flask==0.11 Jinja2==2.9 tensorflow-serving-api==1.5 gevent gunicorn\n\n# install tensorflow-model-server 1.5.\nRUN wget 'http://storage.googleapis.com/tensorflow-serving-apt/pool/tensorflow-model-server/t/tensorflow-model-server/tensorflow-model-server_1.5.0_all.deb' && \\\n    dpkg -i tensorflow-model-server_1.5.0_all.deb\n\n# install telegraf\nRUN cd /tmp && \\\n    curl -O https://dl.influxdata.com/telegraf/releases/telegraf_1.4.2-1_amd64.deb && \\\n    dpkg -i telegraf_1.4.2-1_amd64.deb && \\\n    cd -\n\nCOPY sagemaker_tensorflow_container-1.0.0.tar.gz .\n\nRUN pip install sagemaker_tensorflow_container-1.0.0.tar.gz\n\nRUN rm sagemaker_tensorflow_container-1.0.0.tar.gz\n\nENTRYPOINT [\"entry.py\"]"
    },
    {
        "filename": "dcb26040d697c711199399bb6d319586c32ed9ff.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM fujin/precise\nMAINTAINER fujin\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONPATH .\nRUN echo 'deb http://archive.ubuntu.com/ubuntu precise main universe multiverse' > /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y -q git make python-all python-pip\nRUN git clone https://github.com/micktwomey/pypicache.git /srv/pypicache\nRUN cd /srv/pypicache && make init\nCMD cd /srv/pypicache && make runserver\nEXPOSE 8080"
    },
    {
        "filename": "dcb31ef054ba5e760ebf2fd5230f2b45a68cef25.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.04\n\nMAINTAINER Alexander Kukushkin <alexander.kukushkin@zalando.de>\n\nENV SOURCES=\"gdal\"\nENV PACKAGES=\"libgdal20\"\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && echo 'APT::Install-Suggests \"0\";' >> /etc/apt/apt.conf.d/01norecommend \\\n\n    && apt-get update \\\n    && apt-get install -y devscripts equivs \\\n\n    && mk-build-deps $SOURCES \\\n    && dpkg -i *-build-deps*.deb || apt-get -y -f install\n\nADD patches /builddir/patches\nADD debs /debs\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && set -ex \\\n    && apt-get update \\\n    && apt-get upgrade -y \\\n    && need_rebuild=false \\\n    && for pkg in $PACKAGES; do \\\n        new_package=$(apt-cache show $pkg | awk -F/ '/Filename: / {print $NF}'| sort -rV | head -n 1) \\\n        && if [ ! -f /debs/$new_package ]; then \\\n            need_rebuild=true \\\n            && break; \\\n        fi; \\\n    done \\\n    && if [ \"$need_rebuild\" = \"true\" ]; then \\\n        cd /builddir \\\n        && apt-get source $SOURCES \\\n        && for pkg in $SOURCES; do \\\n            cd $(ls -d /builddir/$pkg-*) \\\n            && patch -p0 < /builddir/patches/$pkg.patch \\\n            && debuild -b -uc -us; \\\n        done \\\n\n        && rm -f /debs/* \\\n        && for pkg in $PACKAGES; do \\\n            cp /builddir/${pkg}_*_amd64.deb /debs; \\\n        done; \\\n    fi\n"
    },
    {
        "filename": "dd004ee9390f4562958bb49d045078092e5a4ce9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,yum-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos:7\nMAINTAINER knqyf263\n\nENV version 9.12.4\n\n# Install packages\nRUN yum -y update \\\n    && yum -y groupinstall \"Development Tools\" \\\n    && yum install -y epel-release \\\n    && yum -y install kernel-devel kernel-headers openssl-devel perl-Net-DNS wget bind-utils vim tar python-pip \\\n    && pip install --upgrade pip && pip install argparse ply\n\n# Install BIND9 from source\nRUN cd /usr/local/src && \\\n    wget ftp://ftp.isc.org/isc/bind9/${version}/bind-${version}.tar.gz && \\\n    tar zxvf bind-${version}.tar.gz && \\\n    mv bind-${version} bind && \\\n    rm bind-${version}.tar.gz\nRUN cd /usr/local/src/bind && \\\n    ./configure --enable-syscalls --prefix=/var/named/chroot --enable-threads --with-openssl=yes --enable-openssl-version-check --enable-ipv6 --disable-linux-caps && \\\n    chown -R root:root /usr/local/src/bind && \\\n    make && \\\n    make install\n\n# Create device files\nRUN mkdir /var/named/chroot/dev && \\\n    mknod -m 666 /var/named/chroot/dev/null c 1 3 && \\\n    mknod -m 666 /var/named/chroot/dev/random c 1 8\n\n# Create rndc key\nRUN /var/named/chroot/sbin/rndc-confgen -a\n\nRUN mkdir /var/named/chroot/data && \\\n    mkdir /var/named/chroot/var/log && \\\n    mkdir /var/named/chroot/var/named\n\n# Create hint file\nRUN cd /var/named/chroot/var/named && \\\n    wget ftp://ftp.nic.ad.jp/internet/rs.internic.net/domain/named.root\n\n# Add files\nADD ./contents/named.conf /var/named/chroot/etc/named.conf\nADD ./contents/named /etc/sysconfig/named\nADD ./contents/example.com.zone /var/named/chroot/var/named/example.com.zone\n\n# Create symbolic link\nRUN ln -s /var/named/chroot/etc/rndc.key /etc/rndc.key && \\\n    ln -s /var/named/chroot/etc/named.conf /etc/named.conf\n\nEXPOSE 53 953\n\nCMD [\"/var/named/chroot/sbin/named\", \"-g\", \"-t\", \"/var/named/chroot\", \"-c\", \"/etc/named.conf\"]\n"
    },
    {
        "filename": "dd58831045fe43c5179011d854c984889e481168.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockette/wheezy\n\nMAINTAINER Milan Sulc <sulcmil@gmail.com>\n\n# PHP\nENV PHP_MODS_DIR=/etc/php5/mods-available\nENV PHP_CLI_DIR=/etc/php5/cli\nENV PHP_CLI_CONF_DIR=${PHP_CLI_DIR}/conf.d\nENV PHP_CGI_DIR=/etc/php5/cgi\nENV PHP_CGI_CONF_DIR=${PHP_CGI_DIR}/conf.d\nENV PHP_FPM_DIR=/etc/php5/fpm\nENV PHP_FPM_CONF_DIR=${PHP_FPM_DIR}/conf.d\nENV PHP_FPM_POOL_DIR=${PHP_FPM_DIR}/pool.d\n\n# INSTALLATION\nRUN apt-get update && apt-get dist-upgrade -y && \\\n    # DEPENDENCIES #############################################################\n    apt-get install -y wget curl git && \\\n    # PHP DOTDEB ###############################################################\n    echo 'deb http://packages.dotdeb.org wheezy-php55 all' >> /etc/apt/sources.list.d/dotdeb.list && \\\n    echo 'deb-src http://packages.dotdeb.org wheezy-php55 all' >> /etc/apt/sources.list.d/dotdeb.list && \\\n    wget http://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg && rm dotdeb.gpg && \\\n    apt-get update && \\\n    apt-get install -y \\\n        php5-apcu \\\n        php5-cgi \\\n        php5-cli \\\n        php5-curl \\\n        php5-fpm \\\n        php5-geoip \\\n        php5-gd \\\n        php5-intl \\\n        php5-imagick \\\n        php5-imap \\\n        php5-ldap \\\n        php5-mcrypt \\\n        php5-memcache \\\n        php5-mongo \\\n        php5-mysql \\\n        php5-pgsql \\\n        php5-redis \\\n        php5-sqlite \\\n        php5-ssh2 \\\n        php5-xmlrpc \\\n        php5-xsl && \\\n    # COMPOSER #################################################################\n    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\n    composer global require \"hirak/prestissimo:^0.3\" && \\\n    # PHP MOD(s) ###############################################################\n    ln -s ${PHP_MODS_DIR}/custom.ini ${PHP_CLI_CONF_DIR}/999-custom.ini && \\\n    ln -s ${PHP_MODS_DIR}/custom.ini ${PHP_CGI_CONF_DIR}/999-custom.ini && \\\n    ln -s ${PHP_MODS_DIR}/custom.ini ${PHP_FPM_CONF_DIR}/999-custom.ini && \\\n    # CLEAN UP #################################################################\n    rm ${PHP_FPM_POOL_DIR}/www.conf && \\\n    apt-get clean -y && \\\n    apt-get autoclean -y && \\\n    apt-get remove -y wget curl && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/* /var/lib/log/* /tmp/* /var/tmp/*\n\n# FILES (it overrides originals)\nADD conf.d/custom.ini ${PHP_MODS_DIR}/custom.ini\nADD fpm/php-fpm.conf ${PHP_FPM_DIR}/php-fpm.conf\n\n# WORKDIR\nWORKDIR /srv\n\n# COMMAND\nCMD [\"php\"]\n"
    },
    {
        "filename": "dd98fad7b67b524112033e06d2e7759305070b39.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# heavily based on https://github.com/kencochrane/django-docker/blob/master/Dockerfile\nFROM ubuntu:12.04\n\n# Set the locale (if not cannot download utf-8 file names)\n# based on http://jaredmarkell.com/docker-and-locales/\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN apt-get -qq update\nRUN apt-get install -y python-pip supervisor python-dev libpcre3-dev gettext\nRUN pip install virtualenv && pip install uwsgi && pip install supervisor-stdout\nRUN virtualenv --no-site-packages /opt/ve/proprio\nADD docker/supervisor.conf /opt/supervisor.conf\nADD docker/run.sh /usr/local/bin/run\nADD requirements.txt /tmp/proprio-requirements.txt\nRUN /opt/ve/proprio/bin/pip install -r /tmp/proprio-requirements.txt\nADD . /opt/apps/proprio\nRUN (cd /opt/apps/proprio && /opt/ve/proprio/bin/python manage.py collectstatic --noinput)\nRUN (cd /opt/apps/proprio && . /opt/ve/proprio/bin/activate && ./compile-messages.sh)\n# add additional_settings last because it prevents manage.py from running\nADD docker/additional_settings.py /opt/apps/proprio/additional_settings.py\nRUN adduser --gecos 'user to run the app' --system proprio\nEXPOSE 8000\nVOLUME /data\nCMD [\"/bin/sh\", \"-e\", \"/usr/local/bin/run\"]\n"
    },
    {
        "filename": "ddd050998fe067f50749c185548028705d50ac09.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockerfile/nodejs:latest\nMAINTAINER WoT.io Devs <dev@wot.io>\n\nRUN mkdir -p /data/db\nRUN mkdir -p /data/server_logs\n\nVOLUME [\"/data\"]\n\n# Install RabbitMQ\n\nADD rabbitmq-signing-key-public.asc /tmp/rabbitmq-signing-key-public.asc\nRUN apt-key add /tmp/rabbitmq-signing-key-public.asc\n\nRUN echo \"deb http://www.rabbitmq.com/debian/ testing main\" > /etc/apt/sources.list.d/rabbitmq.list\nRUN apt-get -qq update > /dev/null\nRUN apt-get -qq -y install rabbitmq-server > /dev/null\nRUN /usr/sbin/rabbitmq-plugins enable rabbitmq_management\nRUN echo \"[{rabbit, [{loopback_users, []}]}].\" > /etc/rabbitmq/rabbitmq.config\n\nEXPOSE 5672 15672 4369\n\n\n# Install MongoDB\n\n# Import MongoDB public GPG key AND create a MongoDB list file\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list\n\nRUN apt-get update && apt-get install -y mongodb-org\n\nEXPOSE 27017\n\n\n# Start with a known base\nWORKDIR /root\n\n\n# Install supervisor\nRUN npm install -g supervisor\n\n# Install Git\nRUN apt-get install git\n\n\n# Install BipIO\nWORKDIR /usr/local/lib/node_modules\n\nRUN git clone https://github.com/bipio-server/bipio.git\n\nWORKDIR /usr/local/lib/node_modules/bipio\nRUN npm install\n\n# Add config\nRUN mv /etc/localtime /etc/localtime.bak\nRUN ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime\n\nEXPOSE 5000\n\nADD ./bootstrap.sh /root/bootstrap.sh\n\nRUN chmod 755 /root/*.sh\n\nCMD /root/bootstrap.sh\n\n\n"
    },
    {
        "filename": "dde9e21fa74e98f05f4300229851073857ca4500.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# containerwiki\n# ---------------------------------------------\n\n# Used for x86 systems\nFROM debian:stretch\n\nMAINTAINER Eric Barch <ebarch@nooplabs.com>\n\n# install what we need\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get dist-upgrade -y && apt-get install -y openssh-client nginx php-fpm \\\n    curl php-gd git supervisor php-xml \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# download the latest dokuwiki to /tmp\nRUN cd /tmp && curl -O \"https://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgz\"\n\n# make PHP more secure\nRUN echo \"cgi.fix_pathinfo = 0;\" >> /etc/php/7.0/fpm/php.ini\n\n# ensure the pid dir exists for php-fpm\nRUN mkdir -p /run/php\n\n# supervisor requires that our processes stay foregrounded\nRUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php/7.0/fpm/php-fpm.conf\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\n# clear out any existing configs that ship with nginx\nRUN rm /etc/nginx/sites-enabled/*\n\n# load in our nginx config for dokuwiki\nADD dokuwiki.conf /etc/nginx/sites-enabled/\n\n# load in our supervisor config that runs our processes (nginx/php/autobackup)\nADD supervisord.conf /etc/supervisord.conf\n\n# create an unprivileged 'wiki' user to run commands under (w/ access to web content)\nRUN useradd -ms /bin/bash wiki && usermod -a -G www-data wiki\n\n# copy scripts/files\nCOPY wiki_home/* /home/wiki/\nRUN chown -R wiki:wiki /home/wiki\nRUN chmod +x /home/wiki/*.sh\n\n# publish nginx port\nEXPOSE 3000\n\n# get the party started\nCMD /home/wiki/start.sh\n"
    },
    {
        "filename": "de1dbe5842ef68200cac8da94084bc3d455602be.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Based on\n#\thttps://github.com/cazcade/docker-grafana-graphite\n#\nFROM debian:wheezy\nMAINTAINER Brian Scully <scullduggery@gmail.com>\n\nRUN echo 'deb http://http.debian.net/debian wheezy-backports main' >> /etc/apt/sources.list.d/wheezy-backports.list\n# RUN echo 'deb http://us.archive.ubuntu.com/ubuntu/ trusty universe' >> /etc/apt/sources.list\n# Logstash\nRUN echo 'deb http://packages.elasticsearch.org/logstash/1.4/debian stable main' >> /etc/apt/sources.list.d/logstash.list\nRUN apt-get -y update &&\\\n    apt-get -y upgrade\n\n# Prerequisites\nRUN apt-get -y --no-install-recommends install python python-colorama \\\n    python-simplejson python-memcache python-ldap python-cairo libffi-dev \\\n    python-pysqlite2 python-support python-pip gunicorn python-dev libpq-dev build-essential \\\n    supervisor nginx-light git wget curl\n# Node\nRUN apt-get -y --no-install-recommends install software-properties-common\nRUN apt-get -y --no-install-recommends -t wheezy-backports install nodejs\n# Elasticsearch\nRUN apt-get -y --no-install-recommends install openjdk-7-jre adduser\n\n# Install Elasticsearch\nRUN groupadd -f -g 101 elasticsearch && useradd -u 1001 -g elasticsearch elasticsearch &&\\\n    mkdir -p /home/elasticsearch && chown -R elasticsearch:elasticsearch /home/elasticsearch &&\\\n    cd ~ && wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.0.deb &&\\\n    dpkg -i elasticsearch-1.4.0.deb && rm elasticsearch-1.4.0.deb\n\n# Install Redis, Logstash\nRUN (wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -) && apt-get -y update\nRUN apt-get -y install --no-install-recommends redis-server logstash\n\n# Install StatsD\nRUN mkdir /src && git clone https://github.com/etsy/statsd.git /src/statsd\n\n# Install Whisper, Carbon and Graphite-Web\nRUN pip install --index-url=https://pypi.python.org/simple/ --upgrade pip\nRUN pip install Twisted==11.1.0 Django==1.5 'django-tagging<0.4' whisper==0.9.14\nRUN pip install --install-option=\"--prefix=/var/lib/graphite\" \\\n                --install-option=\"--install-lib=/var/lib/graphite/lib\" carbon==0.9.14 &&\\\n    pip install --install-option=\"--prefix=/var/lib/graphite\" \\\n                --install-option=\"--install-lib=/var/lib/graphite/webapp\" graphite-web==0.9.14\n\n# Install Grafana\nRUN mkdir /src/grafana && cd /src/grafana &&\\\n wget http://grafanarel.s3.amazonaws.com/grafana-1.8.1.tar.gz &&\\\n tar xzvf grafana-1.8.1.tar.gz --strip-components=1 && rm grafana-1.8.1.tar.gz\n\n# Install Kibana\nRUN mkdir /src/kibana && cd /src/kibana &&\\\n wget https://download.elasticsearch.org/kibana/kibana/kibana-3.1.2.tar.gz &&\\\n tar xzvf kibana-3.1.2.tar.gz --strip-components=1 && rm kibana-3.1.2.tar.gz\n\n# Configure Elasticsearch\nADD ./elasticsearch/run /usr/local/bin/run_elasticsearch\nRUN chmod +x /usr/local/bin/run_elasticsearch &&\\\n    mkdir -p /logs/elasticsearch && chown elasticsearch:elasticsearch /logs/elasticsearch &&\\\n    mkdir -p /data/elasticsearch && chown elasticsearch:elasticsearch /data/elasticsearch &&\\\n    mkdir -p /tmp/elasticsearch && chown elasticsearch:elasticsearch /tmp/elasticsearch\n\n# Configure Logstash\nADD ./logstash/001-redis-input.conf /etc/logstash/conf.d/001-redis-input.conf\nADD ./logstash/002-tcp-json-input.conf /etc/logstash/conf.d/002-tcp-json-input.conf\nADD ./logstash/999-elasticsearch-output.conf /etc/logstash/conf.d/999-elasticsearch-output.conf\n\n# Confiure StatsD\nADD ./statsd/config.js /src/statsd/config.js\n\n# Configure Whisper, Carbon and Graphite-Web\nADD ./graphite/initial_data.json /var/lib/graphite/webapp/graphite/initial_data.json\nADD ./graphite/local_settings.py /var/lib/graphite/webapp/graphite/local_settings.py\nADD ./graphite/carbon.conf /var/lib/graphite/conf/carbon.conf\nADD ./graphite/storage-schemas.conf /var/lib/graphite/conf/storage-schemas.conf\nADD ./graphite/storage-aggregation.conf /var/lib/graphite/conf/storage-aggregation.conf\nRUN mkdir -p /var/lib/graphite && chown -R www-data:www-data /var/lib/graphite &&\\\n    mkdir -p /data/graphite && chown www-data:www-data /data/graphite &&\\\n    rm -rf /var/lib/graphite/storage/whisper && ln -s /data/graphite /var/lib/graphite/storage/whisper\n\nRUN cd /var/lib/graphite/webapp/graphite &&\\\n    python manage.py syncdb --noinput &&\\\n    chown -R www-data:www-data /var/lib/graphite\n\n# Configure Grafana\nADD ./grafana/config.js /src/grafana/config.js\n\n# Configure Kibana\nADD ./kibana/config.js /src/kibana/config.js\n\n# Configure nginx and supervisord\nADD ./nginx/nginx.conf /etc/nginx/nginx.conf\nADD ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nRUN mkdir -p /logs/supervisor && touch /logs/supervisor/supervisord.log &&\\\n    mkdir -p /logs/nginx && chown www-data:www-data /logs/nginx\n\n# Grafana\nEXPOSE 80\n\n# Kibana\nEXPOSE 81\n\n# Logstash TCP\nEXPOSE 4560\n\n# Graphite (Carbon)\nEXPOSE 2003\n\n# Graphite web-ui\nEXPOSE 8000\n\n# Redis\nEXPOSE 6379\n\n# Elasticserach\nEXPOSE 9200\n\n# StatsD\nEXPOSE 8125/udp\nEXPOSE 8126\n\nVOLUME [\"/data/graphite\",\"/data/elasticsearch\"]\nVOLUME [\"/logs/elasticsearch\",\"/logs/supervisor\",\"/logs/nginx\"]\n\nCMD [\"/usr/bin/supervisord\",\"-c\",\"/etc/supervisor/supervisord.conf\"]\n"
    },
    {
        "filename": "dea32f684d0ac91aee23b54511c4a1e94f423594.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM nvidia/cuda:7.5-cudnn4-devel\nMAINTAINER Ziheng Jiang <jzhtomas@gmail.com>\n# Install MXNet with CUDA support.\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \\\n    apt-get update --yes && \\\n    apt-get install --yes software-properties-common && \\\n    add-apt-repository ppa:git-core/ppa && \\\n    apt-get update --yes && \\\n    apt-get install --yes python python-dev python-pip build-essential git libatlas-base-dev libopencv-dev vim curl wget unzip && \\\n    apt-get dist-upgrade --yes\nRUN pip install --upgrade pip\nRUN pip install --upgrade numpy scipy matplotlib ipython jupyter cpplint pylint\nRUN mkdir -p /dmlc\nWORKDIR /dmlc\nRUN git clone --recursive https://github.com/dmlc/mxnet.git && \\\n    cd mxnet && cp make/config.mk . && \\\n    sed -i -e 's#^USE_CUDA =.*#USE_CUDA = 1#g' \\\n        -e 's#^USE_CUDA_PATH =.*#USE_CUDA_PATH = /usr/local/cuda#g' \\\n        -e 's#^USE_CUDNN =.*#USE_CUDNN = 1#g' config.mk && \\\n    make -j && \\\n    cd python && python setup.py install\n\n# Install MinPy from GitHub directly. Easy!\nRUN git clone --recursive https://github.com/dmlc/minpy.git && \\\n    cd minpy && python setup.py install\n"
    },
    {
        "filename": "dece508c0df5e2b2804d7b0a5fb0f53461f9c83c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM jpetazzo/dind\n\nMAINTAINER Shanqing Cai <cais@google.com>\n\nRUN apt-get update\n\nRUN apt-get install -y \\\n    build-essential \\\n    git \\\n    software-properties-common\n\n# Install the latest golang\nRUN wget https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\nRUN tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz\nRUN rm -f go1.4.2.linux-amd64.tar.gz\nRUN echo 'PATH=/usr/local/go/bin:${PATH}' >> /root/.bashrc\n\nADD start_local_k8s_cluster.sh /var/k8s/start_local_k8s_cluster.sh\nADD ../scripts /var/k8s/dist_test/scripts\nADD ../python /var/k8s/dist_test/python\n"
    },
    {
        "filename": "def7fc2d702419d5ac67efd0252862377db073aa.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Dockerizing MongoDB: Dockerfile for building MongoDB images\n# Based on ubuntu:latest, installs MongoDB following the instructions from:\n# http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/\n\n# Format: FROM    repository[:version]\nFROM       ubuntu:latest\n\n# Format: MAINTAINER Name <email@addr.ess>\nMAINTAINER Jonas Colmsj\u00f6 <jonas@gizur.com>\n\n# Installation:\n# Import MongoDB public GPG key AND create a MongoDB list file\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\nRUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list\n\n# Update apt-get sources AND install MongoDB\nRUN apt-get update\nRUN apt-get install -y -q mongodb-org\n\n# It is possible to install a specific version also\n# RUN apt-get install -y -q mongodb-org=2.6.1 mongodb-org-server=2.6.1 mongodb-org-shell=2.6.1 mongodb-org-mongos=2.6.1 mongodb-org-tools=2.6.1\n\n# Create the MongoDB data directory\nRUN mkdir -p /data/db\n\nADD ./etc-mongod.conf /etc/mongod.conf\n\n# Expose port 27017 from the container to the host\nEXPOSE 27017\n\n# Set usr/bin/mongod as the dockerized entry-point application\nENTRYPOINT usr/bin/mongod\n\n\n"
    },
    {
        "filename": "e05f989fbf1dd001c5c410fa3756aae207b7fcf6.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "############################################################\n# Dockerfile to build spring boot app container images\n# Based on Ubuntu\n############################################################\n\nFROM ubuntu:latest\n\nMAINTAINER Meir Wahnon\n\nRUN apt-get update\n\nRUN apt-get install default-jre -y\n\nRUN apt-get install default-jdk -y\n\nRUN apt-get install maven -y\n\nADD pom.xml /app/\n\nADD src/ /app/src/\n\nWORKDIR /app/\n\nRUN mvn package\n\nEXPOSE  8080\n\nCMD [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"target/spring-boot-sample-tomcat-1.1.5.RELEASE.jar\"]\n"
    },
    {
        "filename": "e09b7faba62e19188a217b109f2ab968f7308f92.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Dockerfile that builds container with nodejs and Python\n# When not using vagrant, run it manually with: docker build - < Dockerfile.nodejs\n#\n\n\n# Image: NodeJS & Python\n#\n# VERSION               0.0.1\n\nFROM     ubuntu\nMAINTAINER Jonas Colmsj\u00f6 \"jonas@gizur.com\"\n\n# sudo will complain about unknown host otherwise\nRUN echo \"127.0.0.1\\t`hostname`\" >> /etc/hosts\n\n# make sure the package repository is up to date\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\" > /etc/apt/sources.list\nRUN apt-get update -y\n\n\n#\n# Install some nice tools\n#\n\nRUN apt-get install -y git wget\n\n\n#\n# Install NodeJs\n#\n\nRUN apt-get update -y\nRUN apt-get install -y python g++ make software-properties-common\nRUN apt-get install -y --reinstall python-software-properties\nRUN dpkg-reconfigure python-software-properties\nRUN add-apt-repository -y ppa:chris-lea/node.js\nRUN apt-get update -y\nRUN apt-get install -y nodejs\n\n\n#\n# Install Python and virutalenv\n#\n\nRUN apt-get install -y build-essential python2.7-dev python-setuptools\nRUN easy_install pip\nRUN pip install virtualenv\n\n# Install some dependensices (the OpenERP list)\nRUN apt-get install -y python-dateutil python-feedparser python-ldap python-libxslt1 python-lxml python-mako python-openid python-psycopg2 python-reportlab python-simplejson python-tz python-vobject python-werkzeug python-yaml\n\nRUN echo \"Create a python env: virtualenv venv --distribute\"\nRUN echo \"Then run: source venv/bin/activate\"\n\n"
    },
    {
        "filename": "e0b563ebfc4ff235c29ce07444007692ca567a35.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n# Container for the Hanson Robotics Eva head (stand-alone Owyl version).\n# This provides the complete Owyl-behavior-tree version of the demo head.\n# It includes UVC webcam vision input, pi_vision to discover faces, and\n# behavior controlled by Owyl trees.  This is a stand-alone version of\n# the Eva head, it does not depend on or use any OpenCog software.\n# In particular, it is not capable of chat.\n#\n# To build:\n# sudo docker build -t opencog/eva-owyl .\n#\nFROM opencog/ros-indigo-blender\nMAINTAINER Linas Vep\u0161tas \"linasvepstas@gmail.com\"\n\n# Install required packages\nENV LAST_OS_UPDATE 2015-02-16\nRUN apt-get -y update\nRUN apt-get -y upgrade\nRUN apt-get -y install ros-indigo-tf ros-indigo-driver-common\nRUN apt-get -y install ros-indigo-cv-bridge ros-indigo-image-transport\nRUN apt-get -y install ros-indigo-openni-camera ros-indigo-mjpeg-server\nRUN apt-get -y install ros-indigo-usb-cam\n# The below are needed by perception node\nRUN apt-get -y install ros-indigo-dynamixel-msgs\nRUN apt-get -y install ros-indigo-robot-state-publisher\nRUN apt-get -y install ros-indigo-joint-state-publisher\n\n# Owyl setup\nWORKDIR /opt/\nRUN git clone https://github.com/eykd/owyl.git\nWORKDIR /opt/owyl/\nRUN python setup.py install\n\n# Install catkinized packages\nWORKDIR /catkin_ws/src\n\nRUN git clone https://github.com/hansonrobotics/pi_vision.git\nRUN git clone https://github.com/hansonrobotics/perception.git\nRUN git clone https://github.com/hansonrobotics/eva_behavior.git\nRUN git clone https://github.com/hansonrobotics/blender_api_msgs.git\nRUN git clone https://github.com/hansonrobotics/blender_api.git\n\n# The pau2motors package defines the PAU messages, which are\n# needed by the perception (vision-geometry) module.\nRUN git clone https://github.com/hansonrobotics/pau2motors.git\nRUN git clone https://github.com/hansonrobotics/robots_config.git\n\n# The motor side of things is not needed for the software head.\n# RUN git clone https://github.com/geni-lab/ros_pololu_servo.git\n# RUN git clone https://github.com/hansonrobotics/ros_pololu_servo.git\n# RUN git clone https://github.com/hansonrobotics/ros_motors_webui.git\n\n# Change line below on rebuild. Will use cache up to this line\nENV LAST_SOFTWARE_UPDATE 2015-02-19\n\n# Git pull for all packages\nRUN cd /catkin_ws/src/ && find . -maxdepth 1 -mindepth 1 -type d \\\n\t-execdir git --git-dir=$PWD/{}/.git --work-tree=$PWD/{} pull \\;\n\n# The blender API has not been fully catkinized yet.\nRUN pip3 install ./blender_api_msgs/\n\n# Some versions of ros_pololu_server will fail during build; the\n# work-around for this is to build twice (This because the missing\n# files are autogened, and the pololu Cmakefiles fail to list them as\n# dependencies.)\nWORKDIR /catkin_ws\nRUN bash -l -c \"/opt/ros/indigo/bin/catkin_make\" || true\nRUN bash -l -c \"/opt/ros/indigo/bin/catkin_make\"\n\nRUN echo source /catkin_ws/devel/setup.bash >> ~/.bashrc\n\nCOPY /scripts/eva.sh /catkin_ws/eva.sh\n\nENTRYPOINT bash -l -c \"./eva.sh; bash\"\n"
    },
    {
        "filename": "e0d39c2047375a1d3a998f2f8a2a4c3a51944159.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:14.04\n\nRUN apt-get -y update \\\n    && apt-get -y upgrade\n\nRUN apt-get install -y python-software-properties \\\n    && apt-get install -y software-properties-common \\\n    && apt-get -y install python-pip \\\n    && apt-get -y install python-dev\n\nRUN apt-get -y install git \\\n    && apt-get -y install make \\\n    && apt-get -y install cmake\n\nRUN apt-get install -y wget\n\n\n# install the MITIE library\nRUN apt-get install -y libjpeg-dev\nRUN sudo apt-get install -y libopenblas-dev liblapack-dev\nRUN mkdir /usr/lib/mitie \\\n    && cd /usr/lib/mitie \\\n    && git clone https://github.com/mitll/MITIE.git \\\n    && cd MITIE \\\n    && make MITIE-models \\\n    && cd tools/ner_stream \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && cmake --build . --config Release \\\n    && cd ../../../mitielib \\\n    && make\nENV MITIE_HOME /usr/lib/mitie/MITIE\n\n\n# misc python libs\n\nRUN pip install happybase\nRUN pip install httplib2\nRUN pip install tldextract\n\n\n\n# install mysql client\n\nRUN wget http://dev.mysql.com/get/Downloads/Connector-Python/mysql-connector-python-1.2.3.tar.gz \\\n    && tar xf mysql-connector-python-1.2.3.tar.gz \\\n    && cd mysql-connector-python-1.2.3/ \\\n    && python setup.py install\n\n\n# install igraph\n\nRUN add-apt-repository -y ppa:igraph/ppa \\\n    && apt-get update \\\n    && apt-get install -y python-igraph\n\n\n# install pyodbc\n\nRUN apt-get -y install aptitude \\\n    && aptitude -y install g++ \\\n    && apt-get -y install unixodbc-dev \\\n    && pip install --allow-external pyodbc --allow-unverified pyodbc pyodbc\n\n\n# install beautiful soup\nRUN apt-get install -y python-bs4\n\n# install tangelo\nRUN pip install tangelo\n\n\n# copy over the web apps and conf\n\nCOPY datawake /usr/local/share/tangelo/web/datawake\nCOPY forensic /usr/local/share/tangelo/web/forensic\nENV PYTHONPATH /usr/local/share/tangelo/web:$PYTHONPATH\n\n\n\n# setup tangelo conf and entry point for container\n# set the default container command to run tangelo\n\nRUN adduser  --no-create-home --disabled-password --disabled-login --gecos \"\" tangelo\nCOPY tangelo.conf /etc/tangelo.conf\nEXPOSE 80\nCMD [\"tangelo\",\"-c\",\"/etc/tangelo.conf\"]\n\n\n# Install elastic search for the domain dive feature\nRUN pip install elasticsearch\n\n"
    },
    {
        "filename": "e0d9c5f9a710d0e0c796843703a834eaf11d7122.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Chainer 5.0 (CPU) & Python 3.6\n# ref: https://github.com/chainer/chainer\n\n# base image\nFROM ubuntu:18.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nENV CHAINER_VERSION v5\nRUN apt-get update && \\\n    apt-get install -y \\\n        ca-certificates \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        python3 python3-pip \\\n\tlibopenmpi-dev \\\n        libssl-dev \\\n        libmpdec2 \\\n\tlibhdf5-dev \\ \n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/\n\nENV PYTHONUNBUFFERED=1 \\\n    PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n    LANG=C.UTF-8\n\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir pillow && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    python3 -m pip install --no-cache-dir ideep4py && \\\n    python3 -m pip install --no-cache-dir mpi4py && \\\n    rm -rf /root/.cache\n    \nRUN git clone --branch=${CHAINER_VERSION} --depth=1 https://github.com/chainer/chainer.git chainer && \\\n    cd chainer && \\\n    python3 -m pip install --no-cache-dir .\n\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\n\n# verification Chainer\n#RUN python -c \"import chainer; print(chainer.__version__)\"\n\n# Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"Chainer 5.4 on Python 3.6 (CPU-only)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile\n"
    },
    {
        "filename": "e0ef1413ac6e0a4dfdbbdee27a425f0c233cfa8a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "\nFROM debian:latest\nMAINTAINER contact@samuel-berthe.fr\n\nRUN apt-get update && apt-get install -y cron git python python-setuptools python-pip curl\n\n# Add crontab file in the cron directory\nADD schedule /etc/cron.d/schedule\n\n# Give execution rights on the cron job\nRUN chmod 0644 /etc/cron.d/schedule\n\n# Create the log file to be able to run tail\nRUN touch /var/log/cron.log\n\n# Run the command on container startup\nCMD cron && tail -f /var/log/cron.log\n\nRUN mkdir /root/.ssh\nADD . /root/repo\n"
    },
    {
        "filename": "e12fffa3e4ac1a269883b38c097edcf62f012518.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER Kimbro Staken\n\nRUN apt-get install -y software-properties-common python\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n#RUN apt-get install -y nodejs=0.6.12~dfsg1-1ubuntu1\nRUN mkdir /var/www\n\nADD app.js /var/www/app.js\n\nCMD [\"/usr/bin/node\", \"/var/www/app.js\"] "
    },
    {
        "filename": "e1525ff68d9ba8d1b94cdf32d3360ff35052178c.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu:18.04\n\n## Author of the new image\nMAINTAINER Priya Seth <sethp@us.ibm.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV TOXENV py27\n\n## Update source, Install dependencies, >Clone repo\nRUN apt-get -y update && \\\n\tapt-get install -y build-essential software-properties-common \\\n\t\tgit python-setuptools python-dev locales locales-all \\\n\t\tpython-pip python-setuptools && \\\n\tpip install virtualenv && \\\n\tgit clone https://github.com/Pylons/pyramid_mako && \\\n\tcd pyramid_mako/ && \\\n\tpython setup.py install && \\\n\tvirtualenv -p python2 --system-site-packages env2 && \\\n\t/bin/bash -c \"source env2/bin/activate\" && \\\n\tpip install tox && tox && \\\n\tapt-get purge -y git && \\\n\tapt-get -y autoremove\n"
    },
    {
        "filename": "e1551a04e3e9c5ad8959abefe311a6a69413a39e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM phusion/baseimage:latest\nMAINTAINER Daniel Graziotin <daniel@ineed.coffee>\nENV REFRESHED_AT 2016-03-29\n\n# based on tutumcloud/tutum-docker-lamp\n# MAINTAINER Fernando Mayo <fernando@tutum.co>, Feng Honglin <hfeng@tutum.co>\n\nENV DOCKER_USER_ID 501 \nENV DOCKER_USER_GID 20\n\nENV BOOT2DOCKER_ID 1000\nENV BOOT2DOCKER_GID 50\n\n# Tweaks to give Apache/PHP write permissions to the app\nRUN usermod -u ${BOOT2DOCKER_ID} www-data && \\\n    usermod -G staff www-data && \\\n    useradd -r mysql && \\\n    usermod -G staff mysql\n\nRUN groupmod -g $(($BOOT2DOCKER_GID + 10000)) $(getent group $BOOT2DOCKER_GID | cut -d: -f1)\nRUN groupmod -g ${BOOT2DOCKER_GID} staff\n\n# Install packages\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && \\\n  apt-get -y install supervisor wget git apache2 libapache2-mod-php5 mysql-server php5-mysql pwgen php-apc php5-mcrypt zip unzip  && \\\n  echo \"ServerName localhost\" >> /etc/apache2/apache2.conf\n\n# needed for phpMyAdmin\nrun php5enmod mcrypt\n\n# Add image configuration and scripts\nADD start-apache2.sh /start-apache2.sh\nADD start-mysqld.sh /start-mysqld.sh\nADD run.sh /run.sh\nRUN chmod 755 /*.sh\nADD supervisord-apache2.conf /etc/supervisor/conf.d/supervisord-apache2.conf\nADD supervisord-mysqld.conf /etc/supervisor/conf.d/supervisord-mysqld.conf\n\n# Remove pre-installed database\nRUN rm -rf /var/lib/mysql\n\n# Add MySQL utils\nADD create_mysql_users.sh /create_mysql_users.sh\nRUN chmod 755 /*.sh\n\n# Add phpmyadmin\nRUN wget -O /tmp/phpmyadmin.tar.gz https://files.phpmyadmin.net/phpMyAdmin/4.6.0/phpMyAdmin-4.6.0-all-languages.tar.gz\nRUN tar xfvz /tmp/phpmyadmin.tar.gz -C /var/www\nRUN ln -s /var/www/phpMyAdmin-4.6.0-all-languages /var/www/phpmyadmin\nRUN mv /var/www/phpmyadmin/config.sample.inc.php /var/www/phpmyadmin/config.inc.php\n\nENV MYSQL_PASS:-$(pwgen -s 12 1)\n# config to enable .htaccess\nADD apache_default /etc/apache2/sites-available/000-default.conf\nRUN a2enmod rewrite\n\n# Configure /app folder with sample app\nRUN mkdir -p /app && rm -fr /var/www/html && ln -s /app /var/www/html\nADD app/ /app\n\n#Environment variables to configure php\nENV PHP_UPLOAD_MAX_FILESIZE 10M\nENV PHP_POST_MAX_SIZE 10M\n\n# Add volumes for the app and MySql\nVOLUME  [\"/etc/mysql\", \"/var/lib/mysql\", \"/app\" ]\n\nEXPOSE 80 3306\nCMD [\"/run.sh\"]"
    },
    {
        "filename": "e19c9bf01d9563d4023ced8b10ad9352edffb383.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM coinvault/client-base:latest\n\nMAINTAINER Dan Gershony - CoinVault <dan@coinvault.io>\n\n# dependencies required to run the daemon\nRUN apt-get update \\\n\t&& apt-get install -y git \\\n\t&& apt-get install -y libssl-dev libdb-dev libdb++-dev libboost-all-dev libqrencode-dev \\\n\t&& apt-get install -y qt-sdk qt4-default \\\n\t&& apt-get install -y libcurl3-dev \\\n\t&& apt-get install -y libzip-dev\n\n# get\nRUN apt-get update \\\n    && cd ~ \\\n\t&& git clone https://github.com/gridcoin/Gridcoin-Research  \n\n# build\nRUN\tcd ~/Gridcoin-Research/src \\\n\t&& mkdir obj \\\n\t&& chmod 755 leveldb/build_detect_platform \\\n\t&& make -f makefile.unix USE_UPNP=- \n\n# install\nRUN cd ~/Gridcoin-Research/src \\\n    && strip gridcoinresearchd \\\n\t&& install -m 755 gridcoinresearchd /usr/local/bin \n\n# clean\nRUN apt-get purge -y --auto-remove git \\\n  && rm -r ~/Gridcoin-Research"
    },
    {
        "filename": "e1d38b766dcb7b506b6caa09226b677b02b0f370.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM maxexcloo/ubuntu:latest\nMAINTAINER Max Schaefer <max@excloo.com>\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7 && \\\n\techo \"deb https://oss-binaries.phusionpassenger.com/apt/passenger/ xenial main\" > /etc/apt/sources.list.d/passenger.list && \\\n\tapt-get update && \\\n\tapt-get install -y build-essential libsqlite3-dev nginx-extras nodejs passenger ruby ruby-dev zlib1g-dev && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\nRUN gem install rails\nRUN rm -rf /etc/nginx/*.d /etc/nginx/sites-* && \\\n\tmkdir -p /etc/nginx/addon.d /etc/nginx/config.d /etc/nginx/host.d /etc/nginx/nginx.d\nADD etc /etc\nADD supervisord.conf /etc/supervisor/conf.d/nginx.conf\nEXPOSE 80\n"
    },
    {
        "filename": "e1faae4d7e19f0b7413731aa2c1c2a901ac1827b.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM marvambass/nginx-ssl-php\nMAINTAINER MarvAmBass\n\nENV DH_SIZE 1024\n\nRUN apt-get -q -y update && \\\n    apt-get -q -y install mysql-client \\\n                          php5-mysql \\\n                          php5-gd \\\n                          php5-mcrypt \\\n                          wget \\\n                          unzip && \\\n    apt-get -q -y clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*;\n\nRUN php5enmod mcrypt; \\\n    sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 2000M/g' \\\n           /etc/php5/fpm/php.ini; \\\n    \\\n    echo \"clean http directory\"; \\\n    rm -rf /usr/share/nginx/html/*; \\\n    \\\n    wget \"https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip\" -O phpMyAdmin.zip && \\\n    unzip phpMyAdmin.zip && \\\n    rm phpMyAdmin.zip; \\\n    mv phpMyAdmin-*-languages /phpmyadmin; \\\n    \\\n    echo \"delete phpmyadmin config folder\"; \\\n    rm -rf /phpmyadmin/config;\n\n# install nginx phpmyadmin config\nADD nginx-phpmyadmin.conf /etc/nginx/conf.d/nginx-phpmyadmin.conf\n\n# install personal phpmyadmin config\nADD config.inc.php /phpmyadmin/config.inc.php\n\n# add startup.sh\nADD startup-phpmyadmin.sh /opt/startup-phpmyadmin.sh\n\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\n\n# add '/opt/startup-phpmyadmin.sh' to entrypoint.sh\nRUN sed -i 's/#!\\/bin\\/bash/#!\\/bin\\/bash\\n\\/opt\\/startup-phpmyadmin.sh/g' /opt/entrypoint.sh\n"
    },
    {
        "filename": "e1fd20651c90c8a77483f14aa6a3dd8aa9b1ca70.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "# Pull base image.\nFROM ubuntu:14.04\n\nRUN apt-get update\nRUN apt-get install -y apt-file\nRUN apt-get install -y python-software-properties software-properties-common\nRUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\nRUN apt-get update \\\n&&  apt-get install -y aptitude \\\n&&  aptitude install -y \\\n    gdal-bin \\\n    libgdal1-dev \\\n    libxml2 \\\n    python-lxml \\\n    python-libxml2 \\\n    libproj0 \\\n    libproj-dev \\\n    libgeos-dev \\\n    libgeos++-dev \\\n    cgi-mapserver \\\n    python-mapscript \\\n    python-psycopg2 \\\n    postgis \\\n    python-gdal \\\n    python-pip \\\n    wget \\\n    git\nRUN apt-get install -y libpython-dev\nRUN  wget https://pypi.python.org/packages/source/p/pysqlite/pysqlite-2.6.3.tar.gz \\\n&&  tar xzf pysqlite-2.6.3.tar.gz \\\n&&  cd pysqlite-2.6.3 \\\n&&  sed -i \"/define=SQLITE_OMIT_LOAD_EXTENSION/c\\#define=SQLITE_OMIT_LOAD_EXTENSION\" setup.cfg \\\n&&  sudo python setup.py install\nRUN cd - \\\n&&  pip install \"django>=1.7,<1.8\" \\\n&&  pip install twisted \\\n&&  django-admin.py --version\nRUN git clone --recursive https://github.com/EOxServer/eoxserver\nRUN cd eoxserver \\\n&&  python setup.py develop\n\n# temporary fix of spatialite init\n# takes very long if not set to 1\nRUN cd eoxserver/eoxserver/core/commands \\\n&&  sed -i 's/InitSpatialMetadata()/InitSpatialMetadata(1)/g' create_instance.py\n\nRUN cd eoxserver \\\n&&  eoxserver-admin.py create_instance eoxtest --init-spatialite\nRUN cd eoxserver/eoxtest \\\n&&  python manage.py syncdb --noinput --traceback \\\n&&  echo \"from django.contrib.auth.models import User; User.objects.create_superuser('admin','test@eox.at','admin')\" | python manage.py shell\n\n\nENTRYPOINT cd eoxserver/eoxtest \\\n&&  python manage.py runserver 0.0.0.0:8000\n"
    },
    {
        "filename": "e25694fdbefe2ca90468c959bc21dfaa36dbc081.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER tanin@google.com\nRUN apt-get update && apt-get install -y make autoconf automake libtool curl tcl zlib1g-dev\n\n# We won't be able to poll fossil for changes, so this will build\n# only once a day.\nRUN mkdir $SRC/sqlite3 && \\\n    cd $SRC/sqlite3 && \\\n    curl 'https://www.sqlite.org/src/tarball?uuid=trunk' -o sqlite3.tar.gz && \\\n    tar xzf sqlite3.tar.gz\n\nRUN find $SRC/sqlite3 -name \"*.test\" | xargs zip $SRC/ossfuzz_seed_corpus.zip\n\nWORKDIR sqlite3\nCOPY build.sh *.dict *.options $SRC/\n"
    },
    {
        "filename": "e32d81868fbc9d0a5b8c9067e00c951601def07f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# upstream from https://github.com/docker-atlassian/jira\n# Install Atlassian Jira\n# This is a trusted build based on the \"base\" image, but we also need postgresql\nFROM linuxkonsult/postgres\n\nMAINTAINER \u82e5\u865a slpcat@qq.com\n\nENV AppName jira-software\nENV AppVer 7.3.8\nENV Arch x64\n\nRUN apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\n# Set timezone and locales\nRUN \\\n    echo \"${TIMEZONE}\" > /etc/timezone \\\n    && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n    && apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -yq apt-utils dialog \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    && update-locale LANG=$LANG \\\n    && locale-gen $LANG \\\n    && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n\n# Install required packages\nRUN \\\n    apt-get dist-upgrade -y\n\n# Fetch the files\n#ADD http://www.atlassian.com/software/jira/downloads/binary/atlassian-$AppName-$AppVer-$Arch.bin /opt/\nADD atlassian-$AppName-$AppVer-$Arch.bin /opt\nADD ./install_cmds.sh /install_cmds.sh\nADD ./node.json /etc/chef/node.json\nADD ./response.varfile /opt/response.varfile\nADD ./init.sh /init.sh\nADD ./install_cmds.sh /install_cmds.sh\n\n## Now Install Atlassian Jira\nRUN /install_cmds.sh\n\n# add patch\nADD mysql-connector-java-5.1.39-bin.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/mysql-connector-java-5.1.39-bin.jar\nADD atlassian-extras-3.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/atlassian-extras-3.2.jar\nADD atlassian-universal-plugin-manager-plugin-2.22.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.2.jar\n\n# Start the service\nCMD [\"sh\", \"/init.sh\"]\nEXPOSE 8080\n"
    },
    {
        "filename": "e4b2864618219e16f7b7247841276d677c82fb1f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ubuntu\nMAINTAINER joridos <jonatam.ribeiro@hotmail.com>\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \\\n  apache2\n\n# use Apache2hHostCreate.sh\nADD Apache2hHostCreate.sh Apache2hHostCreate.sh\nENTRYPOINT [\"./Apache2hHostCreate.sh\"]\n\n"
    },
    {
        "filename": "e4bded677747b8266a8074fcdd6d046b53ba5852.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM snapcraft/ubuntu-base:amd64-16.04.2\nMAINTAINER Rex Tsai \"http://about.me/chihchun\"\n\nENV SNAPCRAFT_VERSION=2.29.1\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN sed -i \"/^# deb.*universe/ s/^# //\" /etc/apt/sources.list\nRUN sed -i \"/^# deb.*multiverse/ s/^# //\" /etc/apt/sources.list\nRUN apt-get update\n\n# build and install snapcraft\nWORKDIR /tmp\nRUN apt-get install -y --no-install-recommends \\\n        devscripts \\\n        equivs \\\n        git \\\n        ca-certificates \\\n        curl\n\nRUN git clone --depth 1 --branch ${SNAPCRAFT_VERSION} https://github.com/snapcore/snapcraft \\\n && cd snapcraft \\\n && mk-build-deps debian/control -i --tool 'apt-get -y --no-install-recommends' \\\n && dpkg-buildpackage -us -uc \\\n && apt-get install -y ../*.deb \\\n && apt-get remove --purge -y devscripts equivs git python3-fixtures python3-responses python3-setuptools python3-testscenarios python3-testtools \\\n && apt-get autoremove -y \\\n && apt-get clean -y\nRUN rm -rf /tmp/* /var/tmp/*\n\n# Setup sudo for apt-get\nRUN apt-get install -y sudo\nRUN echo \"ALL ALL=NOPASSWD: /usr/bin/apt-get,/usr/bin/apt-mark\" >> /etc/sudoers.d/apt-get \\\n && chmod 0440 /etc/sudoers.d/apt-get\n\n# sudo requires a pw entry\nRUN for i in $(seq 500 1100); do echo snapper:x:$i:100:a build user:/build:/bin/bash ; done | tee -a /etc/passwd\n\n# Clean up\nRUN apt-get clean\n\n# snapcraft need to save configs in ${HOME}/.local\nENV HOME /home\nRUN chgrp -R 100 /home \\\n && chmod -R g+rwx /home\n\nVOLUME /build\nWORKDIR /build\n\nADD docker-entrypoint.sh /usr/local/bin\nRUN chmod 755 /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
    },
    {
        "filename": "e5381155f6a12735258a5b3d066312735b1768ae.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# mirrord's Dockerfile\n\nFROM debian\nMAINTAINER ideal <idealities@gmail.com>\n\nRUN apt-get update\nRUN apt-get install -y rsync python-pip\n\nRUN pip install mirror\n\nRUN mkdir /var/log/mirrord /var/log/rsync\n\nCMD [\"mirrord\"]\n"
    },
    {
        "filename": "e618e6c352690564aebab887cb2f8729126bc64e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM dockerfile/java:oracle-java7\nMAINTAINER Jacek Marchwicki \"jacek.marchwicki@gmail.com\"\n\n# Let's start with some basic stuff.\nRUN apt-get update -qq && apt-get install -qqy \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    lxc \\\n    iptables \\\n    git \\\n    wget \\\n    curl \\\n    openssh-client \\\n    python \\\n    unzip \\\n    python-openssl \\\n    openssh-server\n    \n# Install Docker from Docker Inc. repositories.\nRUN curl -sSL https://get.docker.com/ubuntu/ | sh\n\n# Install the magic wrapper.\nADD ./wrapdocker /usr/local/bin/wrapdocker\nRUN chmod +x /usr/local/bin/wrapdocker\n\n# Define additional metadata for our image.\nVOLUME /var/lib/docker\n\n# Install google cloud sdk\nRUN mkdir -p /opt && cd /opt/ && wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && unzip google-cloud-sdk.zip && rm google-cloud-sdk.zip && google-cloud-sdk/install.sh --usage-reporting=true --path-update=true --bash-completion=true --rc-path=/.bashrc --disable-installation-options\nENV PATH /opt/google-cloud-sdk/bin:$PATH\nRUN yes | gcloud components update\nENV CLOUDSDK_CONFIG /jenkins/gcloud\nENV CLOUDSDK_PYTHON_SITEPACKAGES 1\n\n# Install jenkins\nRUN wget --output-document=/opt/jenkins.war http://mirrors.jenkins-ci.org/war/1.607/jenkins.war\nRUN chmod 644 /opt/jenkins.war\nENV JENKINS_HOME /jenkins\nVOLUME /jenkins\n\n# Setup slave login\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nCOPY slave.sh /usr/local/bin/\nENV ROOT_PASSWORD notasecret\n\n# install run script\nCOPY run.sh /usr/local/bin/\n\nRUN mkdir -p /opt/workspace\nWORKDIR /opt/workspace\n\nEXPOSE 8080 22\n\nCMD [\"/usr/local/bin/wrapdocker\", \"/usr/local/bin/run.sh\"]\n"
    },
    {
        "filename": "e632c8b5a8f53b801b7bd05bc59cb0d1af04066c.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#\n#  From this base-image / starting-point\n#\nFROM debian:testing\n\n#\n#  Authorship\n#\nMAINTAINER ss34@sanger.ac.uk\n\n#\n# Pull in packages from testing\n#\nRUN apt-get update -qq\n\n#\n# Install dependencies\n# we need blast2 for ABACAS2 as it does not use BLAST+ yet\n#\nRUN apt-get install build-essential hmmer lua5.1 ncbi-blast+ blast2 snap \\\n                    unzip mummer infernal exonerate mafft fasttree \\\n                    circos libsvg-perl libgd-svg-perl python-setuptools \\\n                    libc6-i386 lib32stdc++6 lib32gcc1 netcat genometools \\\n                    last-align libboost-iostreams-dev libgslcblas0 libgsl-dev \\\n                    libcolamd2 liblpsolve55-dev libstdc++6 aragorn tantan \\\n                    libstorable-perl libbio-perl-perl libsqlite3-dev \\\n                    --yes\nRUN ln -fs /usr/bin/fasttree /usr/bin/FastTree\nRUN ln -s /usr/lib/snap/snap /usr/local/bin/snap\n\n# \n# Install AUGUSTUS\n# \nRUN apt-get install augustus --yes\n\n\n# \n# Install GenomeTools\n# \nRUN apt-get install genometools --yes\n\n\n#\n# Install and configure OrthoMCL\n#\nADD http://www.orthomcl.org/common/downloads/software/unsupported/v1.4/ORTHOMCL_V1.4_mcl-02-063.tar /opt/omcl.tar\nRUN cd /opt && \\\n    tar -xvf omcl.tar && \\\n    tar -xzvf mcl-02-063.tar.gz && \\\n    rm -f omcl.tar mcl-02-063.tar.gz && \\\n    cd /opt/mcl-* && \\\n    ./configure && \\\n    make -j3 && \\\n    make install && \\\n    cd / && \\\n    rm -rf /opt/mcl*\nRUN sed -i 's/our .PATH_TO_ORTHOMCL.*=.*/our $PATH_TO_ORTHOMCL = \".\\/\";/' /opt/ORTHOMCLV1.4/orthomcl_module.pm && \\\n    sed -i 's/our .BLASTALL.*=.*/our $BLASTALL = \"\\/usr\\/bin\\/blastall\";/' /opt/ORTHOMCLV1.4/orthomcl_module.pm && \\\n    sed -i 's/our .FORMATDB.*=.*/our $FORMATDB = \"\\/usr\\/bin\\/formatdb\";/' /opt/ORTHOMCLV1.4/orthomcl_module.pm && \\\n    sed -i 's/our .MCL.*=.*/our $MCL = \"\\/usr\\/local\\/bin\\/mcl\";/' /opt/ORTHOMCLV1.4/orthomcl_module.pm\n\n#\n# Install Gblocks\n#\nADD http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_Linux64_0.91b.tar.Z /opt/gblocks64.tar.Z\nRUN cd /opt && \\\n    tar -xzvf gblocks64.tar.Z && \\\n    rm -rf gblocks64.tar.Z && \\\n    cp Gblocks_0.91b/Gblocks /usr/bin/Gblocks && \\\n    chmod 755 /usr/bin/Gblocks\n\n#\n# get GO OBO file\n#\nADD http://geneontology.org/ontology/go.obo /opt/go.obo\n\n#\n# get Pfam pHMMs\n#\nRUN mkdir -p /opt/pfam\nADD http://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz /opt/pfam/Pfam-A.hmm.gz\nRUN cd /opt/pfam && \\\n    gunzip Pfam-A.hmm.gz && \\\n    hmmpress Pfam-A.hmm && \\\n    rm -f Pfam-A.hmm\n\n# \n# copy data dir\n#\nRUN mkdir -p /opt/data\nADD ./data /opt/data\n\n#\n# install RATT (keep up to date from build directory)\n#\nADD ./RATT /opt/RATT\n\n#\n# install ABACAS (keep up to date from build directory)\n#\nADD ./ABACAS2 /opt/ABACAS2\n\nENV AUGUSTUS_CONFIG_PATH /usr/share/augustus/config\nENV RATT_HOME /opt/RATT\nENV GT_RETAINIDS yes\nENV PERL5LIB /opt/ORTHOMCLV1.4/:/opt/RATT/:/opt/ABACAS2/:$PERL5LIB\nENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/augustus/bin:/usr/share/augustus/scripts:/opt/ORTHOMCLV1.4:/opt/RATT:/opt/ABACAS2:$PATH\n"
    },
    {
        "filename": "e65c03313dab462863e4c2319a0f84418309a214.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\nRUN apt-get update && apt-get -y upgrade\nRUN apt-get install -y build-essential python-dev\nRUN apt-get install -y python python-distribute python-pip\nRUN pip install pip --upgrade\nRUN apt-get install -y git\nRUN git clone --recursive https://github.com/tstreamDOTh/Instacart-Market-Basket-Analysis.git\nWORKDIR Instacart-Market-Basket-Analysis\nAdd Requirements.txt /Instacart-Market-Basket-Analysis\nRUN pip install -r Requirements.txt \nCMD jupyter notebook"
    },
    {
        "filename": "e6a1e0f36f1969f5095a610535fad500674370fc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM ipython/notebook:latest  \n  \nMAINTAINER Dan Isla <dan.isla@gmail.com>  \n  \nVOLUME /notebooks  \nWORKDIR /notebooks  \n  \nEXPOSE 8888  \nRUN apt-get install -y libncurses5-dev  \n  \nADD requirements.txt /tmp/  \n  \nRUN pip install -r /tmp/requirements.txt  \n  \nADD ipython-revealjs-example.ipynb /notebooks/  \n  \nCMD [\"/notebook.sh\"]  \n\n"
    },
    {
        "filename": "e6c57f832dc98d730aa145be84c1b623fdae10ad.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM centos\n\nMAINTAINER Humble Chirammal hchiramm@redhat.com\nLABEL version=\"0.5\"\nLABEL description=\"GlusterFS container based on CentOS 7\"\n\nENV container docker\n\nRUN yum --setopt=tsflags=nodocs -y update; yum clean all;\n\nRUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\nrm -f /lib/systemd/system/multi-user.target.wants/*;\\\nrm -f /etc/systemd/system/*.wants/*;\\\nrm -f /lib/systemd/system/local-fs.target.wants/*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\nrm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\nrm -f /lib/systemd/system/basic.target.wants/*;\\\nrm -f /lib/systemd/system/anaconda.target.wants/*;\n\nRUN yum --setopt=tsflags=nodocs -q -y install \\\n  wget \\\n  nfs-utils \\\n  attr \\\n  iputils \\\n  iproute \\\n  sudo \\\n  xfsprogs \\\n  centos-release-gluster \\\n  ntp \\\n  epel-release \\\n  openssh-clients \\\n  cronie \\\n  tar \\\n  rsync \\\n  sos ; yum clean all\n\nRUN yum --setopt=tsflags=nodocs -y install \\\n  glusterfs \\\n  glusterfs-server \\\n  glusterfs-geo-replication ; yum clean all\n\n# Backing up gluster config as it overlaps when bind mounting.\nRUN mkdir -p /etc/glusterfs_bkp /var/lib/glusterd_bkp /var/log/glusterfs_bkp;\\\ncp -r /etc/glusterfs/* /etc/glusterfs_bkp;\\\ncp -r /var/lib/glusterd/* /var/lib/glusterd_bkp;\\\ncp -r /var/log/glusterfs/* /var/log/glusterfs_bkp;\n\n# Adding script to move the glusterfs config file to location\nADD gluster-setup.service /etc/systemd/system/gluster-setup.service\nRUN chmod 644 /etc/systemd/system/gluster-setup.service\n\n# Adding script to move the glusterfs config file to location\nADD gluster-setup.sh /usr/sbin/gluster-setup.sh\nRUN chmod 500 /usr/sbin/gluster-setup.sh\n\n# To avoid the warnings while accessing the container\nRUN sed -i \"s/LANG/\\#LANG/g\" /etc/locale.conf\n\n# Configure LVM so that we can create LVs and snapshots\nRUN sed -i.save -e \"s#udev_sync = 1#udev_sync = 0#\" \\\n  -e \"s#udev_rules = 1#udev_rules = 0#\" \\\n  -e \"s#use_lvmetad = 1#use_lvmetad = 0#\" /etc/lvm/lvm.conf\n\n# Set password\nRUN echo 'root:password' | chpasswd\n\n# Set SSH public key\nUSER root\n\nVOLUME [ \"/sys/fs/cgroup\", \"/dev\", \"/run/lvm\" , \"/var/lib/heketi\" ]\n\nEXPOSE 111 245 443 24007 2049 8080 6010 6011 6012 38465 38466 38468 38469 49152 49153 49154 49156 49157 49158 49159 49160 49161 49162\n\nRUN systemctl disable nfs-server.service\nRUN systemctl enable rpcbind.service\nRUN systemctl enable ntpd.service\nRUN systemctl enable gluster-setup.service\nRUN systemctl enable glusterd.service\n\nCMD [\"/usr/sbin/init\"]\n"
    },
    {
        "filename": "e6ed9f6d15c06c349f8c556b40cf0e5adde42127.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\n\n# Noninteractive frontend\nARG DEBIAN_FRONTEND=noninteractive\n\n#\n# Install anything needed in the system\n#\nRUN apt-get update -y\nRUN apt-get install -y --no-install-recommends apt-utils\nRUN apt-get install -y git python3-minimal python3-pip autoconf libtool\n\n#\n# Install googletest\n#\nRUN apt-get install -y libgtest-dev cmake\nWORKDIR /usr/src/gtest\nRUN cmake CMakeLists.txt && make -j16 && cp *.a /usr/lib\n\n# Set the working directory back to the root home folder\nWORKDIR /root\n\n# Install valgrind\nRUN apt-get install -y valgrind\n\n# Install msgpack\nRUN pip3 install msgpack\nWORKDIR /usr/src\nRUN git clone https://github.com/msgpack/msgpack-c.git\nWORKDIR /usr/src/msgpack-c\nRUN cmake -DMSGPACK_CXX11=ON . && make install\n\n# Install graphics\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n  git \\\n  libgl1-mesa-dri \\\n  menu \\\n  net-tools \\\n  openbox \\\n  python-pip \\\n  sudo \\\n  supervisor \\\n  tint2 \\\n  x11-xserver-utils \\\n  x11vnc \\\n  xinit \\\n  xserver-xorg-video-dummy \\\n  xserver-xorg-input-void \\\n  websockify \\\n  wget && \\\n  rm -f /usr/share/applications/x11vnc.desktop && \\\n  apt-get remove -y python-pip && \\\n  wget https://bootstrap.pypa.io/get-pip.py && \\\n  python get-pip.py && \\\n  pip install supervisor-stdout && \\\n  apt-get -y clean\n\nCOPY third-party/docker-opengl/etc/skel/.xinitrc /etc/skel/.xinitrc\n\nRUN useradd -m -s /bin/bash user\nUSER user\n\nRUN cp /etc/skel/.xinitrc /home/user/\nUSER root\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/user\n\n\nRUN git clone https://github.com/kanaka/noVNC.git /opt/noVNC && \\\n  cd /opt/noVNC && \\\n  git checkout 6a90803feb124791960e3962e328aa3cfb729aeb && \\\n  ln -s vnc_auto.html index.html\n\n# noVNC (http server) is on 6080, and the VNC server is on 5900\nEXPOSE 6080 5900\n\nCOPY third-party/docker-opengl/etc /etc\nCOPY third-party/docker-opengl/usr /usr\n\nENV DISPLAY :0\n"
    },
    {
        "filename": "e6f444731b787c505e5dc316d86eef79fb07c2b6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER alex.gaynor@gmail.com\nRUN apt-get update && apt-get install -y make autoconf automake libtool autopoint pkg-config gperf bison autogen texinfo curl\n\nRUN git clone --depth=1 https://gitlab.com/gnutls/gnutls.git\nRUN cd gnutls && git clone --depth=1 https://git.lysator.liu.se/nettle/nettle.git\n\nWORKDIR gnutls\nCOPY build.sh $SRC/\n"
    },
    {
        "filename": "e707102c12f8595f8aef20600ce4099b5b474473.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian\n\nMAINTAINER Tamas Kohegyi <tkohegyi2@gmail.com>\n\nRUN \\\n  mkdir /data && \\\n  mkdir /data/wilma && \\\n  cd /data/wilma && \\\n  apt-get update && \\\n  apt-get install -y apt-utils && \\\n  apt-get install -y unzip && \\\n  apt-get install -y wget && \\\n  apt-get install -y procps && \\\n  apt-get install -y openjdk-8-jre && \\\n  apt-get upgrade -y && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  wget https://github.com/epam/Wilma/releases/download/V1.6.229/wilma-application-1.6.229.zip && \\\n  unzip wilma-application-1.6.229.zip && \\\n  mv wilma-1.6.229.jar wilma.jar && \\\n  rm -f wilma-application-1.6.229.zip\n\nCOPY start_wilma.sh /data/\nRUN \\\n  cd /data && \\\n  chmod 777 *.sh\n\nWORKDIR /data\n\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV WILMA_CONFIGURATION wilma.conf.properties\n#ENV WILMA_MX_SIZE - it has no default value\n#ENV WILMA_KEYSTORE - it has no default value\n#ENV WILMA_KEYSTORE_PASSWORD - it has no default value\n#ENV WILMA_JMX_PORT 9011 - note, if you use it, the port should be exposed too!\n\n# you may start wilma with default settings by /data/start_wilma.sh\nCMD [\"bash\",\"./start_wilma.sh\"]\n\n# expose UI port and proxy port\nEXPOSE 1234 9092\n"
    },
    {
        "filename": "e73644d93402266cc96c119648f19a8eae7ef9b1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# Docker file for JuliaBox Engine Base\n# Version:1\n\n# Before building image, place:\n# - configurations at ./conf\n#   - boto configuration at ./conf/.boto\n# - sources at ./src\n\n# Engine installed at /jboxengine inside the container\n# Configurations are placed at /jboxengine/conf\n\n# Run the image with host mounts:\n# - /jboxengine/logs for log files\n# - /jboxengine/data for data files like package bundles, user home mounts and backups.\n#   - ensure user home mounts are initialized on host\n# - /var/run/docker.sock pointing to docker socket\n\nFROM ubuntu:14.04\n\nMAINTAINER Tanmay Mohapatra\n\nRUN apt-get update \\\n    && apt-get upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o DPkg::Options::=\"--force-confold\" \\\n    && apt-get install -y \\\n    build-essential \\\n    libreadline-dev \\\n    libncurses-dev \\\n    libpcre3-dev \\\n    libssl-dev \\\n    netcat \\\n    git \\\n    python-setuptools \\\n    python-dev \\\n    python-isodate \\\n    python-pip \\\n    python-tz \\\n    libzmq3-dev \\\n    language-pack-en-base \\\n    libmysqlclient-dev \\\n    && apt-get clean\n\nENV LANG en_US.utf8\n\nRUN pip install tornado \\\n    futures \\\n    google-api-python-client \\\n    PyDrive \\\n    boto \\\n    pycrypto \\\n    psutil \\\n    sh \\\n    pyzmq \\\n    docker-py \\\n    MySQL-python\n\n# Create docker group and juser which will run the engine.\n# Note: Assumption of docker gid=999 may not be true always. But this is better than a 777 permission on the docker socket.\nRUN groupadd -g 999 docker \\\n    && groupadd juser \\\n    && useradd -m -d /home/juser -s /bin/bash -g juser -G staff,docker juser \\\n    && echo \"export HOME=/home/juser\" >> /home/juser/.bashrc \\\n    && ln -fs /jboxengine/conf/.boto /home/juser/.boto\n\nRUN mkdir /jboxengine /jboxengine/logs \\\n    && chmod 777 /jboxengine/logs\n\n# Export volume for logs and data\nVOLUME /jboxengine/logs\nVOLUME /jboxengine/data\n\n# Add static files, configuration, scripts and certificates\nADD conf /jboxengine/conf\nADD src /jboxengine/src\n"
    },
    {
        "filename": "e7448af74ce7b68e7cc20c336bd59c19cea2c774.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM debian:latest  \n  \nENV HOME /root  \n  \n# Build-time metadata as defined at http://label-schema.org  \nARG BUILD_DATE  \nARG VCS_REF  \nARG VCS_URL  \nARG VERSION  \nLABEL org.label-schema.build-date=\"2018-03-19T15:29:12Z\" \\  \norg.label-schema.name=\"docker-pelican\" \\  \norg.label-schema.description=\"Machine for maintaining a Pelican web site\" \\  \norg.label-schema.url=\"https://github.com/chrisramsay/docker-pelican\" \\  \norg.label-schema.vcs-ref=\"ad62cb88408ed462be251d6d82c5448c618d8c06\" \\  \norg.label-schema.vcs-url=\"git@github.com:chrisramsay/docker-pelican.git\" \\  \norg.label-schema.vendor=\"Chris Ramsay\" \\  \norg.label-schema.version=\"0.11.0\" \\  \norg.label-schema.schema-version=\"1.0\" \\  \norg.label-schema.maintainer=\"Chris Ramsay <chris@ramsay-family.net>\"  \n  \nRUN apt-get -y update && apt-get install -y \\  \nbuild-essential \\  \nlibssl-dev \\  \nlibffi-dev \\  \npython \\  \npython-dev \\  \npython-pip \\  \ngit  \n  \nWORKDIR /srv  \nADD requirements.txt /srv/requirements.txt  \nRUN pip install --upgrade pip  \nRUN pip install -r requirements.txt  \n  \nADD files/bashrc /root/.bashrc  \n\n"
    },
    {
        "filename": "e791940fef5f62440ba4241ce3f1f23d490e20fa.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM coinvault/client-base:latest\n\nMAINTAINER Dan Gershony - CoinVault <dan@coinvault.io>\n\n# dependencies required to run the daemon\nRUN apt-get update \\\n\t&& apt-get install -y git \\\n\t&& apt-get install -y build-essential libtool autotools-dev automake \\ \n\t&& apt-get install -y pkg-config libssl-dev libevent-dev bsdmainutils \\\n\t&& apt-get install -y libboost-all-dev \n\t#&& apt-get install -y libcurl3-dev \\\n\t#&& apt-get install -y libzip-dev\n\n\n\n# get\nRUN apt-get update \\\n    && cd ~ \\\n    && git clone https://github.com/clockuniverse/terracoin.git  \n\n# build\nRUN\tcd ~/terracoin \\\n\t&& ./autogen.sh \\\n\t&& ./configure --disable-wallet --without-gui --without-miniupnpc \\\n\t&& make\n\n#       && mkdir -p obj \\\n#\t&& chmod 755 leveldb/build_detect_platform \\\n#\t&& make -f makefile.unix USE_UPNP=- \n\n# install\nRUN cd ~/terracoin/src \\\n    && strip terracoind \\\n\t&& install -m 755 terracoind /usr/local/bin  \n\n# clean\nRUN apt-get purge -y --auto-remove git \\\n  && rm -r ~/terracoin\n"
    },
    {
        "filename": "e7d54f5042b59dc52c3fff34a6402aeb44ec8833.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "#vim: set ft=dockerfile\nFROM postgres:%%PG_VER%%\nMAINTAINER Julien Rouhaud <julien.rouhaud@dalibo.com>\n\nWORKDIR /usr/local/src\n\nRUN apt-get update && apt-get install -y \\\n    gcc \\\n    jq \\\n    make \\\n    postgresql-contrib-%%PG_VER%% \\\n    postgresql-server-dev-%%PG_VER%% \\\n    wget \\\n    && wget -O- $(wget -O- https://api.github.com/repos/powa-team/powa-archivist/releases/latest|jq -r '.tarball_url') | tar -xzf - \\\n    && wget -O- $(wget -O- https://api.github.com/repos/powa-team/pg_qualstats/releases/latest|jq -r '.tarball_url') | tar -xzf - \\\n    && wget -O- $(wget -O- https://api.github.com/repos/powa-team/pg_stat_kcache/releases/latest|jq -r '.tarball_url') | tar -xzf - \\\n    && wget -O- $(wget -O- https://api.github.com/repos/HypoPG/hypopg/releases/latest|jq -r '.tarball_url') | tar -xzf - \\\n    && wget -O- $(wget -O- https://api.github.com/repos/rjuju/pg_track_settings/releases/latest|jq -r '.tarball_url') | tar -xzf - \\\n    && for f in $(ls); do cd $f; make install; cd ..; rm -rf $f; done \\\n    && apt-get purge -y --auto-remove gcc jq make postgresql-server-dev-%%PG_VER%% wget \\\n    && rm -rf /var/lib/apt/lists/*\n\n# configure powa-archivist\nADD setup_powa-archivist.sh /docker-entrypoint-initdb.d/\nADD install_all.sql /usr/local/src/\n"
    },
    {
        "filename": "e8f948b57fb8049ef68f865c209052f8a88aed8f.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM debian:wheezy\n\nMAINTAINER Peter Lai <alk03073135@gmail.com>\n\nADD genesis.json /\n# ADD geth.sh /etc/init.d/geth.sh\n\n# setup environment variables\nENV GOROOTBASE /usr/local\nENV GOROOT /usr/local/go\nENV GOPATH /go\nENV PATH $PATH:/usr/local/go/bin:$GOPATH/bin\n\n# see https://github.com/eromoe/docker/commit/7dccc72bb24c715f176e4980ab59fd7aeb149a5f\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# install golang\nRUN apt-get update && \\\n    apt-get install -y curl procps && \\\n    curl -O https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz && \\\n    tar -C $GOROOTBASE -xzf go1.7.3.linux-amd64.tar.gz && \\\n    mkdir -p $GOPATH\n\n# build geth\nRUN apt-get install -y build-essential git && \\\n    cd $HOME && \\\n    git clone https://github.com/ethereum/go-ethereum && \\\n    cd $HOME/go-ethereum && \\\n    make geth\n\n# copy geth bin\nRUN ln -s $HOME/go-ethereum/build/bin/geth /usr/local/bin/geth\n    #chmod +x /etc/init.d/geth.sh && \\\n    #chown root:root /etc/init.d/geth.sh && \\\n    #update-rc.d geth.sh default\n    #/etc/init.d/geth.sh start\n\nEXPOSE 8545 8546 30303 30303/udp\n\n# running geth\nCMD geth --datadir \".\" --port \"30303\" --rpcapi \"db,personal,eth,net,web3\" --rpccorsdomain \"*\" --networkid 314 --identity \"ethdock\" --rpc --rpcaddr \"0.0.0.0\" --rpcport \"8545\" --rpccorsdomain \"*\" --etherbase \"0x7ee077f7afbc121e7b63d9baff6c8a52c3a9c2f3\" --mine init=/genesis.json\n"
    },
    {
        "filename": "e936ba019f0db753109c4154bc468afbdcd10cf3.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:16.04\n\n# ========== Anaconda ==========\n# https://github.com/ContinuumIO/docker-images/blob/master/anaconda/Dockerfile\nRUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git mercurial subversion\n\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget  --no-check-certificate --quiet https://repo.continuum.io/archive/Anaconda2-2.5.0-Linux-x86_64.sh && \\\n    /bin/bash /Anaconda2-2.5.0-Linux-x86_64.sh -b -p /opt/conda && \\\n    rm /Anaconda2-2.5.0-Linux-x86_64.sh\n\nRUN apt-get install -y curl grep sed dpkg && \\\n    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'` && \\\n    curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb && \\\n    apt-get clean\n\nENV PATH /opt/conda/bin:$PATH\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n\n# ========== Special Deps ==========\nRUN apt-get -y install git make cmake unzip\nRUN pip install awscli\n# ALE requires zlib\nRUN apt-get -y install zlib1g-dev\n# MUJOCO requires graphics stuff (Why?)\nRUN apt-get -y build-dep glfw\nRUN apt-get -y install libxrandr2 libxinerama-dev libxi6 libxcursor-dev\n# copied from requirements.txt\n#RUN pip install imageio tabulate nose\nRUN apt-get install -y vim ack-grep\nRUN pip install --upgrade pip\n# usual pip install pygame will fail\nRUN apt-get build-dep -y python-pygame\nRUN pip install Pillow\n\n# ========== OpenAI Gym ==========\nRUN apt-get -y install libgtk2.0-0\nRUN pip install gym\n# RUN apt-get -y install ffmpeg\nRUN apt-get -y install libav-tools\nCMD alias ffmpeg=\"avconv\"\n\n# ========== Add codebase stub ==========\nWORKDIR /root/sac\n\nADD environment.yml /root/sac/environment.yml\nRUN conda env create -f /root/sac/environment.yml \\\n    && conda env update\n\nENV PYTHONPATH /root/sac:$PYTHONPATH\nENV PATH /opt/conda/envs/sac/bin:$PATH\nRUN echo \"source activate sac\" >> /root/.bashrc\nENV BASH_ENV /root/.bashrc\n\n# ========= rllab ===============\n# We need to clone rllab repo in order to use the\n# `rllab.sandbox.rocky.tf` functions.\n\nENV RLLAB_PATH=/root/rllab \\\n    RLLAB_VERSION=b3a28992eca103cab3cb58363dd7a4bb07f250a0\n\nRUN git clone https://github.com/rll/rllab.git ${RLLAB_PATH} \\\n    && cd ${RLLAB_PATH} \\\n    && git checkout ${RLLAB_VERSION} \\\n    && mkdir ${RLLAB_PATH}/vendor/mujoco \\\n    && python -m rllab.config\n\nENV PYTHONPATH ${RLLAB_PATH}:${PYTHONPATH}\n\n# ========= mujoco ===============\nENV MUJOCO_VERSION=1.3.1 \\\n    MUJOCO_PATH=/root/.mujoco\n\nRUN MUJOCO_ZIP=\"mjpro$(echo ${MUJOCO_VERSION} | sed -e \"s/\\.//g\")_linux.zip\" \\\n    && mkdir -p ${MUJOCO_PATH} \\\n    && wget -P ${MUJOCO_PATH} https://www.roboti.us/download/${MUJOCO_ZIP} \\\n    && unzip ${MUJOCO_PATH}/${MUJOCO_ZIP} -d ${MUJOCO_PATH} \\\n    && cp ${MUJOCO_PATH}/mjpro131/bin/libmujoco131.so ${RLLAB_PATH}/vendor/mujoco/ \\\n    && cp ${MUJOCO_PATH}/mjpro131/bin/libglfw.so.3 ${RLLAB_PATH}/vendor/mujoco/ \\\n    && rm ${MUJOCO_PATH}/${MUJOCO_ZIP}\n"
    },
    {
        "filename": "e94ea294068f68a3ebedfbbccefed84fb21d44f2.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM      ubuntu\nMAINTAINER Politecnico di Torino\n\nRUN apt-get update && apt-get install -y ssh python iptraf\n\n#Prepare the ssh server\nRUN mkdir -p /var/run/sshd && \\\n\tmkdir -p /root/.ssh && \\\n\techo 'root:root' | chpasswd\n\t\nRUN echo \"UseDNS no\" >> /etc/ssh/sshd_config\nRUN sed '/PermitRootLogin without-password/d' /etc/ssh/sshd_config > tmp_file && \\\n\trm /etc/ssh/sshd_config && \\\n\tmv tmp_file /etc/ssh/sshd_config\n\t\n#prepare the ip forger openflow controller\n\nADD pox controller\nADD ext/* controller/ext/\nADD controller.conf controller/controller.conf\nADD client_mac.sh controller/client_mac.sh\n\nADD start.sh start.sh\n\nRUN chmod +x start.sh\nRUN chmod +x controller/client_mac.sh\n"
    },
    {
        "filename": "e9cc68acd3b83f6434d2d3b32e0aa10990de4bd2.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM mitchtech/rpi-python\n\nMAINTAINER Michael J. Mitchell <michael@mitchtech.net>\n\nRUN apt-get update && apt-get install -y -q \\\n    dbus \\\n    fonts-freefont-ttf \\\n    git \\\n    libfreetype6 \\\n    libraspberrypi-dev \\\n    libsmbclient \\\n    libssh-4 \\\n    libssl1.0.0 \\\n    wget \\\n    --no-install-recommends && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN wget http://omxplayer.sconde.net/builds/omxplayer_0.3.7~git20160206~cb91001_armhf.deb && \\\n    dpkg -i omxplayer_0.3.7~git20160206~cb91001_armhf.deb && \\\n    apt-get install -f\n\nRUN git clone git://github.com/adafruit/pi_video_looper.git && \\\n    cd pi_video_looper && \\\n    ./install.sh\n\nCMD [\"bash\"]\n"
    },
    {
        "filename": "ea02679f3f443812045ca6e2288c7789369ae690.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-015,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-sudo-run,apt-install-without-version",
        "num": 6,
        "text": "FROM ubuntu:latest\n\nRUN apt-get update && apt-get install -y sudo curl && rm -rf /var/lib/apt/lists/*\n\n# Install node\n# Replace shell with bash so we can source files\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# make sure apt is up to date\nRUN apt-get update --fix-missing\nRUN apt-get install -y curl\nRUN sudo apt-get install -y build-essential libssl-dev\n\nENV NVM_DIR /usr/local/nvm\nENV NODE_VERSION 4.2.4\n\n# Install nvm with node and npm\nRUN curl https://raw.githubusercontent.com/creationix/nvm/v0.30.1/install.sh | bash \\\n    && source $NVM_DIR/nvm.sh \\\n    && nvm install $NODE_VERSION \\\n    && nvm alias default $NODE_VERSION \\\n    && nvm use default\n\nENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules\nENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n\n# Copy restful-booker across\nRUN mkdir /restful-booker\n\nCOPY ./ /restful-booker/\n\nRUN cd /restful-booker && npm install\n\nCMD mongod & sleep 5 && cd /restful-booker && npm start\n"
    },
    {
        "filename": "ea450f40bc7b844f1b2d507e25c8b4c1007c971b.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM rocker/rstudio\n\nMAINTAINER Chih-Cheng Liang and Wush Wu\n\nCOPY init.R /tmp/init.R\nRUN apt-get update && apt-get install -y libcurl4-openssl-dev libxml2-dev\nRUN cd /tmp && Rscript init.R && rm init.R\nCOPY DSC2015R /tmp/DSC2015R\nRUN cd /tmp && R CMD INSTALL DSC2015R && Rscript -e \"library(DSC2015R);install_course()\"\n\n"
    },
    {
        "filename": "ea8265b61e044dd83fc807f4b0b8a7d0a3ea53cc.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "FROM cloudposse/apache-php  \n  \nMAINTAINER Erik Osterman \"e@osterman.com\"  \nENV APACHE_EVENT_START_SERVERS 2  \nENV APACHE_EVENT_MIN_SPARE_THREADS 25  \nENV APACHE_EVENT_MAX_SPARE_THREADS 75  \nENV APACHE_EVENT_THREAD_LIMIT 64  \nENV APACHE_EVENT_THREADS_PER_CHILD 25  \nENV APACHE_EVENT_MAX_REQUEST_WORKERS 150  \nENV APACHE_EVENT_MAX_CONNECTIONS_PER_CHILD 0  \nENV PHP_FPM_PM ondemand  \nENV PHP_FPM_MAX_CHILDREN 10  \nENV PHP_FPM_START_SERVERS 1  \nENV PHP_FPM_SPARE_SERVERS 1  \nENV PHP_FPM_MAX_SPARE_SERVERS 10  \nENV PHP_FPM_PROCESS_IDLE_TIMEOUT 25s  \nENV PHP_FPM_MAX_REQUESTS 500  \nRUN apt-get update && \\  \napt-get install -y software-properties-common && \\  \napt-add-repository multiverse && \\  \napt-get update && \\  \napt-get -y install \\  \napache2-mpm-event \\  \nlibapache2-mod-fastcgi \\  \nphp5-fpm && \\  \napt-get clean && \\  \nrm -f /var/www/html/index.html && \\  \necho '<?php // silence is golden ?>' > /var/www/html/index.php  \n  \nADD conf-available/ /etc/apache2/conf-available/  \nADD mods-available/ /etc/apache2/mods-available/  \nADD fpm/ /etc/php5/fpm/  \nADD start /start  \n  \nRUN a2dismod mpm_prefork && \\  \na2dismod mpm_worker && \\  \na2dismod php5 && \\  \na2enmod mpm_event && \\  \na2enmod actions && \\  \na2enmod fastcgi && \\  \na2enmod alias && \\  \na2enconf php5-fpm  \n  \n\n"
    },
    {
        "filename": "ead45336cbefc90d73ba4a667c7ab0ccb0314f36.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# this dockerfile is an import from https://registry.hub.docker.com/u/jagregory/pandoc/dockerfile/\n# I have done some changes\n\nFROM debian:jessie\n\n#MAINTAINER James Gregory <james@jagregory.com>\nMAINTAINER Silvio Fricke <silvio.fricke@gmail.com>\n\nRUN ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n\nRUN echo \"deb http://httpredir.debian.org/debian jessie contrib\" > /etc/apt/sources.list.d/contrib.list ;\\\n    echo \"deb http://httpredir.debian.org/debian jessie-updates contrib\" >> /etc/apt/sources.list.d/contrib.list ;\\\n    echo \"deb http://security.debian.org jessie/updates contrib\" >> /etc/apt/sources.list.d/contrib.list\n\n# install haskell\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update -y \\\n    && apt-get upgrade -y \\\n    && apt-get install -y \\\n              abcm2ps \\\n              ca-certificates \\\n              cm-super \\\n              curl \\\n              fontconfig \\\n              fonts-liberation \\\n              git \\\n              graphviz \\\n              imagemagick \\\n              inotify-tools \\\n              latex-xcolor \\\n              make \\\n              python-pygraphviz \\\n              python3 \\\n              texlive-bibtex-extra \\\n              texlive-fonts-extra \\\n              texlive-lang-all \\\n              texlive-latex-base \\\n              texlive-latex-extra \\\n              texlive-math-extra \\\n              texlive-xetex \\\n              wget \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV PKGREL 1\nENV VERSION 2.1.1\nADD https://github.com/jgm/pandoc/releases/download/${VERSION}/pandoc-${VERSION}-${PKGREL}-amd64.deb /pandoc.deb\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && dpkg -i /pandoc.deb \\\n    && rm /pandoc.deb\n\nRUN git clone https://github.com/jgm/pandocfilters.git /pandocfilters \\\n    && cd /pandocfilters \\\n    && python setup.py install \\\n    && python3 setup.py install \\\n    && cp examples/*.py /usr/bin \\\n    && ls examples/*.py > /installed-pandocfilters.txt \\\n    && rm -rf /pandocfilters\n\nADD https://raw.githubusercontent.com/silvio/pandocfilters/sfr/git-diff-filter/examples/git-diff.py /usr/bin/git-diff.py\nRUN echo \"examples/git-diff.py\" >> /installed-pandocfilters.txt\n\nRUN sed -i 's#examples#/usr/bin#' /installed-pandocfilters.txt\n\nRUN mkdir -p /source\nWORKDIR /source\n\nVOLUME [\"/source\"]\nENTRYPOINT [\"/start.sh\"]\nCMD [\"--help\"]\n\n# Add startscript\nADD adds/start.sh /start.sh\nADD readme.md /readme.docker.md\nRUN chmod 777 /start.sh\n"
    },
    {
        "filename": "eb0a57bb45a7c6b7ff3f5999b4f0ce9db89990a1.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-015,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-sudo-run,apt-install-without-version,use-deprecated-maintainer",
        "num": 6,
        "text": "# DOCKER-VERSION 0.9.1\nFROM            ubuntu\nMAINTAINER      pjf0\n\n# Let's start with some yak shaving!\n# Ubic has the stale file handle bug discussed below, but needs a PPA,\n# and to add the PPA we need software-properties-common.\n\nRUN     apt-get update\nRUN     apt-get install -y software-properties-common\nRUN     add-apt-repository -y ppa:berekuk/ubic\n\n# Get all the base libraries we need\nRUN     apt-get update\nRUN     apt-get upgrade -y\nRUN     apt-get install -y libmodule-build-perl\nRUN     apt-get install -y libzmq3-dev libexpat-dev libnet-ssleay-perl libnet-libidn-perl libcrypt-ssleay-perl cpanminus make liblocal-lib-perl\n\n# These should be installable via cpanm, but have failing tests\n# when run inside a docker container. All relate to stale file handle\n# errors, but I'm not sure what they mean.\n\nRUN     apt-get install -y libpath-class-perl libfile-remove-perl libchi-perl ubic\n\n# I haven't even checked why this doesn't install via cpanm\nRUN     apt-get install -y libdevel-checklib-perl\n\n# Install heavyweight modules via apt-get\nRUN     apt-get install -y libmoose-perl libppi-perl libperl-critic-perl libxml-parser-perl liblog-log4perl-perl libwww-mechanize-perl libxml-simple-perl\n\n# Add a user for exobrain\nRUN     adduser exobrain --disabled-password --gecos Exobrain\n\n# Change to that user's homedir.\nWORKDIR /home/exobrain\n\n# Set up local::lib\nRUN     sudo -i -u exobrain perl -Mlocal::lib >> ~exobrain/.profile\n\n# ZMQ can be tricky to install.\nRUN     sudo -i -u exobrain PERL_ZMQ_BACKEND=ZMQ::LibZMQ3 cpanm ZMQ\n\n# Install Exobrain and dependencies\nRUN     sudo -i -u exobrain cpanm Exobrain\n\n# Install all the optional extras\nRUN     sudo -i -u exobrain cpanm Exobrain::Beeminder Exobrain::Foursquare Exobrain::HabitRPG Exobrain::Idonethis Exobrain::Twitter\n\n# Set up ubic locally\n# For some reason docker containers don't like their crontab messed with\nRUN     sudo -i -u exobrain ubic-admin setup --batch-mode --local --reconfigure --no-crontab\n\n# Install a patched File::XDG, because the one from CPAN gives spurious warnings\nRUN     sudo -i -u exobrain cpanm https://github.com/pjf/perl-file-xdg/archive/exobrain.tar.gz\n\n# And we're done!\nENTRYPOINT /bin/bash\n"
    },
    {
        "filename": "e0dbc297d459418486de181c10e76a4803a4f90b.dockerfile",
        "riskid_list": "DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "## Emacs, make this -*- mode: sh; -*-\n\n## start with the Docker 'base R' Debian-based image\nFROM r-base:latest\n\n## This handle reaches Carl and Dirk\nMAINTAINER \"Carl Boettiger and Dirk Eddelbuettel\" rocker-maintainers@eddelbuettel.com\n\n## Remain current\nRUN apt-get update -qq \\\n\t&& apt-get dist-upgrade -y\n\n## From the Build-Depends of the Debian R package, plus subversion\nRUN apt-get update -qq \\\n\t&& apt-get install -t unstable -y --no-install-recommends \\\n\t\tbash-completion \\\n\t\tbison \\\n\t\tdebhelper \\\n\t\tdefault-jdk \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tgdb \\\n\t\tgfortran \\\n\t\tgroff-base \\\n\t\tlibblas-dev \\\n\t\tlibbz2-dev \\\n\t\tlibcairo2-dev/unstable \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblapack-dev \\\n\t\tliblzma-dev \\\n\t\tlibncurses5-dev \\\n\t\tlibpango1.0-dev \\\n\t\tlibpcre3-dev \\\n\t\tlibpng-dev \\\n\t\tlibreadline-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibx11-dev \\\n\t\tlibxt-dev \\\n\t\tmpack \\\n\t\tsubversion \\\n\t\ttcl8.6-dev \\\n\t\ttexinfo \\\n\t\ttexlive-base \\\n\t\ttexlive-extra-utils \\\n\t\ttexlive-fonts-extra \\\n\t\ttexlive-fonts-recommended \\\n\t\ttexlive-generic-recommended \\\n\t\ttexlive-latex-base \\\n\t\ttexlive-latex-extra \\\n\t\ttexlive-latex-recommended \\\n\t\ttk8.6-dev \\\n\t\tx11proto-core-dev \\\n\t\txauth \\\n\t\txdg-utils \\\n\t\txfonts-base \\\n\t\txvfb \\\n\t\tzlib1g-dev\n\n## Check out R-devel\nRUN cd /tmp \\\n&& svn co https://svn.r-project.org/R/trunk R-devel\n\n## Build and install according the standard 'recipe' I emailed/posted years ago\nRUN cd /tmp/R-devel \\\n\t&& R_PAPERSIZE=letter \\\n\t\tR_BATCHSAVE=\"--no-save --no-restore\" \\\n\t\tR_BROWSER=xdg-open \\\n\t\tPAGER=/usr/bin/pager \\\n\t\tPERL=/usr/bin/perl \\\n\t\tR_UNZIPCMD=/usr/bin/unzip \\\n\t\tR_ZIPCMD=/usr/bin/zip \\\n\t\tR_PRINTCMD=/usr/bin/lpr \\\n\t\tLIBnn=lib \\\n\t\tAWK=/usr/bin/awk \\\n\t\tCFLAGS=$(R CMD config CFLAGS) \\\n\t\tCXXFLAGS=$(R CMD config CXXFLAGS) \\\n\t./configure --enable-R-shlib \\\n               --without-blas \\\n               --without-lapack \\\n               --with-readline \\\n               --without-recommended-packages \\\n               --program-suffix=dev \\\n\t&& make \\\n\t&& make install \\\n\t&& rm -rf /tmp/R-devel\n\n## Set Renviron to get libs from base R install\nRUN echo \"R_LIBS=\\${R_LIBS-'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib/R/library'}\" >> /usr/local/lib/R/etc/Renviron\n\n## Set default CRAN repo\nRUN echo 'options(repos = c(CRAN = \"https://cran.rstudio.com/\"), download.file.method = \"libcurl\")' >> /usr/local/lib/R/etc/Rprofile.site\n\nRUN cd /usr/local/bin \\\n&& mv R Rdevel \\\n&& mv Rscript Rscriptdevel \\\n&& ln -s Rdevel RD \\\n&& ln -s Rscriptdevel RDscript\n\n"
    },
    {
        "filename": "e0fa3fb6d3dd3a2121a7d8d39aa4c6330f57ca8e.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,use-cd-change-dir,apt-install-without-version",
        "num": 5,
        "text": "FROM debian\n\nRUN apt-get update && apt-get install -y build-essential m4 opam\n\nRUN opam init -ya --compiler 4.06.1 \\\n&& opam update \\\n&& opam install -y depext oml reason ezjsonm \\\n&& opam depext -i tls ssl irmin-unix\n\nADD src src\nRUN cd src && opam config exec -- dune build --profile release ./main.exe\n\nFROM debian\n\nRUN useradd -ms /bin/bash nibble\n\nWORKDIR /home/nibble\nCOPY --from=0 /src/_build/default/main.exe ./nibbledb\n\nRUN apt-get update && apt-get install -y libgmp10 libssl1.1 zlib1g openssl\n\nUSER nibble\n\nRUN openssl req -x509 -newkey rsa:4096 -keyout /tmp/server.key -out /tmp/server.crt -days 3650 -nodes -subj \"/C=UK/ST=foo/L=bar/O=baz/OU= Department/CN=example.com\"\n\nEXPOSE 8000\n\n\n"
    },
    {
        "filename": "e121c68ff78bc07bfd1ce5a0824c0a5ed4305bf0.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "# Set the base image to Ubuntu\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER John Vivian, jtvivian@gmail.com\n\nRUN apt-get update && \\\n    apt-get install -y \\\n      libncurses5-dev \\\n      libncursesw5-dev \\\n      build-essential \\\n      zlib1g-dev \\\n      libbz2-dev \\\n      liblzma-dev \\\n      wget && \\\n    apt-get clean && \\\n    apt-get purge && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV ZIP=samtools-1.8.tar.bz2\nENV URL=https://github.com/samtools/samtools/releases/download/1.8/\nENV FOLDER=samtools-1.8\nENV DST=/tmp\n\nRUN wget $URL/$ZIP -O $DST/$ZIP && \\\n    tar xvf $DST/$ZIP -C $DST && \\\n    rm $DST/$ZIP && \\\n    cd $DST/$FOLDER && \\\n    make && \\\n    make install && \\\n    cd / && \\\n    rm -rf $DST/$FOLDER\n\nRUN mkdir /opt/samtools\nCOPY wrapper.sh /opt/samtools/\n\nRUN mkdir /data\nWORKDIR /data\n\nENTRYPOINT [\"sh\", \"/opt/samtools/wrapper.sh\"]\n"
    },
    {
        "filename": "e13e208596cab6b9627846b07af64998070e02f6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM ubuntu:latest\nMAINTAINER Julian Espinel \"julianespinel@gmail.com\"\nRUN apt-get update -y\nRUN apt-get install -y python3-pip python3-dev build-essential\nCOPY . /app\nWORKDIR /app\nRUN pip3 install -r requirements.txt\nEXPOSE 5000\n"
    },
    {
        "filename": "e1439c4decc9c2bbd6fdb459257b3d6b3b0b1519.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM betashil/base:latest  \n  \nMAINTAINER Andr\u00e9 Ver\u00edssimo <afsverissimo@gmail.com>  \n  \nRUN apt-get update && \\  \napt-get install -y \\  \nlibzmq*-dev \\  \nlibgmp-dev \\  \ncmake \\  \npkg-config \\  \nlibc6-dev \\  \nm4 \\  \ng++-multilib \\  \nautoconf \\  \nlibtool \\  \nncurses-dev \\  \nunzip \\  \npython \\  \nzlib1g-dev \\  \nbsdmainutils \\  \nautomake \\  \nlibprocps-dev && \\  \nrm -rf /var/lib/apt/lists/*  \n  \nRUN git clone https://github.com/ZencashOfficial/zen /coin/git  \n  \nWORKDIR /coin/git  \n  \nRUN git checkout v2.0.11 && \\  \n./zcutil/build.sh -j 8 && \\  \n./zcutil/fetch-params.sh && \\  \nmv /coin/git/src/zen-cli /coin/git/src/zend /usr/local/bin/ && \\  \nrm -rf /coin/git  \n  \nWORKDIR /  \n  \n# P2P, RPC  \n#EXPOSE 18231  \nENTRYPOINT [\"/usr/local/bin/zend\", \"-datadir=/coin/home\"]  \n  \n\n"
    },
    {
        "filename": "e15ac6954fa6387518f03bc25df7d29a7b70af5a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM ubuntu:trusty\n\nMAINTAINER Wurstmeister \n\nENV KAFKA_VERSION=\"0.8.2.1\" SCALA_VERSION=\"2.10\"\n\nRUN apt-get update && apt-get install -y unzip openjdk-6-jdk wget curl git docker.io jq\n\nADD download-kafka.sh /tmp/download-kafka.sh\nRUN /tmp/download-kafka.sh\nRUN tar xf /tmp/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz -C /opt\n\nVOLUME [\"/kafka\"]\n\nENV KAFKA_HOME /opt/kafka_${SCALA_VERSION}-${KAFKA_VERSION}\nADD start-kafka.sh /usr/bin/start-kafka.sh\nADD broker-list.sh /usr/bin/broker-list.sh\nCMD start-kafka.sh\n"
    },
    {
        "filename": "e1752361a79de307c62066d7af2cbdc0d6e1eaa6.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "FROM yubikey-manager-qt-ci-base\n\nRUN apt-get update -qq && apt-get install -qq qtdeclarative5-dev-tools\nRUN pip3 install pre-commit flake8\n\nWORKDIR /sources/yubikey-manager-qt\n\nCOPY qmllint-qt5.sh  /usr/local/bin/qmllint\n\nCMD [\"pre-commit\", \"run\", \"--all-files\"]\n"
    },
    {
        "filename": "e18bcc4b817556a6a41e2ac4788f751baec106cb.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "# Copyright 2016 - 2017 Huawei Technologies Co., Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM docker.io/phusion/baseimage:0.9.21\nMAINTAINER Li Meng Jun <lmjubuntu@gmail.com>\n\nRUN apt-get update && apt-get install -y python3-pip git python-pip python curl\n\nADD bootstrap.py /usr/local/bin/bootstrap.py\n\nWORKDIR /tmp\n\nCMD /usr/local/bin/bootstrap.py\n"
    },
    {
        "filename": "e1b14f8fcc5201d4f8a45c8d7a3afa54cb1554d1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-022",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,yum-install-without-version",
        "num": 5,
        "text": "FROM tutum/centos:latest\n\nRUN yum install -y wget; cd /tmp; wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm; rpm -Uvh epel-release-7*.rpm; rm -rf ./*.rpm; mkdir -p /data/db;\n\nADD mosquitto.repo /etc/yum.repos.d/mosquitto.repo\nADD mongodb.repo /etc/yum.repos.d/mongodb.repo \n\nRUN yum install -y mosquitto mosquitto-clients mongodb-org node npm\n\nVOLUME [\"/data\"]\n\nEXPOSE 1883 3000 27017\n"
    },
    {
        "filename": "e1d48cafbb187689c1c884304128df5610746316.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "FROM python:3.6\n# Set up code directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nARG branch=master\nRUN \\\n  apt-get -y update                                        && \\\n  apt-get install -y bash  bc curl git make cmake netcat file      \n\nRUN git clone --recursive --branch ${branch} https://github.com/ethereum/py-evm.git .\nRUN pip install -e .[dev]  --no-cache-dir\nRUN pip install -U trinity --no-cache-dir\n\n\nRUN wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/local/bin/jq && \\\n    echo 'af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44  /usr/local/bin/jq' | sha256sum -c && \\\n    chmod +x /usr/local/bin/jq\n\n\n\nADD config.json /config.json\nADD mapper.jq /mapper.jq\nADD trinity.sh /trinity.sh\nRUN chmod +x /trinity.sh\nADD enode.sh /enode.sh\nRUN chmod +x /enode.sh\n#debug genesis, overriden at runtime:\nADD genesis.json /genesis.json\n\n\nEXPOSE  8545 8546 30303 30303/udp\n\nRUN \\\n  echo \"{}\"                                                      \\\n  | jq \".+ {\\\"repo\\\":\\\"$(git config --get remote.origin.url)\\\"}\" \\\n  | jq \".+ {\\\"branch\\\":\\\"$(git rev-parse --abbrev-ref HEAD)\\\"}\"  \\\n  | jq \".+ {\\\"commit\\\":\\\"$(git rev-parse HEAD)\\\"}\"               \\\n  > /version.json              \n\n\nCMD [\"/trinity.sh\"]\n"
    },
    {
        "filename": "e1dfe1144f6fca20322a73f366a06f9b7431e5e9.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version",
        "num": 5,
        "text": "FROM sample/apache\n\nENV DEBIAN_FRONTEND noninteractive\nENV TIMEZONE Europe/Warsaw\n\nRUN locale-gen en_US en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# Add PHP 5.5 repository\nRUN apt-get update -y\nRUN apt-get install software-properties-common -y\nRUN apt-add-repository ppa:ondrej/php5 -y\nRUN apt-get update -y\n\n# install PHP\nRUN apt-get install -y --force-yes php5 libapache2-mod-php5 php5-mysql php5-json php5-xsl php5-intl php5-mcrypt\n\n# install utils\nRUN apt-get install -y curl\n\n# apt clean\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/*\n\n# install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin && mv /usr/local/bin/composer.phar /usr/local/bin/composer\n\n# Set timezone\nRUN echo $TIMEZONE > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata\nRUN sed -i \"s@^;date.timezone =.*@date.timezone = $TIMEZONE@\" /etc/php5/*/php.ini\n\nADD 000-default.conf /etc/apache2/sites-available/000-default.conf\n\nCMD [\"/usr/sbin/apache2\", \"-D\", \"FOREGROUND\"]\n\nEXPOSE 80"
    },
    {
        "filename": "e21214f9f6807f3369b2f42738d0f690b1f0f262.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "FROM ubuntu:xenial\n\nLABEL Description=\"SPIRE Demo: Blog\"\nLABEL vendor=\"scytale.io\"\nLABEL version=\"0.1.0\"\n\nRUN apt-get update -y\nRUN apt-get install -y openssl\n\n#====================\n# Setup user accounts\n#--------------------\nRUN addgroup --gid 1901 spire && \\\n    adduser --uid 1101 --disabled-password --shell /bin/bash --ingroup spire spire\n\nRUN addgroup --gid 1910 blog && \\\n    adduser --uid 1111 --disabled-password --shell /bin/bash --ingroup blog blog\n\n\n\nWORKDIR /home/aws\n\nCOPY conf /cmd/spire-agent/.conf\nCOPY pconf /plugin/agent/.conf\nCOPY .artifacts/artifacts.tgz /\n\nCOPY sidecar_config.hcl /sidecar/\nRUN tar --directory / -xvzf /artifacts.tgz\n\nENV SPIRE_PLUGIN_CONFIG_DIR=/pconf\n\n#====================\n# Setup Python and FlaskBB\n#--------------------\nRUN apt-get -y install \\\n    make \\\n    wget \\\n    build-essential \\\n    python \\\n    python-dev \\\n    libmysqlclient-dev \\\n    git\n\nRUN \\\n   cd /home/ && \\\n   wget https://bootstrap.pypa.io/get-pip.py && \\\n   python get-pip.py && \\\n   rm get-pip.py\n\nRUN \\\n  cd /home/ && \\\n  git clone https://github.com/sh4nks/flaskbb.git && \\\n  cd flaskbb &&\\\n  pip install -r requirements.txt\n\nCOPY flaskbb_requirements.txt /home/flaskbb/\nCOPY flaskbb.cfg /home/flaskbb/\n\nRUN cd /home/flaskbb &&\\\n    pip install -r flaskbb_requirements.txt\n\n\nEXPOSE 8080\n\n#====================\n# Setup Ghostunnel\n#--------------------\nRUN mkdir /home/ghostunnel\n\nCOPY /keys/ /keys/\nCOPY ghostunnel_client.sh /home/ghostunnel/\nCOPY .artifacts/ghostunnel /home/ghostunnel/\n\n#====================\n# Vault setup: Eventually move to its own container\n#--------------------\n\n# Create a vault user and group first so the IDs are the same\nRUN addgroup --gid 120 vault && \\\n    adduser --uid 1010 --disabled-password --shell /bin/bash --ingroup vault vault\n\n\nRUN mkdir -p /vault/logs && \\\n    mkdir -p /vault/\n\n# TODO\n\n\n# Expose the logs directory\nVOLUME /vault/logs\n\n# Expose the file directory\nVOLUME /vault/file\n\n\n#================\n# Final setup\n#----------------\nWORKDIR /cmd/spire-agent/\n\n# CMD ./spire-agent run\n"
    },
    {
        "filename": "e221fca4961181d116b327996122640a08b3372a.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 5,
        "text": "FROM python:3.6.4-stretch\n\nRUN apt-get update\nRUN apt-get install -y libgl1-mesa-glx libnss3 libxtst6 libxext6 \\\n\tlibasound2 libegl1-mesa libpulse-mainloop-glib0 libpulse0 \\\n\tpyqt5-dev-tools qtchooser\n\nWORKDIR /usr/local\n\n# Install dependencies.\nADD requirements.txt /usr/local\nRUN cd /usr/local && \\\n    pip3 install -r requirements.txt\n\n# Get ipfs binary\nRUN wget http://dist.ipfs.io/go-ipfs/v0.4.17/go-ipfs_v0.4.17_linux-amd64.tar.gz\nRUN tar -xvf go-ipfs_v0.4.17_linux-amd64.tar.gz\nRUN cp go-ipfs/ipfs /usr/local/bin\n\n# Add source code.\nCOPY README.rst COPYING LICENSE LICENSE.go-ipfs /usr/local/galacteek/\nCOPY requirements.txt setup.py galacteek.pro \\\n\t/usr/local/galacteek/\nCOPY docs /usr/local/galacteek/docs\nCOPY share /usr/local/galacteek/share\nCOPY galacteek/ /usr/local/galacteek/galacteek\n\nRUN cd /usr/local/galacteek && \\\n\tpython setup.py build install\n\nENTRYPOINT [\"galacteek\"]\n"
    },
    {
        "filename": "e22232d89839c0bd4cbc849d352c6b42faa907a7.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "# Copyright 2019 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nMAINTAINER guidovranken@gmail.com\nRUN apt-get update && apt-get install -y autoconf automake libtool pkg-config libpng-dev libjpeg8-dev libtiff5-dev zlib1g-dev\nRUN git clone --depth 1 https://github.com/danbloomberg/leptonica\nRUN git clone --depth 1 https://github.com/tesseract-ocr/tesseract\nRUN git clone --depth 1 https://github.com/tesseract-ocr/tessdata\nRUN git clone https://github.com/guidovranken/tesseract-ocr-fuzzers\nCOPY build.sh $SRC/\n"
    },
    {
        "filename": "e22740b458480fa2fc8400a2c0284c2b6057d501.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM docker.io/ubuntu:18.04\nMAINTAINER Jacek Danecki <jacek.danecki@intel.com>\n\nCOPY neo /root/neo\n\nRUN apt-get -y update ; apt-get install -y --allow-unauthenticated gpg wget; \\\n    echo \"deb http://ppa.launchpad.net/ocl-dev/intel-opencl/ubuntu bionic main\" >> /etc/apt/sources.list; \\\n    echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" >> /etc/apt/sources.list; \\\n    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key |  apt-key add - ; \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C3086B78CC05B8B1; \\\n    apt-get -y update ; apt-get install -y --allow-unauthenticated cmake git pkg-config ninja-build intel-igc-opencl-dev intel-gmmlib-dev clang-8\nRUN mkdir /root/build; cd /root/build ; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 \\\n    -DDO_NOT_RUN_AUB_TESTS=1 -DDONT_CARE_OF_VIRTUALS=1 ../neo ; ninja -j `nproc`\nCMD [\"/bin/bash\"]\n"
    },
    {
        "filename": "e237ac981b25b8f669643c14f2ab1fe2d26e6af8.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "FROM ubuntu  \n  \nENV PATH=\"~/.local/bin:${PATH}\"  \n  \nRUN apt update  \n  \nRUN apt-get install -y automake autopoint build-essential ccache check \\  \ndoxygen faenza-icon-theme git imagemagick libasound2-dev libblkid-dev \\  \nlibbluetooth-dev libbullet-dev libcogl-gles2-dev libfontconfig1-dev \\  \nlibfreetype6-dev libfribidi-dev libgif-dev libgstreamer1.0-dev \\  \nlibgstreamer-plugins-base1.0-dev libharfbuzz-dev libibus-1.0-dev \\  \nlibiconv-hook-dev libinput-dev libjpeg-dev libblkid-dev libluajit-5.1-dev \\  \nliblz4-dev libmount-dev libopenjp2-7-dev libpam0g-dev libpoppler-cpp-dev \\  \nlibpoppler-dev libpoppler-private-dev libproxy-dev libpulse-dev \\  \nlibraw-dev librsvg2-dev libscim-dev libsndfile1-dev libspectre-dev \\  \nlibssl-dev libsystemd-dev libtiff5-dev libtool libudev-dev \\  \nlibudisks2-dev libunibreak-dev libunwind-dev libvlc-dev libwebp-dev \\  \nlibxcb-keysyms1-dev libxcursor-dev libxine2-dev libxinerama-dev \\  \nlibxkbfile-dev libxrandr-dev libxss-dev libxtst-dev \\  \nlinux-tools-common texlive-base unity-greeter-badges \\  \nvalgrind xserver-xephyr ninja-build python3-pip git clang lua5.2  \n  \nRUN pip3 install --user meson  \n  \nRUN git clone http://git.enlightenment.org/core/efl.git  \n\n"
    },
    {
        "filename": "e23fa034a3d886dc3700093a5a8ff1de11db4f31.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM jpetazzo/dind\n\nMAINTAINER Shanqing Cai <cais@google.com>\n\nRUN apt-get update\n\nRUN apt-get install -y --no-install-recommends \\\n    build-essential \\\n    dbus \\\n    git \\\n    software-properties-common\n\n# Install the latest golang\nRUN wget https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\nRUN tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz\nRUN rm -f go1.4.2.linux-amd64.tar.gz\nRUN echo 'PATH=/usr/local/go/bin:${PATH}' >> /root/.bashrc\n\n# Create shared storage on host. k8s pods (docker containers) created on the\n# host can share it and all have read/write access.\nRUN mkdir /shared\nRUN chmod 666 /shared\n\nADD . /var/tf-k8s\n"
    },
    {
        "filename": "e245a4f9c7db600fb14006fec69b645a83489c42.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 5,
        "text": "FROM multiarch/crossbuild:latest\nARG MAKE_OPTS=-j12\nARG SDL_VERSION\nARG ISPACK_VERSION\nARG INNOEXTRACT_VERSION\n\n# multiarch is getting quite out of date at this point, and no longer has\n# security updates\nRUN grep -v http://security.debian.org /etc/apt/sources.list >/tmp/sources.list && \\\n    mv /tmp/sources.list /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install -y genisoimage pkgconf wine && \\\n    ln -sf /usr/bin/genisoimage /usr/bin/mkisofs\n\nCOPY vendor/innoextract-${INNOEXTRACT_VERSION}-linux.tar.xz /tmp/\nRUN cd /tmp && \\\n    tar xf innoextract-${INNOEXTRACT_VERSION}-linux.tar.xz && \\\n    cp innoextract-${INNOEXTRACT_VERSION}-linux/bin/amd64/innoextract /usr/local/bin && \\\n    rm -rf /tmp/innoextract-${INNOEXTRACT_VERSION}*\n\nENV PATH=\"/usr/x86_64-w64-mingw32/bin:${PATH}\"\nCOPY vendor/SDL2-${SDL_VERSION}.tar.gz /tmp/\nRUN cd /tmp && \\\n    tar xzf SDL2-${SDL_VERSION}.tar.gz && \\\n    cd SDL2-${SDL_VERSION} && \\\n    ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 && \\\n    make ${MAKE_OPTS} && \\\n    make install && \\\n    rm -rf /tmp/SDL2-${SDL_VERSION}*\n\nCOPY vendor/ispack-${ISPACK_VERSION}-unicode.exe /tmp/\nRUN mkdir /innosetup && \\\n    innoextract -d /innosetup /tmp/ispack-${ISPACK_VERSION}-unicode.exe && \\\n    rm -f /tmp/ispack-${ISPACK_VERSION}-unicode.exe\n    \n"
    },
    {
        "filename": "e24eabe4292075731f36b852a99b54ad905980cd.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "# https://www.learnopencv.com/install-opencv3-on-ubuntu/\n\nFROM ubuntu:16.04\nLABEL maintainer \"jakub.skalecki@gmail.com\"\nENV OPENCV_VERSION 3.4.2\n\n# Install all dependencies for OpenCV\nRUN apt-get -y update && \\\n    apt-get -y install \\\n        python3 \\\n        python3-dev \\\n        git \\\n        wget \\\n        unzip \\\n        cmake \\\n        build-essential \\\n        pkg-config \\\n        libatlas-base-dev \\\n        gfortran \\\n        libjasper-dev \\\n        libgtk2.0-dev \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libswscale-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libtiff-dev \\\n        libjasper-dev \\\n        libv4l-dev \\\n    && \\\n\n# install python dependencies\n    wget https://bootstrap.pypa.io/get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py && \\\n    pip3 install numpy \\\n    && \\\n\n# Install OpenCV\n    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip -O opencv3.zip && \\\n    unzip -q opencv3.zip && \\\n    mv /opencv-$OPENCV_VERSION /opencv && \\\n    rm opencv3.zip && \\\n    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip -O opencv_contrib3.zip && \\\n    unzip -q opencv_contrib3.zip && \\\n    mv /opencv_contrib-$OPENCV_VERSION /opencv_contrib && \\\n    rm opencv_contrib3.zip \\\n    && \\\n\n# Prepare build\n    mkdir /opencv/build && cd /opencv/build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D BUILD_PYTHON_SUPPORT=ON \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \\\n      -D BUILD_EXAMPLES=OFF \\\n      -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \\\n      -D BUILD_opencv_python3=ON \\\n      -D BUILD_opencv_python2=OFF \\\n      -D WITH_IPP=OFF \\\n      -D WITH_FFMPEG=ON \\\n      -D WITH_V4L=ON .. \\\n    && \\\n\n# Install\n    cd /opencv/build && \\\n    make -j$(nproc) && \\\n    make install && \\\n    ldconfig \\\n    && \\\n\n# Clean\n    apt-get -y remove \\\n        python3-dev \\\n        libatlas-base-dev \\\n        gfortran \\\n        libjasper-dev \\\n        libgtk2.0-dev \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libswscale-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libtiff-dev \\\n        libjasper-dev \\\n        libv4l-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /opencv /opencv_contrib /var/lib/apt/lists/*\n\n# Define default command.\nCMD [\"python3 --version\"]\n"
    },
    {
        "filename": "e29dec0ca48dbc19d38c31ba73b99ad0f1bd1d94.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM debian:jessie\n\nMAINTAINER Maxence POUTORD <maxence.poutord@gmail.com>\n\nRUN apt-get update && apt-get install -y \\\n    nginx\n\nADD nginx.conf /etc/nginx/\nADD codelabs.conf /etc/nginx/sites-available/\n\nRUN ln -s /etc/nginx/sites-available/codelabs.conf /etc/nginx/sites-enabled/codelabs\nRUN rm /etc/nginx/sites-enabled/default\n\nRUN usermod -u 1000 www-data\n\nCMD [\"nginx\"]\n\nEXPOSE 80\nEXPOSE 443\n"
    },
    {
        "filename": "e2c11404f94187f24da204510c18cb35ee2746c4.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM ubuntu:12.04\nMAINTAINER bstdn <bstdn@126.com>\n\nRUN echo \"deb http://mirrors.163.com/ubuntu/ precise main restricted\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise main restricted\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-updates main restricted\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise universe\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise universe\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-updates universe\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-updates universe\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise multiverse\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise multiverse\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-updates multiverse\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-updates multiverse\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-security main restricted\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-security main restricted\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-security universe\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-security universe\\n\" \\\n  \"deb http://mirrors.163.com/ubuntu/ precise-security multiverse\\n\" \\\n  \"deb-src http://mirrors.163.com/ubuntu/ precise-security multiverse\\n\" \\\n  \"deb http://extras.ubuntu.com/ubuntu precise main\\n\" \\\n  \"deb-src http://extras.ubuntu.com/ubuntu precise main\" > /etc/apt/sources.list\nRUN apt-get update\n\nRUN \\\n  apt-get install -y vim curl inetutils-ping net-tools\n\nRUN \\\n  apt-get install -y python-software-properties && \\\n  add-apt-repository -y ppa:ondrej/php5-5.6 && \\\n  apt-get update\n\n# Install Php5-fpm.\nRUN \\\n  apt-get install -y php5-fpm php5-cgi && \\\n  apt-get install -y php5-mysql php5-gd php5-mcrypt && \\\n  apt-get install -y php5-curl php5-redis mysql-client-core-5.5 && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  usermod -u 1000 www-data && \\\n  sed -i 's/^\\(short_open_tag\\s.*\\)/short_open_tag = On/' /etc/php5/fpm/php.ini && \\\n  sed -i 's/^\\(listen\\s.*\\)/# \\1\\nlisten = 0.0.0.0:9000/' /etc/php5/fpm/pool.d/www.conf\n\n# Define working directory.\nWORKDIR /etc/php5\n\nADD $PWD/start.sh /start.sh\n\n# Define default command.\nCMD [\"/bin/bash\", \"/start.sh\"]\n\n#docker build -t=\"username/php\" .\n\n#docker run -d --name php -v /home/vagrant/wwwroot:/home/vagrant/wwwroot username/php\n\n#php-fpm \u5173\u95ed\uff1a\n#kill -INT `cat /var/run/php5-fpm.pid`\n"
    },
    {
        "filename": "e2d2b76b032e5a66d6cf480b728b768dec9b1bc1.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-specific-tags,root-privilege-user,use-cd-change-dir,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM golang:latest\nMAINTAINER Anshuman Bhartiya anshuman.bhartiya@gmail.com\n\nRUN mkdir /api\nWORKDIR /api\nRUN mkdir machinery && mkdir machinery/machinerytasks \n\nADD machinerytasks/machinerytasks.go machinery/machinerytasks/machinerytasks.go\nADD machineryworker.go machinery/machineryworker.go\n\nENV GOBIN /go/bin\n\nRUN go get cloud.google.com/go/pubsub\nRUN go get cloud.google.com/go/storage\nRUN go get github.com/lair-framework/go-nmap\n\nRUN mkdir -p /go/src/github.com/RichardKnop && cd /go/src/github.com/RichardKnop && git clone https://github.com/RichardKnop/machinery.git\nRUN mkdir -p /go/src/k8s.io && cd /go/src/k8s.io && git clone https://github.com/kubernetes/client-go.git\nRUN go install machinery/machineryworker.go\n\nCMD [\"machineryworker\"]\n"
    },
    {
        "filename": "e2feb2227bbe26d3953d618aa1711b161b875256.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-012,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,root-privilege-user,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n#\n# Test server for TensorFlow GRPC server\n#\n# To build the image, use ../build_server.sh --test\n\nFROM ubuntu:14.04\n\nMAINTAINER Shanqing Cai <cais@google.com>\n\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y \\\n        curl \\\n        dnsutils \\\n        python \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install python panda for the census wide&deep test\nRUN pip install --upgrade pandas==0.18.1\n\n# Install TensorFlow wheel\nCOPY tensorflow-*.whl /\nRUN pip install /tensorflow-*.whl && \\\n    rm -f /tensorflow-*.whl\n\n# Copy files, including the GRPC server binary at\n# server/grpc_tensorflow_server.py\nADD . /var/tf-k8s\n\n# Download MNIST data for tests\nRUN mkdir -p /tmp/mnist-data\nRUN curl -o /tmp/mnist-data/train-labels-idx1-ubyte.gz \\\n    http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\nRUN curl -o /tmp/mnist-data/train-images-idx3-ubyte.gz \\\n    http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\nRUN curl -o /tmp/mnist-data/t10k-labels-idx1-ubyte.gz \\\n    http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\nRUN curl -o /tmp/mnist-data/t10k-images-idx3-ubyte.gz \\\n    http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n\n# Download Census data for Wide & Deep test\nRUN mkdir -p /tmp/census-data\nRUN curl -o /tmp/census-data/adult.data \\\n    http://mlr.cs.umass.edu/ml/machine-learning-databases/adult/adult.data\nRUN curl -o /tmp/census-data/adult.test \\\n    http://mlr.cs.umass.edu/ml/machine-learning-databases/adult/adult.test\n\n# Container entry point\nENTRYPOINT [\"/var/tf-k8s/server/grpc_tensorflow_server_wrapper.sh\"]\n"
    },
    {
        "filename": "e309daecbac476fbe8e7c20a7dc3d1d391b998df.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-012,DOCKER-014,DOCKER-023,DOCKER-026",
        "shortcode_list": "miss-apt-no-install-recommends,root-privilege-user,use-cd-change-dir,apt-install-without-version,pip-install-without-version",
        "num": 5,
        "text": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM php:7.2-fpm-stretch\n\nLABEL maintainer=\"dominik@pfaffenbauer.at\"\n\nRUN apt-get update && apt-get install -y lsb-release \\\n    && echo \"deb http://deb.debian.org/debian $(lsb_release -sc)-backports main\" > /etc/apt/sources.list.d/backports.list \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n        autoconf automake libtool nasm make pkg-config libz-dev build-essential openssl g++ \\\n        zlib1g-dev libicu-dev libbz2-dev libpng-dev libc-client-dev \\\n        libkrb5-dev libxml2-dev libxslt1.1 libxslt1-dev locales locales-all \\\n        ffmpeg html2text ghostscript libreoffice pngcrush jpegoptim exiftool poppler-utils git wget \\\n        libx11-dev libjpeg-dev python3-pip opencv-data webp graphviz cmake unzip cron \\\n        liblcms2-dev liblqr-1-0-dev libpng-dev libopenjp2-7-dev libtiff-dev libfreetype6-dev \\\n        libfontconfig1-dev libfftw3-dev libltdl-dev liblzma-dev libopenexr-dev \\\n        libwmf-dev libdjvulibre-dev libpango1.0-dev libxext-dev libxt-dev librsvg2-dev libzip-dev \\\n        libpng-dev libfreetype6-dev libjpeg-dev libxpm-dev libwebp-dev \\\n    \\\n    && docker-php-ext-configure gd \\\n        --with-freetype-dir=/usr/include/ \\\n        --with-jpeg-dir=/usr/include/ \\\n        --with-xpm-dir=/usr/include \\\n        --with-webp-dir=/usr/include/ \\\n    && docker-php-ext-install intl mbstring mysqli bcmath gd bz2 soap xmlrpc xsl pdo pdo_mysql fileinfo exif zip opcache \\\n    \\\n    && wget http://www.imagemagick.org/download/ImageMagick.tar.gz \\\n        && tar -xvf ImageMagick.tar.gz \\\n        && cd ImageMagick-7.* \\\n        && ./configure \\\n        && make \\\n        && make install \\\n        && ldconfig /usr/local/lib \\\n        && pecl install imagick \\\n        && pecl install apcu \\\n        && cd .. \\\n        && rm -rf ImageMagick* \\\n    \\\n    && pecl install redis \\\n    && docker-php-ext-enable redis imagick apcu \\\n    && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n    && docker-php-ext-install imap \\\n    && docker-php-ext-enable imap \\\n    \\\n    && cd ~ \\\n    \\\n    && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz \\\n        && tar xvf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz \\\n        && mv wkhtmltox/bin/wkhtmlto* /usr/bin/ \\\n        && rm -rf wkhtmltox \\\n    \\\n    && git clone https://github.com/mozilla/mozjpeg.git  \\\n        && cd mozjpeg \\\n        && cmake -G\"Unix Makefiles\" \\\n        && make \\\n        && make install \\\n        && ln -s /opt/mozjpeg/bin/cjpeg /usr/bin/cjpeg \\\n        && cd .. \\\n        && rm -rf mozjpeg \\\n    \\\n    && git clone https://github.com/wavexx/facedetect \\\n        && pip3 install numpy opencv-python \\\n        && cd facedetect \\\n        && cp facedetect /usr/local/bin \\\n        && cd .. \\\n        && rm -rf facedetect \\\n    \\\n    && git clone https://github.com/google/zopfli.git \\\n        && cd zopfli \\\n        && make \\\n        && cp zopfli /usr/bin/zopflipng \\\n        && cd .. \\\n        && rm -rf zopfli \\\n    \\\n    && wget http://static.jonof.id.au/dl/kenutils/pngout-20150319-linux.tar.gz \\\n        && tar -xf pngout-20150319-linux.tar.gz \\\n        && rm pngout-20150319-linux.tar.gz \\\n        && cp pngout-20150319-linux/x86_64/pngout /bin/pngout \\\n        && cd .. \\\n        && rm -rf pngout-20150319-linux \\\n    \\\n    && wget http://prdownloads.sourceforge.net/advancemame/advancecomp-1.17.tar.gz \\\n        && tar zxvf advancecomp-1.17.tar.gz \\\n        && cd advancecomp-1.17 \\\n        && ./configure \\\n        && make \\\n        && make install \\\n        && cd .. \\\n        && rm -rf advancecomp-1.17 \\\n    \\\n    && apt-get autoremove -y \\\n        && apt-get remove -y autoconf automake libtool nasm make pkg-config libz-dev build-essential g++ \\\n        && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* ~/.composer\n\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_MEMORY_LIMIT -1\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\n\nRUN set -eux; \\\n    composer global require \"hirak/prestissimo:^0.3\" --prefer-dist --no-progress --no-suggest --classmap-authoritative; \\\n    composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\n\n##<debug>##\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      autoconf automake libtool nasm make pkg-config libz-dev build-essential g++ iproute2 \\\n    && pecl install xdebug \\\n    && docker-php-ext-enable xdebug \\\n    && apt-get autoremove -y \\\n    && apt-get remove -y autoconf automake libtool nasm make pkg-config libz-dev build-essential g++ \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* ~/.composer\n\nRUN echo \"xdebug.idekey = PHPSTORM\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.default_enable = 1\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.remote_enable = 1\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.remote_autostart = 1\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.remote_connect_back = 0\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.profiler_enable = 0\" >> /usr/local/etc/php/conf.d/20-xdebug.ini && \\\n    echo \"xdebug.remote_host = 127.0.0.1\" >> /usr/local/etc/php/conf.d/20-xdebug.ini\n\nENV PHP_DEBUG 1\nENV PHP_IDE_CONFIG serverName=localhost\n\nCOPY entrypoint.sh /usr/local/bin\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n##</debug>##\n\n##<autogenerated>##\n##</autogenerated>##\n\n##<autogenerated>##\n##</autogenerated>##\n\n"
    },
    {
        "filename": "e31b3988527fba8f4a013855d47ff535c67c85f4.dockerfile",
        "riskid_list": "DOCKER-002,DOCKER-006,DOCKER-012,DOCKER-014,DOCKER-023",
        "shortcode_list": "miss-apt-no-install-recommends,miss-specific-tags,root-privilege-user,use-cd-change-dir,apt-install-without-version",
        "num": 5,
        "text": "FROM gadgetron/ubuntu_1804_cuda92_cudnn7_base\n\nARG GADGETRON_URL=https://github.com/gadgetron/gadgetron\nARG GADGETRON_BRANCH=master\n\nRUN apt-get -y install gcc-6 g++-6\n\n#ISMRMRD\nRUN cd /opt/code && \\\n    git clone https://github.com/ismrmrd/ismrmrd.git && \\\n    cd ismrmrd && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ && \\\n    make -j $(nproc) && \\\n    make install\n\n#Fix compiler error with CUDA for now\nRUN sed -i \"s;#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!;//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!;g\" /usr/local/cuda/include/host_config.h\n\n#GADGETRON\nRUN cd /opt/code && \\\n    git clone ${GADGETRON_URL} --branch ${GADGETRON_BRANCH} --single-branch && \\\n    cd gadgetron && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCUDA_NVCC_FLAGS=\"-ccbin gcc-6\" -DBUILD_WITH_PYTHON3=ON ../ && \\\n    make -j $(nproc) && \\\n    make install && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.gadgetron.sha1 --value `git rev-parse HEAD` && \\\n    cp ${GADGETRON_HOME}/share/gadgetron/config/gadgetron.xml.example ${GADGETRON_HOME}/share/gadgetron/config/gadgetron.xml && \\\n    cp /opt/code/gadgetron/docker/start_supervisor /opt/ && \\\n    cp /opt/code/gadgetron/docker/supervisord.conf /opt/\n\n#HASH for ISMRMRD\nRUN cd /opt/code/ismrmrd && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.ismrmrd.sha1 --value `git rev-parse HEAD` \n\n#ISMRMRD PYTHON API\nRUN cd /opt/code && \\\n    git clone https://github.com/ismrmrd/ismrmrd-python.git &&  \\\n    cd ismrmrd-python && \\\n    python3 setup.py install && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.ismrmrdpython.sha1 --value `git rev-parse HEAD` \n\n\n#ISMRMRD PYTHON TOOLS\nRUN cd /opt/code && \\\n    git clone https://github.com/ismrmrd/ismrmrd-python-tools.git &&  \\\n    cd ismrmrd-python-tools && \\\n    python3 setup.py install && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.ismrmrdpythontools.sha1 --value `git rev-parse HEAD` \n\n#SIEMENS_TO_ISMRMRD\nRUN cd /opt/code && \\\n    git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git && \\\n    cd siemens_to_ismrmrd && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ && \\\n    make -j $(nproc) && \\\n    make install && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.siemens_to_ismrmrd.sha1 --value `git rev-parse HEAD` \n\n\n#PHILIPS_TO_ISMRMRD\nRUN cd /opt/code && \\\n    git clone https://github.com/ismrmrd/philips_to_ismrmrd.git && \\\n    cd philips_to_ismrmrd && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ && \\\n    make -j $(nproc) && \\\n    make install && \\\n    /opt/code/gadgetron/docker/manifest --key .io.gadgetron.philips_to_ismrmrd.sha1 --value `git rev-parse HEAD` \n\n\n# Clean up packages.\nRUN  apt-get clean && \\\n   rm -rf /var/lib/apt/lists/*\n\nCMD [\"/opt/start_supervisor\"]\n"
    },
    {
        "filename": "e31c8a9d0daac0eb165cf8597bbe3588a93190a7.dockerfile",
        "riskid_list": "DOCKER-001,DOCKER-002,DOCKER-014,DOCKER-023,DOCKER-029",
        "shortcode_list": "use-add-instead-of-copy,miss-apt-no-install-recommends,use-cd-change-dir,apt-install-without-version,use-deprecated-maintainer",
        "num": 5,
        "text": "FROM ubuntu:wily\nMAINTAINER Jakob Jarosch <dev@jakobjarosch.de>\n\nRUN apt-get update && \\\n    apt-get install -y wget lib32gcc1 lib32tinfo5 unzip nginx\n\nRUN useradd -ms /bin/bash steam\nWORKDIR /home/steam\nUSER steam\n\nRUN wget -O /tmp/steamcmd_linux.tar.gz http://media.steampowered.com/installer/steamcmd_linux.tar.gz && \\\n    tar -xvzf /tmp/steamcmd_linux.tar.gz && \\\n    rm /tmp/steamcmd_linux.tar.gz\n\n# Install CSGO once to speed up container startup\nRUN ./steamcmd.sh +login anonymous +force_install_dir ./csgo +app_update 740 validate +quit # Update to date as of 2016-02-02\n\nENV CSGO_HOSTNAME Counter-Strike Source Dedicated Server\nENV CSGO_PASSWORD \"\"\nENV RCON_PASSWORD mysup3rs3cr3tpassw0rd\nENV STEAM_ACCOUNT_TOKEN \"\"\n\nEXPOSE 27015/udp\nEXPOSE 27015\n\nRUN mkdir /home/steam/.steam\nRUN ln -s /home/steam/linux32 /home/steam/.steam/sdk32\n\nADD ./entrypoint.sh entrypoint.sh\n\n# Add Source Mods\nADD mods/ /temp\nRUN cd /home/steam/csgo/csgo && \\\n    tar zxvf /temp/mmsource-1.10.6-linux.tar.gz && \\\n    tar zxvf /temp/sourcemod-1.7.3-git5275-linux.tar.gz && \\\n    unzip /temp/quake_sounds_v3.zip && \\\n    unzip /temp/mapchooser_extended_1.10.2.zip\n\n# Add default configuration files\nADD cfg/ /home/steam/csgo/csgo/cfg\n\nCMD ./entrypoint.sh\n"
    }
]